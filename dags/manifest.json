{"metadata": {"dbt_schema_version": "https://schemas.getdbt.com/dbt/manifest/v4.json", "dbt_version": "1.0.4", "generated_at": "2022-04-21T10:12:49.491122Z", "invocation_id": "425019ba-e476-49fd-aa49-3e33d2fc662b", "env": {}, "project_id": "5fdf6b0f621054965a93ce16c3c86f9e", "user_id": "bcb482aa-ab18-4c36-897f-3d54e2e13b9f", "send_anonymous_usage_stats": true, "adapter_type": "spark"}, "nodes": {"model.ethereum_source.OpenSeaENSResolver_call_addr": {"raw_sql": "{{\n    config(\n        materialized='incremental',\n        incremental_strategy='insert_overwrite',\n        partition_by=['dt'],\n        file_format='parquet',\n        pre_hook={\n            'sql': 'create or replace function opensea_openseaensresolver_addr_calldecodeudf as \"io.iftech.sparkudf.hive.opensea_OpenSeaENSResolver_addr_CallDecodeUDF\" using jar \"s3a://ifcrypto/blockchain-dbt/jars/opensea_udf.jar\";'\n        }\n    )\n}}\n\nwith base as (\n    select\n        status==1 as call_success,\n        block_number as call_block_number,\n        block_timestamp as call_block_time,\n        trace_address as call_trace_address,\n        transaction_hash as call_tx_hash,\n        to_address as contract_address,\n        dt,\n        opensea_openseaensresolver_addr_calldecodeudf(unhex_input, unhex_output, '{\"constant\": true, \"inputs\": [{\"name\": \"node\", \"type\": \"bytes32\"}], \"name\": \"addr\", \"outputs\": [{\"name\": \"\", \"type\": \"address\"}], \"payable\": false, \"stateMutability\": \"view\", \"type\": \"function\"}', 'addr') as data\n    from {{ ref('stg_ethereum__traces') }}\n    where to_address = lower(\"0x9c4e9cce4780062942a7fe34fa2fa7316c872956\")\n    and address_hash = abs(hash(lower(\"0x9c4e9cce4780062942a7fe34fa2fa7316c872956\"))) % 10\n    and selector = \"0x30783362\"\n    and selector_hash = abs(hash(\"0x30783362\")) % 10\n\n    {% if is_incremental() %}\n      and dt = var('dt')\n    {% endif %}\n),\n\nfinal as (\n    select\n        call_success,\n        call_block_number,\n        call_block_time,\n        call_trace_address,\n        call_tx_hash,\n        contract_address,\n        dt,\n        data.input.*,\n        data.output.*\n    from base\n)\n\nselect /* REPARTITION(dt) */ *\nfrom final", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.dbt.is_incremental"], "nodes": ["model.ethereum_source.stg_ethereum__traces"]}, "config": {"enabled": true, "alias": null, "schema": "opensea", "database": null, "tags": ["chain_ethereum", "level_parse", "proj_opensea"], "meta": {}, "materialized": "incremental", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "file_format": "parquet", "partition_by": ["dt"], "incremental_strategy": "insert_overwrite", "post-hook": [], "pre-hook": [{"sql": "create or replace function opensea_openseaensresolver_addr_calldecodeudf as \"io.iftech.sparkudf.hive.opensea_OpenSeaENSResolver_addr_CallDecodeUDF\" using jar \"s3a://ifcrypto/blockchain-dbt/jars/opensea_udf.jar\";", "transaction": true, "index": null}]}, "database": null, "schema": "ethereum_opensea", "fqn": ["ethereum_source", "codegen", "opensea", "OpenSeaENSResolver_call_addr"], "unique_id": "model.ethereum_source.OpenSeaENSResolver_call_addr", "package_name": "ethereum_source", "root_path": "/Users/songv/Code/jike/web3/dbt_ethereum_source", "path": "codegen/opensea/OpenSeaENSResolver_call_addr.sql", "original_file_path": "models/codegen/opensea/OpenSeaENSResolver_call_addr.sql", "name": "OpenSeaENSResolver_call_addr", "alias": "OpenSeaENSResolver_call_addr", "checksum": {"name": "sha256", "checksum": "3d52b778b0e573e0f3e4d991c53a7c6cf6803ae83f62e58fc89ddef7f9e89aae"}, "tags": ["chain_ethereum", "level_parse", "proj_opensea"], "refs": [["stg_ethereum__traces"]], "sources": [], "description": "", "columns": {"node": {"name": "node", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "output_0": {"name": "output_0", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "call_success": {"name": "call_success", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "call_block_number": {"name": "call_block_number", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "call_block_time": {"name": "call_block_time", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "call_trace_address": {"name": "call_trace_address", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "call_tx_hash": {"name": "call_tx_hash", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "contract_address": {"name": "contract_address", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "dt": {"name": "dt", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "ethereum_source://models/codegen/opensea/schema.yml", "compiled_path": "target/compiled/ethereum_source/models/codegen/opensea/OpenSeaENSResolver_call_addr.sql", "build_path": null, "deferred": false, "unrendered_config": {"schema": "opensea", "tags": ["chain_ethereum", "level_parse", "proj_opensea"], "materialized": "incremental", "incremental_strategy": "insert_overwrite", "partition_by": ["dt"], "file_format": "parquet", "pre-hook": [{"sql": "create or replace function opensea_openseaensresolver_addr_calldecodeudf as \"io.iftech.sparkudf.hive.opensea_OpenSeaENSResolver_addr_CallDecodeUDF\" using jar \"s3a://ifcrypto/blockchain-dbt/jars/opensea_udf.jar\";"}]}, "created_at": 1650535972.1257029, "compiled_sql": "\n\nwith base as (\n    select\n        status==1 as call_success,\n        block_number as call_block_number,\n        block_timestamp as call_block_time,\n        trace_address as call_trace_address,\n        transaction_hash as call_tx_hash,\n        to_address as contract_address,\n        dt,\n        opensea_openseaensresolver_addr_calldecodeudf(unhex_input, unhex_output, '{\"constant\": true, \"inputs\": [{\"name\": \"node\", \"type\": \"bytes32\"}], \"name\": \"addr\", \"outputs\": [{\"name\": \"\", \"type\": \"address\"}], \"payable\": false, \"stateMutability\": \"view\", \"type\": \"function\"}', 'addr') as data\n    from ethereum_stg_ethereum.stg_ethereum__traces\n    where to_address = lower(\"0x9c4e9cce4780062942a7fe34fa2fa7316c872956\")\n    and address_hash = abs(hash(lower(\"0x9c4e9cce4780062942a7fe34fa2fa7316c872956\"))) % 10\n    and selector = \"0x30783362\"\n    and selector_hash = abs(hash(\"0x30783362\")) % 10\n\n    \n),\n\nfinal as (\n    select\n        call_success,\n        call_block_number,\n        call_block_time,\n        call_trace_address,\n        call_tx_hash,\n        contract_address,\n        dt,\n        data.input.*,\n        data.output.*\n    from base\n)\n\nselect /* REPARTITION(dt) */ *\nfrom final", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "ethereum_opensea.OpenSeaENSResolver_call_addr"}, "model.ethereum_source.OpenSeaENSResolver_call_transferOwnership": {"raw_sql": "{{\n    config(\n        materialized='incremental',\n        incremental_strategy='insert_overwrite',\n        partition_by=['dt'],\n        file_format='parquet',\n        pre_hook={\n            'sql': 'create or replace function opensea_openseaensresolver_transferownership_calldecodeudf as \"io.iftech.sparkudf.hive.opensea_OpenSeaENSResolver_transferOwnership_CallDecodeUDF\" using jar \"s3a://ifcrypto/blockchain-dbt/jars/opensea_udf.jar\";'\n        }\n    )\n}}\n\nwith base as (\n    select\n        status==1 as call_success,\n        block_number as call_block_number,\n        block_timestamp as call_block_time,\n        trace_address as call_trace_address,\n        transaction_hash as call_tx_hash,\n        to_address as contract_address,\n        dt,\n        opensea_openseaensresolver_transferownership_calldecodeudf(unhex_input, unhex_output, '{\"constant\": false, \"inputs\": [{\"name\": \"newOwner\", \"type\": \"address\"}], \"name\": \"transferOwnership\", \"outputs\": [], \"payable\": false, \"stateMutability\": \"nonpayable\", \"type\": \"function\"}', 'transferOwnership') as data\n    from {{ ref('stg_ethereum__traces') }}\n    where to_address = lower(\"0x9c4e9cce4780062942a7fe34fa2fa7316c872956\")\n    and address_hash = abs(hash(lower(\"0x9c4e9cce4780062942a7fe34fa2fa7316c872956\"))) % 10\n    and selector = \"0x30786632\"\n    and selector_hash = abs(hash(\"0x30786632\")) % 10\n\n    {% if is_incremental() %}\n      and dt = var('dt')\n    {% endif %}\n),\n\nfinal as (\n    select\n        call_success,\n        call_block_number,\n        call_block_time,\n        call_trace_address,\n        call_tx_hash,\n        contract_address,\n        dt,\n        data.input.*,\n        data.output.*\n    from base\n)\n\nselect /* REPARTITION(dt) */ *\nfrom final", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.dbt.is_incremental"], "nodes": ["model.ethereum_source.stg_ethereum__traces"]}, "config": {"enabled": true, "alias": null, "schema": "opensea", "database": null, "tags": ["chain_ethereum", "level_parse", "proj_opensea"], "meta": {}, "materialized": "incremental", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "file_format": "parquet", "partition_by": ["dt"], "incremental_strategy": "insert_overwrite", "post-hook": [], "pre-hook": [{"sql": "create or replace function opensea_openseaensresolver_transferownership_calldecodeudf as \"io.iftech.sparkudf.hive.opensea_OpenSeaENSResolver_transferOwnership_CallDecodeUDF\" using jar \"s3a://ifcrypto/blockchain-dbt/jars/opensea_udf.jar\";", "transaction": true, "index": null}]}, "database": null, "schema": "ethereum_opensea", "fqn": ["ethereum_source", "codegen", "opensea", "OpenSeaENSResolver_call_transferOwnership"], "unique_id": "model.ethereum_source.OpenSeaENSResolver_call_transferOwnership", "package_name": "ethereum_source", "root_path": "/Users/songv/Code/jike/web3/dbt_ethereum_source", "path": "codegen/opensea/OpenSeaENSResolver_call_transferOwnership.sql", "original_file_path": "models/codegen/opensea/OpenSeaENSResolver_call_transferOwnership.sql", "name": "OpenSeaENSResolver_call_transferOwnership", "alias": "OpenSeaENSResolver_call_transferOwnership", "checksum": {"name": "sha256", "checksum": "c9e9c82bd2ee182f579bed199977c286645290bad01e42a7332755fa265ea918"}, "tags": ["chain_ethereum", "level_parse", "proj_opensea"], "refs": [["stg_ethereum__traces"]], "sources": [], "description": "", "columns": {"newOwner": {"name": "newOwner", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "call_success": {"name": "call_success", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "call_block_number": {"name": "call_block_number", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "call_block_time": {"name": "call_block_time", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "call_trace_address": {"name": "call_trace_address", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "call_tx_hash": {"name": "call_tx_hash", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "contract_address": {"name": "contract_address", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "dt": {"name": "dt", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "ethereum_source://models/codegen/opensea/schema.yml", "compiled_path": "target/compiled/ethereum_source/models/codegen/opensea/OpenSeaENSResolver_call_transferOwnership.sql", "build_path": null, "deferred": false, "unrendered_config": {"schema": "opensea", "tags": ["chain_ethereum", "level_parse", "proj_opensea"], "materialized": "incremental", "incremental_strategy": "insert_overwrite", "partition_by": ["dt"], "file_format": "parquet", "pre-hook": [{"sql": "create or replace function opensea_openseaensresolver_transferownership_calldecodeudf as \"io.iftech.sparkudf.hive.opensea_OpenSeaENSResolver_transferOwnership_CallDecodeUDF\" using jar \"s3a://ifcrypto/blockchain-dbt/jars/opensea_udf.jar\";"}]}, "created_at": 1650535972.155841, "compiled_sql": "\n\nwith base as (\n    select\n        status==1 as call_success,\n        block_number as call_block_number,\n        block_timestamp as call_block_time,\n        trace_address as call_trace_address,\n        transaction_hash as call_tx_hash,\n        to_address as contract_address,\n        dt,\n        opensea_openseaensresolver_transferownership_calldecodeudf(unhex_input, unhex_output, '{\"constant\": false, \"inputs\": [{\"name\": \"newOwner\", \"type\": \"address\"}], \"name\": \"transferOwnership\", \"outputs\": [], \"payable\": false, \"stateMutability\": \"nonpayable\", \"type\": \"function\"}', 'transferOwnership') as data\n    from ethereum_stg_ethereum.stg_ethereum__traces\n    where to_address = lower(\"0x9c4e9cce4780062942a7fe34fa2fa7316c872956\")\n    and address_hash = abs(hash(lower(\"0x9c4e9cce4780062942a7fe34fa2fa7316c872956\"))) % 10\n    and selector = \"0x30786632\"\n    and selector_hash = abs(hash(\"0x30786632\")) % 10\n\n    \n),\n\nfinal as (\n    select\n        call_success,\n        call_block_number,\n        call_block_time,\n        call_trace_address,\n        call_tx_hash,\n        contract_address,\n        dt,\n        data.input.*,\n        data.output.*\n    from base\n)\n\nselect /* REPARTITION(dt) */ *\nfrom final", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "ethereum_opensea.OpenSeaENSResolver_call_transferOwnership"}, "model.ethereum_source.WyvernExchangeV2_call_staticCall": {"raw_sql": "{{\n    config(\n        materialized='incremental',\n        incremental_strategy='insert_overwrite',\n        partition_by=['dt'],\n        file_format='parquet',\n        pre_hook={\n            'sql': 'create or replace function opensea_wyvernexchangev2_staticcall_calldecodeudf as \"io.iftech.sparkudf.hive.opensea_WyvernExchangeV2_staticCall_CallDecodeUDF\" using jar \"s3a://ifcrypto/blockchain-dbt/jars/opensea_udf.jar\";'\n        }\n    )\n}}\n\nwith base as (\n    select\n        status==1 as call_success,\n        block_number as call_block_number,\n        block_timestamp as call_block_time,\n        trace_address as call_trace_address,\n        transaction_hash as call_tx_hash,\n        to_address as contract_address,\n        dt,\n        opensea_wyvernexchangev2_staticcall_calldecodeudf(unhex_input, unhex_output, '{\"constant\": true, \"inputs\": [{\"name\": \"target\", \"type\": \"address\"}, {\"name\": \"calldata\", \"type\": \"bytes\"}, {\"name\": \"extradata\", \"type\": \"bytes\"}], \"name\": \"staticCall\", \"outputs\": [{\"name\": \"result\", \"type\": \"bool\"}], \"payable\": false, \"stateMutability\": \"view\", \"type\": \"function\"}', 'staticCall') as data\n    from {{ ref('stg_ethereum__traces') }}\n    where to_address = lower(\"0x7f268357A8c2552623316e2562D90e642bB538E5\")\n    and address_hash = abs(hash(lower(\"0x7f268357A8c2552623316e2562D90e642bB538E5\"))) % 10\n    and selector = \"0x30783130\"\n    and selector_hash = abs(hash(\"0x30783130\")) % 10\n\n    {% if is_incremental() %}\n      and dt = var('dt')\n    {% endif %}\n),\n\nfinal as (\n    select\n        call_success,\n        call_block_number,\n        call_block_time,\n        call_trace_address,\n        call_tx_hash,\n        contract_address,\n        dt,\n        data.input.*,\n        data.output.*\n    from base\n)\n\nselect /* REPARTITION(dt) */ *\nfrom final", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.dbt.is_incremental"], "nodes": ["model.ethereum_source.stg_ethereum__traces"]}, "config": {"enabled": true, "alias": null, "schema": "opensea", "database": null, "tags": ["chain_ethereum", "level_parse", "proj_opensea"], "meta": {}, "materialized": "incremental", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "file_format": "parquet", "partition_by": ["dt"], "incremental_strategy": "insert_overwrite", "post-hook": [], "pre-hook": [{"sql": "create or replace function opensea_wyvernexchangev2_staticcall_calldecodeudf as \"io.iftech.sparkudf.hive.opensea_WyvernExchangeV2_staticCall_CallDecodeUDF\" using jar \"s3a://ifcrypto/blockchain-dbt/jars/opensea_udf.jar\";", "transaction": true, "index": null}]}, "database": null, "schema": "ethereum_opensea", "fqn": ["ethereum_source", "codegen", "opensea", "WyvernExchangeV2_call_staticCall"], "unique_id": "model.ethereum_source.WyvernExchangeV2_call_staticCall", "package_name": "ethereum_source", "root_path": "/Users/songv/Code/jike/web3/dbt_ethereum_source", "path": "codegen/opensea/WyvernExchangeV2_call_staticCall.sql", "original_file_path": "models/codegen/opensea/WyvernExchangeV2_call_staticCall.sql", "name": "WyvernExchangeV2_call_staticCall", "alias": "WyvernExchangeV2_call_staticCall", "checksum": {"name": "sha256", "checksum": "d5b0b915aceef831397c4e9d2ac083244210cedb516d3cde69d4230fa328fe7f"}, "tags": ["chain_ethereum", "level_parse", "proj_opensea"], "refs": [["stg_ethereum__traces"]], "sources": [], "description": "", "columns": {"target": {"name": "target", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "calldata": {"name": "calldata", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "extradata": {"name": "extradata", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "output_result": {"name": "output_result", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "call_success": {"name": "call_success", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "call_block_number": {"name": "call_block_number", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "call_block_time": {"name": "call_block_time", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "call_trace_address": {"name": "call_trace_address", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "call_tx_hash": {"name": "call_tx_hash", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "contract_address": {"name": "contract_address", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "dt": {"name": "dt", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "ethereum_source://models/codegen/opensea/schema.yml", "compiled_path": "target/compiled/ethereum_source/models/codegen/opensea/WyvernExchangeV2_call_staticCall.sql", "build_path": null, "deferred": false, "unrendered_config": {"schema": "opensea", "tags": ["chain_ethereum", "level_parse", "proj_opensea"], "materialized": "incremental", "incremental_strategy": "insert_overwrite", "partition_by": ["dt"], "file_format": "parquet", "pre-hook": [{"sql": "create or replace function opensea_wyvernexchangev2_staticcall_calldecodeudf as \"io.iftech.sparkudf.hive.opensea_WyvernExchangeV2_staticCall_CallDecodeUDF\" using jar \"s3a://ifcrypto/blockchain-dbt/jars/opensea_udf.jar\";"}]}, "created_at": 1650535972.019566, "compiled_sql": "\n\nwith base as (\n    select\n        status==1 as call_success,\n        block_number as call_block_number,\n        block_timestamp as call_block_time,\n        trace_address as call_trace_address,\n        transaction_hash as call_tx_hash,\n        to_address as contract_address,\n        dt,\n        opensea_wyvernexchangev2_staticcall_calldecodeudf(unhex_input, unhex_output, '{\"constant\": true, \"inputs\": [{\"name\": \"target\", \"type\": \"address\"}, {\"name\": \"calldata\", \"type\": \"bytes\"}, {\"name\": \"extradata\", \"type\": \"bytes\"}], \"name\": \"staticCall\", \"outputs\": [{\"name\": \"result\", \"type\": \"bool\"}], \"payable\": false, \"stateMutability\": \"view\", \"type\": \"function\"}', 'staticCall') as data\n    from ethereum_stg_ethereum.stg_ethereum__traces\n    where to_address = lower(\"0x7f268357A8c2552623316e2562D90e642bB538E5\")\n    and address_hash = abs(hash(lower(\"0x7f268357A8c2552623316e2562D90e642bB538E5\"))) % 10\n    and selector = \"0x30783130\"\n    and selector_hash = abs(hash(\"0x30783130\")) % 10\n\n    \n),\n\nfinal as (\n    select\n        call_success,\n        call_block_number,\n        call_block_time,\n        call_trace_address,\n        call_tx_hash,\n        contract_address,\n        dt,\n        data.input.*,\n        data.output.*\n    from base\n)\n\nselect /* REPARTITION(dt) */ *\nfrom final", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "ethereum_opensea.WyvernExchangeV2_call_staticCall"}, "model.ethereum_source.WyvernExchangeV1_call_owner": {"raw_sql": "{{\n    config(\n        materialized='incremental',\n        incremental_strategy='insert_overwrite',\n        partition_by=['dt'],\n        file_format='parquet',\n        pre_hook={\n            'sql': 'create or replace function opensea_wyvernexchangev1_owner_calldecodeudf as \"io.iftech.sparkudf.hive.opensea_WyvernExchangeV1_owner_CallDecodeUDF\" using jar \"s3a://ifcrypto/blockchain-dbt/jars/opensea_udf.jar\";'\n        }\n    )\n}}\n\nwith base as (\n    select\n        status==1 as call_success,\n        block_number as call_block_number,\n        block_timestamp as call_block_time,\n        trace_address as call_trace_address,\n        transaction_hash as call_tx_hash,\n        to_address as contract_address,\n        dt,\n        opensea_wyvernexchangev1_owner_calldecodeudf(unhex_input, unhex_output, '{\"constant\": true, \"inputs\": [], \"name\": \"owner\", \"outputs\": [{\"name\": \"\", \"type\": \"address\"}], \"payable\": false, \"stateMutability\": \"view\", \"type\": \"function\"}', 'owner') as data\n    from {{ ref('stg_ethereum__traces') }}\n    where to_address = lower(\"0x7Be8076f4EA4A4AD08075C2508e481d6C946D12b\")\n    and address_hash = abs(hash(lower(\"0x7Be8076f4EA4A4AD08075C2508e481d6C946D12b\"))) % 10\n    and selector = \"0x30783864\"\n    and selector_hash = abs(hash(\"0x30783864\")) % 10\n\n    {% if is_incremental() %}\n      and dt = var('dt')\n    {% endif %}\n),\n\nfinal as (\n    select\n        call_success,\n        call_block_number,\n        call_block_time,\n        call_trace_address,\n        call_tx_hash,\n        contract_address,\n        dt,\n        data.input.*,\n        data.output.*\n    from base\n)\n\nselect /* REPARTITION(dt) */ *\nfrom final", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.dbt.is_incremental"], "nodes": ["model.ethereum_source.stg_ethereum__traces"]}, "config": {"enabled": true, "alias": null, "schema": "opensea", "database": null, "tags": ["chain_ethereum", "level_parse", "proj_opensea"], "meta": {}, "materialized": "incremental", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "file_format": "parquet", "partition_by": ["dt"], "incremental_strategy": "insert_overwrite", "post-hook": [], "pre-hook": [{"sql": "create or replace function opensea_wyvernexchangev1_owner_calldecodeudf as \"io.iftech.sparkudf.hive.opensea_WyvernExchangeV1_owner_CallDecodeUDF\" using jar \"s3a://ifcrypto/blockchain-dbt/jars/opensea_udf.jar\";", "transaction": true, "index": null}]}, "database": null, "schema": "ethereum_opensea", "fqn": ["ethereum_source", "codegen", "opensea", "WyvernExchangeV1_call_owner"], "unique_id": "model.ethereum_source.WyvernExchangeV1_call_owner", "package_name": "ethereum_source", "root_path": "/Users/songv/Code/jike/web3/dbt_ethereum_source", "path": "codegen/opensea/WyvernExchangeV1_call_owner.sql", "original_file_path": "models/codegen/opensea/WyvernExchangeV1_call_owner.sql", "name": "WyvernExchangeV1_call_owner", "alias": "WyvernExchangeV1_call_owner", "checksum": {"name": "sha256", "checksum": "1f4ff2f6da007ac564ab4fcbf60564da845455167edd08e25a5b4a259375f636"}, "tags": ["chain_ethereum", "level_parse", "proj_opensea"], "refs": [["stg_ethereum__traces"]], "sources": [], "description": "", "columns": {"output_0": {"name": "output_0", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "call_success": {"name": "call_success", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "call_block_number": {"name": "call_block_number", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "call_block_time": {"name": "call_block_time", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "call_trace_address": {"name": "call_trace_address", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "call_tx_hash": {"name": "call_tx_hash", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "contract_address": {"name": "contract_address", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "dt": {"name": "dt", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "ethereum_source://models/codegen/opensea/schema.yml", "compiled_path": "target/compiled/ethereum_source/models/codegen/opensea/WyvernExchangeV1_call_owner.sql", "build_path": null, "deferred": false, "unrendered_config": {"schema": "opensea", "tags": ["chain_ethereum", "level_parse", "proj_opensea"], "materialized": "incremental", "incremental_strategy": "insert_overwrite", "partition_by": ["dt"], "file_format": "parquet", "pre-hook": [{"sql": "create or replace function opensea_wyvernexchangev1_owner_calldecodeudf as \"io.iftech.sparkudf.hive.opensea_WyvernExchangeV1_owner_CallDecodeUDF\" using jar \"s3a://ifcrypto/blockchain-dbt/jars/opensea_udf.jar\";"}]}, "created_at": 1650535971.9792619, "compiled_sql": "\n\nwith base as (\n    select\n        status==1 as call_success,\n        block_number as call_block_number,\n        block_timestamp as call_block_time,\n        trace_address as call_trace_address,\n        transaction_hash as call_tx_hash,\n        to_address as contract_address,\n        dt,\n        opensea_wyvernexchangev1_owner_calldecodeudf(unhex_input, unhex_output, '{\"constant\": true, \"inputs\": [], \"name\": \"owner\", \"outputs\": [{\"name\": \"\", \"type\": \"address\"}], \"payable\": false, \"stateMutability\": \"view\", \"type\": \"function\"}', 'owner') as data\n    from ethereum_stg_ethereum.stg_ethereum__traces\n    where to_address = lower(\"0x7Be8076f4EA4A4AD08075C2508e481d6C946D12b\")\n    and address_hash = abs(hash(lower(\"0x7Be8076f4EA4A4AD08075C2508e481d6C946D12b\"))) % 10\n    and selector = \"0x30783864\"\n    and selector_hash = abs(hash(\"0x30783864\")) % 10\n\n    \n),\n\nfinal as (\n    select\n        call_success,\n        call_block_number,\n        call_block_time,\n        call_trace_address,\n        call_tx_hash,\n        contract_address,\n        dt,\n        data.input.*,\n        data.output.*\n    from base\n)\n\nselect /* REPARTITION(dt) */ *\nfrom final", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "ethereum_opensea.WyvernExchangeV1_call_owner"}, "model.ethereum_source.WyvernExchangeV1_call_name": {"raw_sql": "{{\n    config(\n        materialized='incremental',\n        incremental_strategy='insert_overwrite',\n        partition_by=['dt'],\n        file_format='parquet',\n        pre_hook={\n            'sql': 'create or replace function opensea_wyvernexchangev1_name_calldecodeudf as \"io.iftech.sparkudf.hive.opensea_WyvernExchangeV1_name_CallDecodeUDF\" using jar \"s3a://ifcrypto/blockchain-dbt/jars/opensea_udf.jar\";'\n        }\n    )\n}}\n\nwith base as (\n    select\n        status==1 as call_success,\n        block_number as call_block_number,\n        block_timestamp as call_block_time,\n        trace_address as call_trace_address,\n        transaction_hash as call_tx_hash,\n        to_address as contract_address,\n        dt,\n        opensea_wyvernexchangev1_name_calldecodeudf(unhex_input, unhex_output, '{\"constant\": true, \"inputs\": [], \"name\": \"name\", \"outputs\": [{\"name\": \"\", \"type\": \"string\"}], \"payable\": false, \"stateMutability\": \"view\", \"type\": \"function\"}', 'name') as data\n    from {{ ref('stg_ethereum__traces') }}\n    where to_address = lower(\"0x7Be8076f4EA4A4AD08075C2508e481d6C946D12b\")\n    and address_hash = abs(hash(lower(\"0x7Be8076f4EA4A4AD08075C2508e481d6C946D12b\"))) % 10\n    and selector = \"0x30783036\"\n    and selector_hash = abs(hash(\"0x30783036\")) % 10\n\n    {% if is_incremental() %}\n      and dt = var('dt')\n    {% endif %}\n),\n\nfinal as (\n    select\n        call_success,\n        call_block_number,\n        call_block_time,\n        call_trace_address,\n        call_tx_hash,\n        contract_address,\n        dt,\n        data.input.*,\n        data.output.*\n    from base\n)\n\nselect /* REPARTITION(dt) */ *\nfrom final", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.dbt.is_incremental"], "nodes": ["model.ethereum_source.stg_ethereum__traces"]}, "config": {"enabled": true, "alias": null, "schema": "opensea", "database": null, "tags": ["chain_ethereum", "level_parse", "proj_opensea"], "meta": {}, "materialized": "incremental", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "file_format": "parquet", "partition_by": ["dt"], "incremental_strategy": "insert_overwrite", "post-hook": [], "pre-hook": [{"sql": "create or replace function opensea_wyvernexchangev1_name_calldecodeudf as \"io.iftech.sparkudf.hive.opensea_WyvernExchangeV1_name_CallDecodeUDF\" using jar \"s3a://ifcrypto/blockchain-dbt/jars/opensea_udf.jar\";", "transaction": true, "index": null}]}, "database": null, "schema": "ethereum_opensea", "fqn": ["ethereum_source", "codegen", "opensea", "WyvernExchangeV1_call_name"], "unique_id": "model.ethereum_source.WyvernExchangeV1_call_name", "package_name": "ethereum_source", "root_path": "/Users/songv/Code/jike/web3/dbt_ethereum_source", "path": "codegen/opensea/WyvernExchangeV1_call_name.sql", "original_file_path": "models/codegen/opensea/WyvernExchangeV1_call_name.sql", "name": "WyvernExchangeV1_call_name", "alias": "WyvernExchangeV1_call_name", "checksum": {"name": "sha256", "checksum": "157ba2a07f2fca31a4f555d6cbd9e0a9581722a2a6e2fff742f50d40b7a25b6e"}, "tags": ["chain_ethereum", "level_parse", "proj_opensea"], "refs": [["stg_ethereum__traces"]], "sources": [], "description": "", "columns": {"output_0": {"name": "output_0", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "call_success": {"name": "call_success", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "call_block_number": {"name": "call_block_number", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "call_block_time": {"name": "call_block_time", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "call_trace_address": {"name": "call_trace_address", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "call_tx_hash": {"name": "call_tx_hash", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "contract_address": {"name": "contract_address", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "dt": {"name": "dt", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "ethereum_source://models/codegen/opensea/schema.yml", "compiled_path": "target/compiled/ethereum_source/models/codegen/opensea/WyvernExchangeV1_call_name.sql", "build_path": null, "deferred": false, "unrendered_config": {"schema": "opensea", "tags": ["chain_ethereum", "level_parse", "proj_opensea"], "materialized": "incremental", "incremental_strategy": "insert_overwrite", "partition_by": ["dt"], "file_format": "parquet", "pre-hook": [{"sql": "create or replace function opensea_wyvernexchangev1_name_calldecodeudf as \"io.iftech.sparkudf.hive.opensea_WyvernExchangeV1_name_CallDecodeUDF\" using jar \"s3a://ifcrypto/blockchain-dbt/jars/opensea_udf.jar\";"}]}, "created_at": 1650535971.926404, "compiled_sql": "\n\nwith base as (\n    select\n        status==1 as call_success,\n        block_number as call_block_number,\n        block_timestamp as call_block_time,\n        trace_address as call_trace_address,\n        transaction_hash as call_tx_hash,\n        to_address as contract_address,\n        dt,\n        opensea_wyvernexchangev1_name_calldecodeudf(unhex_input, unhex_output, '{\"constant\": true, \"inputs\": [], \"name\": \"name\", \"outputs\": [{\"name\": \"\", \"type\": \"string\"}], \"payable\": false, \"stateMutability\": \"view\", \"type\": \"function\"}', 'name') as data\n    from ethereum_stg_ethereum.stg_ethereum__traces\n    where to_address = lower(\"0x7Be8076f4EA4A4AD08075C2508e481d6C946D12b\")\n    and address_hash = abs(hash(lower(\"0x7Be8076f4EA4A4AD08075C2508e481d6C946D12b\"))) % 10\n    and selector = \"0x30783036\"\n    and selector_hash = abs(hash(\"0x30783036\")) % 10\n\n    \n),\n\nfinal as (\n    select\n        call_success,\n        call_block_number,\n        call_block_time,\n        call_trace_address,\n        call_tx_hash,\n        contract_address,\n        dt,\n        data.input.*,\n        data.output.*\n    from base\n)\n\nselect /* REPARTITION(dt) */ *\nfrom final", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "ethereum_opensea.WyvernExchangeV1_call_name"}, "model.ethereum_source.WyvernExchangeV2_call_minimumMakerProtocolFee": {"raw_sql": "{{\n    config(\n        materialized='incremental',\n        incremental_strategy='insert_overwrite',\n        partition_by=['dt'],\n        file_format='parquet',\n        pre_hook={\n            'sql': 'create or replace function opensea_wyvernexchangev2_minimummakerprotocolfee_calldecodeudf as \"io.iftech.sparkudf.hive.opensea_WyvernExchangeV2_minimumMakerProtocolFee_CallDecodeUDF\" using jar \"s3a://ifcrypto/blockchain-dbt/jars/opensea_udf.jar\";'\n        }\n    )\n}}\n\nwith base as (\n    select\n        status==1 as call_success,\n        block_number as call_block_number,\n        block_timestamp as call_block_time,\n        trace_address as call_trace_address,\n        transaction_hash as call_tx_hash,\n        to_address as contract_address,\n        dt,\n        opensea_wyvernexchangev2_minimummakerprotocolfee_calldecodeudf(unhex_input, unhex_output, '{\"constant\": true, \"inputs\": [], \"name\": \"minimumMakerProtocolFee\", \"outputs\": [{\"name\": \"\", \"type\": \"uint256\"}], \"payable\": false, \"stateMutability\": \"view\", \"type\": \"function\"}', 'minimumMakerProtocolFee') as data\n    from {{ ref('stg_ethereum__traces') }}\n    where to_address = lower(\"0x7f268357A8c2552623316e2562D90e642bB538E5\")\n    and address_hash = abs(hash(lower(\"0x7f268357A8c2552623316e2562D90e642bB538E5\"))) % 10\n    and selector = \"0x30783763\"\n    and selector_hash = abs(hash(\"0x30783763\")) % 10\n\n    {% if is_incremental() %}\n      and dt = var('dt')\n    {% endif %}\n),\n\nfinal as (\n    select\n        call_success,\n        call_block_number,\n        call_block_time,\n        call_trace_address,\n        call_tx_hash,\n        contract_address,\n        dt,\n        data.input.*,\n        data.output.*\n    from base\n)\n\nselect /* REPARTITION(dt) */ *\nfrom final", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.dbt.is_incremental"], "nodes": ["model.ethereum_source.stg_ethereum__traces"]}, "config": {"enabled": true, "alias": null, "schema": "opensea", "database": null, "tags": ["chain_ethereum", "level_parse", "proj_opensea"], "meta": {}, "materialized": "incremental", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "file_format": "parquet", "partition_by": ["dt"], "incremental_strategy": "insert_overwrite", "post-hook": [], "pre-hook": [{"sql": "create or replace function opensea_wyvernexchangev2_minimummakerprotocolfee_calldecodeudf as \"io.iftech.sparkudf.hive.opensea_WyvernExchangeV2_minimumMakerProtocolFee_CallDecodeUDF\" using jar \"s3a://ifcrypto/blockchain-dbt/jars/opensea_udf.jar\";", "transaction": true, "index": null}]}, "database": null, "schema": "ethereum_opensea", "fqn": ["ethereum_source", "codegen", "opensea", "WyvernExchangeV2_call_minimumMakerProtocolFee"], "unique_id": "model.ethereum_source.WyvernExchangeV2_call_minimumMakerProtocolFee", "package_name": "ethereum_source", "root_path": "/Users/songv/Code/jike/web3/dbt_ethereum_source", "path": "codegen/opensea/WyvernExchangeV2_call_minimumMakerProtocolFee.sql", "original_file_path": "models/codegen/opensea/WyvernExchangeV2_call_minimumMakerProtocolFee.sql", "name": "WyvernExchangeV2_call_minimumMakerProtocolFee", "alias": "WyvernExchangeV2_call_minimumMakerProtocolFee", "checksum": {"name": "sha256", "checksum": "68a7732f6aac9acbf7ed4ddf690cdc48044123ab4a23c4c4f992a6d3f8b5cd12"}, "tags": ["chain_ethereum", "level_parse", "proj_opensea"], "refs": [["stg_ethereum__traces"]], "sources": [], "description": "", "columns": {"output_0": {"name": "output_0", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "call_success": {"name": "call_success", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "call_block_number": {"name": "call_block_number", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "call_block_time": {"name": "call_block_time", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "call_trace_address": {"name": "call_trace_address", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "call_tx_hash": {"name": "call_tx_hash", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "contract_address": {"name": "contract_address", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "dt": {"name": "dt", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "ethereum_source://models/codegen/opensea/schema.yml", "compiled_path": "target/compiled/ethereum_source/models/codegen/opensea/WyvernExchangeV2_call_minimumMakerProtocolFee.sql", "build_path": null, "deferred": false, "unrendered_config": {"schema": "opensea", "tags": ["chain_ethereum", "level_parse", "proj_opensea"], "materialized": "incremental", "incremental_strategy": "insert_overwrite", "partition_by": ["dt"], "file_format": "parquet", "pre-hook": [{"sql": "create or replace function opensea_wyvernexchangev2_minimummakerprotocolfee_calldecodeudf as \"io.iftech.sparkudf.hive.opensea_WyvernExchangeV2_minimumMakerProtocolFee_CallDecodeUDF\" using jar \"s3a://ifcrypto/blockchain-dbt/jars/opensea_udf.jar\";"}]}, "created_at": 1650535972.061028, "compiled_sql": "\n\nwith base as (\n    select\n        status==1 as call_success,\n        block_number as call_block_number,\n        block_timestamp as call_block_time,\n        trace_address as call_trace_address,\n        transaction_hash as call_tx_hash,\n        to_address as contract_address,\n        dt,\n        opensea_wyvernexchangev2_minimummakerprotocolfee_calldecodeudf(unhex_input, unhex_output, '{\"constant\": true, \"inputs\": [], \"name\": \"minimumMakerProtocolFee\", \"outputs\": [{\"name\": \"\", \"type\": \"uint256\"}], \"payable\": false, \"stateMutability\": \"view\", \"type\": \"function\"}', 'minimumMakerProtocolFee') as data\n    from ethereum_stg_ethereum.stg_ethereum__traces\n    where to_address = lower(\"0x7f268357A8c2552623316e2562D90e642bB538E5\")\n    and address_hash = abs(hash(lower(\"0x7f268357A8c2552623316e2562D90e642bB538E5\"))) % 10\n    and selector = \"0x30783763\"\n    and selector_hash = abs(hash(\"0x30783763\")) % 10\n\n    \n),\n\nfinal as (\n    select\n        call_success,\n        call_block_number,\n        call_block_time,\n        call_trace_address,\n        call_tx_hash,\n        contract_address,\n        dt,\n        data.input.*,\n        data.output.*\n    from base\n)\n\nselect /* REPARTITION(dt) */ *\nfrom final", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "ethereum_opensea.WyvernExchangeV2_call_minimumMakerProtocolFee"}, "model.ethereum_source.OpenSeaENSResolver_call_supportsInterface": {"raw_sql": "{{\n    config(\n        materialized='incremental',\n        incremental_strategy='insert_overwrite',\n        partition_by=['dt'],\n        file_format='parquet',\n        pre_hook={\n            'sql': 'create or replace function opensea_openseaensresolver_supportsinterface_calldecodeudf as \"io.iftech.sparkudf.hive.opensea_OpenSeaENSResolver_supportsInterface_CallDecodeUDF\" using jar \"s3a://ifcrypto/blockchain-dbt/jars/opensea_udf.jar\";'\n        }\n    )\n}}\n\nwith base as (\n    select\n        status==1 as call_success,\n        block_number as call_block_number,\n        block_timestamp as call_block_time,\n        trace_address as call_trace_address,\n        transaction_hash as call_tx_hash,\n        to_address as contract_address,\n        dt,\n        opensea_openseaensresolver_supportsinterface_calldecodeudf(unhex_input, unhex_output, '{\"constant\": true, \"inputs\": [{\"name\": \"interfaceID\", \"type\": \"bytes4\"}], \"name\": \"supportsInterface\", \"outputs\": [{\"name\": \"\", \"type\": \"bool\"}], \"payable\": false, \"stateMutability\": \"pure\", \"type\": \"function\"}', 'supportsInterface') as data\n    from {{ ref('stg_ethereum__traces') }}\n    where to_address = lower(\"0x9c4e9cce4780062942a7fe34fa2fa7316c872956\")\n    and address_hash = abs(hash(lower(\"0x9c4e9cce4780062942a7fe34fa2fa7316c872956\"))) % 10\n    and selector = \"0x30783031\"\n    and selector_hash = abs(hash(\"0x30783031\")) % 10\n\n    {% if is_incremental() %}\n      and dt = var('dt')\n    {% endif %}\n),\n\nfinal as (\n    select\n        call_success,\n        call_block_number,\n        call_block_time,\n        call_trace_address,\n        call_tx_hash,\n        contract_address,\n        dt,\n        data.input.*,\n        data.output.*\n    from base\n)\n\nselect /* REPARTITION(dt) */ *\nfrom final", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.dbt.is_incremental"], "nodes": ["model.ethereum_source.stg_ethereum__traces"]}, "config": {"enabled": true, "alias": null, "schema": "opensea", "database": null, "tags": ["chain_ethereum", "level_parse", "proj_opensea"], "meta": {}, "materialized": "incremental", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "file_format": "parquet", "partition_by": ["dt"], "incremental_strategy": "insert_overwrite", "post-hook": [], "pre-hook": [{"sql": "create or replace function opensea_openseaensresolver_supportsinterface_calldecodeudf as \"io.iftech.sparkudf.hive.opensea_OpenSeaENSResolver_supportsInterface_CallDecodeUDF\" using jar \"s3a://ifcrypto/blockchain-dbt/jars/opensea_udf.jar\";", "transaction": true, "index": null}]}, "database": null, "schema": "ethereum_opensea", "fqn": ["ethereum_source", "codegen", "opensea", "OpenSeaENSResolver_call_supportsInterface"], "unique_id": "model.ethereum_source.OpenSeaENSResolver_call_supportsInterface", "package_name": "ethereum_source", "root_path": "/Users/songv/Code/jike/web3/dbt_ethereum_source", "path": "codegen/opensea/OpenSeaENSResolver_call_supportsInterface.sql", "original_file_path": "models/codegen/opensea/OpenSeaENSResolver_call_supportsInterface.sql", "name": "OpenSeaENSResolver_call_supportsInterface", "alias": "OpenSeaENSResolver_call_supportsInterface", "checksum": {"name": "sha256", "checksum": "65281a9e4d31c871fcd8a65bc642606d322d176bb47faa96645499dae37d74b5"}, "tags": ["chain_ethereum", "level_parse", "proj_opensea"], "refs": [["stg_ethereum__traces"]], "sources": [], "description": "", "columns": {"interfaceID": {"name": "interfaceID", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "output_0": {"name": "output_0", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "call_success": {"name": "call_success", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "call_block_number": {"name": "call_block_number", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "call_block_time": {"name": "call_block_time", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "call_trace_address": {"name": "call_trace_address", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "call_tx_hash": {"name": "call_tx_hash", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "contract_address": {"name": "contract_address", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "dt": {"name": "dt", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "ethereum_source://models/codegen/opensea/schema.yml", "compiled_path": "target/compiled/ethereum_source/models/codegen/opensea/OpenSeaENSResolver_call_supportsInterface.sql", "build_path": null, "deferred": false, "unrendered_config": {"schema": "opensea", "tags": ["chain_ethereum", "level_parse", "proj_opensea"], "materialized": "incremental", "incremental_strategy": "insert_overwrite", "partition_by": ["dt"], "file_format": "parquet", "pre-hook": [{"sql": "create or replace function opensea_openseaensresolver_supportsinterface_calldecodeudf as \"io.iftech.sparkudf.hive.opensea_OpenSeaENSResolver_supportsInterface_CallDecodeUDF\" using jar \"s3a://ifcrypto/blockchain-dbt/jars/opensea_udf.jar\";"}]}, "created_at": 1650535972.113626, "compiled_sql": "\n\nwith base as (\n    select\n        status==1 as call_success,\n        block_number as call_block_number,\n        block_timestamp as call_block_time,\n        trace_address as call_trace_address,\n        transaction_hash as call_tx_hash,\n        to_address as contract_address,\n        dt,\n        opensea_openseaensresolver_supportsinterface_calldecodeudf(unhex_input, unhex_output, '{\"constant\": true, \"inputs\": [{\"name\": \"interfaceID\", \"type\": \"bytes4\"}], \"name\": \"supportsInterface\", \"outputs\": [{\"name\": \"\", \"type\": \"bool\"}], \"payable\": false, \"stateMutability\": \"pure\", \"type\": \"function\"}', 'supportsInterface') as data\n    from ethereum_stg_ethereum.stg_ethereum__traces\n    where to_address = lower(\"0x9c4e9cce4780062942a7fe34fa2fa7316c872956\")\n    and address_hash = abs(hash(lower(\"0x9c4e9cce4780062942a7fe34fa2fa7316c872956\"))) % 10\n    and selector = \"0x30783031\"\n    and selector_hash = abs(hash(\"0x30783031\")) % 10\n\n    \n),\n\nfinal as (\n    select\n        call_success,\n        call_block_number,\n        call_block_time,\n        call_trace_address,\n        call_tx_hash,\n        contract_address,\n        dt,\n        data.input.*,\n        data.output.*\n    from base\n)\n\nselect /* REPARTITION(dt) */ *\nfrom final", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "ethereum_opensea.OpenSeaENSResolver_call_supportsInterface"}, "model.ethereum_source.WyvernExchangeV2_evt_OrderCancelled": {"raw_sql": "{{\n    config(\n        materialized='incremental',\n        incremental_strategy='insert_overwrite',\n        partition_by=['dt'],\n        file_format='parquet',\n        pre_hook={\n            'sql': 'create or replace function opensea_wyvernexchangev2_ordercancelled_eventdecodeudf as \"io.iftech.sparkudf.hive.opensea_WyvernExchangeV2_OrderCancelled_EventDecodeUDF\" using jar \"s3a://ifcrypto/blockchain-dbt/jars/opensea_udf.jar\";'\n        }\n    )\n}}\n\nwith base as (\n    select\n        block_number as evt_block_number,\n        block_timestamp as evt_block_time,\n        log_index as evt_index,\n        transaction_hash as evt_tx_hash,\n        address as contract_address,\n        dt,\n        opensea_wyvernexchangev2_ordercancelled_eventdecodeudf(unhex_data, topics_arr, '{\"anonymous\": false, \"inputs\": [{\"indexed\": true, \"name\": \"hash\", \"type\": \"bytes32\"}], \"name\": \"OrderCancelled\", \"type\": \"event\"}', 'OrderCancelled') as data\n    from {{ ref('stg_ethereum__logs') }}\n    where address = lower(\"0x7f268357A8c2552623316e2562D90e642bB538E5\")\n    and address_hash = abs(hash(lower(\"0x7f268357A8c2552623316e2562D90e642bB538E5\"))) % 10\n    and selector = \"0x5152abf959f6564662358c2e52b702259b78bac5ee7842a0f01937e670efcc7d\"\n    and selector_hash = abs(hash(\"0x5152abf959f6564662358c2e52b702259b78bac5ee7842a0f01937e670efcc7d\")) % 10\n\n    {% if is_incremental() %}\n      and dt = var('dt')\n    {% endif %}\n),\n\nfinal as (\n    select\n        evt_block_number,\n        evt_block_time,\n        evt_index,\n        evt_tx_hash,\n        contract_address,\n        dt,\n        data.input.*\n    from base\n)\n\nselect /* REPARTITION(dt) */ *\nfrom final", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.dbt.is_incremental"], "nodes": ["model.ethereum_source.stg_ethereum__logs"]}, "config": {"enabled": true, "alias": null, "schema": "opensea", "database": null, "tags": ["chain_ethereum", "level_parse", "proj_opensea"], "meta": {}, "materialized": "incremental", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "file_format": "parquet", "partition_by": ["dt"], "incremental_strategy": "insert_overwrite", "post-hook": [], "pre-hook": [{"sql": "create or replace function opensea_wyvernexchangev2_ordercancelled_eventdecodeudf as \"io.iftech.sparkudf.hive.opensea_WyvernExchangeV2_OrderCancelled_EventDecodeUDF\" using jar \"s3a://ifcrypto/blockchain-dbt/jars/opensea_udf.jar\";", "transaction": true, "index": null}]}, "database": null, "schema": "ethereum_opensea", "fqn": ["ethereum_source", "codegen", "opensea", "WyvernExchangeV2_evt_OrderCancelled"], "unique_id": "model.ethereum_source.WyvernExchangeV2_evt_OrderCancelled", "package_name": "ethereum_source", "root_path": "/Users/songv/Code/jike/web3/dbt_ethereum_source", "path": "codegen/opensea/WyvernExchangeV2_evt_OrderCancelled.sql", "original_file_path": "models/codegen/opensea/WyvernExchangeV2_evt_OrderCancelled.sql", "name": "WyvernExchangeV2_evt_OrderCancelled", "alias": "WyvernExchangeV2_evt_OrderCancelled", "checksum": {"name": "sha256", "checksum": "1f36d6424c4bdc98074c386f67df553aac838d6a9c1e1034b5b4b2f0ef5bc3e2"}, "tags": ["chain_ethereum", "level_parse", "proj_opensea"], "refs": [["stg_ethereum__logs"]], "sources": [], "description": "", "columns": {"hash": {"name": "hash", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "evt_block_number": {"name": "evt_block_number", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "evt_block_time": {"name": "evt_block_time", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "evt_index": {"name": "evt_index", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "evt_tx_hash": {"name": "evt_tx_hash", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "contract_address": {"name": "contract_address", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "dt": {"name": "dt", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "ethereum_source://models/codegen/opensea/schema.yml", "compiled_path": "target/compiled/ethereum_source/models/codegen/opensea/WyvernExchangeV2_evt_OrderCancelled.sql", "build_path": null, "deferred": false, "unrendered_config": {"schema": "opensea", "tags": ["chain_ethereum", "level_parse", "proj_opensea"], "materialized": "incremental", "incremental_strategy": "insert_overwrite", "partition_by": ["dt"], "file_format": "parquet", "pre-hook": [{"sql": "create or replace function opensea_wyvernexchangev2_ordercancelled_eventdecodeudf as \"io.iftech.sparkudf.hive.opensea_WyvernExchangeV2_OrderCancelled_EventDecodeUDF\" using jar \"s3a://ifcrypto/blockchain-dbt/jars/opensea_udf.jar\";"}]}, "created_at": 1650535972.007472, "compiled_sql": "\n\nwith base as (\n    select\n        block_number as evt_block_number,\n        block_timestamp as evt_block_time,\n        log_index as evt_index,\n        transaction_hash as evt_tx_hash,\n        address as contract_address,\n        dt,\n        opensea_wyvernexchangev2_ordercancelled_eventdecodeudf(unhex_data, topics_arr, '{\"anonymous\": false, \"inputs\": [{\"indexed\": true, \"name\": \"hash\", \"type\": \"bytes32\"}], \"name\": \"OrderCancelled\", \"type\": \"event\"}', 'OrderCancelled') as data\n    from ethereum_stg_ethereum.stg_ethereum__logs\n    where address = lower(\"0x7f268357A8c2552623316e2562D90e642bB538E5\")\n    and address_hash = abs(hash(lower(\"0x7f268357A8c2552623316e2562D90e642bB538E5\"))) % 10\n    and selector = \"0x5152abf959f6564662358c2e52b702259b78bac5ee7842a0f01937e670efcc7d\"\n    and selector_hash = abs(hash(\"0x5152abf959f6564662358c2e52b702259b78bac5ee7842a0f01937e670efcc7d\")) % 10\n\n    \n),\n\nfinal as (\n    select\n        evt_block_number,\n        evt_block_time,\n        evt_index,\n        evt_tx_hash,\n        contract_address,\n        dt,\n        data.input.*\n    from base\n)\n\nselect /* REPARTITION(dt) */ *\nfrom final", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "ethereum_opensea.WyvernExchangeV2_evt_OrderCancelled"}, "model.ethereum_source.OpenSeaENSResolver_call_openSeaVersion": {"raw_sql": "{{\n    config(\n        materialized='incremental',\n        incremental_strategy='insert_overwrite',\n        partition_by=['dt'],\n        file_format='parquet',\n        pre_hook={\n            'sql': 'create or replace function opensea_openseaensresolver_openseaversion_calldecodeudf as \"io.iftech.sparkudf.hive.opensea_OpenSeaENSResolver_openSeaVersion_CallDecodeUDF\" using jar \"s3a://ifcrypto/blockchain-dbt/jars/opensea_udf.jar\";'\n        }\n    )\n}}\n\nwith base as (\n    select\n        status==1 as call_success,\n        block_number as call_block_number,\n        block_timestamp as call_block_time,\n        trace_address as call_trace_address,\n        transaction_hash as call_tx_hash,\n        to_address as contract_address,\n        dt,\n        opensea_openseaensresolver_openseaversion_calldecodeudf(unhex_input, unhex_output, '{\"constant\": true, \"inputs\": [], \"name\": \"openSeaVersion\", \"outputs\": [{\"name\": \"\", \"type\": \"string\"}], \"payable\": false, \"stateMutability\": \"pure\", \"type\": \"function\"}', 'openSeaVersion') as data\n    from {{ ref('stg_ethereum__traces') }}\n    where to_address = lower(\"0x9c4e9cce4780062942a7fe34fa2fa7316c872956\")\n    and address_hash = abs(hash(lower(\"0x9c4e9cce4780062942a7fe34fa2fa7316c872956\"))) % 10\n    and selector = \"0x30783430\"\n    and selector_hash = abs(hash(\"0x30783430\")) % 10\n\n    {% if is_incremental() %}\n      and dt = var('dt')\n    {% endif %}\n),\n\nfinal as (\n    select\n        call_success,\n        call_block_number,\n        call_block_time,\n        call_trace_address,\n        call_tx_hash,\n        contract_address,\n        dt,\n        data.input.*,\n        data.output.*\n    from base\n)\n\nselect /* REPARTITION(dt) */ *\nfrom final", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.dbt.is_incremental"], "nodes": ["model.ethereum_source.stg_ethereum__traces"]}, "config": {"enabled": true, "alias": null, "schema": "opensea", "database": null, "tags": ["chain_ethereum", "level_parse", "proj_opensea"], "meta": {}, "materialized": "incremental", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "file_format": "parquet", "partition_by": ["dt"], "incremental_strategy": "insert_overwrite", "post-hook": [], "pre-hook": [{"sql": "create or replace function opensea_openseaensresolver_openseaversion_calldecodeudf as \"io.iftech.sparkudf.hive.opensea_OpenSeaENSResolver_openSeaVersion_CallDecodeUDF\" using jar \"s3a://ifcrypto/blockchain-dbt/jars/opensea_udf.jar\";", "transaction": true, "index": null}]}, "database": null, "schema": "ethereum_opensea", "fqn": ["ethereum_source", "codegen", "opensea", "OpenSeaENSResolver_call_openSeaVersion"], "unique_id": "model.ethereum_source.OpenSeaENSResolver_call_openSeaVersion", "package_name": "ethereum_source", "root_path": "/Users/songv/Code/jike/web3/dbt_ethereum_source", "path": "codegen/opensea/OpenSeaENSResolver_call_openSeaVersion.sql", "original_file_path": "models/codegen/opensea/OpenSeaENSResolver_call_openSeaVersion.sql", "name": "OpenSeaENSResolver_call_openSeaVersion", "alias": "OpenSeaENSResolver_call_openSeaVersion", "checksum": {"name": "sha256", "checksum": "ac7dec1528c122a273c8f5c9f4bdf1c90343dcfa2b4d51043fa93f6e489449fb"}, "tags": ["chain_ethereum", "level_parse", "proj_opensea"], "refs": [["stg_ethereum__traces"]], "sources": [], "description": "", "columns": {"output_0": {"name": "output_0", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "call_success": {"name": "call_success", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "call_block_number": {"name": "call_block_number", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "call_block_time": {"name": "call_block_time", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "call_trace_address": {"name": "call_trace_address", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "call_tx_hash": {"name": "call_tx_hash", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "contract_address": {"name": "contract_address", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "dt": {"name": "dt", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "ethereum_source://models/codegen/opensea/schema.yml", "compiled_path": "target/compiled/ethereum_source/models/codegen/opensea/OpenSeaENSResolver_call_openSeaVersion.sql", "build_path": null, "deferred": false, "unrendered_config": {"schema": "opensea", "tags": ["chain_ethereum", "level_parse", "proj_opensea"], "materialized": "incremental", "incremental_strategy": "insert_overwrite", "partition_by": ["dt"], "file_format": "parquet", "pre-hook": [{"sql": "create or replace function opensea_openseaensresolver_openseaversion_calldecodeudf as \"io.iftech.sparkudf.hive.opensea_OpenSeaENSResolver_openSeaVersion_CallDecodeUDF\" using jar \"s3a://ifcrypto/blockchain-dbt/jars/opensea_udf.jar\";"}]}, "created_at": 1650535972.129219, "compiled_sql": "\n\nwith base as (\n    select\n        status==1 as call_success,\n        block_number as call_block_number,\n        block_timestamp as call_block_time,\n        trace_address as call_trace_address,\n        transaction_hash as call_tx_hash,\n        to_address as contract_address,\n        dt,\n        opensea_openseaensresolver_openseaversion_calldecodeudf(unhex_input, unhex_output, '{\"constant\": true, \"inputs\": [], \"name\": \"openSeaVersion\", \"outputs\": [{\"name\": \"\", \"type\": \"string\"}], \"payable\": false, \"stateMutability\": \"pure\", \"type\": \"function\"}', 'openSeaVersion') as data\n    from ethereum_stg_ethereum.stg_ethereum__traces\n    where to_address = lower(\"0x9c4e9cce4780062942a7fe34fa2fa7316c872956\")\n    and address_hash = abs(hash(lower(\"0x9c4e9cce4780062942a7fe34fa2fa7316c872956\"))) % 10\n    and selector = \"0x30783430\"\n    and selector_hash = abs(hash(\"0x30783430\")) % 10\n\n    \n),\n\nfinal as (\n    select\n        call_success,\n        call_block_number,\n        call_block_time,\n        call_trace_address,\n        call_tx_hash,\n        contract_address,\n        dt,\n        data.input.*,\n        data.output.*\n    from base\n)\n\nselect /* REPARTITION(dt) */ *\nfrom final", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "ethereum_opensea.OpenSeaENSResolver_call_openSeaVersion"}, "model.ethereum_source.WyvernExchangeV2_call_cancelledOrFinalized": {"raw_sql": "{{\n    config(\n        materialized='incremental',\n        incremental_strategy='insert_overwrite',\n        partition_by=['dt'],\n        file_format='parquet',\n        pre_hook={\n            'sql': 'create or replace function opensea_wyvernexchangev2_cancelledorfinalized_calldecodeudf as \"io.iftech.sparkudf.hive.opensea_WyvernExchangeV2_cancelledOrFinalized_CallDecodeUDF\" using jar \"s3a://ifcrypto/blockchain-dbt/jars/opensea_udf.jar\";'\n        }\n    )\n}}\n\nwith base as (\n    select\n        status==1 as call_success,\n        block_number as call_block_number,\n        block_timestamp as call_block_time,\n        trace_address as call_trace_address,\n        transaction_hash as call_tx_hash,\n        to_address as contract_address,\n        dt,\n        opensea_wyvernexchangev2_cancelledorfinalized_calldecodeudf(unhex_input, unhex_output, '{\"constant\": true, \"inputs\": [{\"name\": \"\", \"type\": \"bytes32\"}], \"name\": \"cancelledOrFinalized\", \"outputs\": [{\"name\": \"\", \"type\": \"bool\"}], \"payable\": false, \"stateMutability\": \"view\", \"type\": \"function\"}', 'cancelledOrFinalized') as data\n    from {{ ref('stg_ethereum__traces') }}\n    where to_address = lower(\"0x7f268357A8c2552623316e2562D90e642bB538E5\")\n    and address_hash = abs(hash(lower(\"0x7f268357A8c2552623316e2562D90e642bB538E5\"))) % 10\n    and selector = \"0x30783830\"\n    and selector_hash = abs(hash(\"0x30783830\")) % 10\n\n    {% if is_incremental() %}\n      and dt = var('dt')\n    {% endif %}\n),\n\nfinal as (\n    select\n        call_success,\n        call_block_number,\n        call_block_time,\n        call_trace_address,\n        call_tx_hash,\n        contract_address,\n        dt,\n        data.input.*,\n        data.output.*\n    from base\n)\n\nselect /* REPARTITION(dt) */ *\nfrom final", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.dbt.is_incremental"], "nodes": ["model.ethereum_source.stg_ethereum__traces"]}, "config": {"enabled": true, "alias": null, "schema": "opensea", "database": null, "tags": ["chain_ethereum", "level_parse", "proj_opensea"], "meta": {}, "materialized": "incremental", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "file_format": "parquet", "partition_by": ["dt"], "incremental_strategy": "insert_overwrite", "post-hook": [], "pre-hook": [{"sql": "create or replace function opensea_wyvernexchangev2_cancelledorfinalized_calldecodeudf as \"io.iftech.sparkudf.hive.opensea_WyvernExchangeV2_cancelledOrFinalized_CallDecodeUDF\" using jar \"s3a://ifcrypto/blockchain-dbt/jars/opensea_udf.jar\";", "transaction": true, "index": null}]}, "database": null, "schema": "ethereum_opensea", "fqn": ["ethereum_source", "codegen", "opensea", "WyvernExchangeV2_call_cancelledOrFinalized"], "unique_id": "model.ethereum_source.WyvernExchangeV2_call_cancelledOrFinalized", "package_name": "ethereum_source", "root_path": "/Users/songv/Code/jike/web3/dbt_ethereum_source", "path": "codegen/opensea/WyvernExchangeV2_call_cancelledOrFinalized.sql", "original_file_path": "models/codegen/opensea/WyvernExchangeV2_call_cancelledOrFinalized.sql", "name": "WyvernExchangeV2_call_cancelledOrFinalized", "alias": "WyvernExchangeV2_call_cancelledOrFinalized", "checksum": {"name": "sha256", "checksum": "bf198642e73d271c2635ff32a9eff8cdd127e506e236597d7516b0aabb4ca4f2"}, "tags": ["chain_ethereum", "level_parse", "proj_opensea"], "refs": [["stg_ethereum__traces"]], "sources": [], "description": "", "columns": {"_0": {"name": "_0", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "output_0": {"name": "output_0", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "call_success": {"name": "call_success", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "call_block_number": {"name": "call_block_number", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "call_block_time": {"name": "call_block_time", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "call_trace_address": {"name": "call_trace_address", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "call_tx_hash": {"name": "call_tx_hash", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "contract_address": {"name": "contract_address", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "dt": {"name": "dt", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "ethereum_source://models/codegen/opensea/schema.yml", "compiled_path": "target/compiled/ethereum_source/models/codegen/opensea/WyvernExchangeV2_call_cancelledOrFinalized.sql", "build_path": null, "deferred": false, "unrendered_config": {"schema": "opensea", "tags": ["chain_ethereum", "level_parse", "proj_opensea"], "materialized": "incremental", "incremental_strategy": "insert_overwrite", "partition_by": ["dt"], "file_format": "parquet", "pre-hook": [{"sql": "create or replace function opensea_wyvernexchangev2_cancelledorfinalized_calldecodeudf as \"io.iftech.sparkudf.hive.opensea_WyvernExchangeV2_cancelledOrFinalized_CallDecodeUDF\" using jar \"s3a://ifcrypto/blockchain-dbt/jars/opensea_udf.jar\";"}]}, "created_at": 1650535972.067551, "compiled_sql": "\n\nwith base as (\n    select\n        status==1 as call_success,\n        block_number as call_block_number,\n        block_timestamp as call_block_time,\n        trace_address as call_trace_address,\n        transaction_hash as call_tx_hash,\n        to_address as contract_address,\n        dt,\n        opensea_wyvernexchangev2_cancelledorfinalized_calldecodeudf(unhex_input, unhex_output, '{\"constant\": true, \"inputs\": [{\"name\": \"\", \"type\": \"bytes32\"}], \"name\": \"cancelledOrFinalized\", \"outputs\": [{\"name\": \"\", \"type\": \"bool\"}], \"payable\": false, \"stateMutability\": \"view\", \"type\": \"function\"}', 'cancelledOrFinalized') as data\n    from ethereum_stg_ethereum.stg_ethereum__traces\n    where to_address = lower(\"0x7f268357A8c2552623316e2562D90e642bB538E5\")\n    and address_hash = abs(hash(lower(\"0x7f268357A8c2552623316e2562D90e642bB538E5\"))) % 10\n    and selector = \"0x30783830\"\n    and selector_hash = abs(hash(\"0x30783830\")) % 10\n\n    \n),\n\nfinal as (\n    select\n        call_success,\n        call_block_number,\n        call_block_time,\n        call_trace_address,\n        call_tx_hash,\n        contract_address,\n        dt,\n        data.input.*,\n        data.output.*\n    from base\n)\n\nselect /* REPARTITION(dt) */ *\nfrom final", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "ethereum_opensea.WyvernExchangeV2_call_cancelledOrFinalized"}, "model.ethereum_source.OpenSeaENSResolver_call_owner": {"raw_sql": "{{\n    config(\n        materialized='incremental',\n        incremental_strategy='insert_overwrite',\n        partition_by=['dt'],\n        file_format='parquet',\n        pre_hook={\n            'sql': 'create or replace function opensea_openseaensresolver_owner_calldecodeudf as \"io.iftech.sparkudf.hive.opensea_OpenSeaENSResolver_owner_CallDecodeUDF\" using jar \"s3a://ifcrypto/blockchain-dbt/jars/opensea_udf.jar\";'\n        }\n    )\n}}\n\nwith base as (\n    select\n        status==1 as call_success,\n        block_number as call_block_number,\n        block_timestamp as call_block_time,\n        trace_address as call_trace_address,\n        transaction_hash as call_tx_hash,\n        to_address as contract_address,\n        dt,\n        opensea_openseaensresolver_owner_calldecodeudf(unhex_input, unhex_output, '{\"constant\": true, \"inputs\": [], \"name\": \"owner\", \"outputs\": [{\"name\": \"\", \"type\": \"address\"}], \"payable\": false, \"stateMutability\": \"view\", \"type\": \"function\"}', 'owner') as data\n    from {{ ref('stg_ethereum__traces') }}\n    where to_address = lower(\"0x9c4e9cce4780062942a7fe34fa2fa7316c872956\")\n    and address_hash = abs(hash(lower(\"0x9c4e9cce4780062942a7fe34fa2fa7316c872956\"))) % 10\n    and selector = \"0x30783864\"\n    and selector_hash = abs(hash(\"0x30783864\")) % 10\n\n    {% if is_incremental() %}\n      and dt = var('dt')\n    {% endif %}\n),\n\nfinal as (\n    select\n        call_success,\n        call_block_number,\n        call_block_time,\n        call_trace_address,\n        call_tx_hash,\n        contract_address,\n        dt,\n        data.input.*,\n        data.output.*\n    from base\n)\n\nselect /* REPARTITION(dt) */ *\nfrom final", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.dbt.is_incremental"], "nodes": ["model.ethereum_source.stg_ethereum__traces"]}, "config": {"enabled": true, "alias": null, "schema": "opensea", "database": null, "tags": ["chain_ethereum", "level_parse", "proj_opensea"], "meta": {}, "materialized": "incremental", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "file_format": "parquet", "partition_by": ["dt"], "incremental_strategy": "insert_overwrite", "post-hook": [], "pre-hook": [{"sql": "create or replace function opensea_openseaensresolver_owner_calldecodeudf as \"io.iftech.sparkudf.hive.opensea_OpenSeaENSResolver_owner_CallDecodeUDF\" using jar \"s3a://ifcrypto/blockchain-dbt/jars/opensea_udf.jar\";", "transaction": true, "index": null}]}, "database": null, "schema": "ethereum_opensea", "fqn": ["ethereum_source", "codegen", "opensea", "OpenSeaENSResolver_call_owner"], "unique_id": "model.ethereum_source.OpenSeaENSResolver_call_owner", "package_name": "ethereum_source", "root_path": "/Users/songv/Code/jike/web3/dbt_ethereum_source", "path": "codegen/opensea/OpenSeaENSResolver_call_owner.sql", "original_file_path": "models/codegen/opensea/OpenSeaENSResolver_call_owner.sql", "name": "OpenSeaENSResolver_call_owner", "alias": "OpenSeaENSResolver_call_owner", "checksum": {"name": "sha256", "checksum": "4d76d819623bcb45047f9a87ae8554d555c57b1e6d75cf837704f38473dd7376"}, "tags": ["chain_ethereum", "level_parse", "proj_opensea"], "refs": [["stg_ethereum__traces"]], "sources": [], "description": "", "columns": {"output_0": {"name": "output_0", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "call_success": {"name": "call_success", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "call_block_number": {"name": "call_block_number", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "call_block_time": {"name": "call_block_time", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "call_trace_address": {"name": "call_trace_address", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "call_tx_hash": {"name": "call_tx_hash", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "contract_address": {"name": "contract_address", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "dt": {"name": "dt", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "ethereum_source://models/codegen/opensea/schema.yml", "compiled_path": "target/compiled/ethereum_source/models/codegen/opensea/OpenSeaENSResolver_call_owner.sql", "build_path": null, "deferred": false, "unrendered_config": {"schema": "opensea", "tags": ["chain_ethereum", "level_parse", "proj_opensea"], "materialized": "incremental", "incremental_strategy": "insert_overwrite", "partition_by": ["dt"], "file_format": "parquet", "pre-hook": [{"sql": "create or replace function opensea_openseaensresolver_owner_calldecodeudf as \"io.iftech.sparkudf.hive.opensea_OpenSeaENSResolver_owner_CallDecodeUDF\" using jar \"s3a://ifcrypto/blockchain-dbt/jars/opensea_udf.jar\";"}]}, "created_at": 1650535972.143369, "compiled_sql": "\n\nwith base as (\n    select\n        status==1 as call_success,\n        block_number as call_block_number,\n        block_timestamp as call_block_time,\n        trace_address as call_trace_address,\n        transaction_hash as call_tx_hash,\n        to_address as contract_address,\n        dt,\n        opensea_openseaensresolver_owner_calldecodeudf(unhex_input, unhex_output, '{\"constant\": true, \"inputs\": [], \"name\": \"owner\", \"outputs\": [{\"name\": \"\", \"type\": \"address\"}], \"payable\": false, \"stateMutability\": \"view\", \"type\": \"function\"}', 'owner') as data\n    from ethereum_stg_ethereum.stg_ethereum__traces\n    where to_address = lower(\"0x9c4e9cce4780062942a7fe34fa2fa7316c872956\")\n    and address_hash = abs(hash(lower(\"0x9c4e9cce4780062942a7fe34fa2fa7316c872956\"))) % 10\n    and selector = \"0x30783864\"\n    and selector_hash = abs(hash(\"0x30783864\")) % 10\n\n    \n),\n\nfinal as (\n    select\n        call_success,\n        call_block_number,\n        call_block_time,\n        call_trace_address,\n        call_tx_hash,\n        contract_address,\n        dt,\n        data.input.*,\n        data.output.*\n    from base\n)\n\nselect /* REPARTITION(dt) */ *\nfrom final", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "ethereum_opensea.OpenSeaENSResolver_call_owner"}, "model.ethereum_source.WyvernExchangeV1_call_approvedOrders": {"raw_sql": "{{\n    config(\n        materialized='incremental',\n        incremental_strategy='insert_overwrite',\n        partition_by=['dt'],\n        file_format='parquet',\n        pre_hook={\n            'sql': 'create or replace function opensea_wyvernexchangev1_approvedorders_calldecodeudf as \"io.iftech.sparkudf.hive.opensea_WyvernExchangeV1_approvedOrders_CallDecodeUDF\" using jar \"s3a://ifcrypto/blockchain-dbt/jars/opensea_udf.jar\";'\n        }\n    )\n}}\n\nwith base as (\n    select\n        status==1 as call_success,\n        block_number as call_block_number,\n        block_timestamp as call_block_time,\n        trace_address as call_trace_address,\n        transaction_hash as call_tx_hash,\n        to_address as contract_address,\n        dt,\n        opensea_wyvernexchangev1_approvedorders_calldecodeudf(unhex_input, unhex_output, '{\"constant\": true, \"inputs\": [{\"name\": \"\", \"type\": \"bytes32\"}], \"name\": \"approvedOrders\", \"outputs\": [{\"name\": \"\", \"type\": \"bool\"}], \"payable\": false, \"stateMutability\": \"view\", \"type\": \"function\"}', 'approvedOrders') as data\n    from {{ ref('stg_ethereum__traces') }}\n    where to_address = lower(\"0x7Be8076f4EA4A4AD08075C2508e481d6C946D12b\")\n    and address_hash = abs(hash(lower(\"0x7Be8076f4EA4A4AD08075C2508e481d6C946D12b\"))) % 10\n    and selector = \"0x30786535\"\n    and selector_hash = abs(hash(\"0x30786535\")) % 10\n\n    {% if is_incremental() %}\n      and dt = var('dt')\n    {% endif %}\n),\n\nfinal as (\n    select\n        call_success,\n        call_block_number,\n        call_block_time,\n        call_trace_address,\n        call_tx_hash,\n        contract_address,\n        dt,\n        data.input.*,\n        data.output.*\n    from base\n)\n\nselect /* REPARTITION(dt) */ *\nfrom final", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.dbt.is_incremental"], "nodes": ["model.ethereum_source.stg_ethereum__traces"]}, "config": {"enabled": true, "alias": null, "schema": "opensea", "database": null, "tags": ["chain_ethereum", "level_parse", "proj_opensea"], "meta": {}, "materialized": "incremental", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "file_format": "parquet", "partition_by": ["dt"], "incremental_strategy": "insert_overwrite", "post-hook": [], "pre-hook": [{"sql": "create or replace function opensea_wyvernexchangev1_approvedorders_calldecodeudf as \"io.iftech.sparkudf.hive.opensea_WyvernExchangeV1_approvedOrders_CallDecodeUDF\" using jar \"s3a://ifcrypto/blockchain-dbt/jars/opensea_udf.jar\";", "transaction": true, "index": null}]}, "database": null, "schema": "ethereum_opensea", "fqn": ["ethereum_source", "codegen", "opensea", "WyvernExchangeV1_call_approvedOrders"], "unique_id": "model.ethereum_source.WyvernExchangeV1_call_approvedOrders", "package_name": "ethereum_source", "root_path": "/Users/songv/Code/jike/web3/dbt_ethereum_source", "path": "codegen/opensea/WyvernExchangeV1_call_approvedOrders.sql", "original_file_path": "models/codegen/opensea/WyvernExchangeV1_call_approvedOrders.sql", "name": "WyvernExchangeV1_call_approvedOrders", "alias": "WyvernExchangeV1_call_approvedOrders", "checksum": {"name": "sha256", "checksum": "2297856d3d24d4eb682242d2032197bf5dc16878e9f55337ad8b510ac45f550a"}, "tags": ["chain_ethereum", "level_parse", "proj_opensea"], "refs": [["stg_ethereum__traces"]], "sources": [], "description": "", "columns": {"_0": {"name": "_0", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "output_0": {"name": "output_0", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "call_success": {"name": "call_success", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "call_block_number": {"name": "call_block_number", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "call_block_time": {"name": "call_block_time", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "call_trace_address": {"name": "call_trace_address", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "call_tx_hash": {"name": "call_tx_hash", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "contract_address": {"name": "contract_address", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "dt": {"name": "dt", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "ethereum_source://models/codegen/opensea/schema.yml", "compiled_path": "target/compiled/ethereum_source/models/codegen/opensea/WyvernExchangeV1_call_approvedOrders.sql", "build_path": null, "deferred": false, "unrendered_config": {"schema": "opensea", "tags": ["chain_ethereum", "level_parse", "proj_opensea"], "materialized": "incremental", "incremental_strategy": "insert_overwrite", "partition_by": ["dt"], "file_format": "parquet", "pre-hook": [{"sql": "create or replace function opensea_wyvernexchangev1_approvedorders_calldecodeudf as \"io.iftech.sparkudf.hive.opensea_WyvernExchangeV1_approvedOrders_CallDecodeUDF\" using jar \"s3a://ifcrypto/blockchain-dbt/jars/opensea_udf.jar\";"}]}, "created_at": 1650535971.997141, "compiled_sql": "\n\nwith base as (\n    select\n        status==1 as call_success,\n        block_number as call_block_number,\n        block_timestamp as call_block_time,\n        trace_address as call_trace_address,\n        transaction_hash as call_tx_hash,\n        to_address as contract_address,\n        dt,\n        opensea_wyvernexchangev1_approvedorders_calldecodeudf(unhex_input, unhex_output, '{\"constant\": true, \"inputs\": [{\"name\": \"\", \"type\": \"bytes32\"}], \"name\": \"approvedOrders\", \"outputs\": [{\"name\": \"\", \"type\": \"bool\"}], \"payable\": false, \"stateMutability\": \"view\", \"type\": \"function\"}', 'approvedOrders') as data\n    from ethereum_stg_ethereum.stg_ethereum__traces\n    where to_address = lower(\"0x7Be8076f4EA4A4AD08075C2508e481d6C946D12b\")\n    and address_hash = abs(hash(lower(\"0x7Be8076f4EA4A4AD08075C2508e481d6C946D12b\"))) % 10\n    and selector = \"0x30786535\"\n    and selector_hash = abs(hash(\"0x30786535\")) % 10\n\n    \n),\n\nfinal as (\n    select\n        call_success,\n        call_block_number,\n        call_block_time,\n        call_trace_address,\n        call_tx_hash,\n        contract_address,\n        dt,\n        data.input.*,\n        data.output.*\n    from base\n)\n\nselect /* REPARTITION(dt) */ *\nfrom final", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "ethereum_opensea.WyvernExchangeV1_call_approvedOrders"}, "model.ethereum_source.WyvernExchangeV1_evt_OrderApprovedPartOne": {"raw_sql": "{{\n    config(\n        materialized='incremental',\n        incremental_strategy='insert_overwrite',\n        partition_by=['dt'],\n        file_format='parquet',\n        pre_hook={\n            'sql': 'create or replace function opensea_wyvernexchangev1_orderapprovedpartone_eventdecodeudf as \"io.iftech.sparkudf.hive.opensea_WyvernExchangeV1_OrderApprovedPartOne_EventDecodeUDF\" using jar \"s3a://ifcrypto/blockchain-dbt/jars/opensea_udf.jar\";'\n        }\n    )\n}}\n\nwith base as (\n    select\n        block_number as evt_block_number,\n        block_timestamp as evt_block_time,\n        log_index as evt_index,\n        transaction_hash as evt_tx_hash,\n        address as contract_address,\n        dt,\n        opensea_wyvernexchangev1_orderapprovedpartone_eventdecodeudf(unhex_data, topics_arr, '{\"anonymous\": false, \"inputs\": [{\"indexed\": true, \"name\": \"hash\", \"type\": \"bytes32\"}, {\"indexed\": false, \"name\": \"exchange\", \"type\": \"address\"}, {\"indexed\": true, \"name\": \"maker\", \"type\": \"address\"}, {\"indexed\": false, \"name\": \"taker\", \"type\": \"address\"}, {\"indexed\": false, \"name\": \"makerRelayerFee\", \"type\": \"uint256\"}, {\"indexed\": false, \"name\": \"takerRelayerFee\", \"type\": \"uint256\"}, {\"indexed\": false, \"name\": \"makerProtocolFee\", \"type\": \"uint256\"}, {\"indexed\": false, \"name\": \"takerProtocolFee\", \"type\": \"uint256\"}, {\"indexed\": true, \"name\": \"feeRecipient\", \"type\": \"address\"}, {\"indexed\": false, \"name\": \"feeMethod\", \"type\": \"uint8\"}, {\"indexed\": false, \"name\": \"side\", \"type\": \"uint8\"}, {\"indexed\": false, \"name\": \"saleKind\", \"type\": \"uint8\"}, {\"indexed\": false, \"name\": \"target\", \"type\": \"address\"}], \"name\": \"OrderApprovedPartOne\", \"type\": \"event\"}', 'OrderApprovedPartOne') as data\n    from {{ ref('stg_ethereum__logs') }}\n    where address = lower(\"0x7Be8076f4EA4A4AD08075C2508e481d6C946D12b\")\n    and address_hash = abs(hash(lower(\"0x7Be8076f4EA4A4AD08075C2508e481d6C946D12b\"))) % 10\n    and selector = \"0x90c7f9f5b58c15f0f635bfb99f55d3d78fdbef3559e7d8abf5c81052a5276622\"\n    and selector_hash = abs(hash(\"0x90c7f9f5b58c15f0f635bfb99f55d3d78fdbef3559e7d8abf5c81052a5276622\")) % 10\n\n    {% if is_incremental() %}\n      and dt = var('dt')\n    {% endif %}\n),\n\nfinal as (\n    select\n        evt_block_number,\n        evt_block_time,\n        evt_index,\n        evt_tx_hash,\n        contract_address,\n        dt,\n        data.input.*\n    from base\n)\n\nselect /* REPARTITION(dt) */ *\nfrom final", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.dbt.is_incremental"], "nodes": ["model.ethereum_source.stg_ethereum__logs"]}, "config": {"enabled": true, "alias": null, "schema": "opensea", "database": null, "tags": ["chain_ethereum", "level_parse", "proj_opensea"], "meta": {}, "materialized": "incremental", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "file_format": "parquet", "partition_by": ["dt"], "incremental_strategy": "insert_overwrite", "post-hook": [], "pre-hook": [{"sql": "create or replace function opensea_wyvernexchangev1_orderapprovedpartone_eventdecodeudf as \"io.iftech.sparkudf.hive.opensea_WyvernExchangeV1_OrderApprovedPartOne_EventDecodeUDF\" using jar \"s3a://ifcrypto/blockchain-dbt/jars/opensea_udf.jar\";", "transaction": true, "index": null}]}, "database": null, "schema": "ethereum_opensea", "fqn": ["ethereum_source", "codegen", "opensea", "WyvernExchangeV1_evt_OrderApprovedPartOne"], "unique_id": "model.ethereum_source.WyvernExchangeV1_evt_OrderApprovedPartOne", "package_name": "ethereum_source", "root_path": "/Users/songv/Code/jike/web3/dbt_ethereum_source", "path": "codegen/opensea/WyvernExchangeV1_evt_OrderApprovedPartOne.sql", "original_file_path": "models/codegen/opensea/WyvernExchangeV1_evt_OrderApprovedPartOne.sql", "name": "WyvernExchangeV1_evt_OrderApprovedPartOne", "alias": "WyvernExchangeV1_evt_OrderApprovedPartOne", "checksum": {"name": "sha256", "checksum": "70b36e583ac41a7c5919068f3f37565ecb922609b4b43046bd011339dd04e994"}, "tags": ["chain_ethereum", "level_parse", "proj_opensea"], "refs": [["stg_ethereum__logs"]], "sources": [], "description": "", "columns": {"hash": {"name": "hash", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "exchange": {"name": "exchange", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "maker": {"name": "maker", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "taker": {"name": "taker", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "makerRelayerFee": {"name": "makerRelayerFee", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "takerRelayerFee": {"name": "takerRelayerFee", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "makerProtocolFee": {"name": "makerProtocolFee", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "takerProtocolFee": {"name": "takerProtocolFee", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "feeRecipient": {"name": "feeRecipient", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "feeMethod": {"name": "feeMethod", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "side": {"name": "side", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "saleKind": {"name": "saleKind", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "target": {"name": "target", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "evt_block_number": {"name": "evt_block_number", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "evt_block_time": {"name": "evt_block_time", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "evt_index": {"name": "evt_index", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "evt_tx_hash": {"name": "evt_tx_hash", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "contract_address": {"name": "contract_address", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "dt": {"name": "dt", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "ethereum_source://models/codegen/opensea/schema.yml", "compiled_path": "target/compiled/ethereum_source/models/codegen/opensea/WyvernExchangeV1_evt_OrderApprovedPartOne.sql", "build_path": null, "deferred": false, "unrendered_config": {"schema": "opensea", "tags": ["chain_ethereum", "level_parse", "proj_opensea"], "materialized": "incremental", "incremental_strategy": "insert_overwrite", "partition_by": ["dt"], "file_format": "parquet", "pre-hook": [{"sql": "create or replace function opensea_wyvernexchangev1_orderapprovedpartone_eventdecodeudf as \"io.iftech.sparkudf.hive.opensea_WyvernExchangeV1_OrderApprovedPartOne_EventDecodeUDF\" using jar \"s3a://ifcrypto/blockchain-dbt/jars/opensea_udf.jar\";"}]}, "created_at": 1650535971.9139352, "compiled_sql": "\n\nwith base as (\n    select\n        block_number as evt_block_number,\n        block_timestamp as evt_block_time,\n        log_index as evt_index,\n        transaction_hash as evt_tx_hash,\n        address as contract_address,\n        dt,\n        opensea_wyvernexchangev1_orderapprovedpartone_eventdecodeudf(unhex_data, topics_arr, '{\"anonymous\": false, \"inputs\": [{\"indexed\": true, \"name\": \"hash\", \"type\": \"bytes32\"}, {\"indexed\": false, \"name\": \"exchange\", \"type\": \"address\"}, {\"indexed\": true, \"name\": \"maker\", \"type\": \"address\"}, {\"indexed\": false, \"name\": \"taker\", \"type\": \"address\"}, {\"indexed\": false, \"name\": \"makerRelayerFee\", \"type\": \"uint256\"}, {\"indexed\": false, \"name\": \"takerRelayerFee\", \"type\": \"uint256\"}, {\"indexed\": false, \"name\": \"makerProtocolFee\", \"type\": \"uint256\"}, {\"indexed\": false, \"name\": \"takerProtocolFee\", \"type\": \"uint256\"}, {\"indexed\": true, \"name\": \"feeRecipient\", \"type\": \"address\"}, {\"indexed\": false, \"name\": \"feeMethod\", \"type\": \"uint8\"}, {\"indexed\": false, \"name\": \"side\", \"type\": \"uint8\"}, {\"indexed\": false, \"name\": \"saleKind\", \"type\": \"uint8\"}, {\"indexed\": false, \"name\": \"target\", \"type\": \"address\"}], \"name\": \"OrderApprovedPartOne\", \"type\": \"event\"}', 'OrderApprovedPartOne') as data\n    from ethereum_stg_ethereum.stg_ethereum__logs\n    where address = lower(\"0x7Be8076f4EA4A4AD08075C2508e481d6C946D12b\")\n    and address_hash = abs(hash(lower(\"0x7Be8076f4EA4A4AD08075C2508e481d6C946D12b\"))) % 10\n    and selector = \"0x90c7f9f5b58c15f0f635bfb99f55d3d78fdbef3559e7d8abf5c81052a5276622\"\n    and selector_hash = abs(hash(\"0x90c7f9f5b58c15f0f635bfb99f55d3d78fdbef3559e7d8abf5c81052a5276622\")) % 10\n\n    \n),\n\nfinal as (\n    select\n        evt_block_number,\n        evt_block_time,\n        evt_index,\n        evt_tx_hash,\n        contract_address,\n        dt,\n        data.input.*\n    from base\n)\n\nselect /* REPARTITION(dt) */ *\nfrom final", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "ethereum_opensea.WyvernExchangeV1_evt_OrderApprovedPartOne"}, "model.ethereum_source.OpenSeaENSResolver_call_setAuthorisation": {"raw_sql": "{{\n    config(\n        materialized='incremental',\n        incremental_strategy='insert_overwrite',\n        partition_by=['dt'],\n        file_format='parquet',\n        pre_hook={\n            'sql': 'create or replace function opensea_openseaensresolver_setauthorisation_calldecodeudf as \"io.iftech.sparkudf.hive.opensea_OpenSeaENSResolver_setAuthorisation_CallDecodeUDF\" using jar \"s3a://ifcrypto/blockchain-dbt/jars/opensea_udf.jar\";'\n        }\n    )\n}}\n\nwith base as (\n    select\n        status==1 as call_success,\n        block_number as call_block_number,\n        block_timestamp as call_block_time,\n        trace_address as call_trace_address,\n        transaction_hash as call_tx_hash,\n        to_address as contract_address,\n        dt,\n        opensea_openseaensresolver_setauthorisation_calldecodeudf(unhex_input, unhex_output, '{\"constant\": false, \"inputs\": [{\"name\": \"node\", \"type\": \"bytes32\"}, {\"name\": \"target\", \"type\": \"address\"}, {\"name\": \"isAuthorised\", \"type\": \"bool\"}], \"name\": \"setAuthorisation\", \"outputs\": [], \"payable\": false, \"stateMutability\": \"nonpayable\", \"type\": \"function\"}', 'setAuthorisation') as data\n    from {{ ref('stg_ethereum__traces') }}\n    where to_address = lower(\"0x9c4e9cce4780062942a7fe34fa2fa7316c872956\")\n    and address_hash = abs(hash(lower(\"0x9c4e9cce4780062942a7fe34fa2fa7316c872956\"))) % 10\n    and selector = \"0x30783365\"\n    and selector_hash = abs(hash(\"0x30783365\")) % 10\n\n    {% if is_incremental() %}\n      and dt = var('dt')\n    {% endif %}\n),\n\nfinal as (\n    select\n        call_success,\n        call_block_number,\n        call_block_time,\n        call_trace_address,\n        call_tx_hash,\n        contract_address,\n        dt,\n        data.input.*,\n        data.output.*\n    from base\n)\n\nselect /* REPARTITION(dt) */ *\nfrom final", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.dbt.is_incremental"], "nodes": ["model.ethereum_source.stg_ethereum__traces"]}, "config": {"enabled": true, "alias": null, "schema": "opensea", "database": null, "tags": ["chain_ethereum", "level_parse", "proj_opensea"], "meta": {}, "materialized": "incremental", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "file_format": "parquet", "partition_by": ["dt"], "incremental_strategy": "insert_overwrite", "post-hook": [], "pre-hook": [{"sql": "create or replace function opensea_openseaensresolver_setauthorisation_calldecodeudf as \"io.iftech.sparkudf.hive.opensea_OpenSeaENSResolver_setAuthorisation_CallDecodeUDF\" using jar \"s3a://ifcrypto/blockchain-dbt/jars/opensea_udf.jar\";", "transaction": true, "index": null}]}, "database": null, "schema": "ethereum_opensea", "fqn": ["ethereum_source", "codegen", "opensea", "OpenSeaENSResolver_call_setAuthorisation"], "unique_id": "model.ethereum_source.OpenSeaENSResolver_call_setAuthorisation", "package_name": "ethereum_source", "root_path": "/Users/songv/Code/jike/web3/dbt_ethereum_source", "path": "codegen/opensea/OpenSeaENSResolver_call_setAuthorisation.sql", "original_file_path": "models/codegen/opensea/OpenSeaENSResolver_call_setAuthorisation.sql", "name": "OpenSeaENSResolver_call_setAuthorisation", "alias": "OpenSeaENSResolver_call_setAuthorisation", "checksum": {"name": "sha256", "checksum": "f061af6df2a04ef5f5cecc26cad51a5b71346750a6aa1dc715f4f7412f4cc26d"}, "tags": ["chain_ethereum", "level_parse", "proj_opensea"], "refs": [["stg_ethereum__traces"]], "sources": [], "description": "", "columns": {"node": {"name": "node", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "target": {"name": "target", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "isAuthorised": {"name": "isAuthorised", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "call_success": {"name": "call_success", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "call_block_number": {"name": "call_block_number", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "call_block_time": {"name": "call_block_time", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "call_trace_address": {"name": "call_trace_address", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "call_tx_hash": {"name": "call_tx_hash", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "contract_address": {"name": "contract_address", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "dt": {"name": "dt", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "ethereum_source://models/codegen/opensea/schema.yml", "compiled_path": "target/compiled/ethereum_source/models/codegen/opensea/OpenSeaENSResolver_call_setAuthorisation.sql", "build_path": null, "deferred": false, "unrendered_config": {"schema": "opensea", "tags": ["chain_ethereum", "level_parse", "proj_opensea"], "materialized": "incremental", "incremental_strategy": "insert_overwrite", "partition_by": ["dt"], "file_format": "parquet", "pre-hook": [{"sql": "create or replace function opensea_openseaensresolver_setauthorisation_calldecodeudf as \"io.iftech.sparkudf.hive.opensea_OpenSeaENSResolver_setAuthorisation_CallDecodeUDF\" using jar \"s3a://ifcrypto/blockchain-dbt/jars/opensea_udf.jar\";"}]}, "created_at": 1650535972.127682, "compiled_sql": "\n\nwith base as (\n    select\n        status==1 as call_success,\n        block_number as call_block_number,\n        block_timestamp as call_block_time,\n        trace_address as call_trace_address,\n        transaction_hash as call_tx_hash,\n        to_address as contract_address,\n        dt,\n        opensea_openseaensresolver_setauthorisation_calldecodeudf(unhex_input, unhex_output, '{\"constant\": false, \"inputs\": [{\"name\": \"node\", \"type\": \"bytes32\"}, {\"name\": \"target\", \"type\": \"address\"}, {\"name\": \"isAuthorised\", \"type\": \"bool\"}], \"name\": \"setAuthorisation\", \"outputs\": [], \"payable\": false, \"stateMutability\": \"nonpayable\", \"type\": \"function\"}', 'setAuthorisation') as data\n    from ethereum_stg_ethereum.stg_ethereum__traces\n    where to_address = lower(\"0x9c4e9cce4780062942a7fe34fa2fa7316c872956\")\n    and address_hash = abs(hash(lower(\"0x9c4e9cce4780062942a7fe34fa2fa7316c872956\"))) % 10\n    and selector = \"0x30783365\"\n    and selector_hash = abs(hash(\"0x30783365\")) % 10\n\n    \n),\n\nfinal as (\n    select\n        call_success,\n        call_block_number,\n        call_block_time,\n        call_trace_address,\n        call_tx_hash,\n        contract_address,\n        dt,\n        data.input.*,\n        data.output.*\n    from base\n)\n\nselect /* REPARTITION(dt) */ *\nfrom final", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "ethereum_opensea.OpenSeaENSResolver_call_setAuthorisation"}, "model.ethereum_source.WyvernExchangeV1_call_staticCall": {"raw_sql": "{{\n    config(\n        materialized='incremental',\n        incremental_strategy='insert_overwrite',\n        partition_by=['dt'],\n        file_format='parquet',\n        pre_hook={\n            'sql': 'create or replace function opensea_wyvernexchangev1_staticcall_calldecodeudf as \"io.iftech.sparkudf.hive.opensea_WyvernExchangeV1_staticCall_CallDecodeUDF\" using jar \"s3a://ifcrypto/blockchain-dbt/jars/opensea_udf.jar\";'\n        }\n    )\n}}\n\nwith base as (\n    select\n        status==1 as call_success,\n        block_number as call_block_number,\n        block_timestamp as call_block_time,\n        trace_address as call_trace_address,\n        transaction_hash as call_tx_hash,\n        to_address as contract_address,\n        dt,\n        opensea_wyvernexchangev1_staticcall_calldecodeudf(unhex_input, unhex_output, '{\"constant\": true, \"inputs\": [{\"name\": \"target\", \"type\": \"address\"}, {\"name\": \"calldata\", \"type\": \"bytes\"}, {\"name\": \"extradata\", \"type\": \"bytes\"}], \"name\": \"staticCall\", \"outputs\": [{\"name\": \"result\", \"type\": \"bool\"}], \"payable\": false, \"stateMutability\": \"view\", \"type\": \"function\"}', 'staticCall') as data\n    from {{ ref('stg_ethereum__traces') }}\n    where to_address = lower(\"0x7Be8076f4EA4A4AD08075C2508e481d6C946D12b\")\n    and address_hash = abs(hash(lower(\"0x7Be8076f4EA4A4AD08075C2508e481d6C946D12b\"))) % 10\n    and selector = \"0x30783130\"\n    and selector_hash = abs(hash(\"0x30783130\")) % 10\n\n    {% if is_incremental() %}\n      and dt = var('dt')\n    {% endif %}\n),\n\nfinal as (\n    select\n        call_success,\n        call_block_number,\n        call_block_time,\n        call_trace_address,\n        call_tx_hash,\n        contract_address,\n        dt,\n        data.input.*,\n        data.output.*\n    from base\n)\n\nselect /* REPARTITION(dt) */ *\nfrom final", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.dbt.is_incremental"], "nodes": ["model.ethereum_source.stg_ethereum__traces"]}, "config": {"enabled": true, "alias": null, "schema": "opensea", "database": null, "tags": ["chain_ethereum", "level_parse", "proj_opensea"], "meta": {}, "materialized": "incremental", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "file_format": "parquet", "partition_by": ["dt"], "incremental_strategy": "insert_overwrite", "post-hook": [], "pre-hook": [{"sql": "create or replace function opensea_wyvernexchangev1_staticcall_calldecodeudf as \"io.iftech.sparkudf.hive.opensea_WyvernExchangeV1_staticCall_CallDecodeUDF\" using jar \"s3a://ifcrypto/blockchain-dbt/jars/opensea_udf.jar\";", "transaction": true, "index": null}]}, "database": null, "schema": "ethereum_opensea", "fqn": ["ethereum_source", "codegen", "opensea", "WyvernExchangeV1_call_staticCall"], "unique_id": "model.ethereum_source.WyvernExchangeV1_call_staticCall", "package_name": "ethereum_source", "root_path": "/Users/songv/Code/jike/web3/dbt_ethereum_source", "path": "codegen/opensea/WyvernExchangeV1_call_staticCall.sql", "original_file_path": "models/codegen/opensea/WyvernExchangeV1_call_staticCall.sql", "name": "WyvernExchangeV1_call_staticCall", "alias": "WyvernExchangeV1_call_staticCall", "checksum": {"name": "sha256", "checksum": "9e0566dcfee8d95cbcd8247cb7faefe00192d5cffc21b348075b8511d840736b"}, "tags": ["chain_ethereum", "level_parse", "proj_opensea"], "refs": [["stg_ethereum__traces"]], "sources": [], "description": "", "columns": {"target": {"name": "target", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "calldata": {"name": "calldata", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "extradata": {"name": "extradata", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "output_result": {"name": "output_result", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "call_success": {"name": "call_success", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "call_block_number": {"name": "call_block_number", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "call_block_time": {"name": "call_block_time", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "call_trace_address": {"name": "call_trace_address", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "call_tx_hash": {"name": "call_tx_hash", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "contract_address": {"name": "contract_address", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "dt": {"name": "dt", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "ethereum_source://models/codegen/opensea/schema.yml", "compiled_path": "target/compiled/ethereum_source/models/codegen/opensea/WyvernExchangeV1_call_staticCall.sql", "build_path": null, "deferred": false, "unrendered_config": {"schema": "opensea", "tags": ["chain_ethereum", "level_parse", "proj_opensea"], "materialized": "incremental", "incremental_strategy": "insert_overwrite", "partition_by": ["dt"], "file_format": "parquet", "pre-hook": [{"sql": "create or replace function opensea_wyvernexchangev1_staticcall_calldecodeudf as \"io.iftech.sparkudf.hive.opensea_WyvernExchangeV1_staticCall_CallDecodeUDF\" using jar \"s3a://ifcrypto/blockchain-dbt/jars/opensea_udf.jar\";"}]}, "created_at": 1650535971.9301949, "compiled_sql": "\n\nwith base as (\n    select\n        status==1 as call_success,\n        block_number as call_block_number,\n        block_timestamp as call_block_time,\n        trace_address as call_trace_address,\n        transaction_hash as call_tx_hash,\n        to_address as contract_address,\n        dt,\n        opensea_wyvernexchangev1_staticcall_calldecodeudf(unhex_input, unhex_output, '{\"constant\": true, \"inputs\": [{\"name\": \"target\", \"type\": \"address\"}, {\"name\": \"calldata\", \"type\": \"bytes\"}, {\"name\": \"extradata\", \"type\": \"bytes\"}], \"name\": \"staticCall\", \"outputs\": [{\"name\": \"result\", \"type\": \"bool\"}], \"payable\": false, \"stateMutability\": \"view\", \"type\": \"function\"}', 'staticCall') as data\n    from ethereum_stg_ethereum.stg_ethereum__traces\n    where to_address = lower(\"0x7Be8076f4EA4A4AD08075C2508e481d6C946D12b\")\n    and address_hash = abs(hash(lower(\"0x7Be8076f4EA4A4AD08075C2508e481d6C946D12b\"))) % 10\n    and selector = \"0x30783130\"\n    and selector_hash = abs(hash(\"0x30783130\")) % 10\n\n    \n),\n\nfinal as (\n    select\n        call_success,\n        call_block_number,\n        call_block_time,\n        call_trace_address,\n        call_tx_hash,\n        contract_address,\n        dt,\n        data.input.*,\n        data.output.*\n    from base\n)\n\nselect /* REPARTITION(dt) */ *\nfrom final", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "ethereum_opensea.WyvernExchangeV1_call_staticCall"}, "model.ethereum_source.WyvernExchangeV2_call_cancelOrderWithNonce_": {"raw_sql": "{{\n    config(\n        materialized='incremental',\n        incremental_strategy='insert_overwrite',\n        partition_by=['dt'],\n        file_format='parquet',\n        pre_hook={\n            'sql': 'create or replace function opensea_wyvernexchangev2_cancelorderwithnonce__calldecodeudf as \"io.iftech.sparkudf.hive.opensea_WyvernExchangeV2_cancelOrderWithNonce__CallDecodeUDF\" using jar \"s3a://ifcrypto/blockchain-dbt/jars/opensea_udf.jar\";'\n        }\n    )\n}}\n\nwith base as (\n    select\n        status==1 as call_success,\n        block_number as call_block_number,\n        block_timestamp as call_block_time,\n        trace_address as call_trace_address,\n        transaction_hash as call_tx_hash,\n        to_address as contract_address,\n        dt,\n        opensea_wyvernexchangev2_cancelorderwithnonce__calldecodeudf(unhex_input, unhex_output, '{\"constant\": false, \"inputs\": [{\"name\": \"addrs\", \"type\": \"address[7]\"}, {\"name\": \"uints\", \"type\": \"uint256[9]\"}, {\"name\": \"feeMethod\", \"type\": \"uint8\"}, {\"name\": \"side\", \"type\": \"uint8\"}, {\"name\": \"saleKind\", \"type\": \"uint8\"}, {\"name\": \"howToCall\", \"type\": \"uint8\"}, {\"name\": \"calldata\", \"type\": \"bytes\"}, {\"name\": \"replacementPattern\", \"type\": \"bytes\"}, {\"name\": \"staticExtradata\", \"type\": \"bytes\"}, {\"name\": \"v\", \"type\": \"uint8\"}, {\"name\": \"r\", \"type\": \"bytes32\"}, {\"name\": \"s\", \"type\": \"bytes32\"}, {\"name\": \"nonce\", \"type\": \"uint256\"}], \"name\": \"cancelOrderWithNonce_\", \"outputs\": [], \"payable\": false, \"stateMutability\": \"nonpayable\", \"type\": \"function\"}', 'cancelOrderWithNonce_') as data\n    from {{ ref('stg_ethereum__traces') }}\n    where to_address = lower(\"0x7f268357A8c2552623316e2562D90e642bB538E5\")\n    and address_hash = abs(hash(lower(\"0x7f268357A8c2552623316e2562D90e642bB538E5\"))) % 10\n    and selector = \"0x30786636\"\n    and selector_hash = abs(hash(\"0x30786636\")) % 10\n\n    {% if is_incremental() %}\n      and dt = var('dt')\n    {% endif %}\n),\n\nfinal as (\n    select\n        call_success,\n        call_block_number,\n        call_block_time,\n        call_trace_address,\n        call_tx_hash,\n        contract_address,\n        dt,\n        data.input.*,\n        data.output.*\n    from base\n)\n\nselect /* REPARTITION(dt) */ *\nfrom final", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.dbt.is_incremental"], "nodes": ["model.ethereum_source.stg_ethereum__traces"]}, "config": {"enabled": true, "alias": null, "schema": "opensea", "database": null, "tags": ["chain_ethereum", "level_parse", "proj_opensea"], "meta": {}, "materialized": "incremental", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "file_format": "parquet", "partition_by": ["dt"], "incremental_strategy": "insert_overwrite", "post-hook": [], "pre-hook": [{"sql": "create or replace function opensea_wyvernexchangev2_cancelorderwithnonce__calldecodeudf as \"io.iftech.sparkudf.hive.opensea_WyvernExchangeV2_cancelOrderWithNonce__CallDecodeUDF\" using jar \"s3a://ifcrypto/blockchain-dbt/jars/opensea_udf.jar\";", "transaction": true, "index": null}]}, "database": null, "schema": "ethereum_opensea", "fqn": ["ethereum_source", "codegen", "opensea", "WyvernExchangeV2_call_cancelOrderWithNonce_"], "unique_id": "model.ethereum_source.WyvernExchangeV2_call_cancelOrderWithNonce_", "package_name": "ethereum_source", "root_path": "/Users/songv/Code/jike/web3/dbt_ethereum_source", "path": "codegen/opensea/WyvernExchangeV2_call_cancelOrderWithNonce_.sql", "original_file_path": "models/codegen/opensea/WyvernExchangeV2_call_cancelOrderWithNonce_.sql", "name": "WyvernExchangeV2_call_cancelOrderWithNonce_", "alias": "WyvernExchangeV2_call_cancelOrderWithNonce_", "checksum": {"name": "sha256", "checksum": "5e383168f19f2afadbadf902065c1f7471322a7316ecc28003bfd4802e3ec377"}, "tags": ["chain_ethereum", "level_parse", "proj_opensea"], "refs": [["stg_ethereum__traces"]], "sources": [], "description": "", "columns": {"addrs": {"name": "addrs", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "uints": {"name": "uints", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "feeMethod": {"name": "feeMethod", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "side": {"name": "side", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "saleKind": {"name": "saleKind", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "howToCall": {"name": "howToCall", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "calldata": {"name": "calldata", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "replacementPattern": {"name": "replacementPattern", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "staticExtradata": {"name": "staticExtradata", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "v": {"name": "v", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "r": {"name": "r", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "s": {"name": "s", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "nonce": {"name": "nonce", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "call_success": {"name": "call_success", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "call_block_number": {"name": "call_block_number", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "call_block_time": {"name": "call_block_time", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "call_trace_address": {"name": "call_trace_address", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "call_tx_hash": {"name": "call_tx_hash", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "contract_address": {"name": "contract_address", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "dt": {"name": "dt", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "ethereum_source://models/codegen/opensea/schema.yml", "compiled_path": "target/compiled/ethereum_source/models/codegen/opensea/WyvernExchangeV2_call_cancelOrderWithNonce_.sql", "build_path": null, "deferred": false, "unrendered_config": {"schema": "opensea", "tags": ["chain_ethereum", "level_parse", "proj_opensea"], "materialized": "incremental", "incremental_strategy": "insert_overwrite", "partition_by": ["dt"], "file_format": "parquet", "pre-hook": [{"sql": "create or replace function opensea_wyvernexchangev2_cancelorderwithnonce__calldecodeudf as \"io.iftech.sparkudf.hive.opensea_WyvernExchangeV2_cancelOrderWithNonce__CallDecodeUDF\" using jar \"s3a://ifcrypto/blockchain-dbt/jars/opensea_udf.jar\";"}]}, "created_at": 1650535972.0952342, "compiled_sql": "\n\nwith base as (\n    select\n        status==1 as call_success,\n        block_number as call_block_number,\n        block_timestamp as call_block_time,\n        trace_address as call_trace_address,\n        transaction_hash as call_tx_hash,\n        to_address as contract_address,\n        dt,\n        opensea_wyvernexchangev2_cancelorderwithnonce__calldecodeudf(unhex_input, unhex_output, '{\"constant\": false, \"inputs\": [{\"name\": \"addrs\", \"type\": \"address[7]\"}, {\"name\": \"uints\", \"type\": \"uint256[9]\"}, {\"name\": \"feeMethod\", \"type\": \"uint8\"}, {\"name\": \"side\", \"type\": \"uint8\"}, {\"name\": \"saleKind\", \"type\": \"uint8\"}, {\"name\": \"howToCall\", \"type\": \"uint8\"}, {\"name\": \"calldata\", \"type\": \"bytes\"}, {\"name\": \"replacementPattern\", \"type\": \"bytes\"}, {\"name\": \"staticExtradata\", \"type\": \"bytes\"}, {\"name\": \"v\", \"type\": \"uint8\"}, {\"name\": \"r\", \"type\": \"bytes32\"}, {\"name\": \"s\", \"type\": \"bytes32\"}, {\"name\": \"nonce\", \"type\": \"uint256\"}], \"name\": \"cancelOrderWithNonce_\", \"outputs\": [], \"payable\": false, \"stateMutability\": \"nonpayable\", \"type\": \"function\"}', 'cancelOrderWithNonce_') as data\n    from ethereum_stg_ethereum.stg_ethereum__traces\n    where to_address = lower(\"0x7f268357A8c2552623316e2562D90e642bB538E5\")\n    and address_hash = abs(hash(lower(\"0x7f268357A8c2552623316e2562D90e642bB538E5\"))) % 10\n    and selector = \"0x30786636\"\n    and selector_hash = abs(hash(\"0x30786636\")) % 10\n\n    \n),\n\nfinal as (\n    select\n        call_success,\n        call_block_number,\n        call_block_time,\n        call_trace_address,\n        call_tx_hash,\n        contract_address,\n        dt,\n        data.input.*,\n        data.output.*\n    from base\n)\n\nselect /* REPARTITION(dt) */ *\nfrom final", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "ethereum_opensea.WyvernExchangeV2_call_cancelOrderWithNonce_"}, "model.ethereum_source.WyvernExchangeV2_call_DOMAIN_SEPARATOR": {"raw_sql": "{{\n    config(\n        materialized='incremental',\n        incremental_strategy='insert_overwrite',\n        partition_by=['dt'],\n        file_format='parquet',\n        pre_hook={\n            'sql': 'create or replace function opensea_wyvernexchangev2_domain_separator_calldecodeudf as \"io.iftech.sparkudf.hive.opensea_WyvernExchangeV2_DOMAIN_SEPARATOR_CallDecodeUDF\" using jar \"s3a://ifcrypto/blockchain-dbt/jars/opensea_udf.jar\";'\n        }\n    )\n}}\n\nwith base as (\n    select\n        status==1 as call_success,\n        block_number as call_block_number,\n        block_timestamp as call_block_time,\n        trace_address as call_trace_address,\n        transaction_hash as call_tx_hash,\n        to_address as contract_address,\n        dt,\n        opensea_wyvernexchangev2_domain_separator_calldecodeudf(unhex_input, unhex_output, '{\"constant\": true, \"inputs\": [], \"name\": \"DOMAIN_SEPARATOR\", \"outputs\": [{\"name\": \"\", \"type\": \"bytes32\"}], \"payable\": false, \"stateMutability\": \"view\", \"type\": \"function\"}', 'DOMAIN_SEPARATOR') as data\n    from {{ ref('stg_ethereum__traces') }}\n    where to_address = lower(\"0x7f268357A8c2552623316e2562D90e642bB538E5\")\n    and address_hash = abs(hash(lower(\"0x7f268357A8c2552623316e2562D90e642bB538E5\"))) % 10\n    and selector = \"0x30783336\"\n    and selector_hash = abs(hash(\"0x30783336\")) % 10\n\n    {% if is_incremental() %}\n      and dt = var('dt')\n    {% endif %}\n),\n\nfinal as (\n    select\n        call_success,\n        call_block_number,\n        call_block_time,\n        call_trace_address,\n        call_tx_hash,\n        contract_address,\n        dt,\n        data.input.*,\n        data.output.*\n    from base\n)\n\nselect /* REPARTITION(dt) */ *\nfrom final", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.dbt.is_incremental"], "nodes": ["model.ethereum_source.stg_ethereum__traces"]}, "config": {"enabled": true, "alias": null, "schema": "opensea", "database": null, "tags": ["chain_ethereum", "level_parse", "proj_opensea"], "meta": {}, "materialized": "incremental", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "file_format": "parquet", "partition_by": ["dt"], "incremental_strategy": "insert_overwrite", "post-hook": [], "pre-hook": [{"sql": "create or replace function opensea_wyvernexchangev2_domain_separator_calldecodeudf as \"io.iftech.sparkudf.hive.opensea_WyvernExchangeV2_DOMAIN_SEPARATOR_CallDecodeUDF\" using jar \"s3a://ifcrypto/blockchain-dbt/jars/opensea_udf.jar\";", "transaction": true, "index": null}]}, "database": null, "schema": "ethereum_opensea", "fqn": ["ethereum_source", "codegen", "opensea", "WyvernExchangeV2_call_DOMAIN_SEPARATOR"], "unique_id": "model.ethereum_source.WyvernExchangeV2_call_DOMAIN_SEPARATOR", "package_name": "ethereum_source", "root_path": "/Users/songv/Code/jike/web3/dbt_ethereum_source", "path": "codegen/opensea/WyvernExchangeV2_call_DOMAIN_SEPARATOR.sql", "original_file_path": "models/codegen/opensea/WyvernExchangeV2_call_DOMAIN_SEPARATOR.sql", "name": "WyvernExchangeV2_call_DOMAIN_SEPARATOR", "alias": "WyvernExchangeV2_call_DOMAIN_SEPARATOR", "checksum": {"name": "sha256", "checksum": "85cfaa086b49145b3fc1ff37ac00793df1017831be5ff5624105ccd0ad3615a7"}, "tags": ["chain_ethereum", "level_parse", "proj_opensea"], "refs": [["stg_ethereum__traces"]], "sources": [], "description": "", "columns": {"output_0": {"name": "output_0", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "call_success": {"name": "call_success", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "call_block_number": {"name": "call_block_number", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "call_block_time": {"name": "call_block_time", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "call_trace_address": {"name": "call_trace_address", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "call_tx_hash": {"name": "call_tx_hash", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "contract_address": {"name": "contract_address", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "dt": {"name": "dt", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "ethereum_source://models/codegen/opensea/schema.yml", "compiled_path": "target/compiled/ethereum_source/models/codegen/opensea/WyvernExchangeV2_call_DOMAIN_SEPARATOR.sql", "build_path": null, "deferred": false, "unrendered_config": {"schema": "opensea", "tags": ["chain_ethereum", "level_parse", "proj_opensea"], "materialized": "incremental", "incremental_strategy": "insert_overwrite", "partition_by": ["dt"], "file_format": "parquet", "pre-hook": [{"sql": "create or replace function opensea_wyvernexchangev2_domain_separator_calldecodeudf as \"io.iftech.sparkudf.hive.opensea_WyvernExchangeV2_DOMAIN_SEPARATOR_CallDecodeUDF\" using jar \"s3a://ifcrypto/blockchain-dbt/jars/opensea_udf.jar\";"}]}, "created_at": 1650535972.0297, "compiled_sql": "\n\nwith base as (\n    select\n        status==1 as call_success,\n        block_number as call_block_number,\n        block_timestamp as call_block_time,\n        trace_address as call_trace_address,\n        transaction_hash as call_tx_hash,\n        to_address as contract_address,\n        dt,\n        opensea_wyvernexchangev2_domain_separator_calldecodeudf(unhex_input, unhex_output, '{\"constant\": true, \"inputs\": [], \"name\": \"DOMAIN_SEPARATOR\", \"outputs\": [{\"name\": \"\", \"type\": \"bytes32\"}], \"payable\": false, \"stateMutability\": \"view\", \"type\": \"function\"}', 'DOMAIN_SEPARATOR') as data\n    from ethereum_stg_ethereum.stg_ethereum__traces\n    where to_address = lower(\"0x7f268357A8c2552623316e2562D90e642bB538E5\")\n    and address_hash = abs(hash(lower(\"0x7f268357A8c2552623316e2562D90e642bB538E5\"))) % 10\n    and selector = \"0x30783336\"\n    and selector_hash = abs(hash(\"0x30783336\")) % 10\n\n    \n),\n\nfinal as (\n    select\n        call_success,\n        call_block_number,\n        call_block_time,\n        call_trace_address,\n        call_tx_hash,\n        contract_address,\n        dt,\n        data.input.*,\n        data.output.*\n    from base\n)\n\nselect /* REPARTITION(dt) */ *\nfrom final", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "ethereum_opensea.WyvernExchangeV2_call_DOMAIN_SEPARATOR"}, "model.ethereum_source.WyvernExchangeV1_call_guardedArrayReplace": {"raw_sql": "{{\n    config(\n        materialized='incremental',\n        incremental_strategy='insert_overwrite',\n        partition_by=['dt'],\n        file_format='parquet',\n        pre_hook={\n            'sql': 'create or replace function opensea_wyvernexchangev1_guardedarrayreplace_calldecodeudf as \"io.iftech.sparkudf.hive.opensea_WyvernExchangeV1_guardedArrayReplace_CallDecodeUDF\" using jar \"s3a://ifcrypto/blockchain-dbt/jars/opensea_udf.jar\";'\n        }\n    )\n}}\n\nwith base as (\n    select\n        status==1 as call_success,\n        block_number as call_block_number,\n        block_timestamp as call_block_time,\n        trace_address as call_trace_address,\n        transaction_hash as call_tx_hash,\n        to_address as contract_address,\n        dt,\n        opensea_wyvernexchangev1_guardedarrayreplace_calldecodeudf(unhex_input, unhex_output, '{\"constant\": true, \"inputs\": [{\"name\": \"array\", \"type\": \"bytes\"}, {\"name\": \"desired\", \"type\": \"bytes\"}, {\"name\": \"mask\", \"type\": \"bytes\"}], \"name\": \"guardedArrayReplace\", \"outputs\": [{\"name\": \"\", \"type\": \"bytes\"}], \"payable\": false, \"stateMutability\": \"pure\", \"type\": \"function\"}', 'guardedArrayReplace') as data\n    from {{ ref('stg_ethereum__traces') }}\n    where to_address = lower(\"0x7Be8076f4EA4A4AD08075C2508e481d6C946D12b\")\n    and address_hash = abs(hash(lower(\"0x7Be8076f4EA4A4AD08075C2508e481d6C946D12b\"))) % 10\n    and selector = \"0x30783233\"\n    and selector_hash = abs(hash(\"0x30783233\")) % 10\n\n    {% if is_incremental() %}\n      and dt = var('dt')\n    {% endif %}\n),\n\nfinal as (\n    select\n        call_success,\n        call_block_number,\n        call_block_time,\n        call_trace_address,\n        call_tx_hash,\n        contract_address,\n        dt,\n        data.input.*,\n        data.output.*\n    from base\n)\n\nselect /* REPARTITION(dt) */ *\nfrom final", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.dbt.is_incremental"], "nodes": ["model.ethereum_source.stg_ethereum__traces"]}, "config": {"enabled": true, "alias": null, "schema": "opensea", "database": null, "tags": ["chain_ethereum", "level_parse", "proj_opensea"], "meta": {}, "materialized": "incremental", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "file_format": "parquet", "partition_by": ["dt"], "incremental_strategy": "insert_overwrite", "post-hook": [], "pre-hook": [{"sql": "create or replace function opensea_wyvernexchangev1_guardedarrayreplace_calldecodeudf as \"io.iftech.sparkudf.hive.opensea_WyvernExchangeV1_guardedArrayReplace_CallDecodeUDF\" using jar \"s3a://ifcrypto/blockchain-dbt/jars/opensea_udf.jar\";", "transaction": true, "index": null}]}, "database": null, "schema": "ethereum_opensea", "fqn": ["ethereum_source", "codegen", "opensea", "WyvernExchangeV1_call_guardedArrayReplace"], "unique_id": "model.ethereum_source.WyvernExchangeV1_call_guardedArrayReplace", "package_name": "ethereum_source", "root_path": "/Users/songv/Code/jike/web3/dbt_ethereum_source", "path": "codegen/opensea/WyvernExchangeV1_call_guardedArrayReplace.sql", "original_file_path": "models/codegen/opensea/WyvernExchangeV1_call_guardedArrayReplace.sql", "name": "WyvernExchangeV1_call_guardedArrayReplace", "alias": "WyvernExchangeV1_call_guardedArrayReplace", "checksum": {"name": "sha256", "checksum": "b50818c882b03bb34c02c187d5533675bb984c76ec06d67506371ffdde3bb024"}, "tags": ["chain_ethereum", "level_parse", "proj_opensea"], "refs": [["stg_ethereum__traces"]], "sources": [], "description": "", "columns": {"array": {"name": "array", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "desired": {"name": "desired", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "mask": {"name": "mask", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "output_0": {"name": "output_0", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "call_success": {"name": "call_success", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "call_block_number": {"name": "call_block_number", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "call_block_time": {"name": "call_block_time", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "call_trace_address": {"name": "call_trace_address", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "call_tx_hash": {"name": "call_tx_hash", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "contract_address": {"name": "contract_address", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "dt": {"name": "dt", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "ethereum_source://models/codegen/opensea/schema.yml", "compiled_path": "target/compiled/ethereum_source/models/codegen/opensea/WyvernExchangeV1_call_guardedArrayReplace.sql", "build_path": null, "deferred": false, "unrendered_config": {"schema": "opensea", "tags": ["chain_ethereum", "level_parse", "proj_opensea"], "materialized": "incremental", "incremental_strategy": "insert_overwrite", "partition_by": ["dt"], "file_format": "parquet", "pre-hook": [{"sql": "create or replace function opensea_wyvernexchangev1_guardedarrayreplace_calldecodeudf as \"io.iftech.sparkudf.hive.opensea_WyvernExchangeV1_guardedArrayReplace_CallDecodeUDF\" using jar \"s3a://ifcrypto/blockchain-dbt/jars/opensea_udf.jar\";"}]}, "created_at": 1650535971.9357061, "compiled_sql": "\n\nwith base as (\n    select\n        status==1 as call_success,\n        block_number as call_block_number,\n        block_timestamp as call_block_time,\n        trace_address as call_trace_address,\n        transaction_hash as call_tx_hash,\n        to_address as contract_address,\n        dt,\n        opensea_wyvernexchangev1_guardedarrayreplace_calldecodeudf(unhex_input, unhex_output, '{\"constant\": true, \"inputs\": [{\"name\": \"array\", \"type\": \"bytes\"}, {\"name\": \"desired\", \"type\": \"bytes\"}, {\"name\": \"mask\", \"type\": \"bytes\"}], \"name\": \"guardedArrayReplace\", \"outputs\": [{\"name\": \"\", \"type\": \"bytes\"}], \"payable\": false, \"stateMutability\": \"pure\", \"type\": \"function\"}', 'guardedArrayReplace') as data\n    from ethereum_stg_ethereum.stg_ethereum__traces\n    where to_address = lower(\"0x7Be8076f4EA4A4AD08075C2508e481d6C946D12b\")\n    and address_hash = abs(hash(lower(\"0x7Be8076f4EA4A4AD08075C2508e481d6C946D12b\"))) % 10\n    and selector = \"0x30783233\"\n    and selector_hash = abs(hash(\"0x30783233\")) % 10\n\n    \n),\n\nfinal as (\n    select\n        call_success,\n        call_block_number,\n        call_block_time,\n        call_trace_address,\n        call_tx_hash,\n        contract_address,\n        dt,\n        data.input.*,\n        data.output.*\n    from base\n)\n\nselect /* REPARTITION(dt) */ *\nfrom final", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "ethereum_opensea.WyvernExchangeV1_call_guardedArrayReplace"}, "model.ethereum_source.WyvernExchangeV1_call_registry": {"raw_sql": "{{\n    config(\n        materialized='incremental',\n        incremental_strategy='insert_overwrite',\n        partition_by=['dt'],\n        file_format='parquet',\n        pre_hook={\n            'sql': 'create or replace function opensea_wyvernexchangev1_registry_calldecodeudf as \"io.iftech.sparkudf.hive.opensea_WyvernExchangeV1_registry_CallDecodeUDF\" using jar \"s3a://ifcrypto/blockchain-dbt/jars/opensea_udf.jar\";'\n        }\n    )\n}}\n\nwith base as (\n    select\n        status==1 as call_success,\n        block_number as call_block_number,\n        block_timestamp as call_block_time,\n        trace_address as call_trace_address,\n        transaction_hash as call_tx_hash,\n        to_address as contract_address,\n        dt,\n        opensea_wyvernexchangev1_registry_calldecodeudf(unhex_input, unhex_output, '{\"constant\": true, \"inputs\": [], \"name\": \"registry\", \"outputs\": [{\"name\": \"\", \"type\": \"address\"}], \"payable\": false, \"stateMutability\": \"view\", \"type\": \"function\"}', 'registry') as data\n    from {{ ref('stg_ethereum__traces') }}\n    where to_address = lower(\"0x7Be8076f4EA4A4AD08075C2508e481d6C946D12b\")\n    and address_hash = abs(hash(lower(\"0x7Be8076f4EA4A4AD08075C2508e481d6C946D12b\"))) % 10\n    and selector = \"0x30783762\"\n    and selector_hash = abs(hash(\"0x30783762\")) % 10\n\n    {% if is_incremental() %}\n      and dt = var('dt')\n    {% endif %}\n),\n\nfinal as (\n    select\n        call_success,\n        call_block_number,\n        call_block_time,\n        call_trace_address,\n        call_tx_hash,\n        contract_address,\n        dt,\n        data.input.*,\n        data.output.*\n    from base\n)\n\nselect /* REPARTITION(dt) */ *\nfrom final", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.dbt.is_incremental"], "nodes": ["model.ethereum_source.stg_ethereum__traces"]}, "config": {"enabled": true, "alias": null, "schema": "opensea", "database": null, "tags": ["chain_ethereum", "level_parse", "proj_opensea"], "meta": {}, "materialized": "incremental", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "file_format": "parquet", "partition_by": ["dt"], "incremental_strategy": "insert_overwrite", "post-hook": [], "pre-hook": [{"sql": "create or replace function opensea_wyvernexchangev1_registry_calldecodeudf as \"io.iftech.sparkudf.hive.opensea_WyvernExchangeV1_registry_CallDecodeUDF\" using jar \"s3a://ifcrypto/blockchain-dbt/jars/opensea_udf.jar\";", "transaction": true, "index": null}]}, "database": null, "schema": "ethereum_opensea", "fqn": ["ethereum_source", "codegen", "opensea", "WyvernExchangeV1_call_registry"], "unique_id": "model.ethereum_source.WyvernExchangeV1_call_registry", "package_name": "ethereum_source", "root_path": "/Users/songv/Code/jike/web3/dbt_ethereum_source", "path": "codegen/opensea/WyvernExchangeV1_call_registry.sql", "original_file_path": "models/codegen/opensea/WyvernExchangeV1_call_registry.sql", "name": "WyvernExchangeV1_call_registry", "alias": "WyvernExchangeV1_call_registry", "checksum": {"name": "sha256", "checksum": "7fb3dbb948fb5ce1028c39d27053136a836a232f50df0636b297c44728825610"}, "tags": ["chain_ethereum", "level_parse", "proj_opensea"], "refs": [["stg_ethereum__traces"]], "sources": [], "description": "", "columns": {"output_0": {"name": "output_0", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "call_success": {"name": "call_success", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "call_block_number": {"name": "call_block_number", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "call_block_time": {"name": "call_block_time", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "call_trace_address": {"name": "call_trace_address", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "call_tx_hash": {"name": "call_tx_hash", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "contract_address": {"name": "contract_address", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "dt": {"name": "dt", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "ethereum_source://models/codegen/opensea/schema.yml", "compiled_path": "target/compiled/ethereum_source/models/codegen/opensea/WyvernExchangeV1_call_registry.sql", "build_path": null, "deferred": false, "unrendered_config": {"schema": "opensea", "tags": ["chain_ethereum", "level_parse", "proj_opensea"], "materialized": "incremental", "incremental_strategy": "insert_overwrite", "partition_by": ["dt"], "file_format": "parquet", "pre-hook": [{"sql": "create or replace function opensea_wyvernexchangev1_registry_calldecodeudf as \"io.iftech.sparkudf.hive.opensea_WyvernExchangeV1_registry_CallDecodeUDF\" using jar \"s3a://ifcrypto/blockchain-dbt/jars/opensea_udf.jar\";"}]}, "created_at": 1650535971.971283, "compiled_sql": "\n\nwith base as (\n    select\n        status==1 as call_success,\n        block_number as call_block_number,\n        block_timestamp as call_block_time,\n        trace_address as call_trace_address,\n        transaction_hash as call_tx_hash,\n        to_address as contract_address,\n        dt,\n        opensea_wyvernexchangev1_registry_calldecodeudf(unhex_input, unhex_output, '{\"constant\": true, \"inputs\": [], \"name\": \"registry\", \"outputs\": [{\"name\": \"\", \"type\": \"address\"}], \"payable\": false, \"stateMutability\": \"view\", \"type\": \"function\"}', 'registry') as data\n    from ethereum_stg_ethereum.stg_ethereum__traces\n    where to_address = lower(\"0x7Be8076f4EA4A4AD08075C2508e481d6C946D12b\")\n    and address_hash = abs(hash(lower(\"0x7Be8076f4EA4A4AD08075C2508e481d6C946D12b\"))) % 10\n    and selector = \"0x30783762\"\n    and selector_hash = abs(hash(\"0x30783762\")) % 10\n\n    \n),\n\nfinal as (\n    select\n        call_success,\n        call_block_number,\n        call_block_time,\n        call_trace_address,\n        call_tx_hash,\n        contract_address,\n        dt,\n        data.input.*,\n        data.output.*\n    from base\n)\n\nselect /* REPARTITION(dt) */ *\nfrom final", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "ethereum_opensea.WyvernExchangeV1_call_registry"}, "model.ethereum_source.WyvernExchangeV2_evt_OrderApprovedPartOne": {"raw_sql": "{{\n    config(\n        materialized='incremental',\n        incremental_strategy='insert_overwrite',\n        partition_by=['dt'],\n        file_format='parquet',\n        pre_hook={\n            'sql': 'create or replace function opensea_wyvernexchangev2_orderapprovedpartone_eventdecodeudf as \"io.iftech.sparkudf.hive.opensea_WyvernExchangeV2_OrderApprovedPartOne_EventDecodeUDF\" using jar \"s3a://ifcrypto/blockchain-dbt/jars/opensea_udf.jar\";'\n        }\n    )\n}}\n\nwith base as (\n    select\n        block_number as evt_block_number,\n        block_timestamp as evt_block_time,\n        log_index as evt_index,\n        transaction_hash as evt_tx_hash,\n        address as contract_address,\n        dt,\n        opensea_wyvernexchangev2_orderapprovedpartone_eventdecodeudf(unhex_data, topics_arr, '{\"anonymous\": false, \"inputs\": [{\"indexed\": true, \"name\": \"hash\", \"type\": \"bytes32\"}, {\"indexed\": false, \"name\": \"exchange\", \"type\": \"address\"}, {\"indexed\": true, \"name\": \"maker\", \"type\": \"address\"}, {\"indexed\": false, \"name\": \"taker\", \"type\": \"address\"}, {\"indexed\": false, \"name\": \"makerRelayerFee\", \"type\": \"uint256\"}, {\"indexed\": false, \"name\": \"takerRelayerFee\", \"type\": \"uint256\"}, {\"indexed\": false, \"name\": \"makerProtocolFee\", \"type\": \"uint256\"}, {\"indexed\": false, \"name\": \"takerProtocolFee\", \"type\": \"uint256\"}, {\"indexed\": true, \"name\": \"feeRecipient\", \"type\": \"address\"}, {\"indexed\": false, \"name\": \"feeMethod\", \"type\": \"uint8\"}, {\"indexed\": false, \"name\": \"side\", \"type\": \"uint8\"}, {\"indexed\": false, \"name\": \"saleKind\", \"type\": \"uint8\"}, {\"indexed\": false, \"name\": \"target\", \"type\": \"address\"}], \"name\": \"OrderApprovedPartOne\", \"type\": \"event\"}', 'OrderApprovedPartOne') as data\n    from {{ ref('stg_ethereum__logs') }}\n    where address = lower(\"0x7f268357A8c2552623316e2562D90e642bB538E5\")\n    and address_hash = abs(hash(lower(\"0x7f268357A8c2552623316e2562D90e642bB538E5\"))) % 10\n    and selector = \"0x90c7f9f5b58c15f0f635bfb99f55d3d78fdbef3559e7d8abf5c81052a5276622\"\n    and selector_hash = abs(hash(\"0x90c7f9f5b58c15f0f635bfb99f55d3d78fdbef3559e7d8abf5c81052a5276622\")) % 10\n\n    {% if is_incremental() %}\n      and dt = var('dt')\n    {% endif %}\n),\n\nfinal as (\n    select\n        evt_block_number,\n        evt_block_time,\n        evt_index,\n        evt_tx_hash,\n        contract_address,\n        dt,\n        data.input.*\n    from base\n)\n\nselect /* REPARTITION(dt) */ *\nfrom final", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.dbt.is_incremental"], "nodes": ["model.ethereum_source.stg_ethereum__logs"]}, "config": {"enabled": true, "alias": null, "schema": "opensea", "database": null, "tags": ["chain_ethereum", "level_parse", "proj_opensea"], "meta": {}, "materialized": "incremental", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "file_format": "parquet", "partition_by": ["dt"], "incremental_strategy": "insert_overwrite", "post-hook": [], "pre-hook": [{"sql": "create or replace function opensea_wyvernexchangev2_orderapprovedpartone_eventdecodeudf as \"io.iftech.sparkudf.hive.opensea_WyvernExchangeV2_OrderApprovedPartOne_EventDecodeUDF\" using jar \"s3a://ifcrypto/blockchain-dbt/jars/opensea_udf.jar\";", "transaction": true, "index": null}]}, "database": null, "schema": "ethereum_opensea", "fqn": ["ethereum_source", "codegen", "opensea", "WyvernExchangeV2_evt_OrderApprovedPartOne"], "unique_id": "model.ethereum_source.WyvernExchangeV2_evt_OrderApprovedPartOne", "package_name": "ethereum_source", "root_path": "/Users/songv/Code/jike/web3/dbt_ethereum_source", "path": "codegen/opensea/WyvernExchangeV2_evt_OrderApprovedPartOne.sql", "original_file_path": "models/codegen/opensea/WyvernExchangeV2_evt_OrderApprovedPartOne.sql", "name": "WyvernExchangeV2_evt_OrderApprovedPartOne", "alias": "WyvernExchangeV2_evt_OrderApprovedPartOne", "checksum": {"name": "sha256", "checksum": "49f331a2e03b4b52de97cc639b7798776504359438d4c3de14da0a78a3debbb8"}, "tags": ["chain_ethereum", "level_parse", "proj_opensea"], "refs": [["stg_ethereum__logs"]], "sources": [], "description": "", "columns": {"hash": {"name": "hash", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "exchange": {"name": "exchange", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "maker": {"name": "maker", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "taker": {"name": "taker", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "makerRelayerFee": {"name": "makerRelayerFee", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "takerRelayerFee": {"name": "takerRelayerFee", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "makerProtocolFee": {"name": "makerProtocolFee", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "takerProtocolFee": {"name": "takerProtocolFee", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "feeRecipient": {"name": "feeRecipient", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "feeMethod": {"name": "feeMethod", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "side": {"name": "side", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "saleKind": {"name": "saleKind", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "target": {"name": "target", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "evt_block_number": {"name": "evt_block_number", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "evt_block_time": {"name": "evt_block_time", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "evt_index": {"name": "evt_index", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "evt_tx_hash": {"name": "evt_tx_hash", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "contract_address": {"name": "contract_address", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "dt": {"name": "dt", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "ethereum_source://models/codegen/opensea/schema.yml", "compiled_path": "target/compiled/ethereum_source/models/codegen/opensea/WyvernExchangeV2_evt_OrderApprovedPartOne.sql", "build_path": null, "deferred": false, "unrendered_config": {"schema": "opensea", "tags": ["chain_ethereum", "level_parse", "proj_opensea"], "materialized": "incremental", "incremental_strategy": "insert_overwrite", "partition_by": ["dt"], "file_format": "parquet", "pre-hook": [{"sql": "create or replace function opensea_wyvernexchangev2_orderapprovedpartone_eventdecodeudf as \"io.iftech.sparkudf.hive.opensea_WyvernExchangeV2_OrderApprovedPartOne_EventDecodeUDF\" using jar \"s3a://ifcrypto/blockchain-dbt/jars/opensea_udf.jar\";"}]}, "created_at": 1650535972.0024478, "compiled_sql": "\n\nwith base as (\n    select\n        block_number as evt_block_number,\n        block_timestamp as evt_block_time,\n        log_index as evt_index,\n        transaction_hash as evt_tx_hash,\n        address as contract_address,\n        dt,\n        opensea_wyvernexchangev2_orderapprovedpartone_eventdecodeudf(unhex_data, topics_arr, '{\"anonymous\": false, \"inputs\": [{\"indexed\": true, \"name\": \"hash\", \"type\": \"bytes32\"}, {\"indexed\": false, \"name\": \"exchange\", \"type\": \"address\"}, {\"indexed\": true, \"name\": \"maker\", \"type\": \"address\"}, {\"indexed\": false, \"name\": \"taker\", \"type\": \"address\"}, {\"indexed\": false, \"name\": \"makerRelayerFee\", \"type\": \"uint256\"}, {\"indexed\": false, \"name\": \"takerRelayerFee\", \"type\": \"uint256\"}, {\"indexed\": false, \"name\": \"makerProtocolFee\", \"type\": \"uint256\"}, {\"indexed\": false, \"name\": \"takerProtocolFee\", \"type\": \"uint256\"}, {\"indexed\": true, \"name\": \"feeRecipient\", \"type\": \"address\"}, {\"indexed\": false, \"name\": \"feeMethod\", \"type\": \"uint8\"}, {\"indexed\": false, \"name\": \"side\", \"type\": \"uint8\"}, {\"indexed\": false, \"name\": \"saleKind\", \"type\": \"uint8\"}, {\"indexed\": false, \"name\": \"target\", \"type\": \"address\"}], \"name\": \"OrderApprovedPartOne\", \"type\": \"event\"}', 'OrderApprovedPartOne') as data\n    from ethereum_stg_ethereum.stg_ethereum__logs\n    where address = lower(\"0x7f268357A8c2552623316e2562D90e642bB538E5\")\n    and address_hash = abs(hash(lower(\"0x7f268357A8c2552623316e2562D90e642bB538E5\"))) % 10\n    and selector = \"0x90c7f9f5b58c15f0f635bfb99f55d3d78fdbef3559e7d8abf5c81052a5276622\"\n    and selector_hash = abs(hash(\"0x90c7f9f5b58c15f0f635bfb99f55d3d78fdbef3559e7d8abf5c81052a5276622\")) % 10\n\n    \n),\n\nfinal as (\n    select\n        evt_block_number,\n        evt_block_time,\n        evt_index,\n        evt_tx_hash,\n        contract_address,\n        dt,\n        data.input.*\n    from base\n)\n\nselect /* REPARTITION(dt) */ *\nfrom final", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "ethereum_opensea.WyvernExchangeV2_evt_OrderApprovedPartOne"}, "model.ethereum_source.WyvernExchangeV2_call_guardedArrayReplace": {"raw_sql": "{{\n    config(\n        materialized='incremental',\n        incremental_strategy='insert_overwrite',\n        partition_by=['dt'],\n        file_format='parquet',\n        pre_hook={\n            'sql': 'create or replace function opensea_wyvernexchangev2_guardedarrayreplace_calldecodeudf as \"io.iftech.sparkudf.hive.opensea_WyvernExchangeV2_guardedArrayReplace_CallDecodeUDF\" using jar \"s3a://ifcrypto/blockchain-dbt/jars/opensea_udf.jar\";'\n        }\n    )\n}}\n\nwith base as (\n    select\n        status==1 as call_success,\n        block_number as call_block_number,\n        block_timestamp as call_block_time,\n        trace_address as call_trace_address,\n        transaction_hash as call_tx_hash,\n        to_address as contract_address,\n        dt,\n        opensea_wyvernexchangev2_guardedarrayreplace_calldecodeudf(unhex_input, unhex_output, '{\"constant\": true, \"inputs\": [{\"name\": \"array\", \"type\": \"bytes\"}, {\"name\": \"desired\", \"type\": \"bytes\"}, {\"name\": \"mask\", \"type\": \"bytes\"}], \"name\": \"guardedArrayReplace\", \"outputs\": [{\"name\": \"\", \"type\": \"bytes\"}], \"payable\": false, \"stateMutability\": \"pure\", \"type\": \"function\"}', 'guardedArrayReplace') as data\n    from {{ ref('stg_ethereum__traces') }}\n    where to_address = lower(\"0x7f268357A8c2552623316e2562D90e642bB538E5\")\n    and address_hash = abs(hash(lower(\"0x7f268357A8c2552623316e2562D90e642bB538E5\"))) % 10\n    and selector = \"0x30783233\"\n    and selector_hash = abs(hash(\"0x30783233\")) % 10\n\n    {% if is_incremental() %}\n      and dt = var('dt')\n    {% endif %}\n),\n\nfinal as (\n    select\n        call_success,\n        call_block_number,\n        call_block_time,\n        call_trace_address,\n        call_tx_hash,\n        contract_address,\n        dt,\n        data.input.*,\n        data.output.*\n    from base\n)\n\nselect /* REPARTITION(dt) */ *\nfrom final", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.dbt.is_incremental"], "nodes": ["model.ethereum_source.stg_ethereum__traces"]}, "config": {"enabled": true, "alias": null, "schema": "opensea", "database": null, "tags": ["chain_ethereum", "level_parse", "proj_opensea"], "meta": {}, "materialized": "incremental", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "file_format": "parquet", "partition_by": ["dt"], "incremental_strategy": "insert_overwrite", "post-hook": [], "pre-hook": [{"sql": "create or replace function opensea_wyvernexchangev2_guardedarrayreplace_calldecodeudf as \"io.iftech.sparkudf.hive.opensea_WyvernExchangeV2_guardedArrayReplace_CallDecodeUDF\" using jar \"s3a://ifcrypto/blockchain-dbt/jars/opensea_udf.jar\";", "transaction": true, "index": null}]}, "database": null, "schema": "ethereum_opensea", "fqn": ["ethereum_source", "codegen", "opensea", "WyvernExchangeV2_call_guardedArrayReplace"], "unique_id": "model.ethereum_source.WyvernExchangeV2_call_guardedArrayReplace", "package_name": "ethereum_source", "root_path": "/Users/songv/Code/jike/web3/dbt_ethereum_source", "path": "codegen/opensea/WyvernExchangeV2_call_guardedArrayReplace.sql", "original_file_path": "models/codegen/opensea/WyvernExchangeV2_call_guardedArrayReplace.sql", "name": "WyvernExchangeV2_call_guardedArrayReplace", "alias": "WyvernExchangeV2_call_guardedArrayReplace", "checksum": {"name": "sha256", "checksum": "856c6e715a6b968056b03eb24cfa8bb448897b9799cf34dd18f19b3576245ff7"}, "tags": ["chain_ethereum", "level_parse", "proj_opensea"], "refs": [["stg_ethereum__traces"]], "sources": [], "description": "", "columns": {"array": {"name": "array", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "desired": {"name": "desired", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "mask": {"name": "mask", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "output_0": {"name": "output_0", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "call_success": {"name": "call_success", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "call_block_number": {"name": "call_block_number", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "call_block_time": {"name": "call_block_time", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "call_trace_address": {"name": "call_trace_address", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "call_tx_hash": {"name": "call_tx_hash", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "contract_address": {"name": "contract_address", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "dt": {"name": "dt", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "ethereum_source://models/codegen/opensea/schema.yml", "compiled_path": "target/compiled/ethereum_source/models/codegen/opensea/WyvernExchangeV2_call_guardedArrayReplace.sql", "build_path": null, "deferred": false, "unrendered_config": {"schema": "opensea", "tags": ["chain_ethereum", "level_parse", "proj_opensea"], "materialized": "incremental", "incremental_strategy": "insert_overwrite", "partition_by": ["dt"], "file_format": "parquet", "pre-hook": [{"sql": "create or replace function opensea_wyvernexchangev2_guardedarrayreplace_calldecodeudf as \"io.iftech.sparkudf.hive.opensea_WyvernExchangeV2_guardedArrayReplace_CallDecodeUDF\" using jar \"s3a://ifcrypto/blockchain-dbt/jars/opensea_udf.jar\";"}]}, "created_at": 1650535972.0248861, "compiled_sql": "\n\nwith base as (\n    select\n        status==1 as call_success,\n        block_number as call_block_number,\n        block_timestamp as call_block_time,\n        trace_address as call_trace_address,\n        transaction_hash as call_tx_hash,\n        to_address as contract_address,\n        dt,\n        opensea_wyvernexchangev2_guardedarrayreplace_calldecodeudf(unhex_input, unhex_output, '{\"constant\": true, \"inputs\": [{\"name\": \"array\", \"type\": \"bytes\"}, {\"name\": \"desired\", \"type\": \"bytes\"}, {\"name\": \"mask\", \"type\": \"bytes\"}], \"name\": \"guardedArrayReplace\", \"outputs\": [{\"name\": \"\", \"type\": \"bytes\"}], \"payable\": false, \"stateMutability\": \"pure\", \"type\": \"function\"}', 'guardedArrayReplace') as data\n    from ethereum_stg_ethereum.stg_ethereum__traces\n    where to_address = lower(\"0x7f268357A8c2552623316e2562D90e642bB538E5\")\n    and address_hash = abs(hash(lower(\"0x7f268357A8c2552623316e2562D90e642bB538E5\"))) % 10\n    and selector = \"0x30783233\"\n    and selector_hash = abs(hash(\"0x30783233\")) % 10\n\n    \n),\n\nfinal as (\n    select\n        call_success,\n        call_block_number,\n        call_block_time,\n        call_trace_address,\n        call_tx_hash,\n        contract_address,\n        dt,\n        data.input.*,\n        data.output.*\n    from base\n)\n\nselect /* REPARTITION(dt) */ *\nfrom final", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "ethereum_opensea.WyvernExchangeV2_call_guardedArrayReplace"}, "model.ethereum_source.WyvernExchangeV1_call_renounceOwnership": {"raw_sql": "select /* REPARTITION(dt) */\n    status==1 as call_success,\n    block_number as call_block_number,\n    block_timestamp as call_block_time,\n    trace_address as call_trace_address,\n    transaction_hash as call_tx_hash,\n    to_address as contract_address,\n    dt\nfrom {{ ref('stg_ethereum__traces') }}\nwhere to_address = lower(\"0x7Be8076f4EA4A4AD08075C2508e481d6C946D12b\")\nand address_hash = abs(hash(lower(\"0x7Be8076f4EA4A4AD08075C2508e481d6C946D12b\"))) % 10\nand selector = \"0x30783731353031386136\"\nand selector_hash = abs(hash(\"0x30783731353031386136\")) % 10\n\n{% if is_incremental() %}\n  and dt = var('dt')\n{% endif %}", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.dbt.is_incremental"], "nodes": ["model.ethereum_source.stg_ethereum__traces"]}, "config": {"enabled": true, "alias": null, "schema": "opensea", "database": null, "tags": ["chain_ethereum", "level_parse", "proj_opensea"], "meta": {}, "materialized": "view", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "post-hook": [], "pre-hook": []}, "database": null, "schema": "ethereum_opensea", "fqn": ["ethereum_source", "codegen", "opensea", "WyvernExchangeV1_call_renounceOwnership"], "unique_id": "model.ethereum_source.WyvernExchangeV1_call_renounceOwnership", "package_name": "ethereum_source", "root_path": "/Users/songv/Code/jike/web3/dbt_ethereum_source", "path": "codegen/opensea/WyvernExchangeV1_call_renounceOwnership.sql", "original_file_path": "models/codegen/opensea/WyvernExchangeV1_call_renounceOwnership.sql", "name": "WyvernExchangeV1_call_renounceOwnership", "alias": "WyvernExchangeV1_call_renounceOwnership", "checksum": {"name": "sha256", "checksum": "4cee424ed43b4642705496fa1033db15b52275461d1cf6f30c03286d4651701e"}, "tags": ["chain_ethereum", "level_parse", "proj_opensea"], "refs": [["stg_ethereum__traces"]], "sources": [], "description": "", "columns": {"call_success": {"name": "call_success", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "call_block_number": {"name": "call_block_number", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "call_block_time": {"name": "call_block_time", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "call_trace_address": {"name": "call_trace_address", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "call_tx_hash": {"name": "call_tx_hash", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "contract_address": {"name": "contract_address", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "dt": {"name": "dt", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "ethereum_source://models/codegen/opensea/schema.yml", "compiled_path": "target/compiled/ethereum_source/models/codegen/opensea/WyvernExchangeV1_call_renounceOwnership.sql", "build_path": null, "deferred": false, "unrendered_config": {"schema": "opensea", "tags": ["chain_ethereum", "level_parse", "proj_opensea"]}, "created_at": 1650535971.9604301, "compiled_sql": "select /* REPARTITION(dt) */\n    status==1 as call_success,\n    block_number as call_block_number,\n    block_timestamp as call_block_time,\n    trace_address as call_trace_address,\n    transaction_hash as call_tx_hash,\n    to_address as contract_address,\n    dt\nfrom ethereum_stg_ethereum.stg_ethereum__traces\nwhere to_address = lower(\"0x7Be8076f4EA4A4AD08075C2508e481d6C946D12b\")\nand address_hash = abs(hash(lower(\"0x7Be8076f4EA4A4AD08075C2508e481d6C946D12b\"))) % 10\nand selector = \"0x30783731353031386136\"\nand selector_hash = abs(hash(\"0x30783731353031386136\")) % 10\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "ethereum_opensea.WyvernExchangeV1_call_renounceOwnership"}, "model.ethereum_source.OpenSeaENSResolver_evt_NameChanged": {"raw_sql": "{{\n    config(\n        materialized='incremental',\n        incremental_strategy='insert_overwrite',\n        partition_by=['dt'],\n        file_format='parquet',\n        pre_hook={\n            'sql': 'create or replace function opensea_openseaensresolver_namechanged_eventdecodeudf as \"io.iftech.sparkudf.hive.opensea_OpenSeaENSResolver_NameChanged_EventDecodeUDF\" using jar \"s3a://ifcrypto/blockchain-dbt/jars/opensea_udf.jar\";'\n        }\n    )\n}}\n\nwith base as (\n    select\n        block_number as evt_block_number,\n        block_timestamp as evt_block_time,\n        log_index as evt_index,\n        transaction_hash as evt_tx_hash,\n        address as contract_address,\n        dt,\n        opensea_openseaensresolver_namechanged_eventdecodeudf(unhex_data, topics_arr, '{\"anonymous\": false, \"inputs\": [{\"indexed\": true, \"name\": \"node\", \"type\": \"bytes32\"}, {\"indexed\": false, \"name\": \"name\", \"type\": \"string\"}], \"name\": \"NameChanged\", \"type\": \"event\"}', 'NameChanged') as data\n    from {{ ref('stg_ethereum__logs') }}\n    where address = lower(\"0x9c4e9cce4780062942a7fe34fa2fa7316c872956\")\n    and address_hash = abs(hash(lower(\"0x9c4e9cce4780062942a7fe34fa2fa7316c872956\"))) % 10\n    and selector = \"0xb7d29e911041e8d9b843369e890bcb72c9388692ba48b65ac54e7214c4c348f7\"\n    and selector_hash = abs(hash(\"0xb7d29e911041e8d9b843369e890bcb72c9388692ba48b65ac54e7214c4c348f7\")) % 10\n\n    {% if is_incremental() %}\n      and dt = var('dt')\n    {% endif %}\n),\n\nfinal as (\n    select\n        evt_block_number,\n        evt_block_time,\n        evt_index,\n        evt_tx_hash,\n        contract_address,\n        dt,\n        data.input.*\n    from base\n)\n\nselect /* REPARTITION(dt) */ *\nfrom final", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.dbt.is_incremental"], "nodes": ["model.ethereum_source.stg_ethereum__logs"]}, "config": {"enabled": true, "alias": null, "schema": "opensea", "database": null, "tags": ["chain_ethereum", "level_parse", "proj_opensea"], "meta": {}, "materialized": "incremental", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "file_format": "parquet", "partition_by": ["dt"], "incremental_strategy": "insert_overwrite", "post-hook": [], "pre-hook": [{"sql": "create or replace function opensea_openseaensresolver_namechanged_eventdecodeudf as \"io.iftech.sparkudf.hive.opensea_OpenSeaENSResolver_NameChanged_EventDecodeUDF\" using jar \"s3a://ifcrypto/blockchain-dbt/jars/opensea_udf.jar\";", "transaction": true, "index": null}]}, "database": null, "schema": "ethereum_opensea", "fqn": ["ethereum_source", "codegen", "opensea", "OpenSeaENSResolver_evt_NameChanged"], "unique_id": "model.ethereum_source.OpenSeaENSResolver_evt_NameChanged", "package_name": "ethereum_source", "root_path": "/Users/songv/Code/jike/web3/dbt_ethereum_source", "path": "codegen/opensea/OpenSeaENSResolver_evt_NameChanged.sql", "original_file_path": "models/codegen/opensea/OpenSeaENSResolver_evt_NameChanged.sql", "name": "OpenSeaENSResolver_evt_NameChanged", "alias": "OpenSeaENSResolver_evt_NameChanged", "checksum": {"name": "sha256", "checksum": "64c4ecebda7fd5f5b5249a2e83e4183f37cac54d73f76b8f797f37566c393edb"}, "tags": ["chain_ethereum", "level_parse", "proj_opensea"], "refs": [["stg_ethereum__logs"]], "sources": [], "description": "", "columns": {"node": {"name": "node", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "name": {"name": "name", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "evt_block_number": {"name": "evt_block_number", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "evt_block_time": {"name": "evt_block_time", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "evt_index": {"name": "evt_index", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "evt_tx_hash": {"name": "evt_tx_hash", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "contract_address": {"name": "contract_address", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "dt": {"name": "dt", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "ethereum_source://models/codegen/opensea/schema.yml", "compiled_path": "target/compiled/ethereum_source/models/codegen/opensea/OpenSeaENSResolver_evt_NameChanged.sql", "build_path": null, "deferred": false, "unrendered_config": {"schema": "opensea", "tags": ["chain_ethereum", "level_parse", "proj_opensea"], "materialized": "incremental", "incremental_strategy": "insert_overwrite", "partition_by": ["dt"], "file_format": "parquet", "pre-hook": [{"sql": "create or replace function opensea_openseaensresolver_namechanged_eventdecodeudf as \"io.iftech.sparkudf.hive.opensea_OpenSeaENSResolver_NameChanged_EventDecodeUDF\" using jar \"s3a://ifcrypto/blockchain-dbt/jars/opensea_udf.jar\";"}]}, "created_at": 1650535972.103178, "compiled_sql": "\n\nwith base as (\n    select\n        block_number as evt_block_number,\n        block_timestamp as evt_block_time,\n        log_index as evt_index,\n        transaction_hash as evt_tx_hash,\n        address as contract_address,\n        dt,\n        opensea_openseaensresolver_namechanged_eventdecodeudf(unhex_data, topics_arr, '{\"anonymous\": false, \"inputs\": [{\"indexed\": true, \"name\": \"node\", \"type\": \"bytes32\"}, {\"indexed\": false, \"name\": \"name\", \"type\": \"string\"}], \"name\": \"NameChanged\", \"type\": \"event\"}', 'NameChanged') as data\n    from ethereum_stg_ethereum.stg_ethereum__logs\n    where address = lower(\"0x9c4e9cce4780062942a7fe34fa2fa7316c872956\")\n    and address_hash = abs(hash(lower(\"0x9c4e9cce4780062942a7fe34fa2fa7316c872956\"))) % 10\n    and selector = \"0xb7d29e911041e8d9b843369e890bcb72c9388692ba48b65ac54e7214c4c348f7\"\n    and selector_hash = abs(hash(\"0xb7d29e911041e8d9b843369e890bcb72c9388692ba48b65ac54e7214c4c348f7\")) % 10\n\n    \n),\n\nfinal as (\n    select\n        evt_block_number,\n        evt_block_time,\n        evt_index,\n        evt_tx_hash,\n        contract_address,\n        dt,\n        data.input.*\n    from base\n)\n\nselect /* REPARTITION(dt) */ *\nfrom final", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "ethereum_opensea.OpenSeaENSResolver_evt_NameChanged"}, "model.ethereum_source.WyvernExchangeV2_call_validateOrderParameters_": {"raw_sql": "{{\n    config(\n        materialized='incremental',\n        incremental_strategy='insert_overwrite',\n        partition_by=['dt'],\n        file_format='parquet',\n        pre_hook={\n            'sql': 'create or replace function opensea_wyvernexchangev2_validateorderparameters__calldecodeudf as \"io.iftech.sparkudf.hive.opensea_WyvernExchangeV2_validateOrderParameters__CallDecodeUDF\" using jar \"s3a://ifcrypto/blockchain-dbt/jars/opensea_udf.jar\";'\n        }\n    )\n}}\n\nwith base as (\n    select\n        status==1 as call_success,\n        block_number as call_block_number,\n        block_timestamp as call_block_time,\n        trace_address as call_trace_address,\n        transaction_hash as call_tx_hash,\n        to_address as contract_address,\n        dt,\n        opensea_wyvernexchangev2_validateorderparameters__calldecodeudf(unhex_input, unhex_output, '{\"constant\": true, \"inputs\": [{\"name\": \"addrs\", \"type\": \"address[7]\"}, {\"name\": \"uints\", \"type\": \"uint256[9]\"}, {\"name\": \"feeMethod\", \"type\": \"uint8\"}, {\"name\": \"side\", \"type\": \"uint8\"}, {\"name\": \"saleKind\", \"type\": \"uint8\"}, {\"name\": \"howToCall\", \"type\": \"uint8\"}, {\"name\": \"calldata\", \"type\": \"bytes\"}, {\"name\": \"replacementPattern\", \"type\": \"bytes\"}, {\"name\": \"staticExtradata\", \"type\": \"bytes\"}], \"name\": \"validateOrderParameters_\", \"outputs\": [{\"name\": \"\", \"type\": \"bool\"}], \"payable\": false, \"stateMutability\": \"view\", \"type\": \"function\"}', 'validateOrderParameters_') as data\n    from {{ ref('stg_ethereum__traces') }}\n    where to_address = lower(\"0x7f268357A8c2552623316e2562D90e642bB538E5\")\n    and address_hash = abs(hash(lower(\"0x7f268357A8c2552623316e2562D90e642bB538E5\"))) % 10\n    and selector = \"0x30786361\"\n    and selector_hash = abs(hash(\"0x30786361\")) % 10\n\n    {% if is_incremental() %}\n      and dt = var('dt')\n    {% endif %}\n),\n\nfinal as (\n    select\n        call_success,\n        call_block_number,\n        call_block_time,\n        call_trace_address,\n        call_tx_hash,\n        contract_address,\n        dt,\n        data.input.*,\n        data.output.*\n    from base\n)\n\nselect /* REPARTITION(dt) */ *\nfrom final", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.dbt.is_incremental"], "nodes": ["model.ethereum_source.stg_ethereum__traces"]}, "config": {"enabled": true, "alias": null, "schema": "opensea", "database": null, "tags": ["chain_ethereum", "level_parse", "proj_opensea"], "meta": {}, "materialized": "incremental", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "file_format": "parquet", "partition_by": ["dt"], "incremental_strategy": "insert_overwrite", "post-hook": [], "pre-hook": [{"sql": "create or replace function opensea_wyvernexchangev2_validateorderparameters__calldecodeudf as \"io.iftech.sparkudf.hive.opensea_WyvernExchangeV2_validateOrderParameters__CallDecodeUDF\" using jar \"s3a://ifcrypto/blockchain-dbt/jars/opensea_udf.jar\";", "transaction": true, "index": null}]}, "database": null, "schema": "ethereum_opensea", "fqn": ["ethereum_source", "codegen", "opensea", "WyvernExchangeV2_call_validateOrderParameters_"], "unique_id": "model.ethereum_source.WyvernExchangeV2_call_validateOrderParameters_", "package_name": "ethereum_source", "root_path": "/Users/songv/Code/jike/web3/dbt_ethereum_source", "path": "codegen/opensea/WyvernExchangeV2_call_validateOrderParameters_.sql", "original_file_path": "models/codegen/opensea/WyvernExchangeV2_call_validateOrderParameters_.sql", "name": "WyvernExchangeV2_call_validateOrderParameters_", "alias": "WyvernExchangeV2_call_validateOrderParameters_", "checksum": {"name": "sha256", "checksum": "1729de359baede135458c277f90ac515d59fc343f8c8f9eae0a82cae499877aa"}, "tags": ["chain_ethereum", "level_parse", "proj_opensea"], "refs": [["stg_ethereum__traces"]], "sources": [], "description": "", "columns": {"addrs": {"name": "addrs", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "uints": {"name": "uints", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "feeMethod": {"name": "feeMethod", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "side": {"name": "side", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "saleKind": {"name": "saleKind", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "howToCall": {"name": "howToCall", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "calldata": {"name": "calldata", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "replacementPattern": {"name": "replacementPattern", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "staticExtradata": {"name": "staticExtradata", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "output_0": {"name": "output_0", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "call_success": {"name": "call_success", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "call_block_number": {"name": "call_block_number", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "call_block_time": {"name": "call_block_time", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "call_trace_address": {"name": "call_trace_address", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "call_tx_hash": {"name": "call_tx_hash", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "contract_address": {"name": "contract_address", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "dt": {"name": "dt", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "ethereum_source://models/codegen/opensea/schema.yml", "compiled_path": "target/compiled/ethereum_source/models/codegen/opensea/WyvernExchangeV2_call_validateOrderParameters_.sql", "build_path": null, "deferred": false, "unrendered_config": {"schema": "opensea", "tags": ["chain_ethereum", "level_parse", "proj_opensea"], "materialized": "incremental", "incremental_strategy": "insert_overwrite", "partition_by": ["dt"], "file_format": "parquet", "pre-hook": [{"sql": "create or replace function opensea_wyvernexchangev2_validateorderparameters__calldecodeudf as \"io.iftech.sparkudf.hive.opensea_WyvernExchangeV2_validateOrderParameters__CallDecodeUDF\" using jar \"s3a://ifcrypto/blockchain-dbt/jars/opensea_udf.jar\";"}]}, "created_at": 1650535972.081811, "compiled_sql": "\n\nwith base as (\n    select\n        status==1 as call_success,\n        block_number as call_block_number,\n        block_timestamp as call_block_time,\n        trace_address as call_trace_address,\n        transaction_hash as call_tx_hash,\n        to_address as contract_address,\n        dt,\n        opensea_wyvernexchangev2_validateorderparameters__calldecodeudf(unhex_input, unhex_output, '{\"constant\": true, \"inputs\": [{\"name\": \"addrs\", \"type\": \"address[7]\"}, {\"name\": \"uints\", \"type\": \"uint256[9]\"}, {\"name\": \"feeMethod\", \"type\": \"uint8\"}, {\"name\": \"side\", \"type\": \"uint8\"}, {\"name\": \"saleKind\", \"type\": \"uint8\"}, {\"name\": \"howToCall\", \"type\": \"uint8\"}, {\"name\": \"calldata\", \"type\": \"bytes\"}, {\"name\": \"replacementPattern\", \"type\": \"bytes\"}, {\"name\": \"staticExtradata\", \"type\": \"bytes\"}], \"name\": \"validateOrderParameters_\", \"outputs\": [{\"name\": \"\", \"type\": \"bool\"}], \"payable\": false, \"stateMutability\": \"view\", \"type\": \"function\"}', 'validateOrderParameters_') as data\n    from ethereum_stg_ethereum.stg_ethereum__traces\n    where to_address = lower(\"0x7f268357A8c2552623316e2562D90e642bB538E5\")\n    and address_hash = abs(hash(lower(\"0x7f268357A8c2552623316e2562D90e642bB538E5\"))) % 10\n    and selector = \"0x30786361\"\n    and selector_hash = abs(hash(\"0x30786361\")) % 10\n\n    \n),\n\nfinal as (\n    select\n        call_success,\n        call_block_number,\n        call_block_time,\n        call_trace_address,\n        call_tx_hash,\n        contract_address,\n        dt,\n        data.input.*,\n        data.output.*\n    from base\n)\n\nselect /* REPARTITION(dt) */ *\nfrom final", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "ethereum_opensea.WyvernExchangeV2_call_validateOrderParameters_"}, "model.ethereum_source.OpenSeaENSResolver_call_getTokenId": {"raw_sql": "{{\n    config(\n        materialized='incremental',\n        incremental_strategy='insert_overwrite',\n        partition_by=['dt'],\n        file_format='parquet',\n        pre_hook={\n            'sql': 'create or replace function opensea_openseaensresolver_gettokenid_calldecodeudf as \"io.iftech.sparkudf.hive.opensea_OpenSeaENSResolver_getTokenId_CallDecodeUDF\" using jar \"s3a://ifcrypto/blockchain-dbt/jars/opensea_udf.jar\";'\n        }\n    )\n}}\n\nwith base as (\n    select\n        status==1 as call_success,\n        block_number as call_block_number,\n        block_timestamp as call_block_time,\n        trace_address as call_trace_address,\n        transaction_hash as call_tx_hash,\n        to_address as contract_address,\n        dt,\n        opensea_openseaensresolver_gettokenid_calldecodeudf(unhex_input, unhex_output, '{\"constant\": true, \"inputs\": [{\"name\": \"node\", \"type\": \"bytes32\"}], \"name\": \"getTokenId\", \"outputs\": [{\"name\": \"\", \"type\": \"uint256\"}], \"payable\": false, \"stateMutability\": \"view\", \"type\": \"function\"}', 'getTokenId') as data\n    from {{ ref('stg_ethereum__traces') }}\n    where to_address = lower(\"0x9c4e9cce4780062942a7fe34fa2fa7316c872956\")\n    and address_hash = abs(hash(lower(\"0x9c4e9cce4780062942a7fe34fa2fa7316c872956\"))) % 10\n    and selector = \"0x30786339\"\n    and selector_hash = abs(hash(\"0x30786339\")) % 10\n\n    {% if is_incremental() %}\n      and dt = var('dt')\n    {% endif %}\n),\n\nfinal as (\n    select\n        call_success,\n        call_block_number,\n        call_block_time,\n        call_trace_address,\n        call_tx_hash,\n        contract_address,\n        dt,\n        data.input.*,\n        data.output.*\n    from base\n)\n\nselect /* REPARTITION(dt) */ *\nfrom final", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.dbt.is_incremental"], "nodes": ["model.ethereum_source.stg_ethereum__traces"]}, "config": {"enabled": true, "alias": null, "schema": "opensea", "database": null, "tags": ["chain_ethereum", "level_parse", "proj_opensea"], "meta": {}, "materialized": "incremental", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "file_format": "parquet", "partition_by": ["dt"], "incremental_strategy": "insert_overwrite", "post-hook": [], "pre-hook": [{"sql": "create or replace function opensea_openseaensresolver_gettokenid_calldecodeudf as \"io.iftech.sparkudf.hive.opensea_OpenSeaENSResolver_getTokenId_CallDecodeUDF\" using jar \"s3a://ifcrypto/blockchain-dbt/jars/opensea_udf.jar\";", "transaction": true, "index": null}]}, "database": null, "schema": "ethereum_opensea", "fqn": ["ethereum_source", "codegen", "opensea", "OpenSeaENSResolver_call_getTokenId"], "unique_id": "model.ethereum_source.OpenSeaENSResolver_call_getTokenId", "package_name": "ethereum_source", "root_path": "/Users/songv/Code/jike/web3/dbt_ethereum_source", "path": "codegen/opensea/OpenSeaENSResolver_call_getTokenId.sql", "original_file_path": "models/codegen/opensea/OpenSeaENSResolver_call_getTokenId.sql", "name": "OpenSeaENSResolver_call_getTokenId", "alias": "OpenSeaENSResolver_call_getTokenId", "checksum": {"name": "sha256", "checksum": "87ae9f656081f97036fe94f0ea523c93aa064dbc8b9e915b096efe1529aa658e"}, "tags": ["chain_ethereum", "level_parse", "proj_opensea"], "refs": [["stg_ethereum__traces"]], "sources": [], "description": "", "columns": {"node": {"name": "node", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "output_0": {"name": "output_0", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "call_success": {"name": "call_success", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "call_block_number": {"name": "call_block_number", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "call_block_time": {"name": "call_block_time", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "call_trace_address": {"name": "call_trace_address", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "call_tx_hash": {"name": "call_tx_hash", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "contract_address": {"name": "contract_address", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "dt": {"name": "dt", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "ethereum_source://models/codegen/opensea/schema.yml", "compiled_path": "target/compiled/ethereum_source/models/codegen/opensea/OpenSeaENSResolver_call_getTokenId.sql", "build_path": null, "deferred": false, "unrendered_config": {"schema": "opensea", "tags": ["chain_ethereum", "level_parse", "proj_opensea"], "materialized": "incremental", "incremental_strategy": "insert_overwrite", "partition_by": ["dt"], "file_format": "parquet", "pre-hook": [{"sql": "create or replace function opensea_openseaensresolver_gettokenid_calldecodeudf as \"io.iftech.sparkudf.hive.opensea_OpenSeaENSResolver_getTokenId_CallDecodeUDF\" using jar \"s3a://ifcrypto/blockchain-dbt/jars/opensea_udf.jar\";"}]}, "created_at": 1650535972.15042, "compiled_sql": "\n\nwith base as (\n    select\n        status==1 as call_success,\n        block_number as call_block_number,\n        block_timestamp as call_block_time,\n        trace_address as call_trace_address,\n        transaction_hash as call_tx_hash,\n        to_address as contract_address,\n        dt,\n        opensea_openseaensresolver_gettokenid_calldecodeudf(unhex_input, unhex_output, '{\"constant\": true, \"inputs\": [{\"name\": \"node\", \"type\": \"bytes32\"}], \"name\": \"getTokenId\", \"outputs\": [{\"name\": \"\", \"type\": \"uint256\"}], \"payable\": false, \"stateMutability\": \"view\", \"type\": \"function\"}', 'getTokenId') as data\n    from ethereum_stg_ethereum.stg_ethereum__traces\n    where to_address = lower(\"0x9c4e9cce4780062942a7fe34fa2fa7316c872956\")\n    and address_hash = abs(hash(lower(\"0x9c4e9cce4780062942a7fe34fa2fa7316c872956\"))) % 10\n    and selector = \"0x30786339\"\n    and selector_hash = abs(hash(\"0x30786339\")) % 10\n\n    \n),\n\nfinal as (\n    select\n        call_success,\n        call_block_number,\n        call_block_time,\n        call_trace_address,\n        call_tx_hash,\n        contract_address,\n        dt,\n        data.input.*,\n        data.output.*\n    from base\n)\n\nselect /* REPARTITION(dt) */ *\nfrom final", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "ethereum_opensea.OpenSeaENSResolver_call_getTokenId"}, "model.ethereum_source.OpenSeaENSResolver_evt_ABIChanged": {"raw_sql": "{{\n    config(\n        materialized='incremental',\n        incremental_strategy='insert_overwrite',\n        partition_by=['dt'],\n        file_format='parquet',\n        pre_hook={\n            'sql': 'create or replace function opensea_openseaensresolver_abichanged_eventdecodeudf as \"io.iftech.sparkudf.hive.opensea_OpenSeaENSResolver_ABIChanged_EventDecodeUDF\" using jar \"s3a://ifcrypto/blockchain-dbt/jars/opensea_udf.jar\";'\n        }\n    )\n}}\n\nwith base as (\n    select\n        block_number as evt_block_number,\n        block_timestamp as evt_block_time,\n        log_index as evt_index,\n        transaction_hash as evt_tx_hash,\n        address as contract_address,\n        dt,\n        opensea_openseaensresolver_abichanged_eventdecodeudf(unhex_data, topics_arr, '{\"anonymous\": false, \"inputs\": [{\"indexed\": true, \"name\": \"node\", \"type\": \"bytes32\"}, {\"indexed\": true, \"name\": \"contentType\", \"type\": \"uint256\"}], \"name\": \"ABIChanged\", \"type\": \"event\"}', 'ABIChanged') as data\n    from {{ ref('stg_ethereum__logs') }}\n    where address = lower(\"0x9c4e9cce4780062942a7fe34fa2fa7316c872956\")\n    and address_hash = abs(hash(lower(\"0x9c4e9cce4780062942a7fe34fa2fa7316c872956\"))) % 10\n    and selector = \"0xaa121bbeef5f32f5961a2a28966e769023910fc9479059ee3495d4c1a696efe3\"\n    and selector_hash = abs(hash(\"0xaa121bbeef5f32f5961a2a28966e769023910fc9479059ee3495d4c1a696efe3\")) % 10\n\n    {% if is_incremental() %}\n      and dt = var('dt')\n    {% endif %}\n),\n\nfinal as (\n    select\n        evt_block_number,\n        evt_block_time,\n        evt_index,\n        evt_tx_hash,\n        contract_address,\n        dt,\n        data.input.*\n    from base\n)\n\nselect /* REPARTITION(dt) */ *\nfrom final", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.dbt.is_incremental"], "nodes": ["model.ethereum_source.stg_ethereum__logs"]}, "config": {"enabled": true, "alias": null, "schema": "opensea", "database": null, "tags": ["chain_ethereum", "level_parse", "proj_opensea"], "meta": {}, "materialized": "incremental", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "file_format": "parquet", "partition_by": ["dt"], "incremental_strategy": "insert_overwrite", "post-hook": [], "pre-hook": [{"sql": "create or replace function opensea_openseaensresolver_abichanged_eventdecodeudf as \"io.iftech.sparkudf.hive.opensea_OpenSeaENSResolver_ABIChanged_EventDecodeUDF\" using jar \"s3a://ifcrypto/blockchain-dbt/jars/opensea_udf.jar\";", "transaction": true, "index": null}]}, "database": null, "schema": "ethereum_opensea", "fqn": ["ethereum_source", "codegen", "opensea", "OpenSeaENSResolver_evt_ABIChanged"], "unique_id": "model.ethereum_source.OpenSeaENSResolver_evt_ABIChanged", "package_name": "ethereum_source", "root_path": "/Users/songv/Code/jike/web3/dbt_ethereum_source", "path": "codegen/opensea/OpenSeaENSResolver_evt_ABIChanged.sql", "original_file_path": "models/codegen/opensea/OpenSeaENSResolver_evt_ABIChanged.sql", "name": "OpenSeaENSResolver_evt_ABIChanged", "alias": "OpenSeaENSResolver_evt_ABIChanged", "checksum": {"name": "sha256", "checksum": "450496c6d9b1cb451d4ac31a68637f26d5a74f4dcf01861bb7f97e273426d01a"}, "tags": ["chain_ethereum", "level_parse", "proj_opensea"], "refs": [["stg_ethereum__logs"]], "sources": [], "description": "", "columns": {"node": {"name": "node", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "contentType": {"name": "contentType", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "evt_block_number": {"name": "evt_block_number", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "evt_block_time": {"name": "evt_block_time", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "evt_index": {"name": "evt_index", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "evt_tx_hash": {"name": "evt_tx_hash", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "contract_address": {"name": "contract_address", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "dt": {"name": "dt", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "ethereum_source://models/codegen/opensea/schema.yml", "compiled_path": "target/compiled/ethereum_source/models/codegen/opensea/OpenSeaENSResolver_evt_ABIChanged.sql", "build_path": null, "deferred": false, "unrendered_config": {"schema": "opensea", "tags": ["chain_ethereum", "level_parse", "proj_opensea"], "materialized": "incremental", "incremental_strategy": "insert_overwrite", "partition_by": ["dt"], "file_format": "parquet", "pre-hook": [{"sql": "create or replace function opensea_openseaensresolver_abichanged_eventdecodeudf as \"io.iftech.sparkudf.hive.opensea_OpenSeaENSResolver_ABIChanged_EventDecodeUDF\" using jar \"s3a://ifcrypto/blockchain-dbt/jars/opensea_udf.jar\";"}]}, "created_at": 1650535972.110312, "compiled_sql": "\n\nwith base as (\n    select\n        block_number as evt_block_number,\n        block_timestamp as evt_block_time,\n        log_index as evt_index,\n        transaction_hash as evt_tx_hash,\n        address as contract_address,\n        dt,\n        opensea_openseaensresolver_abichanged_eventdecodeudf(unhex_data, topics_arr, '{\"anonymous\": false, \"inputs\": [{\"indexed\": true, \"name\": \"node\", \"type\": \"bytes32\"}, {\"indexed\": true, \"name\": \"contentType\", \"type\": \"uint256\"}], \"name\": \"ABIChanged\", \"type\": \"event\"}', 'ABIChanged') as data\n    from ethereum_stg_ethereum.stg_ethereum__logs\n    where address = lower(\"0x9c4e9cce4780062942a7fe34fa2fa7316c872956\")\n    and address_hash = abs(hash(lower(\"0x9c4e9cce4780062942a7fe34fa2fa7316c872956\"))) % 10\n    and selector = \"0xaa121bbeef5f32f5961a2a28966e769023910fc9479059ee3495d4c1a696efe3\"\n    and selector_hash = abs(hash(\"0xaa121bbeef5f32f5961a2a28966e769023910fc9479059ee3495d4c1a696efe3\")) % 10\n\n    \n),\n\nfinal as (\n    select\n        evt_block_number,\n        evt_block_time,\n        evt_index,\n        evt_tx_hash,\n        contract_address,\n        dt,\n        data.input.*\n    from base\n)\n\nselect /* REPARTITION(dt) */ *\nfrom final", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "ethereum_opensea.OpenSeaENSResolver_evt_ABIChanged"}, "model.ethereum_source.WyvernExchangeV2_call_name": {"raw_sql": "{{\n    config(\n        materialized='incremental',\n        incremental_strategy='insert_overwrite',\n        partition_by=['dt'],\n        file_format='parquet',\n        pre_hook={\n            'sql': 'create or replace function opensea_wyvernexchangev2_name_calldecodeudf as \"io.iftech.sparkudf.hive.opensea_WyvernExchangeV2_name_CallDecodeUDF\" using jar \"s3a://ifcrypto/blockchain-dbt/jars/opensea_udf.jar\";'\n        }\n    )\n}}\n\nwith base as (\n    select\n        status==1 as call_success,\n        block_number as call_block_number,\n        block_timestamp as call_block_time,\n        trace_address as call_trace_address,\n        transaction_hash as call_tx_hash,\n        to_address as contract_address,\n        dt,\n        opensea_wyvernexchangev2_name_calldecodeudf(unhex_input, unhex_output, '{\"constant\": true, \"inputs\": [], \"name\": \"name\", \"outputs\": [{\"name\": \"\", \"type\": \"string\"}], \"payable\": false, \"stateMutability\": \"view\", \"type\": \"function\"}', 'name') as data\n    from {{ ref('stg_ethereum__traces') }}\n    where to_address = lower(\"0x7f268357A8c2552623316e2562D90e642bB538E5\")\n    and address_hash = abs(hash(lower(\"0x7f268357A8c2552623316e2562D90e642bB538E5\"))) % 10\n    and selector = \"0x30783036\"\n    and selector_hash = abs(hash(\"0x30783036\")) % 10\n\n    {% if is_incremental() %}\n      and dt = var('dt')\n    {% endif %}\n),\n\nfinal as (\n    select\n        call_success,\n        call_block_number,\n        call_block_time,\n        call_trace_address,\n        call_tx_hash,\n        contract_address,\n        dt,\n        data.input.*,\n        data.output.*\n    from base\n)\n\nselect /* REPARTITION(dt) */ *\nfrom final", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.dbt.is_incremental"], "nodes": ["model.ethereum_source.stg_ethereum__traces"]}, "config": {"enabled": true, "alias": null, "schema": "opensea", "database": null, "tags": ["chain_ethereum", "level_parse", "proj_opensea"], "meta": {}, "materialized": "incremental", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "file_format": "parquet", "partition_by": ["dt"], "incremental_strategy": "insert_overwrite", "post-hook": [], "pre-hook": [{"sql": "create or replace function opensea_wyvernexchangev2_name_calldecodeudf as \"io.iftech.sparkudf.hive.opensea_WyvernExchangeV2_name_CallDecodeUDF\" using jar \"s3a://ifcrypto/blockchain-dbt/jars/opensea_udf.jar\";", "transaction": true, "index": null}]}, "database": null, "schema": "ethereum_opensea", "fqn": ["ethereum_source", "codegen", "opensea", "WyvernExchangeV2_call_name"], "unique_id": "model.ethereum_source.WyvernExchangeV2_call_name", "package_name": "ethereum_source", "root_path": "/Users/songv/Code/jike/web3/dbt_ethereum_source", "path": "codegen/opensea/WyvernExchangeV2_call_name.sql", "original_file_path": "models/codegen/opensea/WyvernExchangeV2_call_name.sql", "name": "WyvernExchangeV2_call_name", "alias": "WyvernExchangeV2_call_name", "checksum": {"name": "sha256", "checksum": "2c5024ff929025f89547f3420bcd9a83d3418e58c3281f226592bea021866388"}, "tags": ["chain_ethereum", "level_parse", "proj_opensea"], "refs": [["stg_ethereum__traces"]], "sources": [], "description": "", "columns": {"output_0": {"name": "output_0", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "call_success": {"name": "call_success", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "call_block_number": {"name": "call_block_number", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "call_block_time": {"name": "call_block_time", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "call_trace_address": {"name": "call_trace_address", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "call_tx_hash": {"name": "call_tx_hash", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "contract_address": {"name": "contract_address", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "dt": {"name": "dt", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "ethereum_source://models/codegen/opensea/schema.yml", "compiled_path": "target/compiled/ethereum_source/models/codegen/opensea/WyvernExchangeV2_call_name.sql", "build_path": null, "deferred": false, "unrendered_config": {"schema": "opensea", "tags": ["chain_ethereum", "level_parse", "proj_opensea"], "materialized": "incremental", "incremental_strategy": "insert_overwrite", "partition_by": ["dt"], "file_format": "parquet", "pre-hook": [{"sql": "create or replace function opensea_wyvernexchangev2_name_calldecodeudf as \"io.iftech.sparkudf.hive.opensea_WyvernExchangeV2_name_CallDecodeUDF\" using jar \"s3a://ifcrypto/blockchain-dbt/jars/opensea_udf.jar\";"}]}, "created_at": 1650535972.015934, "compiled_sql": "\n\nwith base as (\n    select\n        status==1 as call_success,\n        block_number as call_block_number,\n        block_timestamp as call_block_time,\n        trace_address as call_trace_address,\n        transaction_hash as call_tx_hash,\n        to_address as contract_address,\n        dt,\n        opensea_wyvernexchangev2_name_calldecodeudf(unhex_input, unhex_output, '{\"constant\": true, \"inputs\": [], \"name\": \"name\", \"outputs\": [{\"name\": \"\", \"type\": \"string\"}], \"payable\": false, \"stateMutability\": \"view\", \"type\": \"function\"}', 'name') as data\n    from ethereum_stg_ethereum.stg_ethereum__traces\n    where to_address = lower(\"0x7f268357A8c2552623316e2562D90e642bB538E5\")\n    and address_hash = abs(hash(lower(\"0x7f268357A8c2552623316e2562D90e642bB538E5\"))) % 10\n    and selector = \"0x30783036\"\n    and selector_hash = abs(hash(\"0x30783036\")) % 10\n\n    \n),\n\nfinal as (\n    select\n        call_success,\n        call_block_number,\n        call_block_time,\n        call_trace_address,\n        call_tx_hash,\n        contract_address,\n        dt,\n        data.input.*,\n        data.output.*\n    from base\n)\n\nselect /* REPARTITION(dt) */ *\nfrom final", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "ethereum_opensea.WyvernExchangeV2_call_name"}, "model.ethereum_source.WyvernExchangeV2_call_minimumTakerProtocolFee": {"raw_sql": "{{\n    config(\n        materialized='incremental',\n        incremental_strategy='insert_overwrite',\n        partition_by=['dt'],\n        file_format='parquet',\n        pre_hook={\n            'sql': 'create or replace function opensea_wyvernexchangev2_minimumtakerprotocolfee_calldecodeudf as \"io.iftech.sparkudf.hive.opensea_WyvernExchangeV2_minimumTakerProtocolFee_CallDecodeUDF\" using jar \"s3a://ifcrypto/blockchain-dbt/jars/opensea_udf.jar\";'\n        }\n    )\n}}\n\nwith base as (\n    select\n        status==1 as call_success,\n        block_number as call_block_number,\n        block_timestamp as call_block_time,\n        trace_address as call_trace_address,\n        transaction_hash as call_tx_hash,\n        to_address as contract_address,\n        dt,\n        opensea_wyvernexchangev2_minimumtakerprotocolfee_calldecodeudf(unhex_input, unhex_output, '{\"constant\": true, \"inputs\": [], \"name\": \"minimumTakerProtocolFee\", \"outputs\": [{\"name\": \"\", \"type\": \"uint256\"}], \"payable\": false, \"stateMutability\": \"view\", \"type\": \"function\"}', 'minimumTakerProtocolFee') as data\n    from {{ ref('stg_ethereum__traces') }}\n    where to_address = lower(\"0x7f268357A8c2552623316e2562D90e642bB538E5\")\n    and address_hash = abs(hash(lower(\"0x7f268357A8c2552623316e2562D90e642bB538E5\"))) % 10\n    and selector = \"0x30783238\"\n    and selector_hash = abs(hash(\"0x30783238\")) % 10\n\n    {% if is_incremental() %}\n      and dt = var('dt')\n    {% endif %}\n),\n\nfinal as (\n    select\n        call_success,\n        call_block_number,\n        call_block_time,\n        call_trace_address,\n        call_tx_hash,\n        contract_address,\n        dt,\n        data.input.*,\n        data.output.*\n    from base\n)\n\nselect /* REPARTITION(dt) */ *\nfrom final", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.dbt.is_incremental"], "nodes": ["model.ethereum_source.stg_ethereum__traces"]}, "config": {"enabled": true, "alias": null, "schema": "opensea", "database": null, "tags": ["chain_ethereum", "level_parse", "proj_opensea"], "meta": {}, "materialized": "incremental", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "file_format": "parquet", "partition_by": ["dt"], "incremental_strategy": "insert_overwrite", "post-hook": [], "pre-hook": [{"sql": "create or replace function opensea_wyvernexchangev2_minimumtakerprotocolfee_calldecodeudf as \"io.iftech.sparkudf.hive.opensea_WyvernExchangeV2_minimumTakerProtocolFee_CallDecodeUDF\" using jar \"s3a://ifcrypto/blockchain-dbt/jars/opensea_udf.jar\";", "transaction": true, "index": null}]}, "database": null, "schema": "ethereum_opensea", "fqn": ["ethereum_source", "codegen", "opensea", "WyvernExchangeV2_call_minimumTakerProtocolFee"], "unique_id": "model.ethereum_source.WyvernExchangeV2_call_minimumTakerProtocolFee", "package_name": "ethereum_source", "root_path": "/Users/songv/Code/jike/web3/dbt_ethereum_source", "path": "codegen/opensea/WyvernExchangeV2_call_minimumTakerProtocolFee.sql", "original_file_path": "models/codegen/opensea/WyvernExchangeV2_call_minimumTakerProtocolFee.sql", "name": "WyvernExchangeV2_call_minimumTakerProtocolFee", "alias": "WyvernExchangeV2_call_minimumTakerProtocolFee", "checksum": {"name": "sha256", "checksum": "4af0dc144a5f3d355df2a6c38465c1750d5e69a9ba1af4ebbba8f3c7b8eb840b"}, "tags": ["chain_ethereum", "level_parse", "proj_opensea"], "refs": [["stg_ethereum__traces"]], "sources": [], "description": "", "columns": {"output_0": {"name": "output_0", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "call_success": {"name": "call_success", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "call_block_number": {"name": "call_block_number", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "call_block_time": {"name": "call_block_time", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "call_trace_address": {"name": "call_trace_address", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "call_tx_hash": {"name": "call_tx_hash", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "contract_address": {"name": "contract_address", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "dt": {"name": "dt", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "ethereum_source://models/codegen/opensea/schema.yml", "compiled_path": "target/compiled/ethereum_source/models/codegen/opensea/WyvernExchangeV2_call_minimumTakerProtocolFee.sql", "build_path": null, "deferred": false, "unrendered_config": {"schema": "opensea", "tags": ["chain_ethereum", "level_parse", "proj_opensea"], "materialized": "incremental", "incremental_strategy": "insert_overwrite", "partition_by": ["dt"], "file_format": "parquet", "pre-hook": [{"sql": "create or replace function opensea_wyvernexchangev2_minimumtakerprotocolfee_calldecodeudf as \"io.iftech.sparkudf.hive.opensea_WyvernExchangeV2_minimumTakerProtocolFee_CallDecodeUDF\" using jar \"s3a://ifcrypto/blockchain-dbt/jars/opensea_udf.jar\";"}]}, "created_at": 1650535972.026517, "compiled_sql": "\n\nwith base as (\n    select\n        status==1 as call_success,\n        block_number as call_block_number,\n        block_timestamp as call_block_time,\n        trace_address as call_trace_address,\n        transaction_hash as call_tx_hash,\n        to_address as contract_address,\n        dt,\n        opensea_wyvernexchangev2_minimumtakerprotocolfee_calldecodeudf(unhex_input, unhex_output, '{\"constant\": true, \"inputs\": [], \"name\": \"minimumTakerProtocolFee\", \"outputs\": [{\"name\": \"\", \"type\": \"uint256\"}], \"payable\": false, \"stateMutability\": \"view\", \"type\": \"function\"}', 'minimumTakerProtocolFee') as data\n    from ethereum_stg_ethereum.stg_ethereum__traces\n    where to_address = lower(\"0x7f268357A8c2552623316e2562D90e642bB538E5\")\n    and address_hash = abs(hash(lower(\"0x7f268357A8c2552623316e2562D90e642bB538E5\"))) % 10\n    and selector = \"0x30783238\"\n    and selector_hash = abs(hash(\"0x30783238\")) % 10\n\n    \n),\n\nfinal as (\n    select\n        call_success,\n        call_block_number,\n        call_block_time,\n        call_trace_address,\n        call_tx_hash,\n        contract_address,\n        dt,\n        data.input.*,\n        data.output.*\n    from base\n)\n\nselect /* REPARTITION(dt) */ *\nfrom final", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "ethereum_opensea.WyvernExchangeV2_call_minimumTakerProtocolFee"}, "model.ethereum_source.WyvernExchangeV1_evt_OrderCancelled": {"raw_sql": "{{\n    config(\n        materialized='incremental',\n        incremental_strategy='insert_overwrite',\n        partition_by=['dt'],\n        file_format='parquet',\n        pre_hook={\n            'sql': 'create or replace function opensea_wyvernexchangev1_ordercancelled_eventdecodeudf as \"io.iftech.sparkudf.hive.opensea_WyvernExchangeV1_OrderCancelled_EventDecodeUDF\" using jar \"s3a://ifcrypto/blockchain-dbt/jars/opensea_udf.jar\";'\n        }\n    )\n}}\n\nwith base as (\n    select\n        block_number as evt_block_number,\n        block_timestamp as evt_block_time,\n        log_index as evt_index,\n        transaction_hash as evt_tx_hash,\n        address as contract_address,\n        dt,\n        opensea_wyvernexchangev1_ordercancelled_eventdecodeudf(unhex_data, topics_arr, '{\"anonymous\": false, \"inputs\": [{\"indexed\": true, \"name\": \"hash\", \"type\": \"bytes32\"}], \"name\": \"OrderCancelled\", \"type\": \"event\"}', 'OrderCancelled') as data\n    from {{ ref('stg_ethereum__logs') }}\n    where address = lower(\"0x7Be8076f4EA4A4AD08075C2508e481d6C946D12b\")\n    and address_hash = abs(hash(lower(\"0x7Be8076f4EA4A4AD08075C2508e481d6C946D12b\"))) % 10\n    and selector = \"0x5152abf959f6564662358c2e52b702259b78bac5ee7842a0f01937e670efcc7d\"\n    and selector_hash = abs(hash(\"0x5152abf959f6564662358c2e52b702259b78bac5ee7842a0f01937e670efcc7d\")) % 10\n\n    {% if is_incremental() %}\n      and dt = var('dt')\n    {% endif %}\n),\n\nfinal as (\n    select\n        evt_block_number,\n        evt_block_time,\n        evt_index,\n        evt_tx_hash,\n        contract_address,\n        dt,\n        data.input.*\n    from base\n)\n\nselect /* REPARTITION(dt) */ *\nfrom final", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.dbt.is_incremental"], "nodes": ["model.ethereum_source.stg_ethereum__logs"]}, "config": {"enabled": true, "alias": null, "schema": "opensea", "database": null, "tags": ["chain_ethereum", "level_parse", "proj_opensea"], "meta": {}, "materialized": "incremental", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "file_format": "parquet", "partition_by": ["dt"], "incremental_strategy": "insert_overwrite", "post-hook": [], "pre-hook": [{"sql": "create or replace function opensea_wyvernexchangev1_ordercancelled_eventdecodeudf as \"io.iftech.sparkudf.hive.opensea_WyvernExchangeV1_OrderCancelled_EventDecodeUDF\" using jar \"s3a://ifcrypto/blockchain-dbt/jars/opensea_udf.jar\";", "transaction": true, "index": null}]}, "database": null, "schema": "ethereum_opensea", "fqn": ["ethereum_source", "codegen", "opensea", "WyvernExchangeV1_evt_OrderCancelled"], "unique_id": "model.ethereum_source.WyvernExchangeV1_evt_OrderCancelled", "package_name": "ethereum_source", "root_path": "/Users/songv/Code/jike/web3/dbt_ethereum_source", "path": "codegen/opensea/WyvernExchangeV1_evt_OrderCancelled.sql", "original_file_path": "models/codegen/opensea/WyvernExchangeV1_evt_OrderCancelled.sql", "name": "WyvernExchangeV1_evt_OrderCancelled", "alias": "WyvernExchangeV1_evt_OrderCancelled", "checksum": {"name": "sha256", "checksum": "21fbc7422c82b2c16226bae93df075b92cb834c8ba0335fc7c55b28ba4fa4aaa"}, "tags": ["chain_ethereum", "level_parse", "proj_opensea"], "refs": [["stg_ethereum__logs"]], "sources": [], "description": "", "columns": {"hash": {"name": "hash", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "evt_block_number": {"name": "evt_block_number", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "evt_block_time": {"name": "evt_block_time", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "evt_index": {"name": "evt_index", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "evt_tx_hash": {"name": "evt_tx_hash", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "contract_address": {"name": "contract_address", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "dt": {"name": "dt", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "ethereum_source://models/codegen/opensea/schema.yml", "compiled_path": "target/compiled/ethereum_source/models/codegen/opensea/WyvernExchangeV1_evt_OrderCancelled.sql", "build_path": null, "deferred": false, "unrendered_config": {"schema": "opensea", "tags": ["chain_ethereum", "level_parse", "proj_opensea"], "materialized": "incremental", "incremental_strategy": "insert_overwrite", "partition_by": ["dt"], "file_format": "parquet", "pre-hook": [{"sql": "create or replace function opensea_wyvernexchangev1_ordercancelled_eventdecodeudf as \"io.iftech.sparkudf.hive.opensea_WyvernExchangeV1_OrderCancelled_EventDecodeUDF\" using jar \"s3a://ifcrypto/blockchain-dbt/jars/opensea_udf.jar\";"}]}, "created_at": 1650535971.919227, "compiled_sql": "\n\nwith base as (\n    select\n        block_number as evt_block_number,\n        block_timestamp as evt_block_time,\n        log_index as evt_index,\n        transaction_hash as evt_tx_hash,\n        address as contract_address,\n        dt,\n        opensea_wyvernexchangev1_ordercancelled_eventdecodeudf(unhex_data, topics_arr, '{\"anonymous\": false, \"inputs\": [{\"indexed\": true, \"name\": \"hash\", \"type\": \"bytes32\"}], \"name\": \"OrderCancelled\", \"type\": \"event\"}', 'OrderCancelled') as data\n    from ethereum_stg_ethereum.stg_ethereum__logs\n    where address = lower(\"0x7Be8076f4EA4A4AD08075C2508e481d6C946D12b\")\n    and address_hash = abs(hash(lower(\"0x7Be8076f4EA4A4AD08075C2508e481d6C946D12b\"))) % 10\n    and selector = \"0x5152abf959f6564662358c2e52b702259b78bac5ee7842a0f01937e670efcc7d\"\n    and selector_hash = abs(hash(\"0x5152abf959f6564662358c2e52b702259b78bac5ee7842a0f01937e670efcc7d\")) % 10\n\n    \n),\n\nfinal as (\n    select\n        evt_block_number,\n        evt_block_time,\n        evt_index,\n        evt_tx_hash,\n        contract_address,\n        dt,\n        data.input.*\n    from base\n)\n\nselect /* REPARTITION(dt) */ *\nfrom final", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "ethereum_opensea.WyvernExchangeV1_evt_OrderCancelled"}, "model.ethereum_source.WyvernExchangeV1_call_ordersCanMatch_": {"raw_sql": "{{\n    config(\n        materialized='incremental',\n        incremental_strategy='insert_overwrite',\n        partition_by=['dt'],\n        file_format='parquet',\n        pre_hook={\n            'sql': 'create or replace function opensea_wyvernexchangev1_orderscanmatch__calldecodeudf as \"io.iftech.sparkudf.hive.opensea_WyvernExchangeV1_ordersCanMatch__CallDecodeUDF\" using jar \"s3a://ifcrypto/blockchain-dbt/jars/opensea_udf.jar\";'\n        }\n    )\n}}\n\nwith base as (\n    select\n        status==1 as call_success,\n        block_number as call_block_number,\n        block_timestamp as call_block_time,\n        trace_address as call_trace_address,\n        transaction_hash as call_tx_hash,\n        to_address as contract_address,\n        dt,\n        opensea_wyvernexchangev1_orderscanmatch__calldecodeudf(unhex_input, unhex_output, '{\"constant\": true, \"inputs\": [{\"name\": \"addrs\", \"type\": \"address[14]\"}, {\"name\": \"uints\", \"type\": \"uint256[18]\"}, {\"name\": \"feeMethodsSidesKindsHowToCalls\", \"type\": \"uint8[8]\"}, {\"name\": \"calldataBuy\", \"type\": \"bytes\"}, {\"name\": \"calldataSell\", \"type\": \"bytes\"}, {\"name\": \"replacementPatternBuy\", \"type\": \"bytes\"}, {\"name\": \"replacementPatternSell\", \"type\": \"bytes\"}, {\"name\": \"staticExtradataBuy\", \"type\": \"bytes\"}, {\"name\": \"staticExtradataSell\", \"type\": \"bytes\"}], \"name\": \"ordersCanMatch_\", \"outputs\": [{\"name\": \"\", \"type\": \"bool\"}], \"payable\": false, \"stateMutability\": \"view\", \"type\": \"function\"}', 'ordersCanMatch_') as data\n    from {{ ref('stg_ethereum__traces') }}\n    where to_address = lower(\"0x7Be8076f4EA4A4AD08075C2508e481d6C946D12b\")\n    and address_hash = abs(hash(lower(\"0x7Be8076f4EA4A4AD08075C2508e481d6C946D12b\"))) % 10\n    and selector = \"0x30783732\"\n    and selector_hash = abs(hash(\"0x30783732\")) % 10\n\n    {% if is_incremental() %}\n      and dt = var('dt')\n    {% endif %}\n),\n\nfinal as (\n    select\n        call_success,\n        call_block_number,\n        call_block_time,\n        call_trace_address,\n        call_tx_hash,\n        contract_address,\n        dt,\n        data.input.*,\n        data.output.*\n    from base\n)\n\nselect /* REPARTITION(dt) */ *\nfrom final", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.dbt.is_incremental"], "nodes": ["model.ethereum_source.stg_ethereum__traces"]}, "config": {"enabled": true, "alias": null, "schema": "opensea", "database": null, "tags": ["chain_ethereum", "level_parse", "proj_opensea"], "meta": {}, "materialized": "incremental", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "file_format": "parquet", "partition_by": ["dt"], "incremental_strategy": "insert_overwrite", "post-hook": [], "pre-hook": [{"sql": "create or replace function opensea_wyvernexchangev1_orderscanmatch__calldecodeudf as \"io.iftech.sparkudf.hive.opensea_WyvernExchangeV1_ordersCanMatch__CallDecodeUDF\" using jar \"s3a://ifcrypto/blockchain-dbt/jars/opensea_udf.jar\";", "transaction": true, "index": null}]}, "database": null, "schema": "ethereum_opensea", "fqn": ["ethereum_source", "codegen", "opensea", "WyvernExchangeV1_call_ordersCanMatch_"], "unique_id": "model.ethereum_source.WyvernExchangeV1_call_ordersCanMatch_", "package_name": "ethereum_source", "root_path": "/Users/songv/Code/jike/web3/dbt_ethereum_source", "path": "codegen/opensea/WyvernExchangeV1_call_ordersCanMatch_.sql", "original_file_path": "models/codegen/opensea/WyvernExchangeV1_call_ordersCanMatch_.sql", "name": "WyvernExchangeV1_call_ordersCanMatch_", "alias": "WyvernExchangeV1_call_ordersCanMatch_", "checksum": {"name": "sha256", "checksum": "f212f1783f5493869a06099f1038f615de4a3db26169e0f646a2b85f52c23531"}, "tags": ["chain_ethereum", "level_parse", "proj_opensea"], "refs": [["stg_ethereum__traces"]], "sources": [], "description": "", "columns": {"addrs": {"name": "addrs", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "uints": {"name": "uints", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "feeMethodsSidesKindsHowToCalls": {"name": "feeMethodsSidesKindsHowToCalls", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "calldataBuy": {"name": "calldataBuy", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "calldataSell": {"name": "calldataSell", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "replacementPatternBuy": {"name": "replacementPatternBuy", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "replacementPatternSell": {"name": "replacementPatternSell", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "staticExtradataBuy": {"name": "staticExtradataBuy", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "staticExtradataSell": {"name": "staticExtradataSell", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "output_0": {"name": "output_0", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "call_success": {"name": "call_success", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "call_block_number": {"name": "call_block_number", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "call_block_time": {"name": "call_block_time", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "call_trace_address": {"name": "call_trace_address", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "call_tx_hash": {"name": "call_tx_hash", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "contract_address": {"name": "contract_address", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "dt": {"name": "dt", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "ethereum_source://models/codegen/opensea/schema.yml", "compiled_path": "target/compiled/ethereum_source/models/codegen/opensea/WyvernExchangeV1_call_ordersCanMatch_.sql", "build_path": null, "deferred": false, "unrendered_config": {"schema": "opensea", "tags": ["chain_ethereum", "level_parse", "proj_opensea"], "materialized": "incremental", "incremental_strategy": "insert_overwrite", "partition_by": ["dt"], "file_format": "parquet", "pre-hook": [{"sql": "create or replace function opensea_wyvernexchangev1_orderscanmatch__calldecodeudf as \"io.iftech.sparkudf.hive.opensea_WyvernExchangeV1_ordersCanMatch__CallDecodeUDF\" using jar \"s3a://ifcrypto/blockchain-dbt/jars/opensea_udf.jar\";"}]}, "created_at": 1650535971.9664981, "compiled_sql": "\n\nwith base as (\n    select\n        status==1 as call_success,\n        block_number as call_block_number,\n        block_timestamp as call_block_time,\n        trace_address as call_trace_address,\n        transaction_hash as call_tx_hash,\n        to_address as contract_address,\n        dt,\n        opensea_wyvernexchangev1_orderscanmatch__calldecodeudf(unhex_input, unhex_output, '{\"constant\": true, \"inputs\": [{\"name\": \"addrs\", \"type\": \"address[14]\"}, {\"name\": \"uints\", \"type\": \"uint256[18]\"}, {\"name\": \"feeMethodsSidesKindsHowToCalls\", \"type\": \"uint8[8]\"}, {\"name\": \"calldataBuy\", \"type\": \"bytes\"}, {\"name\": \"calldataSell\", \"type\": \"bytes\"}, {\"name\": \"replacementPatternBuy\", \"type\": \"bytes\"}, {\"name\": \"replacementPatternSell\", \"type\": \"bytes\"}, {\"name\": \"staticExtradataBuy\", \"type\": \"bytes\"}, {\"name\": \"staticExtradataSell\", \"type\": \"bytes\"}], \"name\": \"ordersCanMatch_\", \"outputs\": [{\"name\": \"\", \"type\": \"bool\"}], \"payable\": false, \"stateMutability\": \"view\", \"type\": \"function\"}', 'ordersCanMatch_') as data\n    from ethereum_stg_ethereum.stg_ethereum__traces\n    where to_address = lower(\"0x7Be8076f4EA4A4AD08075C2508e481d6C946D12b\")\n    and address_hash = abs(hash(lower(\"0x7Be8076f4EA4A4AD08075C2508e481d6C946D12b\"))) % 10\n    and selector = \"0x30783732\"\n    and selector_hash = abs(hash(\"0x30783732\")) % 10\n\n    \n),\n\nfinal as (\n    select\n        call_success,\n        call_block_number,\n        call_block_time,\n        call_trace_address,\n        call_tx_hash,\n        contract_address,\n        dt,\n        data.input.*,\n        data.output.*\n    from base\n)\n\nselect /* REPARTITION(dt) */ *\nfrom final", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "ethereum_opensea.WyvernExchangeV1_call_ordersCanMatch_"}, "model.ethereum_source.OpenSeaENSResolver_call_setInterface": {"raw_sql": "{{\n    config(\n        materialized='incremental',\n        incremental_strategy='insert_overwrite',\n        partition_by=['dt'],\n        file_format='parquet',\n        pre_hook={\n            'sql': 'create or replace function opensea_openseaensresolver_setinterface_calldecodeudf as \"io.iftech.sparkudf.hive.opensea_OpenSeaENSResolver_setInterface_CallDecodeUDF\" using jar \"s3a://ifcrypto/blockchain-dbt/jars/opensea_udf.jar\";'\n        }\n    )\n}}\n\nwith base as (\n    select\n        status==1 as call_success,\n        block_number as call_block_number,\n        block_timestamp as call_block_time,\n        trace_address as call_trace_address,\n        transaction_hash as call_tx_hash,\n        to_address as contract_address,\n        dt,\n        opensea_openseaensresolver_setinterface_calldecodeudf(unhex_input, unhex_output, '{\"constant\": false, \"inputs\": [{\"name\": \"node\", \"type\": \"bytes32\"}, {\"name\": \"interfaceID\", \"type\": \"bytes4\"}, {\"name\": \"implementer\", \"type\": \"address\"}], \"name\": \"setInterface\", \"outputs\": [], \"payable\": false, \"stateMutability\": \"nonpayable\", \"type\": \"function\"}', 'setInterface') as data\n    from {{ ref('stg_ethereum__traces') }}\n    where to_address = lower(\"0x9c4e9cce4780062942a7fe34fa2fa7316c872956\")\n    and address_hash = abs(hash(lower(\"0x9c4e9cce4780062942a7fe34fa2fa7316c872956\"))) % 10\n    and selector = \"0x30786535\"\n    and selector_hash = abs(hash(\"0x30786535\")) % 10\n\n    {% if is_incremental() %}\n      and dt = var('dt')\n    {% endif %}\n),\n\nfinal as (\n    select\n        call_success,\n        call_block_number,\n        call_block_time,\n        call_trace_address,\n        call_tx_hash,\n        contract_address,\n        dt,\n        data.input.*,\n        data.output.*\n    from base\n)\n\nselect /* REPARTITION(dt) */ *\nfrom final", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.dbt.is_incremental"], "nodes": ["model.ethereum_source.stg_ethereum__traces"]}, "config": {"enabled": true, "alias": null, "schema": "opensea", "database": null, "tags": ["chain_ethereum", "level_parse", "proj_opensea"], "meta": {}, "materialized": "incremental", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "file_format": "parquet", "partition_by": ["dt"], "incremental_strategy": "insert_overwrite", "post-hook": [], "pre-hook": [{"sql": "create or replace function opensea_openseaensresolver_setinterface_calldecodeudf as \"io.iftech.sparkudf.hive.opensea_OpenSeaENSResolver_setInterface_CallDecodeUDF\" using jar \"s3a://ifcrypto/blockchain-dbt/jars/opensea_udf.jar\";", "transaction": true, "index": null}]}, "database": null, "schema": "ethereum_opensea", "fqn": ["ethereum_source", "codegen", "opensea", "OpenSeaENSResolver_call_setInterface"], "unique_id": "model.ethereum_source.OpenSeaENSResolver_call_setInterface", "package_name": "ethereum_source", "root_path": "/Users/songv/Code/jike/web3/dbt_ethereum_source", "path": "codegen/opensea/OpenSeaENSResolver_call_setInterface.sql", "original_file_path": "models/codegen/opensea/OpenSeaENSResolver_call_setInterface.sql", "name": "OpenSeaENSResolver_call_setInterface", "alias": "OpenSeaENSResolver_call_setInterface", "checksum": {"name": "sha256", "checksum": "3944ea4fc6a2b6066b933a61346f50da7929f6a6f524746a40ed573ae35eba78"}, "tags": ["chain_ethereum", "level_parse", "proj_opensea"], "refs": [["stg_ethereum__traces"]], "sources": [], "description": "", "columns": {"node": {"name": "node", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "interfaceID": {"name": "interfaceID", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "implementer": {"name": "implementer", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "call_success": {"name": "call_success", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "call_block_number": {"name": "call_block_number", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "call_block_time": {"name": "call_block_time", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "call_trace_address": {"name": "call_trace_address", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "call_tx_hash": {"name": "call_tx_hash", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "contract_address": {"name": "contract_address", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "dt": {"name": "dt", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "ethereum_source://models/codegen/opensea/schema.yml", "compiled_path": "target/compiled/ethereum_source/models/codegen/opensea/OpenSeaENSResolver_call_setInterface.sql", "build_path": null, "deferred": false, "unrendered_config": {"schema": "opensea", "tags": ["chain_ethereum", "level_parse", "proj_opensea"], "materialized": "incremental", "incremental_strategy": "insert_overwrite", "partition_by": ["dt"], "file_format": "parquet", "pre-hook": [{"sql": "create or replace function opensea_openseaensresolver_setinterface_calldecodeudf as \"io.iftech.sparkudf.hive.opensea_OpenSeaENSResolver_setInterface_CallDecodeUDF\" using jar \"s3a://ifcrypto/blockchain-dbt/jars/opensea_udf.jar\";"}]}, "created_at": 1650535972.154308, "compiled_sql": "\n\nwith base as (\n    select\n        status==1 as call_success,\n        block_number as call_block_number,\n        block_timestamp as call_block_time,\n        trace_address as call_trace_address,\n        transaction_hash as call_tx_hash,\n        to_address as contract_address,\n        dt,\n        opensea_openseaensresolver_setinterface_calldecodeudf(unhex_input, unhex_output, '{\"constant\": false, \"inputs\": [{\"name\": \"node\", \"type\": \"bytes32\"}, {\"name\": \"interfaceID\", \"type\": \"bytes4\"}, {\"name\": \"implementer\", \"type\": \"address\"}], \"name\": \"setInterface\", \"outputs\": [], \"payable\": false, \"stateMutability\": \"nonpayable\", \"type\": \"function\"}', 'setInterface') as data\n    from ethereum_stg_ethereum.stg_ethereum__traces\n    where to_address = lower(\"0x9c4e9cce4780062942a7fe34fa2fa7316c872956\")\n    and address_hash = abs(hash(lower(\"0x9c4e9cce4780062942a7fe34fa2fa7316c872956\"))) % 10\n    and selector = \"0x30786535\"\n    and selector_hash = abs(hash(\"0x30786535\")) % 10\n\n    \n),\n\nfinal as (\n    select\n        call_success,\n        call_block_number,\n        call_block_time,\n        call_trace_address,\n        call_tx_hash,\n        contract_address,\n        dt,\n        data.input.*,\n        data.output.*\n    from base\n)\n\nselect /* REPARTITION(dt) */ *\nfrom final", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "ethereum_opensea.OpenSeaENSResolver_call_setInterface"}, "model.ethereum_source.WyvernExchangeV2_call_owner": {"raw_sql": "{{\n    config(\n        materialized='incremental',\n        incremental_strategy='insert_overwrite',\n        partition_by=['dt'],\n        file_format='parquet',\n        pre_hook={\n            'sql': 'create or replace function opensea_wyvernexchangev2_owner_calldecodeudf as \"io.iftech.sparkudf.hive.opensea_WyvernExchangeV2_owner_CallDecodeUDF\" using jar \"s3a://ifcrypto/blockchain-dbt/jars/opensea_udf.jar\";'\n        }\n    )\n}}\n\nwith base as (\n    select\n        status==1 as call_success,\n        block_number as call_block_number,\n        block_timestamp as call_block_time,\n        trace_address as call_trace_address,\n        transaction_hash as call_tx_hash,\n        to_address as contract_address,\n        dt,\n        opensea_wyvernexchangev2_owner_calldecodeudf(unhex_input, unhex_output, '{\"constant\": true, \"inputs\": [], \"name\": \"owner\", \"outputs\": [{\"name\": \"\", \"type\": \"address\"}], \"payable\": false, \"stateMutability\": \"view\", \"type\": \"function\"}', 'owner') as data\n    from {{ ref('stg_ethereum__traces') }}\n    where to_address = lower(\"0x7f268357A8c2552623316e2562D90e642bB538E5\")\n    and address_hash = abs(hash(lower(\"0x7f268357A8c2552623316e2562D90e642bB538E5\"))) % 10\n    and selector = \"0x30783864\"\n    and selector_hash = abs(hash(\"0x30783864\")) % 10\n\n    {% if is_incremental() %}\n      and dt = var('dt')\n    {% endif %}\n),\n\nfinal as (\n    select\n        call_success,\n        call_block_number,\n        call_block_time,\n        call_trace_address,\n        call_tx_hash,\n        contract_address,\n        dt,\n        data.input.*,\n        data.output.*\n    from base\n)\n\nselect /* REPARTITION(dt) */ *\nfrom final", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.dbt.is_incremental"], "nodes": ["model.ethereum_source.stg_ethereum__traces"]}, "config": {"enabled": true, "alias": null, "schema": "opensea", "database": null, "tags": ["chain_ethereum", "level_parse", "proj_opensea"], "meta": {}, "materialized": "incremental", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "file_format": "parquet", "partition_by": ["dt"], "incremental_strategy": "insert_overwrite", "post-hook": [], "pre-hook": [{"sql": "create or replace function opensea_wyvernexchangev2_owner_calldecodeudf as \"io.iftech.sparkudf.hive.opensea_WyvernExchangeV2_owner_CallDecodeUDF\" using jar \"s3a://ifcrypto/blockchain-dbt/jars/opensea_udf.jar\";", "transaction": true, "index": null}]}, "database": null, "schema": "ethereum_opensea", "fqn": ["ethereum_source", "codegen", "opensea", "WyvernExchangeV2_call_owner"], "unique_id": "model.ethereum_source.WyvernExchangeV2_call_owner", "package_name": "ethereum_source", "root_path": "/Users/songv/Code/jike/web3/dbt_ethereum_source", "path": "codegen/opensea/WyvernExchangeV2_call_owner.sql", "original_file_path": "models/codegen/opensea/WyvernExchangeV2_call_owner.sql", "name": "WyvernExchangeV2_call_owner", "alias": "WyvernExchangeV2_call_owner", "checksum": {"name": "sha256", "checksum": "1e686dbf790e989d8cb4e2b828d58e05fc512d2a00cb2a2b5aa5db94bc6393b8"}, "tags": ["chain_ethereum", "level_parse", "proj_opensea"], "refs": [["stg_ethereum__traces"]], "sources": [], "description": "", "columns": {"output_0": {"name": "output_0", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "call_success": {"name": "call_success", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "call_block_number": {"name": "call_block_number", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "call_block_time": {"name": "call_block_time", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "call_trace_address": {"name": "call_trace_address", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "call_tx_hash": {"name": "call_tx_hash", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "contract_address": {"name": "contract_address", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "dt": {"name": "dt", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "ethereum_source://models/codegen/opensea/schema.yml", "compiled_path": "target/compiled/ethereum_source/models/codegen/opensea/WyvernExchangeV2_call_owner.sql", "build_path": null, "deferred": false, "unrendered_config": {"schema": "opensea", "tags": ["chain_ethereum", "level_parse", "proj_opensea"], "materialized": "incremental", "incremental_strategy": "insert_overwrite", "partition_by": ["dt"], "file_format": "parquet", "pre-hook": [{"sql": "create or replace function opensea_wyvernexchangev2_owner_calldecodeudf as \"io.iftech.sparkudf.hive.opensea_WyvernExchangeV2_owner_CallDecodeUDF\" using jar \"s3a://ifcrypto/blockchain-dbt/jars/opensea_udf.jar\";"}]}, "created_at": 1650535972.06911, "compiled_sql": "\n\nwith base as (\n    select\n        status==1 as call_success,\n        block_number as call_block_number,\n        block_timestamp as call_block_time,\n        trace_address as call_trace_address,\n        transaction_hash as call_tx_hash,\n        to_address as contract_address,\n        dt,\n        opensea_wyvernexchangev2_owner_calldecodeudf(unhex_input, unhex_output, '{\"constant\": true, \"inputs\": [], \"name\": \"owner\", \"outputs\": [{\"name\": \"\", \"type\": \"address\"}], \"payable\": false, \"stateMutability\": \"view\", \"type\": \"function\"}', 'owner') as data\n    from ethereum_stg_ethereum.stg_ethereum__traces\n    where to_address = lower(\"0x7f268357A8c2552623316e2562D90e642bB538E5\")\n    and address_hash = abs(hash(lower(\"0x7f268357A8c2552623316e2562D90e642bB538E5\"))) % 10\n    and selector = \"0x30783864\"\n    and selector_hash = abs(hash(\"0x30783864\")) % 10\n\n    \n),\n\nfinal as (\n    select\n        call_success,\n        call_block_number,\n        call_block_time,\n        call_trace_address,\n        call_tx_hash,\n        contract_address,\n        dt,\n        data.input.*,\n        data.output.*\n    from base\n)\n\nselect /* REPARTITION(dt) */ *\nfrom final", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "ethereum_opensea.WyvernExchangeV2_call_owner"}, "model.ethereum_source.WyvernExchangeV2_call_protocolFeeRecipient": {"raw_sql": "{{\n    config(\n        materialized='incremental',\n        incremental_strategy='insert_overwrite',\n        partition_by=['dt'],\n        file_format='parquet',\n        pre_hook={\n            'sql': 'create or replace function opensea_wyvernexchangev2_protocolfeerecipient_calldecodeudf as \"io.iftech.sparkudf.hive.opensea_WyvernExchangeV2_protocolFeeRecipient_CallDecodeUDF\" using jar \"s3a://ifcrypto/blockchain-dbt/jars/opensea_udf.jar\";'\n        }\n    )\n}}\n\nwith base as (\n    select\n        status==1 as call_success,\n        block_number as call_block_number,\n        block_timestamp as call_block_time,\n        trace_address as call_trace_address,\n        transaction_hash as call_tx_hash,\n        to_address as contract_address,\n        dt,\n        opensea_wyvernexchangev2_protocolfeerecipient_calldecodeudf(unhex_input, unhex_output, '{\"constant\": true, \"inputs\": [], \"name\": \"protocolFeeRecipient\", \"outputs\": [{\"name\": \"\", \"type\": \"address\"}], \"payable\": false, \"stateMutability\": \"view\", \"type\": \"function\"}', 'protocolFeeRecipient') as data\n    from {{ ref('stg_ethereum__traces') }}\n    where to_address = lower(\"0x7f268357A8c2552623316e2562D90e642bB538E5\")\n    and address_hash = abs(hash(lower(\"0x7f268357A8c2552623316e2562D90e642bB538E5\"))) % 10\n    and selector = \"0x30783634\"\n    and selector_hash = abs(hash(\"0x30783634\")) % 10\n\n    {% if is_incremental() %}\n      and dt = var('dt')\n    {% endif %}\n),\n\nfinal as (\n    select\n        call_success,\n        call_block_number,\n        call_block_time,\n        call_trace_address,\n        call_tx_hash,\n        contract_address,\n        dt,\n        data.input.*,\n        data.output.*\n    from base\n)\n\nselect /* REPARTITION(dt) */ *\nfrom final", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.dbt.is_incremental"], "nodes": ["model.ethereum_source.stg_ethereum__traces"]}, "config": {"enabled": true, "alias": null, "schema": "opensea", "database": null, "tags": ["chain_ethereum", "level_parse", "proj_opensea"], "meta": {}, "materialized": "incremental", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "file_format": "parquet", "partition_by": ["dt"], "incremental_strategy": "insert_overwrite", "post-hook": [], "pre-hook": [{"sql": "create or replace function opensea_wyvernexchangev2_protocolfeerecipient_calldecodeudf as \"io.iftech.sparkudf.hive.opensea_WyvernExchangeV2_protocolFeeRecipient_CallDecodeUDF\" using jar \"s3a://ifcrypto/blockchain-dbt/jars/opensea_udf.jar\";", "transaction": true, "index": null}]}, "database": null, "schema": "ethereum_opensea", "fqn": ["ethereum_source", "codegen", "opensea", "WyvernExchangeV2_call_protocolFeeRecipient"], "unique_id": "model.ethereum_source.WyvernExchangeV2_call_protocolFeeRecipient", "package_name": "ethereum_source", "root_path": "/Users/songv/Code/jike/web3/dbt_ethereum_source", "path": "codegen/opensea/WyvernExchangeV2_call_protocolFeeRecipient.sql", "original_file_path": "models/codegen/opensea/WyvernExchangeV2_call_protocolFeeRecipient.sql", "name": "WyvernExchangeV2_call_protocolFeeRecipient", "alias": "WyvernExchangeV2_call_protocolFeeRecipient", "checksum": {"name": "sha256", "checksum": "e53cd0b515033748f3345f12762391b9f9003cfda226bad33223e2bb365a6a3f"}, "tags": ["chain_ethereum", "level_parse", "proj_opensea"], "refs": [["stg_ethereum__traces"]], "sources": [], "description": "", "columns": {"output_0": {"name": "output_0", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "call_success": {"name": "call_success", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "call_block_number": {"name": "call_block_number", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "call_block_time": {"name": "call_block_time", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "call_trace_address": {"name": "call_trace_address", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "call_tx_hash": {"name": "call_tx_hash", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "contract_address": {"name": "contract_address", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "dt": {"name": "dt", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "ethereum_source://models/codegen/opensea/schema.yml", "compiled_path": "target/compiled/ethereum_source/models/codegen/opensea/WyvernExchangeV2_call_protocolFeeRecipient.sql", "build_path": null, "deferred": false, "unrendered_config": {"schema": "opensea", "tags": ["chain_ethereum", "level_parse", "proj_opensea"], "materialized": "incremental", "incremental_strategy": "insert_overwrite", "partition_by": ["dt"], "file_format": "parquet", "pre-hook": [{"sql": "create or replace function opensea_wyvernexchangev2_protocolfeerecipient_calldecodeudf as \"io.iftech.sparkudf.hive.opensea_WyvernExchangeV2_protocolFeeRecipient_CallDecodeUDF\" using jar \"s3a://ifcrypto/blockchain-dbt/jars/opensea_udf.jar\";"}]}, "created_at": 1650535972.047275, "compiled_sql": "\n\nwith base as (\n    select\n        status==1 as call_success,\n        block_number as call_block_number,\n        block_timestamp as call_block_time,\n        trace_address as call_trace_address,\n        transaction_hash as call_tx_hash,\n        to_address as contract_address,\n        dt,\n        opensea_wyvernexchangev2_protocolfeerecipient_calldecodeudf(unhex_input, unhex_output, '{\"constant\": true, \"inputs\": [], \"name\": \"protocolFeeRecipient\", \"outputs\": [{\"name\": \"\", \"type\": \"address\"}], \"payable\": false, \"stateMutability\": \"view\", \"type\": \"function\"}', 'protocolFeeRecipient') as data\n    from ethereum_stg_ethereum.stg_ethereum__traces\n    where to_address = lower(\"0x7f268357A8c2552623316e2562D90e642bB538E5\")\n    and address_hash = abs(hash(lower(\"0x7f268357A8c2552623316e2562D90e642bB538E5\"))) % 10\n    and selector = \"0x30783634\"\n    and selector_hash = abs(hash(\"0x30783634\")) % 10\n\n    \n),\n\nfinal as (\n    select\n        call_success,\n        call_block_number,\n        call_block_time,\n        call_trace_address,\n        call_tx_hash,\n        contract_address,\n        dt,\n        data.input.*,\n        data.output.*\n    from base\n)\n\nselect /* REPARTITION(dt) */ *\nfrom final", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "ethereum_opensea.WyvernExchangeV2_call_protocolFeeRecipient"}, "model.ethereum_source.OpenSeaENSResolver_call_contenthash": {"raw_sql": "{{\n    config(\n        materialized='incremental',\n        incremental_strategy='insert_overwrite',\n        partition_by=['dt'],\n        file_format='parquet',\n        pre_hook={\n            'sql': 'create or replace function opensea_openseaensresolver_contenthash_calldecodeudf as \"io.iftech.sparkudf.hive.opensea_OpenSeaENSResolver_contenthash_CallDecodeUDF\" using jar \"s3a://ifcrypto/blockchain-dbt/jars/opensea_udf.jar\";'\n        }\n    )\n}}\n\nwith base as (\n    select\n        status==1 as call_success,\n        block_number as call_block_number,\n        block_timestamp as call_block_time,\n        trace_address as call_trace_address,\n        transaction_hash as call_tx_hash,\n        to_address as contract_address,\n        dt,\n        opensea_openseaensresolver_contenthash_calldecodeudf(unhex_input, unhex_output, '{\"constant\": true, \"inputs\": [{\"name\": \"node\", \"type\": \"bytes32\"}], \"name\": \"contenthash\", \"outputs\": [{\"name\": \"\", \"type\": \"bytes\"}], \"payable\": false, \"stateMutability\": \"view\", \"type\": \"function\"}', 'contenthash') as data\n    from {{ ref('stg_ethereum__traces') }}\n    where to_address = lower(\"0x9c4e9cce4780062942a7fe34fa2fa7316c872956\")\n    and address_hash = abs(hash(lower(\"0x9c4e9cce4780062942a7fe34fa2fa7316c872956\"))) % 10\n    and selector = \"0x30786263\"\n    and selector_hash = abs(hash(\"0x30786263\")) % 10\n\n    {% if is_incremental() %}\n      and dt = var('dt')\n    {% endif %}\n),\n\nfinal as (\n    select\n        call_success,\n        call_block_number,\n        call_block_time,\n        call_trace_address,\n        call_tx_hash,\n        contract_address,\n        dt,\n        data.input.*,\n        data.output.*\n    from base\n)\n\nselect /* REPARTITION(dt) */ *\nfrom final", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.dbt.is_incremental"], "nodes": ["model.ethereum_source.stg_ethereum__traces"]}, "config": {"enabled": true, "alias": null, "schema": "opensea", "database": null, "tags": ["chain_ethereum", "level_parse", "proj_opensea"], "meta": {}, "materialized": "incremental", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "file_format": "parquet", "partition_by": ["dt"], "incremental_strategy": "insert_overwrite", "post-hook": [], "pre-hook": [{"sql": "create or replace function opensea_openseaensresolver_contenthash_calldecodeudf as \"io.iftech.sparkudf.hive.opensea_OpenSeaENSResolver_contenthash_CallDecodeUDF\" using jar \"s3a://ifcrypto/blockchain-dbt/jars/opensea_udf.jar\";", "transaction": true, "index": null}]}, "database": null, "schema": "ethereum_opensea", "fqn": ["ethereum_source", "codegen", "opensea", "OpenSeaENSResolver_call_contenthash"], "unique_id": "model.ethereum_source.OpenSeaENSResolver_call_contenthash", "package_name": "ethereum_source", "root_path": "/Users/songv/Code/jike/web3/dbt_ethereum_source", "path": "codegen/opensea/OpenSeaENSResolver_call_contenthash.sql", "original_file_path": "models/codegen/opensea/OpenSeaENSResolver_call_contenthash.sql", "name": "OpenSeaENSResolver_call_contenthash", "alias": "OpenSeaENSResolver_call_contenthash", "checksum": {"name": "sha256", "checksum": "cb993605d9aa041a958df402540e4a69fd2032063dc58a4ea261034533ec7ba2"}, "tags": ["chain_ethereum", "level_parse", "proj_opensea"], "refs": [["stg_ethereum__traces"]], "sources": [], "description": "", "columns": {"node": {"name": "node", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "output_0": {"name": "output_0", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "call_success": {"name": "call_success", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "call_block_number": {"name": "call_block_number", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "call_block_time": {"name": "call_block_time", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "call_trace_address": {"name": "call_trace_address", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "call_tx_hash": {"name": "call_tx_hash", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "contract_address": {"name": "contract_address", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "dt": {"name": "dt", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "ethereum_source://models/codegen/opensea/schema.yml", "compiled_path": "target/compiled/ethereum_source/models/codegen/opensea/OpenSeaENSResolver_call_contenthash.sql", "build_path": null, "deferred": false, "unrendered_config": {"schema": "opensea", "tags": ["chain_ethereum", "level_parse", "proj_opensea"], "materialized": "incremental", "incremental_strategy": "insert_overwrite", "partition_by": ["dt"], "file_format": "parquet", "pre-hook": [{"sql": "create or replace function opensea_openseaensresolver_contenthash_calldecodeudf as \"io.iftech.sparkudf.hive.opensea_OpenSeaENSResolver_contenthash_CallDecodeUDF\" using jar \"s3a://ifcrypto/blockchain-dbt/jars/opensea_udf.jar\";"}]}, "created_at": 1650535972.146762, "compiled_sql": "\n\nwith base as (\n    select\n        status==1 as call_success,\n        block_number as call_block_number,\n        block_timestamp as call_block_time,\n        trace_address as call_trace_address,\n        transaction_hash as call_tx_hash,\n        to_address as contract_address,\n        dt,\n        opensea_openseaensresolver_contenthash_calldecodeudf(unhex_input, unhex_output, '{\"constant\": true, \"inputs\": [{\"name\": \"node\", \"type\": \"bytes32\"}], \"name\": \"contenthash\", \"outputs\": [{\"name\": \"\", \"type\": \"bytes\"}], \"payable\": false, \"stateMutability\": \"view\", \"type\": \"function\"}', 'contenthash') as data\n    from ethereum_stg_ethereum.stg_ethereum__traces\n    where to_address = lower(\"0x9c4e9cce4780062942a7fe34fa2fa7316c872956\")\n    and address_hash = abs(hash(lower(\"0x9c4e9cce4780062942a7fe34fa2fa7316c872956\"))) % 10\n    and selector = \"0x30786263\"\n    and selector_hash = abs(hash(\"0x30786263\")) % 10\n\n    \n),\n\nfinal as (\n    select\n        call_success,\n        call_block_number,\n        call_block_time,\n        call_trace_address,\n        call_tx_hash,\n        contract_address,\n        dt,\n        data.input.*,\n        data.output.*\n    from base\n)\n\nselect /* REPARTITION(dt) */ *\nfrom final", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "ethereum_opensea.OpenSeaENSResolver_call_contenthash"}, "model.ethereum_source.WyvernExchangeV1_call_testCopyAddress": {"raw_sql": "{{\n    config(\n        materialized='incremental',\n        incremental_strategy='insert_overwrite',\n        partition_by=['dt'],\n        file_format='parquet',\n        pre_hook={\n            'sql': 'create or replace function opensea_wyvernexchangev1_testcopyaddress_calldecodeudf as \"io.iftech.sparkudf.hive.opensea_WyvernExchangeV1_testCopyAddress_CallDecodeUDF\" using jar \"s3a://ifcrypto/blockchain-dbt/jars/opensea_udf.jar\";'\n        }\n    )\n}}\n\nwith base as (\n    select\n        status==1 as call_success,\n        block_number as call_block_number,\n        block_timestamp as call_block_time,\n        trace_address as call_trace_address,\n        transaction_hash as call_tx_hash,\n        to_address as contract_address,\n        dt,\n        opensea_wyvernexchangev1_testcopyaddress_calldecodeudf(unhex_input, unhex_output, '{\"constant\": true, \"inputs\": [{\"name\": \"addr\", \"type\": \"address\"}], \"name\": \"testCopyAddress\", \"outputs\": [{\"name\": \"\", \"type\": \"bytes\"}], \"payable\": false, \"stateMutability\": \"pure\", \"type\": \"function\"}', 'testCopyAddress') as data\n    from {{ ref('stg_ethereum__traces') }}\n    where to_address = lower(\"0x7Be8076f4EA4A4AD08075C2508e481d6C946D12b\")\n    and address_hash = abs(hash(lower(\"0x7Be8076f4EA4A4AD08075C2508e481d6C946D12b\"))) % 10\n    and selector = \"0x30783334\"\n    and selector_hash = abs(hash(\"0x30783334\")) % 10\n\n    {% if is_incremental() %}\n      and dt = var('dt')\n    {% endif %}\n),\n\nfinal as (\n    select\n        call_success,\n        call_block_number,\n        call_block_time,\n        call_trace_address,\n        call_tx_hash,\n        contract_address,\n        dt,\n        data.input.*,\n        data.output.*\n    from base\n)\n\nselect /* REPARTITION(dt) */ *\nfrom final", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.dbt.is_incremental"], "nodes": ["model.ethereum_source.stg_ethereum__traces"]}, "config": {"enabled": true, "alias": null, "schema": "opensea", "database": null, "tags": ["chain_ethereum", "level_parse", "proj_opensea"], "meta": {}, "materialized": "incremental", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "file_format": "parquet", "partition_by": ["dt"], "incremental_strategy": "insert_overwrite", "post-hook": [], "pre-hook": [{"sql": "create or replace function opensea_wyvernexchangev1_testcopyaddress_calldecodeudf as \"io.iftech.sparkudf.hive.opensea_WyvernExchangeV1_testCopyAddress_CallDecodeUDF\" using jar \"s3a://ifcrypto/blockchain-dbt/jars/opensea_udf.jar\";", "transaction": true, "index": null}]}, "database": null, "schema": "ethereum_opensea", "fqn": ["ethereum_source", "codegen", "opensea", "WyvernExchangeV1_call_testCopyAddress"], "unique_id": "model.ethereum_source.WyvernExchangeV1_call_testCopyAddress", "package_name": "ethereum_source", "root_path": "/Users/songv/Code/jike/web3/dbt_ethereum_source", "path": "codegen/opensea/WyvernExchangeV1_call_testCopyAddress.sql", "original_file_path": "models/codegen/opensea/WyvernExchangeV1_call_testCopyAddress.sql", "name": "WyvernExchangeV1_call_testCopyAddress", "alias": "WyvernExchangeV1_call_testCopyAddress", "checksum": {"name": "sha256", "checksum": "b55e2ca5351cd509a66fc4a41d56278a774d3c23a5967afe4c7ac9afb382453b"}, "tags": ["chain_ethereum", "level_parse", "proj_opensea"], "refs": [["stg_ethereum__traces"]], "sources": [], "description": "", "columns": {"addr": {"name": "addr", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "output_0": {"name": "output_0", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "call_success": {"name": "call_success", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "call_block_number": {"name": "call_block_number", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "call_block_time": {"name": "call_block_time", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "call_trace_address": {"name": "call_trace_address", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "call_tx_hash": {"name": "call_tx_hash", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "contract_address": {"name": "contract_address", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "dt": {"name": "dt", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "ethereum_source://models/codegen/opensea/schema.yml", "compiled_path": "target/compiled/ethereum_source/models/codegen/opensea/WyvernExchangeV1_call_testCopyAddress.sql", "build_path": null, "deferred": false, "unrendered_config": {"schema": "opensea", "tags": ["chain_ethereum", "level_parse", "proj_opensea"], "materialized": "incremental", "incremental_strategy": "insert_overwrite", "partition_by": ["dt"], "file_format": "parquet", "pre-hook": [{"sql": "create or replace function opensea_wyvernexchangev1_testcopyaddress_calldecodeudf as \"io.iftech.sparkudf.hive.opensea_WyvernExchangeV1_testCopyAddress_CallDecodeUDF\" using jar \"s3a://ifcrypto/blockchain-dbt/jars/opensea_udf.jar\";"}]}, "created_at": 1650535971.941041, "compiled_sql": "\n\nwith base as (\n    select\n        status==1 as call_success,\n        block_number as call_block_number,\n        block_timestamp as call_block_time,\n        trace_address as call_trace_address,\n        transaction_hash as call_tx_hash,\n        to_address as contract_address,\n        dt,\n        opensea_wyvernexchangev1_testcopyaddress_calldecodeudf(unhex_input, unhex_output, '{\"constant\": true, \"inputs\": [{\"name\": \"addr\", \"type\": \"address\"}], \"name\": \"testCopyAddress\", \"outputs\": [{\"name\": \"\", \"type\": \"bytes\"}], \"payable\": false, \"stateMutability\": \"pure\", \"type\": \"function\"}', 'testCopyAddress') as data\n    from ethereum_stg_ethereum.stg_ethereum__traces\n    where to_address = lower(\"0x7Be8076f4EA4A4AD08075C2508e481d6C946D12b\")\n    and address_hash = abs(hash(lower(\"0x7Be8076f4EA4A4AD08075C2508e481d6C946D12b\"))) % 10\n    and selector = \"0x30783334\"\n    and selector_hash = abs(hash(\"0x30783334\")) % 10\n\n    \n),\n\nfinal as (\n    select\n        call_success,\n        call_block_number,\n        call_block_time,\n        call_trace_address,\n        call_tx_hash,\n        contract_address,\n        dt,\n        data.input.*,\n        data.output.*\n    from base\n)\n\nselect /* REPARTITION(dt) */ *\nfrom final", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "ethereum_opensea.WyvernExchangeV1_call_testCopyAddress"}, "model.ethereum_source.WyvernExchangeV1_call_atomicMatch_": {"raw_sql": "{{\n    config(\n        materialized='incremental',\n        incremental_strategy='insert_overwrite',\n        partition_by=['dt'],\n        file_format='parquet',\n        pre_hook={\n            'sql': 'create or replace function opensea_wyvernexchangev1_atomicmatch__calldecodeudf as \"io.iftech.sparkudf.hive.opensea_WyvernExchangeV1_atomicMatch__CallDecodeUDF\" using jar \"s3a://ifcrypto/blockchain-dbt/jars/opensea_udf.jar\";'\n        }\n    )\n}}\n\nwith base as (\n    select\n        status==1 as call_success,\n        block_number as call_block_number,\n        block_timestamp as call_block_time,\n        trace_address as call_trace_address,\n        transaction_hash as call_tx_hash,\n        to_address as contract_address,\n        dt,\n        opensea_wyvernexchangev1_atomicmatch__calldecodeudf(unhex_input, unhex_output, '{\"constant\": false, \"inputs\": [{\"name\": \"addrs\", \"type\": \"address[14]\"}, {\"name\": \"uints\", \"type\": \"uint256[18]\"}, {\"name\": \"feeMethodsSidesKindsHowToCalls\", \"type\": \"uint8[8]\"}, {\"name\": \"calldataBuy\", \"type\": \"bytes\"}, {\"name\": \"calldataSell\", \"type\": \"bytes\"}, {\"name\": \"replacementPatternBuy\", \"type\": \"bytes\"}, {\"name\": \"replacementPatternSell\", \"type\": \"bytes\"}, {\"name\": \"staticExtradataBuy\", \"type\": \"bytes\"}, {\"name\": \"staticExtradataSell\", \"type\": \"bytes\"}, {\"name\": \"vs\", \"type\": \"uint8[2]\"}, {\"name\": \"rssMetadata\", \"type\": \"bytes32[5]\"}], \"name\": \"atomicMatch_\", \"outputs\": [], \"payable\": true, \"stateMutability\": \"payable\", \"type\": \"function\"}', 'atomicMatch_') as data\n    from {{ ref('stg_ethereum__traces') }}\n    where to_address = lower(\"0x7Be8076f4EA4A4AD08075C2508e481d6C946D12b\")\n    and address_hash = abs(hash(lower(\"0x7Be8076f4EA4A4AD08075C2508e481d6C946D12b\"))) % 10\n    and selector = \"0x30786162\"\n    and selector_hash = abs(hash(\"0x30786162\")) % 10\n\n    {% if is_incremental() %}\n      and dt = var('dt')\n    {% endif %}\n),\n\nfinal as (\n    select\n        call_success,\n        call_block_number,\n        call_block_time,\n        call_trace_address,\n        call_tx_hash,\n        contract_address,\n        dt,\n        data.input.*,\n        data.output.*\n    from base\n)\n\nselect /* REPARTITION(dt) */ *\nfrom final", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.dbt.is_incremental"], "nodes": ["model.ethereum_source.stg_ethereum__traces"]}, "config": {"enabled": true, "alias": null, "schema": "opensea", "database": null, "tags": ["chain_ethereum", "level_parse", "proj_opensea"], "meta": {}, "materialized": "incremental", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "file_format": "parquet", "partition_by": ["dt"], "incremental_strategy": "insert_overwrite", "post-hook": [], "pre-hook": [{"sql": "create or replace function opensea_wyvernexchangev1_atomicmatch__calldecodeudf as \"io.iftech.sparkudf.hive.opensea_WyvernExchangeV1_atomicMatch__CallDecodeUDF\" using jar \"s3a://ifcrypto/blockchain-dbt/jars/opensea_udf.jar\";", "transaction": true, "index": null}]}, "database": null, "schema": "ethereum_opensea", "fqn": ["ethereum_source", "codegen", "opensea", "WyvernExchangeV1_call_atomicMatch_"], "unique_id": "model.ethereum_source.WyvernExchangeV1_call_atomicMatch_", "package_name": "ethereum_source", "root_path": "/Users/songv/Code/jike/web3/dbt_ethereum_source", "path": "codegen/opensea/WyvernExchangeV1_call_atomicMatch_.sql", "original_file_path": "models/codegen/opensea/WyvernExchangeV1_call_atomicMatch_.sql", "name": "WyvernExchangeV1_call_atomicMatch_", "alias": "WyvernExchangeV1_call_atomicMatch_", "checksum": {"name": "sha256", "checksum": "f240f580c04558dd9428f8a3d82f5daa3a25e23a2a9dcf70821f71e8d0a546a7"}, "tags": ["chain_ethereum", "level_parse", "proj_opensea"], "refs": [["stg_ethereum__traces"]], "sources": [], "description": "", "columns": {"addrs": {"name": "addrs", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "uints": {"name": "uints", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "feeMethodsSidesKindsHowToCalls": {"name": "feeMethodsSidesKindsHowToCalls", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "calldataBuy": {"name": "calldataBuy", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "calldataSell": {"name": "calldataSell", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "replacementPatternBuy": {"name": "replacementPatternBuy", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "replacementPatternSell": {"name": "replacementPatternSell", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "staticExtradataBuy": {"name": "staticExtradataBuy", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "staticExtradataSell": {"name": "staticExtradataSell", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "vs": {"name": "vs", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "rssMetadata": {"name": "rssMetadata", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "call_success": {"name": "call_success", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "call_block_number": {"name": "call_block_number", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "call_block_time": {"name": "call_block_time", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "call_trace_address": {"name": "call_trace_address", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "call_tx_hash": {"name": "call_tx_hash", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "contract_address": {"name": "contract_address", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "dt": {"name": "dt", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "ethereum_source://models/codegen/opensea/schema.yml", "compiled_path": "target/compiled/ethereum_source/models/codegen/opensea/WyvernExchangeV1_call_atomicMatch_.sql", "build_path": null, "deferred": false, "unrendered_config": {"schema": "opensea", "tags": ["chain_ethereum", "level_parse", "proj_opensea"], "materialized": "incremental", "incremental_strategy": "insert_overwrite", "partition_by": ["dt"], "file_format": "parquet", "pre-hook": [{"sql": "create or replace function opensea_wyvernexchangev1_atomicmatch__calldecodeudf as \"io.iftech.sparkudf.hive.opensea_WyvernExchangeV1_atomicMatch__CallDecodeUDF\" using jar \"s3a://ifcrypto/blockchain-dbt/jars/opensea_udf.jar\";"}]}, "created_at": 1650535971.987544, "compiled_sql": "\n\nwith base as (\n    select\n        status==1 as call_success,\n        block_number as call_block_number,\n        block_timestamp as call_block_time,\n        trace_address as call_trace_address,\n        transaction_hash as call_tx_hash,\n        to_address as contract_address,\n        dt,\n        opensea_wyvernexchangev1_atomicmatch__calldecodeudf(unhex_input, unhex_output, '{\"constant\": false, \"inputs\": [{\"name\": \"addrs\", \"type\": \"address[14]\"}, {\"name\": \"uints\", \"type\": \"uint256[18]\"}, {\"name\": \"feeMethodsSidesKindsHowToCalls\", \"type\": \"uint8[8]\"}, {\"name\": \"calldataBuy\", \"type\": \"bytes\"}, {\"name\": \"calldataSell\", \"type\": \"bytes\"}, {\"name\": \"replacementPatternBuy\", \"type\": \"bytes\"}, {\"name\": \"replacementPatternSell\", \"type\": \"bytes\"}, {\"name\": \"staticExtradataBuy\", \"type\": \"bytes\"}, {\"name\": \"staticExtradataSell\", \"type\": \"bytes\"}, {\"name\": \"vs\", \"type\": \"uint8[2]\"}, {\"name\": \"rssMetadata\", \"type\": \"bytes32[5]\"}], \"name\": \"atomicMatch_\", \"outputs\": [], \"payable\": true, \"stateMutability\": \"payable\", \"type\": \"function\"}', 'atomicMatch_') as data\n    from ethereum_stg_ethereum.stg_ethereum__traces\n    where to_address = lower(\"0x7Be8076f4EA4A4AD08075C2508e481d6C946D12b\")\n    and address_hash = abs(hash(lower(\"0x7Be8076f4EA4A4AD08075C2508e481d6C946D12b\"))) % 10\n    and selector = \"0x30786162\"\n    and selector_hash = abs(hash(\"0x30786162\")) % 10\n\n    \n),\n\nfinal as (\n    select\n        call_success,\n        call_block_number,\n        call_block_time,\n        call_trace_address,\n        call_tx_hash,\n        contract_address,\n        dt,\n        data.input.*,\n        data.output.*\n    from base\n)\n\nselect /* REPARTITION(dt) */ *\nfrom final", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "ethereum_opensea.WyvernExchangeV1_call_atomicMatch_"}, "model.ethereum_source.WyvernExchangeV1_call_minimumTakerProtocolFee": {"raw_sql": "{{\n    config(\n        materialized='incremental',\n        incremental_strategy='insert_overwrite',\n        partition_by=['dt'],\n        file_format='parquet',\n        pre_hook={\n            'sql': 'create or replace function opensea_wyvernexchangev1_minimumtakerprotocolfee_calldecodeudf as \"io.iftech.sparkudf.hive.opensea_WyvernExchangeV1_minimumTakerProtocolFee_CallDecodeUDF\" using jar \"s3a://ifcrypto/blockchain-dbt/jars/opensea_udf.jar\";'\n        }\n    )\n}}\n\nwith base as (\n    select\n        status==1 as call_success,\n        block_number as call_block_number,\n        block_timestamp as call_block_time,\n        trace_address as call_trace_address,\n        transaction_hash as call_tx_hash,\n        to_address as contract_address,\n        dt,\n        opensea_wyvernexchangev1_minimumtakerprotocolfee_calldecodeudf(unhex_input, unhex_output, '{\"constant\": true, \"inputs\": [], \"name\": \"minimumTakerProtocolFee\", \"outputs\": [{\"name\": \"\", \"type\": \"uint256\"}], \"payable\": false, \"stateMutability\": \"view\", \"type\": \"function\"}', 'minimumTakerProtocolFee') as data\n    from {{ ref('stg_ethereum__traces') }}\n    where to_address = lower(\"0x7Be8076f4EA4A4AD08075C2508e481d6C946D12b\")\n    and address_hash = abs(hash(lower(\"0x7Be8076f4EA4A4AD08075C2508e481d6C946D12b\"))) % 10\n    and selector = \"0x30783238\"\n    and selector_hash = abs(hash(\"0x30783238\")) % 10\n\n    {% if is_incremental() %}\n      and dt = var('dt')\n    {% endif %}\n),\n\nfinal as (\n    select\n        call_success,\n        call_block_number,\n        call_block_time,\n        call_trace_address,\n        call_tx_hash,\n        contract_address,\n        dt,\n        data.input.*,\n        data.output.*\n    from base\n)\n\nselect /* REPARTITION(dt) */ *\nfrom final", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.dbt.is_incremental"], "nodes": ["model.ethereum_source.stg_ethereum__traces"]}, "config": {"enabled": true, "alias": null, "schema": "opensea", "database": null, "tags": ["chain_ethereum", "level_parse", "proj_opensea"], "meta": {}, "materialized": "incremental", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "file_format": "parquet", "partition_by": ["dt"], "incremental_strategy": "insert_overwrite", "post-hook": [], "pre-hook": [{"sql": "create or replace function opensea_wyvernexchangev1_minimumtakerprotocolfee_calldecodeudf as \"io.iftech.sparkudf.hive.opensea_WyvernExchangeV1_minimumTakerProtocolFee_CallDecodeUDF\" using jar \"s3a://ifcrypto/blockchain-dbt/jars/opensea_udf.jar\";", "transaction": true, "index": null}]}, "database": null, "schema": "ethereum_opensea", "fqn": ["ethereum_source", "codegen", "opensea", "WyvernExchangeV1_call_minimumTakerProtocolFee"], "unique_id": "model.ethereum_source.WyvernExchangeV1_call_minimumTakerProtocolFee", "package_name": "ethereum_source", "root_path": "/Users/songv/Code/jike/web3/dbt_ethereum_source", "path": "codegen/opensea/WyvernExchangeV1_call_minimumTakerProtocolFee.sql", "original_file_path": "models/codegen/opensea/WyvernExchangeV1_call_minimumTakerProtocolFee.sql", "name": "WyvernExchangeV1_call_minimumTakerProtocolFee", "alias": "WyvernExchangeV1_call_minimumTakerProtocolFee", "checksum": {"name": "sha256", "checksum": "8d7af107c3c60e87b69b37b2c5dbd69f805561fcc561e46361e29e2c70e4a0ec"}, "tags": ["chain_ethereum", "level_parse", "proj_opensea"], "refs": [["stg_ethereum__traces"]], "sources": [], "description": "", "columns": {"output_0": {"name": "output_0", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "call_success": {"name": "call_success", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "call_block_number": {"name": "call_block_number", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "call_block_time": {"name": "call_block_time", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "call_trace_address": {"name": "call_trace_address", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "call_tx_hash": {"name": "call_tx_hash", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "contract_address": {"name": "contract_address", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "dt": {"name": "dt", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "ethereum_source://models/codegen/opensea/schema.yml", "compiled_path": "target/compiled/ethereum_source/models/codegen/opensea/WyvernExchangeV1_call_minimumTakerProtocolFee.sql", "build_path": null, "deferred": false, "unrendered_config": {"schema": "opensea", "tags": ["chain_ethereum", "level_parse", "proj_opensea"], "materialized": "incremental", "incremental_strategy": "insert_overwrite", "partition_by": ["dt"], "file_format": "parquet", "pre-hook": [{"sql": "create or replace function opensea_wyvernexchangev1_minimumtakerprotocolfee_calldecodeudf as \"io.iftech.sparkudf.hive.opensea_WyvernExchangeV1_minimumTakerProtocolFee_CallDecodeUDF\" using jar \"s3a://ifcrypto/blockchain-dbt/jars/opensea_udf.jar\";"}]}, "created_at": 1650535971.937679, "compiled_sql": "\n\nwith base as (\n    select\n        status==1 as call_success,\n        block_number as call_block_number,\n        block_timestamp as call_block_time,\n        trace_address as call_trace_address,\n        transaction_hash as call_tx_hash,\n        to_address as contract_address,\n        dt,\n        opensea_wyvernexchangev1_minimumtakerprotocolfee_calldecodeudf(unhex_input, unhex_output, '{\"constant\": true, \"inputs\": [], \"name\": \"minimumTakerProtocolFee\", \"outputs\": [{\"name\": \"\", \"type\": \"uint256\"}], \"payable\": false, \"stateMutability\": \"view\", \"type\": \"function\"}', 'minimumTakerProtocolFee') as data\n    from ethereum_stg_ethereum.stg_ethereum__traces\n    where to_address = lower(\"0x7Be8076f4EA4A4AD08075C2508e481d6C946D12b\")\n    and address_hash = abs(hash(lower(\"0x7Be8076f4EA4A4AD08075C2508e481d6C946D12b\"))) % 10\n    and selector = \"0x30783238\"\n    and selector_hash = abs(hash(\"0x30783238\")) % 10\n\n    \n),\n\nfinal as (\n    select\n        call_success,\n        call_block_number,\n        call_block_time,\n        call_trace_address,\n        call_tx_hash,\n        contract_address,\n        dt,\n        data.input.*,\n        data.output.*\n    from base\n)\n\nselect /* REPARTITION(dt) */ *\nfrom final", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "ethereum_opensea.WyvernExchangeV1_call_minimumTakerProtocolFee"}, "model.ethereum_source.OpenSeaENSResolver_call_addTokenId": {"raw_sql": "{{\n    config(\n        materialized='incremental',\n        incremental_strategy='insert_overwrite',\n        partition_by=['dt'],\n        file_format='parquet',\n        pre_hook={\n            'sql': 'create or replace function opensea_openseaensresolver_addtokenid_calldecodeudf as \"io.iftech.sparkudf.hive.opensea_OpenSeaENSResolver_addTokenId_CallDecodeUDF\" using jar \"s3a://ifcrypto/blockchain-dbt/jars/opensea_udf.jar\";'\n        }\n    )\n}}\n\nwith base as (\n    select\n        status==1 as call_success,\n        block_number as call_block_number,\n        block_timestamp as call_block_time,\n        trace_address as call_trace_address,\n        transaction_hash as call_tx_hash,\n        to_address as contract_address,\n        dt,\n        opensea_openseaensresolver_addtokenid_calldecodeudf(unhex_input, unhex_output, '{\"constant\": false, \"inputs\": [{\"name\": \"tokenId\", \"type\": \"uint256\"}], \"name\": \"addTokenId\", \"outputs\": [], \"payable\": false, \"stateMutability\": \"nonpayable\", \"type\": \"function\"}', 'addTokenId') as data\n    from {{ ref('stg_ethereum__traces') }}\n    where to_address = lower(\"0x9c4e9cce4780062942a7fe34fa2fa7316c872956\")\n    and address_hash = abs(hash(lower(\"0x9c4e9cce4780062942a7fe34fa2fa7316c872956\"))) % 10\n    and selector = \"0x30786664\"\n    and selector_hash = abs(hash(\"0x30786664\")) % 10\n\n    {% if is_incremental() %}\n      and dt = var('dt')\n    {% endif %}\n),\n\nfinal as (\n    select\n        call_success,\n        call_block_number,\n        call_block_time,\n        call_trace_address,\n        call_tx_hash,\n        contract_address,\n        dt,\n        data.input.*,\n        data.output.*\n    from base\n)\n\nselect /* REPARTITION(dt) */ *\nfrom final", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.dbt.is_incremental"], "nodes": ["model.ethereum_source.stg_ethereum__traces"]}, "config": {"enabled": true, "alias": null, "schema": "opensea", "database": null, "tags": ["chain_ethereum", "level_parse", "proj_opensea"], "meta": {}, "materialized": "incremental", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "file_format": "parquet", "partition_by": ["dt"], "incremental_strategy": "insert_overwrite", "post-hook": [], "pre-hook": [{"sql": "create or replace function opensea_openseaensresolver_addtokenid_calldecodeudf as \"io.iftech.sparkudf.hive.opensea_OpenSeaENSResolver_addTokenId_CallDecodeUDF\" using jar \"s3a://ifcrypto/blockchain-dbt/jars/opensea_udf.jar\";", "transaction": true, "index": null}]}, "database": null, "schema": "ethereum_opensea", "fqn": ["ethereum_source", "codegen", "opensea", "OpenSeaENSResolver_call_addTokenId"], "unique_id": "model.ethereum_source.OpenSeaENSResolver_call_addTokenId", "package_name": "ethereum_source", "root_path": "/Users/songv/Code/jike/web3/dbt_ethereum_source", "path": "codegen/opensea/OpenSeaENSResolver_call_addTokenId.sql", "original_file_path": "models/codegen/opensea/OpenSeaENSResolver_call_addTokenId.sql", "name": "OpenSeaENSResolver_call_addTokenId", "alias": "OpenSeaENSResolver_call_addTokenId", "checksum": {"name": "sha256", "checksum": "6706046bbec3b720d7ff9e51c535f7b1c3ccfe4881a9e5ce2b9273b6f60ffa1e"}, "tags": ["chain_ethereum", "level_parse", "proj_opensea"], "refs": [["stg_ethereum__traces"]], "sources": [], "description": "", "columns": {"tokenId": {"name": "tokenId", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "call_success": {"name": "call_success", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "call_block_number": {"name": "call_block_number", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "call_block_time": {"name": "call_block_time", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "call_trace_address": {"name": "call_trace_address", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "call_tx_hash": {"name": "call_tx_hash", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "contract_address": {"name": "contract_address", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "dt": {"name": "dt", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "ethereum_source://models/codegen/opensea/schema.yml", "compiled_path": "target/compiled/ethereum_source/models/codegen/opensea/OpenSeaENSResolver_call_addTokenId.sql", "build_path": null, "deferred": false, "unrendered_config": {"schema": "opensea", "tags": ["chain_ethereum", "level_parse", "proj_opensea"], "materialized": "incremental", "incremental_strategy": "insert_overwrite", "partition_by": ["dt"], "file_format": "parquet", "pre-hook": [{"sql": "create or replace function opensea_openseaensresolver_addtokenid_calldecodeudf as \"io.iftech.sparkudf.hive.opensea_OpenSeaENSResolver_addTokenId_CallDecodeUDF\" using jar \"s3a://ifcrypto/blockchain-dbt/jars/opensea_udf.jar\";"}]}, "created_at": 1650535972.1594691, "compiled_sql": "\n\nwith base as (\n    select\n        status==1 as call_success,\n        block_number as call_block_number,\n        block_timestamp as call_block_time,\n        trace_address as call_trace_address,\n        transaction_hash as call_tx_hash,\n        to_address as contract_address,\n        dt,\n        opensea_openseaensresolver_addtokenid_calldecodeudf(unhex_input, unhex_output, '{\"constant\": false, \"inputs\": [{\"name\": \"tokenId\", \"type\": \"uint256\"}], \"name\": \"addTokenId\", \"outputs\": [], \"payable\": false, \"stateMutability\": \"nonpayable\", \"type\": \"function\"}', 'addTokenId') as data\n    from ethereum_stg_ethereum.stg_ethereum__traces\n    where to_address = lower(\"0x9c4e9cce4780062942a7fe34fa2fa7316c872956\")\n    and address_hash = abs(hash(lower(\"0x9c4e9cce4780062942a7fe34fa2fa7316c872956\"))) % 10\n    and selector = \"0x30786664\"\n    and selector_hash = abs(hash(\"0x30786664\")) % 10\n\n    \n),\n\nfinal as (\n    select\n        call_success,\n        call_block_number,\n        call_block_time,\n        call_trace_address,\n        call_tx_hash,\n        contract_address,\n        dt,\n        data.input.*,\n        data.output.*\n    from base\n)\n\nselect /* REPARTITION(dt) */ *\nfrom final", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "ethereum_opensea.OpenSeaENSResolver_call_addTokenId"}, "model.ethereum_source.WyvernExchangeV2_call_exchangeToken": {"raw_sql": "{{\n    config(\n        materialized='incremental',\n        incremental_strategy='insert_overwrite',\n        partition_by=['dt'],\n        file_format='parquet',\n        pre_hook={\n            'sql': 'create or replace function opensea_wyvernexchangev2_exchangetoken_calldecodeudf as \"io.iftech.sparkudf.hive.opensea_WyvernExchangeV2_exchangeToken_CallDecodeUDF\" using jar \"s3a://ifcrypto/blockchain-dbt/jars/opensea_udf.jar\";'\n        }\n    )\n}}\n\nwith base as (\n    select\n        status==1 as call_success,\n        block_number as call_block_number,\n        block_timestamp as call_block_time,\n        trace_address as call_trace_address,\n        transaction_hash as call_tx_hash,\n        to_address as contract_address,\n        dt,\n        opensea_wyvernexchangev2_exchangetoken_calldecodeudf(unhex_input, unhex_output, '{\"constant\": true, \"inputs\": [], \"name\": \"exchangeToken\", \"outputs\": [{\"name\": \"\", \"type\": \"address\"}], \"payable\": false, \"stateMutability\": \"view\", \"type\": \"function\"}', 'exchangeToken') as data\n    from {{ ref('stg_ethereum__traces') }}\n    where to_address = lower(\"0x7f268357A8c2552623316e2562D90e642bB538E5\")\n    and address_hash = abs(hash(lower(\"0x7f268357A8c2552623316e2562D90e642bB538E5\"))) % 10\n    and selector = \"0x30786132\"\n    and selector_hash = abs(hash(\"0x30786132\")) % 10\n\n    {% if is_incremental() %}\n      and dt = var('dt')\n    {% endif %}\n),\n\nfinal as (\n    select\n        call_success,\n        call_block_number,\n        call_block_time,\n        call_trace_address,\n        call_tx_hash,\n        contract_address,\n        dt,\n        data.input.*,\n        data.output.*\n    from base\n)\n\nselect /* REPARTITION(dt) */ *\nfrom final", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.dbt.is_incremental"], "nodes": ["model.ethereum_source.stg_ethereum__traces"]}, "config": {"enabled": true, "alias": null, "schema": "opensea", "database": null, "tags": ["chain_ethereum", "level_parse", "proj_opensea"], "meta": {}, "materialized": "incremental", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "file_format": "parquet", "partition_by": ["dt"], "incremental_strategy": "insert_overwrite", "post-hook": [], "pre-hook": [{"sql": "create or replace function opensea_wyvernexchangev2_exchangetoken_calldecodeudf as \"io.iftech.sparkudf.hive.opensea_WyvernExchangeV2_exchangeToken_CallDecodeUDF\" using jar \"s3a://ifcrypto/blockchain-dbt/jars/opensea_udf.jar\";", "transaction": true, "index": null}]}, "database": null, "schema": "ethereum_opensea", "fqn": ["ethereum_source", "codegen", "opensea", "WyvernExchangeV2_call_exchangeToken"], "unique_id": "model.ethereum_source.WyvernExchangeV2_call_exchangeToken", "package_name": "ethereum_source", "root_path": "/Users/songv/Code/jike/web3/dbt_ethereum_source", "path": "codegen/opensea/WyvernExchangeV2_call_exchangeToken.sql", "original_file_path": "models/codegen/opensea/WyvernExchangeV2_call_exchangeToken.sql", "name": "WyvernExchangeV2_call_exchangeToken", "alias": "WyvernExchangeV2_call_exchangeToken", "checksum": {"name": "sha256", "checksum": "cdaccc3d7aa16b72d0253923938d8d5c82b564e128a69a77d7541a89786ff9b8"}, "tags": ["chain_ethereum", "level_parse", "proj_opensea"], "refs": [["stg_ethereum__traces"]], "sources": [], "description": "", "columns": {"output_0": {"name": "output_0", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "call_success": {"name": "call_success", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "call_block_number": {"name": "call_block_number", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "call_block_time": {"name": "call_block_time", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "call_trace_address": {"name": "call_trace_address", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "call_tx_hash": {"name": "call_tx_hash", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "contract_address": {"name": "contract_address", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "dt": {"name": "dt", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "ethereum_source://models/codegen/opensea/schema.yml", "compiled_path": "target/compiled/ethereum_source/models/codegen/opensea/WyvernExchangeV2_call_exchangeToken.sql", "build_path": null, "deferred": false, "unrendered_config": {"schema": "opensea", "tags": ["chain_ethereum", "level_parse", "proj_opensea"], "materialized": "incremental", "incremental_strategy": "insert_overwrite", "partition_by": ["dt"], "file_format": "parquet", "pre-hook": [{"sql": "create or replace function opensea_wyvernexchangev2_exchangetoken_calldecodeudf as \"io.iftech.sparkudf.hive.opensea_WyvernExchangeV2_exchangeToken_CallDecodeUDF\" using jar \"s3a://ifcrypto/blockchain-dbt/jars/opensea_udf.jar\";"}]}, "created_at": 1650535972.071315, "compiled_sql": "\n\nwith base as (\n    select\n        status==1 as call_success,\n        block_number as call_block_number,\n        block_timestamp as call_block_time,\n        trace_address as call_trace_address,\n        transaction_hash as call_tx_hash,\n        to_address as contract_address,\n        dt,\n        opensea_wyvernexchangev2_exchangetoken_calldecodeudf(unhex_input, unhex_output, '{\"constant\": true, \"inputs\": [], \"name\": \"exchangeToken\", \"outputs\": [{\"name\": \"\", \"type\": \"address\"}], \"payable\": false, \"stateMutability\": \"view\", \"type\": \"function\"}', 'exchangeToken') as data\n    from ethereum_stg_ethereum.stg_ethereum__traces\n    where to_address = lower(\"0x7f268357A8c2552623316e2562D90e642bB538E5\")\n    and address_hash = abs(hash(lower(\"0x7f268357A8c2552623316e2562D90e642bB538E5\"))) % 10\n    and selector = \"0x30786132\"\n    and selector_hash = abs(hash(\"0x30786132\")) % 10\n\n    \n),\n\nfinal as (\n    select\n        call_success,\n        call_block_number,\n        call_block_time,\n        call_trace_address,\n        call_tx_hash,\n        contract_address,\n        dt,\n        data.input.*,\n        data.output.*\n    from base\n)\n\nselect /* REPARTITION(dt) */ *\nfrom final", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "ethereum_opensea.WyvernExchangeV2_call_exchangeToken"}, "model.ethereum_source.OpenSeaENSResolver_evt_TextChanged": {"raw_sql": "{{\n    config(\n        materialized='incremental',\n        incremental_strategy='insert_overwrite',\n        partition_by=['dt'],\n        file_format='parquet',\n        pre_hook={\n            'sql': 'create or replace function opensea_openseaensresolver_textchanged_eventdecodeudf as \"io.iftech.sparkudf.hive.opensea_OpenSeaENSResolver_TextChanged_EventDecodeUDF\" using jar \"s3a://ifcrypto/blockchain-dbt/jars/opensea_udf.jar\";'\n        }\n    )\n}}\n\nwith base as (\n    select\n        block_number as evt_block_number,\n        block_timestamp as evt_block_time,\n        log_index as evt_index,\n        transaction_hash as evt_tx_hash,\n        address as contract_address,\n        dt,\n        opensea_openseaensresolver_textchanged_eventdecodeudf(unhex_data, topics_arr, '{\"anonymous\": false, \"inputs\": [{\"indexed\": true, \"name\": \"node\", \"type\": \"bytes32\"}, {\"indexed\": false, \"name\": \"indexedKey\", \"type\": \"string\"}, {\"indexed\": false, \"name\": \"key\", \"type\": \"string\"}], \"name\": \"TextChanged\", \"type\": \"event\"}', 'TextChanged') as data\n    from {{ ref('stg_ethereum__logs') }}\n    where address = lower(\"0x9c4e9cce4780062942a7fe34fa2fa7316c872956\")\n    and address_hash = abs(hash(lower(\"0x9c4e9cce4780062942a7fe34fa2fa7316c872956\"))) % 10\n    and selector = \"0xd8c9334b1a9c2f9da342a0a2b32629c1a229b6445dad78947f674b44444a7550\"\n    and selector_hash = abs(hash(\"0xd8c9334b1a9c2f9da342a0a2b32629c1a229b6445dad78947f674b44444a7550\")) % 10\n\n    {% if is_incremental() %}\n      and dt = var('dt')\n    {% endif %}\n),\n\nfinal as (\n    select\n        evt_block_number,\n        evt_block_time,\n        evt_index,\n        evt_tx_hash,\n        contract_address,\n        dt,\n        data.input.*\n    from base\n)\n\nselect /* REPARTITION(dt) */ *\nfrom final", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.dbt.is_incremental"], "nodes": ["model.ethereum_source.stg_ethereum__logs"]}, "config": {"enabled": true, "alias": null, "schema": "opensea", "database": null, "tags": ["chain_ethereum", "level_parse", "proj_opensea"], "meta": {}, "materialized": "incremental", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "file_format": "parquet", "partition_by": ["dt"], "incremental_strategy": "insert_overwrite", "post-hook": [], "pre-hook": [{"sql": "create or replace function opensea_openseaensresolver_textchanged_eventdecodeudf as \"io.iftech.sparkudf.hive.opensea_OpenSeaENSResolver_TextChanged_EventDecodeUDF\" using jar \"s3a://ifcrypto/blockchain-dbt/jars/opensea_udf.jar\";", "transaction": true, "index": null}]}, "database": null, "schema": "ethereum_opensea", "fqn": ["ethereum_source", "codegen", "opensea", "OpenSeaENSResolver_evt_TextChanged"], "unique_id": "model.ethereum_source.OpenSeaENSResolver_evt_TextChanged", "package_name": "ethereum_source", "root_path": "/Users/songv/Code/jike/web3/dbt_ethereum_source", "path": "codegen/opensea/OpenSeaENSResolver_evt_TextChanged.sql", "original_file_path": "models/codegen/opensea/OpenSeaENSResolver_evt_TextChanged.sql", "name": "OpenSeaENSResolver_evt_TextChanged", "alias": "OpenSeaENSResolver_evt_TextChanged", "checksum": {"name": "sha256", "checksum": "ac2a20e913a80155672284c61274edd8394513a48ea281a62a1015f449545aa4"}, "tags": ["chain_ethereum", "level_parse", "proj_opensea"], "refs": [["stg_ethereum__logs"]], "sources": [], "description": "", "columns": {"node": {"name": "node", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "indexedKey": {"name": "indexedKey", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "key": {"name": "key", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "evt_block_number": {"name": "evt_block_number", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "evt_block_time": {"name": "evt_block_time", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "evt_index": {"name": "evt_index", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "evt_tx_hash": {"name": "evt_tx_hash", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "contract_address": {"name": "contract_address", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "dt": {"name": "dt", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "ethereum_source://models/codegen/opensea/schema.yml", "compiled_path": "target/compiled/ethereum_source/models/codegen/opensea/OpenSeaENSResolver_evt_TextChanged.sql", "build_path": null, "deferred": false, "unrendered_config": {"schema": "opensea", "tags": ["chain_ethereum", "level_parse", "proj_opensea"], "materialized": "incremental", "incremental_strategy": "insert_overwrite", "partition_by": ["dt"], "file_format": "parquet", "pre-hook": [{"sql": "create or replace function opensea_openseaensresolver_textchanged_eventdecodeudf as \"io.iftech.sparkudf.hive.opensea_OpenSeaENSResolver_TextChanged_EventDecodeUDF\" using jar \"s3a://ifcrypto/blockchain-dbt/jars/opensea_udf.jar\";"}]}, "created_at": 1650535972.099093, "compiled_sql": "\n\nwith base as (\n    select\n        block_number as evt_block_number,\n        block_timestamp as evt_block_time,\n        log_index as evt_index,\n        transaction_hash as evt_tx_hash,\n        address as contract_address,\n        dt,\n        opensea_openseaensresolver_textchanged_eventdecodeudf(unhex_data, topics_arr, '{\"anonymous\": false, \"inputs\": [{\"indexed\": true, \"name\": \"node\", \"type\": \"bytes32\"}, {\"indexed\": false, \"name\": \"indexedKey\", \"type\": \"string\"}, {\"indexed\": false, \"name\": \"key\", \"type\": \"string\"}], \"name\": \"TextChanged\", \"type\": \"event\"}', 'TextChanged') as data\n    from ethereum_stg_ethereum.stg_ethereum__logs\n    where address = lower(\"0x9c4e9cce4780062942a7fe34fa2fa7316c872956\")\n    and address_hash = abs(hash(lower(\"0x9c4e9cce4780062942a7fe34fa2fa7316c872956\"))) % 10\n    and selector = \"0xd8c9334b1a9c2f9da342a0a2b32629c1a229b6445dad78947f674b44444a7550\"\n    and selector_hash = abs(hash(\"0xd8c9334b1a9c2f9da342a0a2b32629c1a229b6445dad78947f674b44444a7550\")) % 10\n\n    \n),\n\nfinal as (\n    select\n        evt_block_number,\n        evt_block_time,\n        evt_index,\n        evt_tx_hash,\n        contract_address,\n        dt,\n        data.input.*\n    from base\n)\n\nselect /* REPARTITION(dt) */ *\nfrom final", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "ethereum_opensea.OpenSeaENSResolver_evt_TextChanged"}, "model.ethereum_source.OpenSeaENSResolver_call_ABI": {"raw_sql": "{{\n    config(\n        materialized='incremental',\n        incremental_strategy='insert_overwrite',\n        partition_by=['dt'],\n        file_format='parquet',\n        pre_hook={\n            'sql': 'create or replace function opensea_openseaensresolver_abi_calldecodeudf as \"io.iftech.sparkudf.hive.opensea_OpenSeaENSResolver_ABI_CallDecodeUDF\" using jar \"s3a://ifcrypto/blockchain-dbt/jars/opensea_udf.jar\";'\n        }\n    )\n}}\n\nwith base as (\n    select\n        status==1 as call_success,\n        block_number as call_block_number,\n        block_timestamp as call_block_time,\n        trace_address as call_trace_address,\n        transaction_hash as call_tx_hash,\n        to_address as contract_address,\n        dt,\n        opensea_openseaensresolver_abi_calldecodeudf(unhex_input, unhex_output, '{\"constant\": true, \"inputs\": [{\"name\": \"node\", \"type\": \"bytes32\"}, {\"name\": \"contentTypes\", \"type\": \"uint256\"}], \"name\": \"ABI\", \"outputs\": [{\"name\": \"\", \"type\": \"uint256\"}, {\"name\": \"\", \"type\": \"bytes\"}], \"payable\": false, \"stateMutability\": \"view\", \"type\": \"function\"}', 'ABI') as data\n    from {{ ref('stg_ethereum__traces') }}\n    where to_address = lower(\"0x9c4e9cce4780062942a7fe34fa2fa7316c872956\")\n    and address_hash = abs(hash(lower(\"0x9c4e9cce4780062942a7fe34fa2fa7316c872956\"))) % 10\n    and selector = \"0x30783232\"\n    and selector_hash = abs(hash(\"0x30783232\")) % 10\n\n    {% if is_incremental() %}\n      and dt = var('dt')\n    {% endif %}\n),\n\nfinal as (\n    select\n        call_success,\n        call_block_number,\n        call_block_time,\n        call_trace_address,\n        call_tx_hash,\n        contract_address,\n        dt,\n        data.input.*,\n        data.output.*\n    from base\n)\n\nselect /* REPARTITION(dt) */ *\nfrom final", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.dbt.is_incremental"], "nodes": ["model.ethereum_source.stg_ethereum__traces"]}, "config": {"enabled": true, "alias": null, "schema": "opensea", "database": null, "tags": ["chain_ethereum", "level_parse", "proj_opensea"], "meta": {}, "materialized": "incremental", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "file_format": "parquet", "partition_by": ["dt"], "incremental_strategy": "insert_overwrite", "post-hook": [], "pre-hook": [{"sql": "create or replace function opensea_openseaensresolver_abi_calldecodeudf as \"io.iftech.sparkudf.hive.opensea_OpenSeaENSResolver_ABI_CallDecodeUDF\" using jar \"s3a://ifcrypto/blockchain-dbt/jars/opensea_udf.jar\";", "transaction": true, "index": null}]}, "database": null, "schema": "ethereum_opensea", "fqn": ["ethereum_source", "codegen", "opensea", "OpenSeaENSResolver_call_ABI"], "unique_id": "model.ethereum_source.OpenSeaENSResolver_call_ABI", "package_name": "ethereum_source", "root_path": "/Users/songv/Code/jike/web3/dbt_ethereum_source", "path": "codegen/opensea/OpenSeaENSResolver_call_ABI.sql", "original_file_path": "models/codegen/opensea/OpenSeaENSResolver_call_ABI.sql", "name": "OpenSeaENSResolver_call_ABI", "alias": "OpenSeaENSResolver_call_ABI", "checksum": {"name": "sha256", "checksum": "8334dfb38587e4ef723fe3b4084e540a8bc7802a65ecaf0374f426e7de5fca94"}, "tags": ["chain_ethereum", "level_parse", "proj_opensea"], "refs": [["stg_ethereum__traces"]], "sources": [], "description": "", "columns": {"node": {"name": "node", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "contentTypes": {"name": "contentTypes", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "output_0": {"name": "output_0", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "output_1": {"name": "output_1", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "call_success": {"name": "call_success", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "call_block_number": {"name": "call_block_number", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "call_block_time": {"name": "call_block_time", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "call_trace_address": {"name": "call_trace_address", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "call_tx_hash": {"name": "call_tx_hash", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "contract_address": {"name": "contract_address", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "dt": {"name": "dt", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "ethereum_source://models/codegen/opensea/schema.yml", "compiled_path": "target/compiled/ethereum_source/models/codegen/opensea/OpenSeaENSResolver_call_ABI.sql", "build_path": null, "deferred": false, "unrendered_config": {"schema": "opensea", "tags": ["chain_ethereum", "level_parse", "proj_opensea"], "materialized": "incremental", "incremental_strategy": "insert_overwrite", "partition_by": ["dt"], "file_format": "parquet", "pre-hook": [{"sql": "create or replace function opensea_openseaensresolver_abi_calldecodeudf as \"io.iftech.sparkudf.hive.opensea_OpenSeaENSResolver_ABI_CallDecodeUDF\" using jar \"s3a://ifcrypto/blockchain-dbt/jars/opensea_udf.jar\";"}]}, "created_at": 1650535972.11963, "compiled_sql": "\n\nwith base as (\n    select\n        status==1 as call_success,\n        block_number as call_block_number,\n        block_timestamp as call_block_time,\n        trace_address as call_trace_address,\n        transaction_hash as call_tx_hash,\n        to_address as contract_address,\n        dt,\n        opensea_openseaensresolver_abi_calldecodeudf(unhex_input, unhex_output, '{\"constant\": true, \"inputs\": [{\"name\": \"node\", \"type\": \"bytes32\"}, {\"name\": \"contentTypes\", \"type\": \"uint256\"}], \"name\": \"ABI\", \"outputs\": [{\"name\": \"\", \"type\": \"uint256\"}, {\"name\": \"\", \"type\": \"bytes\"}], \"payable\": false, \"stateMutability\": \"view\", \"type\": \"function\"}', 'ABI') as data\n    from ethereum_stg_ethereum.stg_ethereum__traces\n    where to_address = lower(\"0x9c4e9cce4780062942a7fe34fa2fa7316c872956\")\n    and address_hash = abs(hash(lower(\"0x9c4e9cce4780062942a7fe34fa2fa7316c872956\"))) % 10\n    and selector = \"0x30783232\"\n    and selector_hash = abs(hash(\"0x30783232\")) % 10\n\n    \n),\n\nfinal as (\n    select\n        call_success,\n        call_block_number,\n        call_block_time,\n        call_trace_address,\n        call_tx_hash,\n        contract_address,\n        dt,\n        data.input.*,\n        data.output.*\n    from base\n)\n\nselect /* REPARTITION(dt) */ *\nfrom final", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "ethereum_opensea.OpenSeaENSResolver_call_ABI"}, "model.ethereum_source.WyvernExchangeV1_call_validateOrderParameters_": {"raw_sql": "{{\n    config(\n        materialized='incremental',\n        incremental_strategy='insert_overwrite',\n        partition_by=['dt'],\n        file_format='parquet',\n        pre_hook={\n            'sql': 'create or replace function opensea_wyvernexchangev1_validateorderparameters__calldecodeudf as \"io.iftech.sparkudf.hive.opensea_WyvernExchangeV1_validateOrderParameters__CallDecodeUDF\" using jar \"s3a://ifcrypto/blockchain-dbt/jars/opensea_udf.jar\";'\n        }\n    )\n}}\n\nwith base as (\n    select\n        status==1 as call_success,\n        block_number as call_block_number,\n        block_timestamp as call_block_time,\n        trace_address as call_trace_address,\n        transaction_hash as call_tx_hash,\n        to_address as contract_address,\n        dt,\n        opensea_wyvernexchangev1_validateorderparameters__calldecodeudf(unhex_input, unhex_output, '{\"constant\": true, \"inputs\": [{\"name\": \"addrs\", \"type\": \"address[7]\"}, {\"name\": \"uints\", \"type\": \"uint256[9]\"}, {\"name\": \"feeMethod\", \"type\": \"uint8\"}, {\"name\": \"side\", \"type\": \"uint8\"}, {\"name\": \"saleKind\", \"type\": \"uint8\"}, {\"name\": \"howToCall\", \"type\": \"uint8\"}, {\"name\": \"calldata\", \"type\": \"bytes\"}, {\"name\": \"replacementPattern\", \"type\": \"bytes\"}, {\"name\": \"staticExtradata\", \"type\": \"bytes\"}], \"name\": \"validateOrderParameters_\", \"outputs\": [{\"name\": \"\", \"type\": \"bool\"}], \"payable\": false, \"stateMutability\": \"view\", \"type\": \"function\"}', 'validateOrderParameters_') as data\n    from {{ ref('stg_ethereum__traces') }}\n    where to_address = lower(\"0x7Be8076f4EA4A4AD08075C2508e481d6C946D12b\")\n    and address_hash = abs(hash(lower(\"0x7Be8076f4EA4A4AD08075C2508e481d6C946D12b\"))) % 10\n    and selector = \"0x30786361\"\n    and selector_hash = abs(hash(\"0x30786361\")) % 10\n\n    {% if is_incremental() %}\n      and dt = var('dt')\n    {% endif %}\n),\n\nfinal as (\n    select\n        call_success,\n        call_block_number,\n        call_block_time,\n        call_trace_address,\n        call_tx_hash,\n        contract_address,\n        dt,\n        data.input.*,\n        data.output.*\n    from base\n)\n\nselect /* REPARTITION(dt) */ *\nfrom final", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.dbt.is_incremental"], "nodes": ["model.ethereum_source.stg_ethereum__traces"]}, "config": {"enabled": true, "alias": null, "schema": "opensea", "database": null, "tags": ["chain_ethereum", "level_parse", "proj_opensea"], "meta": {}, "materialized": "incremental", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "file_format": "parquet", "partition_by": ["dt"], "incremental_strategy": "insert_overwrite", "post-hook": [], "pre-hook": [{"sql": "create or replace function opensea_wyvernexchangev1_validateorderparameters__calldecodeudf as \"io.iftech.sparkudf.hive.opensea_WyvernExchangeV1_validateOrderParameters__CallDecodeUDF\" using jar \"s3a://ifcrypto/blockchain-dbt/jars/opensea_udf.jar\";", "transaction": true, "index": null}]}, "database": null, "schema": "ethereum_opensea", "fqn": ["ethereum_source", "codegen", "opensea", "WyvernExchangeV1_call_validateOrderParameters_"], "unique_id": "model.ethereum_source.WyvernExchangeV1_call_validateOrderParameters_", "package_name": "ethereum_source", "root_path": "/Users/songv/Code/jike/web3/dbt_ethereum_source", "path": "codegen/opensea/WyvernExchangeV1_call_validateOrderParameters_.sql", "original_file_path": "models/codegen/opensea/WyvernExchangeV1_call_validateOrderParameters_.sql", "name": "WyvernExchangeV1_call_validateOrderParameters_", "alias": "WyvernExchangeV1_call_validateOrderParameters_", "checksum": {"name": "sha256", "checksum": "eb085c7156a46f21d6e944f1095fd59ccfe2c7a6e39987c3e8d3659578f52bec"}, "tags": ["chain_ethereum", "level_parse", "proj_opensea"], "refs": [["stg_ethereum__traces"]], "sources": [], "description": "", "columns": {"addrs": {"name": "addrs", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "uints": {"name": "uints", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "feeMethod": {"name": "feeMethod", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "side": {"name": "side", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "saleKind": {"name": "saleKind", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "howToCall": {"name": "howToCall", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "calldata": {"name": "calldata", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "replacementPattern": {"name": "replacementPattern", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "staticExtradata": {"name": "staticExtradata", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "output_0": {"name": "output_0", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "call_success": {"name": "call_success", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "call_block_number": {"name": "call_block_number", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "call_block_time": {"name": "call_block_time", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "call_trace_address": {"name": "call_trace_address", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "call_tx_hash": {"name": "call_tx_hash", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "contract_address": {"name": "contract_address", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "dt": {"name": "dt", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "ethereum_source://models/codegen/opensea/schema.yml", "compiled_path": "target/compiled/ethereum_source/models/codegen/opensea/WyvernExchangeV1_call_validateOrderParameters_.sql", "build_path": null, "deferred": false, "unrendered_config": {"schema": "opensea", "tags": ["chain_ethereum", "level_parse", "proj_opensea"], "materialized": "incremental", "incremental_strategy": "insert_overwrite", "partition_by": ["dt"], "file_format": "parquet", "pre-hook": [{"sql": "create or replace function opensea_wyvernexchangev1_validateorderparameters__calldecodeudf as \"io.iftech.sparkudf.hive.opensea_WyvernExchangeV1_validateOrderParameters__CallDecodeUDF\" using jar \"s3a://ifcrypto/blockchain-dbt/jars/opensea_udf.jar\";"}]}, "created_at": 1650535971.990607, "compiled_sql": "\n\nwith base as (\n    select\n        status==1 as call_success,\n        block_number as call_block_number,\n        block_timestamp as call_block_time,\n        trace_address as call_trace_address,\n        transaction_hash as call_tx_hash,\n        to_address as contract_address,\n        dt,\n        opensea_wyvernexchangev1_validateorderparameters__calldecodeudf(unhex_input, unhex_output, '{\"constant\": true, \"inputs\": [{\"name\": \"addrs\", \"type\": \"address[7]\"}, {\"name\": \"uints\", \"type\": \"uint256[9]\"}, {\"name\": \"feeMethod\", \"type\": \"uint8\"}, {\"name\": \"side\", \"type\": \"uint8\"}, {\"name\": \"saleKind\", \"type\": \"uint8\"}, {\"name\": \"howToCall\", \"type\": \"uint8\"}, {\"name\": \"calldata\", \"type\": \"bytes\"}, {\"name\": \"replacementPattern\", \"type\": \"bytes\"}, {\"name\": \"staticExtradata\", \"type\": \"bytes\"}], \"name\": \"validateOrderParameters_\", \"outputs\": [{\"name\": \"\", \"type\": \"bool\"}], \"payable\": false, \"stateMutability\": \"view\", \"type\": \"function\"}', 'validateOrderParameters_') as data\n    from ethereum_stg_ethereum.stg_ethereum__traces\n    where to_address = lower(\"0x7Be8076f4EA4A4AD08075C2508e481d6C946D12b\")\n    and address_hash = abs(hash(lower(\"0x7Be8076f4EA4A4AD08075C2508e481d6C946D12b\"))) % 10\n    and selector = \"0x30786361\"\n    and selector_hash = abs(hash(\"0x30786361\")) % 10\n\n    \n),\n\nfinal as (\n    select\n        call_success,\n        call_block_number,\n        call_block_time,\n        call_trace_address,\n        call_tx_hash,\n        contract_address,\n        dt,\n        data.input.*,\n        data.output.*\n    from base\n)\n\nselect /* REPARTITION(dt) */ *\nfrom final", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "ethereum_opensea.WyvernExchangeV1_call_validateOrderParameters_"}, "model.ethereum_source.WyvernExchangeV2_call_calculateMatchPrice_": {"raw_sql": "{{\n    config(\n        materialized='incremental',\n        incremental_strategy='insert_overwrite',\n        partition_by=['dt'],\n        file_format='parquet',\n        pre_hook={\n            'sql': 'create or replace function opensea_wyvernexchangev2_calculatematchprice__calldecodeudf as \"io.iftech.sparkudf.hive.opensea_WyvernExchangeV2_calculateMatchPrice__CallDecodeUDF\" using jar \"s3a://ifcrypto/blockchain-dbt/jars/opensea_udf.jar\";'\n        }\n    )\n}}\n\nwith base as (\n    select\n        status==1 as call_success,\n        block_number as call_block_number,\n        block_timestamp as call_block_time,\n        trace_address as call_trace_address,\n        transaction_hash as call_tx_hash,\n        to_address as contract_address,\n        dt,\n        opensea_wyvernexchangev2_calculatematchprice__calldecodeudf(unhex_input, unhex_output, '{\"constant\": true, \"inputs\": [{\"name\": \"addrs\", \"type\": \"address[14]\"}, {\"name\": \"uints\", \"type\": \"uint256[18]\"}, {\"name\": \"feeMethodsSidesKindsHowToCalls\", \"type\": \"uint8[8]\"}, {\"name\": \"calldataBuy\", \"type\": \"bytes\"}, {\"name\": \"calldataSell\", \"type\": \"bytes\"}, {\"name\": \"replacementPatternBuy\", \"type\": \"bytes\"}, {\"name\": \"replacementPatternSell\", \"type\": \"bytes\"}, {\"name\": \"staticExtradataBuy\", \"type\": \"bytes\"}, {\"name\": \"staticExtradataSell\", \"type\": \"bytes\"}], \"name\": \"calculateMatchPrice_\", \"outputs\": [{\"name\": \"\", \"type\": \"uint256\"}], \"payable\": false, \"stateMutability\": \"view\", \"type\": \"function\"}', 'calculateMatchPrice_') as data\n    from {{ ref('stg_ethereum__traces') }}\n    where to_address = lower(\"0x7f268357A8c2552623316e2562D90e642bB538E5\")\n    and address_hash = abs(hash(lower(\"0x7f268357A8c2552623316e2562D90e642bB538E5\"))) % 10\n    and selector = \"0x30786435\"\n    and selector_hash = abs(hash(\"0x30786435\")) % 10\n\n    {% if is_incremental() %}\n      and dt = var('dt')\n    {% endif %}\n),\n\nfinal as (\n    select\n        call_success,\n        call_block_number,\n        call_block_time,\n        call_trace_address,\n        call_tx_hash,\n        contract_address,\n        dt,\n        data.input.*,\n        data.output.*\n    from base\n)\n\nselect /* REPARTITION(dt) */ *\nfrom final", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.dbt.is_incremental"], "nodes": ["model.ethereum_source.stg_ethereum__traces"]}, "config": {"enabled": true, "alias": null, "schema": "opensea", "database": null, "tags": ["chain_ethereum", "level_parse", "proj_opensea"], "meta": {}, "materialized": "incremental", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "file_format": "parquet", "partition_by": ["dt"], "incremental_strategy": "insert_overwrite", "post-hook": [], "pre-hook": [{"sql": "create or replace function opensea_wyvernexchangev2_calculatematchprice__calldecodeudf as \"io.iftech.sparkudf.hive.opensea_WyvernExchangeV2_calculateMatchPrice__CallDecodeUDF\" using jar \"s3a://ifcrypto/blockchain-dbt/jars/opensea_udf.jar\";", "transaction": true, "index": null}]}, "database": null, "schema": "ethereum_opensea", "fqn": ["ethereum_source", "codegen", "opensea", "WyvernExchangeV2_call_calculateMatchPrice_"], "unique_id": "model.ethereum_source.WyvernExchangeV2_call_calculateMatchPrice_", "package_name": "ethereum_source", "root_path": "/Users/songv/Code/jike/web3/dbt_ethereum_source", "path": "codegen/opensea/WyvernExchangeV2_call_calculateMatchPrice_.sql", "original_file_path": "models/codegen/opensea/WyvernExchangeV2_call_calculateMatchPrice_.sql", "name": "WyvernExchangeV2_call_calculateMatchPrice_", "alias": "WyvernExchangeV2_call_calculateMatchPrice_", "checksum": {"name": "sha256", "checksum": "b8762af344f5a2cd85b8ddb00b09a167866ef726bcb976e323b1269e799467cd"}, "tags": ["chain_ethereum", "level_parse", "proj_opensea"], "refs": [["stg_ethereum__traces"]], "sources": [], "description": "", "columns": {"addrs": {"name": "addrs", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "uints": {"name": "uints", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "feeMethodsSidesKindsHowToCalls": {"name": "feeMethodsSidesKindsHowToCalls", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "calldataBuy": {"name": "calldataBuy", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "calldataSell": {"name": "calldataSell", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "replacementPatternBuy": {"name": "replacementPatternBuy", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "replacementPatternSell": {"name": "replacementPatternSell", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "staticExtradataBuy": {"name": "staticExtradataBuy", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "staticExtradataSell": {"name": "staticExtradataSell", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "output_0": {"name": "output_0", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "call_success": {"name": "call_success", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "call_block_number": {"name": "call_block_number", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "call_block_time": {"name": "call_block_time", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "call_trace_address": {"name": "call_trace_address", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "call_tx_hash": {"name": "call_tx_hash", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "contract_address": {"name": "contract_address", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "dt": {"name": "dt", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "ethereum_source://models/codegen/opensea/schema.yml", "compiled_path": "target/compiled/ethereum_source/models/codegen/opensea/WyvernExchangeV2_call_calculateMatchPrice_.sql", "build_path": null, "deferred": false, "unrendered_config": {"schema": "opensea", "tags": ["chain_ethereum", "level_parse", "proj_opensea"], "materialized": "incremental", "incremental_strategy": "insert_overwrite", "partition_by": ["dt"], "file_format": "parquet", "pre-hook": [{"sql": "create or replace function opensea_wyvernexchangev2_calculatematchprice__calldecodeudf as \"io.iftech.sparkudf.hive.opensea_WyvernExchangeV2_calculateMatchPrice__CallDecodeUDF\" using jar \"s3a://ifcrypto/blockchain-dbt/jars/opensea_udf.jar\";"}]}, "created_at": 1650535972.087052, "compiled_sql": "\n\nwith base as (\n    select\n        status==1 as call_success,\n        block_number as call_block_number,\n        block_timestamp as call_block_time,\n        trace_address as call_trace_address,\n        transaction_hash as call_tx_hash,\n        to_address as contract_address,\n        dt,\n        opensea_wyvernexchangev2_calculatematchprice__calldecodeudf(unhex_input, unhex_output, '{\"constant\": true, \"inputs\": [{\"name\": \"addrs\", \"type\": \"address[14]\"}, {\"name\": \"uints\", \"type\": \"uint256[18]\"}, {\"name\": \"feeMethodsSidesKindsHowToCalls\", \"type\": \"uint8[8]\"}, {\"name\": \"calldataBuy\", \"type\": \"bytes\"}, {\"name\": \"calldataSell\", \"type\": \"bytes\"}, {\"name\": \"replacementPatternBuy\", \"type\": \"bytes\"}, {\"name\": \"replacementPatternSell\", \"type\": \"bytes\"}, {\"name\": \"staticExtradataBuy\", \"type\": \"bytes\"}, {\"name\": \"staticExtradataSell\", \"type\": \"bytes\"}], \"name\": \"calculateMatchPrice_\", \"outputs\": [{\"name\": \"\", \"type\": \"uint256\"}], \"payable\": false, \"stateMutability\": \"view\", \"type\": \"function\"}', 'calculateMatchPrice_') as data\n    from ethereum_stg_ethereum.stg_ethereum__traces\n    where to_address = lower(\"0x7f268357A8c2552623316e2562D90e642bB538E5\")\n    and address_hash = abs(hash(lower(\"0x7f268357A8c2552623316e2562D90e642bB538E5\"))) % 10\n    and selector = \"0x30786435\"\n    and selector_hash = abs(hash(\"0x30786435\")) % 10\n\n    \n),\n\nfinal as (\n    select\n        call_success,\n        call_block_number,\n        call_block_time,\n        call_trace_address,\n        call_tx_hash,\n        contract_address,\n        dt,\n        data.input.*,\n        data.output.*\n    from base\n)\n\nselect /* REPARTITION(dt) */ *\nfrom final", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "ethereum_opensea.WyvernExchangeV2_call_calculateMatchPrice_"}, "model.ethereum_source.OpenSeaENSResolver_call_text": {"raw_sql": "{{\n    config(\n        materialized='incremental',\n        incremental_strategy='insert_overwrite',\n        partition_by=['dt'],\n        file_format='parquet',\n        pre_hook={\n            'sql': 'create or replace function opensea_openseaensresolver_text_calldecodeudf as \"io.iftech.sparkudf.hive.opensea_OpenSeaENSResolver_text_CallDecodeUDF\" using jar \"s3a://ifcrypto/blockchain-dbt/jars/opensea_udf.jar\";'\n        }\n    )\n}}\n\nwith base as (\n    select\n        status==1 as call_success,\n        block_number as call_block_number,\n        block_timestamp as call_block_time,\n        trace_address as call_trace_address,\n        transaction_hash as call_tx_hash,\n        to_address as contract_address,\n        dt,\n        opensea_openseaensresolver_text_calldecodeudf(unhex_input, unhex_output, '{\"constant\": true, \"inputs\": [{\"name\": \"node\", \"type\": \"bytes32\"}, {\"name\": \"key\", \"type\": \"string\"}], \"name\": \"text\", \"outputs\": [{\"name\": \"\", \"type\": \"string\"}], \"payable\": false, \"stateMutability\": \"view\", \"type\": \"function\"}', 'text') as data\n    from {{ ref('stg_ethereum__traces') }}\n    where to_address = lower(\"0x9c4e9cce4780062942a7fe34fa2fa7316c872956\")\n    and address_hash = abs(hash(lower(\"0x9c4e9cce4780062942a7fe34fa2fa7316c872956\"))) % 10\n    and selector = \"0x30783539\"\n    and selector_hash = abs(hash(\"0x30783539\")) % 10\n\n    {% if is_incremental() %}\n      and dt = var('dt')\n    {% endif %}\n),\n\nfinal as (\n    select\n        call_success,\n        call_block_number,\n        call_block_time,\n        call_trace_address,\n        call_tx_hash,\n        contract_address,\n        dt,\n        data.input.*,\n        data.output.*\n    from base\n)\n\nselect /* REPARTITION(dt) */ *\nfrom final", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.dbt.is_incremental"], "nodes": ["model.ethereum_source.stg_ethereum__traces"]}, "config": {"enabled": true, "alias": null, "schema": "opensea", "database": null, "tags": ["chain_ethereum", "level_parse", "proj_opensea"], "meta": {}, "materialized": "incremental", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "file_format": "parquet", "partition_by": ["dt"], "incremental_strategy": "insert_overwrite", "post-hook": [], "pre-hook": [{"sql": "create or replace function opensea_openseaensresolver_text_calldecodeudf as \"io.iftech.sparkudf.hive.opensea_OpenSeaENSResolver_text_CallDecodeUDF\" using jar \"s3a://ifcrypto/blockchain-dbt/jars/opensea_udf.jar\";", "transaction": true, "index": null}]}, "database": null, "schema": "ethereum_opensea", "fqn": ["ethereum_source", "codegen", "opensea", "OpenSeaENSResolver_call_text"], "unique_id": "model.ethereum_source.OpenSeaENSResolver_call_text", "package_name": "ethereum_source", "root_path": "/Users/songv/Code/jike/web3/dbt_ethereum_source", "path": "codegen/opensea/OpenSeaENSResolver_call_text.sql", "original_file_path": "models/codegen/opensea/OpenSeaENSResolver_call_text.sql", "name": "OpenSeaENSResolver_call_text", "alias": "OpenSeaENSResolver_call_text", "checksum": {"name": "sha256", "checksum": "8d6a958a518ef28dff78959ef269214cccbaadaf793777746d01ec27e139b765"}, "tags": ["chain_ethereum", "level_parse", "proj_opensea"], "refs": [["stg_ethereum__traces"]], "sources": [], "description": "", "columns": {"node": {"name": "node", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "key": {"name": "key", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "output_0": {"name": "output_0", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "call_success": {"name": "call_success", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "call_block_number": {"name": "call_block_number", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "call_block_time": {"name": "call_block_time", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "call_trace_address": {"name": "call_trace_address", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "call_tx_hash": {"name": "call_tx_hash", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "contract_address": {"name": "contract_address", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "dt": {"name": "dt", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "ethereum_source://models/codegen/opensea/schema.yml", "compiled_path": "target/compiled/ethereum_source/models/codegen/opensea/OpenSeaENSResolver_call_text.sql", "build_path": null, "deferred": false, "unrendered_config": {"schema": "opensea", "tags": ["chain_ethereum", "level_parse", "proj_opensea"], "materialized": "incremental", "incremental_strategy": "insert_overwrite", "partition_by": ["dt"], "file_format": "parquet", "pre-hook": [{"sql": "create or replace function opensea_openseaensresolver_text_calldecodeudf as \"io.iftech.sparkudf.hive.opensea_OpenSeaENSResolver_text_CallDecodeUDF\" using jar \"s3a://ifcrypto/blockchain-dbt/jars/opensea_udf.jar\";"}]}, "created_at": 1650535972.132877, "compiled_sql": "\n\nwith base as (\n    select\n        status==1 as call_success,\n        block_number as call_block_number,\n        block_timestamp as call_block_time,\n        trace_address as call_trace_address,\n        transaction_hash as call_tx_hash,\n        to_address as contract_address,\n        dt,\n        opensea_openseaensresolver_text_calldecodeudf(unhex_input, unhex_output, '{\"constant\": true, \"inputs\": [{\"name\": \"node\", \"type\": \"bytes32\"}, {\"name\": \"key\", \"type\": \"string\"}], \"name\": \"text\", \"outputs\": [{\"name\": \"\", \"type\": \"string\"}], \"payable\": false, \"stateMutability\": \"view\", \"type\": \"function\"}', 'text') as data\n    from ethereum_stg_ethereum.stg_ethereum__traces\n    where to_address = lower(\"0x9c4e9cce4780062942a7fe34fa2fa7316c872956\")\n    and address_hash = abs(hash(lower(\"0x9c4e9cce4780062942a7fe34fa2fa7316c872956\"))) % 10\n    and selector = \"0x30783539\"\n    and selector_hash = abs(hash(\"0x30783539\")) % 10\n\n    \n),\n\nfinal as (\n    select\n        call_success,\n        call_block_number,\n        call_block_time,\n        call_trace_address,\n        call_tx_hash,\n        contract_address,\n        dt,\n        data.input.*,\n        data.output.*\n    from base\n)\n\nselect /* REPARTITION(dt) */ *\nfrom final", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "ethereum_opensea.OpenSeaENSResolver_call_text"}, "model.ethereum_source.WyvernExchangeV1_call_hashToSign_": {"raw_sql": "{{\n    config(\n        materialized='incremental',\n        incremental_strategy='insert_overwrite',\n        partition_by=['dt'],\n        file_format='parquet',\n        pre_hook={\n            'sql': 'create or replace function opensea_wyvernexchangev1_hashtosign__calldecodeudf as \"io.iftech.sparkudf.hive.opensea_WyvernExchangeV1_hashToSign__CallDecodeUDF\" using jar \"s3a://ifcrypto/blockchain-dbt/jars/opensea_udf.jar\";'\n        }\n    )\n}}\n\nwith base as (\n    select\n        status==1 as call_success,\n        block_number as call_block_number,\n        block_timestamp as call_block_time,\n        trace_address as call_trace_address,\n        transaction_hash as call_tx_hash,\n        to_address as contract_address,\n        dt,\n        opensea_wyvernexchangev1_hashtosign__calldecodeudf(unhex_input, unhex_output, '{\"constant\": true, \"inputs\": [{\"name\": \"addrs\", \"type\": \"address[7]\"}, {\"name\": \"uints\", \"type\": \"uint256[9]\"}, {\"name\": \"feeMethod\", \"type\": \"uint8\"}, {\"name\": \"side\", \"type\": \"uint8\"}, {\"name\": \"saleKind\", \"type\": \"uint8\"}, {\"name\": \"howToCall\", \"type\": \"uint8\"}, {\"name\": \"calldata\", \"type\": \"bytes\"}, {\"name\": \"replacementPattern\", \"type\": \"bytes\"}, {\"name\": \"staticExtradata\", \"type\": \"bytes\"}], \"name\": \"hashToSign_\", \"outputs\": [{\"name\": \"\", \"type\": \"bytes32\"}], \"payable\": false, \"stateMutability\": \"pure\", \"type\": \"function\"}', 'hashToSign_') as data\n    from {{ ref('stg_ethereum__traces') }}\n    where to_address = lower(\"0x7Be8076f4EA4A4AD08075C2508e481d6C946D12b\")\n    and address_hash = abs(hash(lower(\"0x7Be8076f4EA4A4AD08075C2508e481d6C946D12b\"))) % 10\n    and selector = \"0x30783764\"\n    and selector_hash = abs(hash(\"0x30783764\")) % 10\n\n    {% if is_incremental() %}\n      and dt = var('dt')\n    {% endif %}\n),\n\nfinal as (\n    select\n        call_success,\n        call_block_number,\n        call_block_time,\n        call_trace_address,\n        call_tx_hash,\n        contract_address,\n        dt,\n        data.input.*,\n        data.output.*\n    from base\n)\n\nselect /* REPARTITION(dt) */ *\nfrom final", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.dbt.is_incremental"], "nodes": ["model.ethereum_source.stg_ethereum__traces"]}, "config": {"enabled": true, "alias": null, "schema": "opensea", "database": null, "tags": ["chain_ethereum", "level_parse", "proj_opensea"], "meta": {}, "materialized": "incremental", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "file_format": "parquet", "partition_by": ["dt"], "incremental_strategy": "insert_overwrite", "post-hook": [], "pre-hook": [{"sql": "create or replace function opensea_wyvernexchangev1_hashtosign__calldecodeudf as \"io.iftech.sparkudf.hive.opensea_WyvernExchangeV1_hashToSign__CallDecodeUDF\" using jar \"s3a://ifcrypto/blockchain-dbt/jars/opensea_udf.jar\";", "transaction": true, "index": null}]}, "database": null, "schema": "ethereum_opensea", "fqn": ["ethereum_source", "codegen", "opensea", "WyvernExchangeV1_call_hashToSign_"], "unique_id": "model.ethereum_source.WyvernExchangeV1_call_hashToSign_", "package_name": "ethereum_source", "root_path": "/Users/songv/Code/jike/web3/dbt_ethereum_source", "path": "codegen/opensea/WyvernExchangeV1_call_hashToSign_.sql", "original_file_path": "models/codegen/opensea/WyvernExchangeV1_call_hashToSign_.sql", "name": "WyvernExchangeV1_call_hashToSign_", "alias": "WyvernExchangeV1_call_hashToSign_", "checksum": {"name": "sha256", "checksum": "77b57c543f8ff715ee5618980b9c3c43114ad26c6482df8d9a7f4956177a38a5"}, "tags": ["chain_ethereum", "level_parse", "proj_opensea"], "refs": [["stg_ethereum__traces"]], "sources": [], "description": "", "columns": {"addrs": {"name": "addrs", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "uints": {"name": "uints", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "feeMethod": {"name": "feeMethod", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "side": {"name": "side", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "saleKind": {"name": "saleKind", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "howToCall": {"name": "howToCall", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "calldata": {"name": "calldata", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "replacementPattern": {"name": "replacementPattern", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "staticExtradata": {"name": "staticExtradata", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "output_0": {"name": "output_0", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "call_success": {"name": "call_success", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "call_block_number": {"name": "call_block_number", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "call_block_time": {"name": "call_block_time", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "call_trace_address": {"name": "call_trace_address", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "call_tx_hash": {"name": "call_tx_hash", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "contract_address": {"name": "contract_address", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "dt": {"name": "dt", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "ethereum_source://models/codegen/opensea/schema.yml", "compiled_path": "target/compiled/ethereum_source/models/codegen/opensea/WyvernExchangeV1_call_hashToSign_.sql", "build_path": null, "deferred": false, "unrendered_config": {"schema": "opensea", "tags": ["chain_ethereum", "level_parse", "proj_opensea"], "materialized": "incremental", "incremental_strategy": "insert_overwrite", "partition_by": ["dt"], "file_format": "parquet", "pre-hook": [{"sql": "create or replace function opensea_wyvernexchangev1_hashtosign__calldecodeudf as \"io.iftech.sparkudf.hive.opensea_WyvernExchangeV1_hashToSign__CallDecodeUDF\" using jar \"s3a://ifcrypto/blockchain-dbt/jars/opensea_udf.jar\";"}]}, "created_at": 1650535971.975847, "compiled_sql": "\n\nwith base as (\n    select\n        status==1 as call_success,\n        block_number as call_block_number,\n        block_timestamp as call_block_time,\n        trace_address as call_trace_address,\n        transaction_hash as call_tx_hash,\n        to_address as contract_address,\n        dt,\n        opensea_wyvernexchangev1_hashtosign__calldecodeudf(unhex_input, unhex_output, '{\"constant\": true, \"inputs\": [{\"name\": \"addrs\", \"type\": \"address[7]\"}, {\"name\": \"uints\", \"type\": \"uint256[9]\"}, {\"name\": \"feeMethod\", \"type\": \"uint8\"}, {\"name\": \"side\", \"type\": \"uint8\"}, {\"name\": \"saleKind\", \"type\": \"uint8\"}, {\"name\": \"howToCall\", \"type\": \"uint8\"}, {\"name\": \"calldata\", \"type\": \"bytes\"}, {\"name\": \"replacementPattern\", \"type\": \"bytes\"}, {\"name\": \"staticExtradata\", \"type\": \"bytes\"}], \"name\": \"hashToSign_\", \"outputs\": [{\"name\": \"\", \"type\": \"bytes32\"}], \"payable\": false, \"stateMutability\": \"pure\", \"type\": \"function\"}', 'hashToSign_') as data\n    from ethereum_stg_ethereum.stg_ethereum__traces\n    where to_address = lower(\"0x7Be8076f4EA4A4AD08075C2508e481d6C946D12b\")\n    and address_hash = abs(hash(lower(\"0x7Be8076f4EA4A4AD08075C2508e481d6C946D12b\"))) % 10\n    and selector = \"0x30783764\"\n    and selector_hash = abs(hash(\"0x30783764\")) % 10\n\n    \n),\n\nfinal as (\n    select\n        call_success,\n        call_block_number,\n        call_block_time,\n        call_trace_address,\n        call_tx_hash,\n        contract_address,\n        dt,\n        data.input.*,\n        data.output.*\n    from base\n)\n\nselect /* REPARTITION(dt) */ *\nfrom final", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "ethereum_opensea.WyvernExchangeV1_call_hashToSign_"}, "model.ethereum_source.WyvernExchangeV1_call_approveOrder_": {"raw_sql": "{{\n    config(\n        materialized='incremental',\n        incremental_strategy='insert_overwrite',\n        partition_by=['dt'],\n        file_format='parquet',\n        pre_hook={\n            'sql': 'create or replace function opensea_wyvernexchangev1_approveorder__calldecodeudf as \"io.iftech.sparkudf.hive.opensea_WyvernExchangeV1_approveOrder__CallDecodeUDF\" using jar \"s3a://ifcrypto/blockchain-dbt/jars/opensea_udf.jar\";'\n        }\n    )\n}}\n\nwith base as (\n    select\n        status==1 as call_success,\n        block_number as call_block_number,\n        block_timestamp as call_block_time,\n        trace_address as call_trace_address,\n        transaction_hash as call_tx_hash,\n        to_address as contract_address,\n        dt,\n        opensea_wyvernexchangev1_approveorder__calldecodeudf(unhex_input, unhex_output, '{\"constant\": false, \"inputs\": [{\"name\": \"addrs\", \"type\": \"address[7]\"}, {\"name\": \"uints\", \"type\": \"uint256[9]\"}, {\"name\": \"feeMethod\", \"type\": \"uint8\"}, {\"name\": \"side\", \"type\": \"uint8\"}, {\"name\": \"saleKind\", \"type\": \"uint8\"}, {\"name\": \"howToCall\", \"type\": \"uint8\"}, {\"name\": \"calldata\", \"type\": \"bytes\"}, {\"name\": \"replacementPattern\", \"type\": \"bytes\"}, {\"name\": \"staticExtradata\", \"type\": \"bytes\"}, {\"name\": \"orderbookInclusionDesired\", \"type\": \"bool\"}], \"name\": \"approveOrder_\", \"outputs\": [], \"payable\": false, \"stateMutability\": \"nonpayable\", \"type\": \"function\"}', 'approveOrder_') as data\n    from {{ ref('stg_ethereum__traces') }}\n    where to_address = lower(\"0x7Be8076f4EA4A4AD08075C2508e481d6C946D12b\")\n    and address_hash = abs(hash(lower(\"0x7Be8076f4EA4A4AD08075C2508e481d6C946D12b\"))) % 10\n    and selector = \"0x30783739\"\n    and selector_hash = abs(hash(\"0x30783739\")) % 10\n\n    {% if is_incremental() %}\n      and dt = var('dt')\n    {% endif %}\n),\n\nfinal as (\n    select\n        call_success,\n        call_block_number,\n        call_block_time,\n        call_trace_address,\n        call_tx_hash,\n        contract_address,\n        dt,\n        data.input.*,\n        data.output.*\n    from base\n)\n\nselect /* REPARTITION(dt) */ *\nfrom final", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.dbt.is_incremental"], "nodes": ["model.ethereum_source.stg_ethereum__traces"]}, "config": {"enabled": true, "alias": null, "schema": "opensea", "database": null, "tags": ["chain_ethereum", "level_parse", "proj_opensea"], "meta": {}, "materialized": "incremental", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "file_format": "parquet", "partition_by": ["dt"], "incremental_strategy": "insert_overwrite", "post-hook": [], "pre-hook": [{"sql": "create or replace function opensea_wyvernexchangev1_approveorder__calldecodeudf as \"io.iftech.sparkudf.hive.opensea_WyvernExchangeV1_approveOrder__CallDecodeUDF\" using jar \"s3a://ifcrypto/blockchain-dbt/jars/opensea_udf.jar\";", "transaction": true, "index": null}]}, "database": null, "schema": "ethereum_opensea", "fqn": ["ethereum_source", "codegen", "opensea", "WyvernExchangeV1_call_approveOrder_"], "unique_id": "model.ethereum_source.WyvernExchangeV1_call_approveOrder_", "package_name": "ethereum_source", "root_path": "/Users/songv/Code/jike/web3/dbt_ethereum_source", "path": "codegen/opensea/WyvernExchangeV1_call_approveOrder_.sql", "original_file_path": "models/codegen/opensea/WyvernExchangeV1_call_approveOrder_.sql", "name": "WyvernExchangeV1_call_approveOrder_", "alias": "WyvernExchangeV1_call_approveOrder_", "checksum": {"name": "sha256", "checksum": "dd3c092cfaafcd6c500704fcc790343839553bf89364ad6fa23aecfe2d28b85b"}, "tags": ["chain_ethereum", "level_parse", "proj_opensea"], "refs": [["stg_ethereum__traces"]], "sources": [], "description": "", "columns": {"addrs": {"name": "addrs", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "uints": {"name": "uints", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "feeMethod": {"name": "feeMethod", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "side": {"name": "side", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "saleKind": {"name": "saleKind", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "howToCall": {"name": "howToCall", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "calldata": {"name": "calldata", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "replacementPattern": {"name": "replacementPattern", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "staticExtradata": {"name": "staticExtradata", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "orderbookInclusionDesired": {"name": "orderbookInclusionDesired", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "call_success": {"name": "call_success", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "call_block_number": {"name": "call_block_number", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "call_block_time": {"name": "call_block_time", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "call_trace_address": {"name": "call_trace_address", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "call_tx_hash": {"name": "call_tx_hash", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "contract_address": {"name": "contract_address", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "dt": {"name": "dt", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "ethereum_source://models/codegen/opensea/schema.yml", "compiled_path": "target/compiled/ethereum_source/models/codegen/opensea/WyvernExchangeV1_call_approveOrder_.sql", "build_path": null, "deferred": false, "unrendered_config": {"schema": "opensea", "tags": ["chain_ethereum", "level_parse", "proj_opensea"], "materialized": "incremental", "incremental_strategy": "insert_overwrite", "partition_by": ["dt"], "file_format": "parquet", "pre-hook": [{"sql": "create or replace function opensea_wyvernexchangev1_approveorder__calldecodeudf as \"io.iftech.sparkudf.hive.opensea_WyvernExchangeV1_approveOrder__CallDecodeUDF\" using jar \"s3a://ifcrypto/blockchain-dbt/jars/opensea_udf.jar\";"}]}, "created_at": 1650535971.969514, "compiled_sql": "\n\nwith base as (\n    select\n        status==1 as call_success,\n        block_number as call_block_number,\n        block_timestamp as call_block_time,\n        trace_address as call_trace_address,\n        transaction_hash as call_tx_hash,\n        to_address as contract_address,\n        dt,\n        opensea_wyvernexchangev1_approveorder__calldecodeudf(unhex_input, unhex_output, '{\"constant\": false, \"inputs\": [{\"name\": \"addrs\", \"type\": \"address[7]\"}, {\"name\": \"uints\", \"type\": \"uint256[9]\"}, {\"name\": \"feeMethod\", \"type\": \"uint8\"}, {\"name\": \"side\", \"type\": \"uint8\"}, {\"name\": \"saleKind\", \"type\": \"uint8\"}, {\"name\": \"howToCall\", \"type\": \"uint8\"}, {\"name\": \"calldata\", \"type\": \"bytes\"}, {\"name\": \"replacementPattern\", \"type\": \"bytes\"}, {\"name\": \"staticExtradata\", \"type\": \"bytes\"}, {\"name\": \"orderbookInclusionDesired\", \"type\": \"bool\"}], \"name\": \"approveOrder_\", \"outputs\": [], \"payable\": false, \"stateMutability\": \"nonpayable\", \"type\": \"function\"}', 'approveOrder_') as data\n    from ethereum_stg_ethereum.stg_ethereum__traces\n    where to_address = lower(\"0x7Be8076f4EA4A4AD08075C2508e481d6C946D12b\")\n    and address_hash = abs(hash(lower(\"0x7Be8076f4EA4A4AD08075C2508e481d6C946D12b\"))) % 10\n    and selector = \"0x30783739\"\n    and selector_hash = abs(hash(\"0x30783739\")) % 10\n\n    \n),\n\nfinal as (\n    select\n        call_success,\n        call_block_number,\n        call_block_time,\n        call_trace_address,\n        call_tx_hash,\n        contract_address,\n        dt,\n        data.input.*,\n        data.output.*\n    from base\n)\n\nselect /* REPARTITION(dt) */ *\nfrom final", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "ethereum_opensea.WyvernExchangeV1_call_approveOrder_"}, "model.ethereum_source.WyvernExchangeV1_call_testCopy": {"raw_sql": "{{\n    config(\n        materialized='incremental',\n        incremental_strategy='insert_overwrite',\n        partition_by=['dt'],\n        file_format='parquet',\n        pre_hook={\n            'sql': 'create or replace function opensea_wyvernexchangev1_testcopy_calldecodeudf as \"io.iftech.sparkudf.hive.opensea_WyvernExchangeV1_testCopy_CallDecodeUDF\" using jar \"s3a://ifcrypto/blockchain-dbt/jars/opensea_udf.jar\";'\n        }\n    )\n}}\n\nwith base as (\n    select\n        status==1 as call_success,\n        block_number as call_block_number,\n        block_timestamp as call_block_time,\n        trace_address as call_trace_address,\n        transaction_hash as call_tx_hash,\n        to_address as contract_address,\n        dt,\n        opensea_wyvernexchangev1_testcopy_calldecodeudf(unhex_input, unhex_output, '{\"constant\": true, \"inputs\": [{\"name\": \"arrToCopy\", \"type\": \"bytes\"}], \"name\": \"testCopy\", \"outputs\": [{\"name\": \"\", \"type\": \"bytes\"}], \"payable\": false, \"stateMutability\": \"pure\", \"type\": \"function\"}', 'testCopy') as data\n    from {{ ref('stg_ethereum__traces') }}\n    where to_address = lower(\"0x7Be8076f4EA4A4AD08075C2508e481d6C946D12b\")\n    and address_hash = abs(hash(lower(\"0x7Be8076f4EA4A4AD08075C2508e481d6C946D12b\"))) % 10\n    and selector = \"0x30783365\"\n    and selector_hash = abs(hash(\"0x30783365\")) % 10\n\n    {% if is_incremental() %}\n      and dt = var('dt')\n    {% endif %}\n),\n\nfinal as (\n    select\n        call_success,\n        call_block_number,\n        call_block_time,\n        call_trace_address,\n        call_tx_hash,\n        contract_address,\n        dt,\n        data.input.*,\n        data.output.*\n    from base\n)\n\nselect /* REPARTITION(dt) */ *\nfrom final", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.dbt.is_incremental"], "nodes": ["model.ethereum_source.stg_ethereum__traces"]}, "config": {"enabled": true, "alias": null, "schema": "opensea", "database": null, "tags": ["chain_ethereum", "level_parse", "proj_opensea"], "meta": {}, "materialized": "incremental", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "file_format": "parquet", "partition_by": ["dt"], "incremental_strategy": "insert_overwrite", "post-hook": [], "pre-hook": [{"sql": "create or replace function opensea_wyvernexchangev1_testcopy_calldecodeudf as \"io.iftech.sparkudf.hive.opensea_WyvernExchangeV1_testCopy_CallDecodeUDF\" using jar \"s3a://ifcrypto/blockchain-dbt/jars/opensea_udf.jar\";", "transaction": true, "index": null}]}, "database": null, "schema": "ethereum_opensea", "fqn": ["ethereum_source", "codegen", "opensea", "WyvernExchangeV1_call_testCopy"], "unique_id": "model.ethereum_source.WyvernExchangeV1_call_testCopy", "package_name": "ethereum_source", "root_path": "/Users/songv/Code/jike/web3/dbt_ethereum_source", "path": "codegen/opensea/WyvernExchangeV1_call_testCopy.sql", "original_file_path": "models/codegen/opensea/WyvernExchangeV1_call_testCopy.sql", "name": "WyvernExchangeV1_call_testCopy", "alias": "WyvernExchangeV1_call_testCopy", "checksum": {"name": "sha256", "checksum": "f226cd865d082820a9fc0097d3a7effd3729a4c0f2b94f924f12c1327fd2d6e9"}, "tags": ["chain_ethereum", "level_parse", "proj_opensea"], "refs": [["stg_ethereum__traces"]], "sources": [], "description": "", "columns": {"arrToCopy": {"name": "arrToCopy", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "output_0": {"name": "output_0", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "call_success": {"name": "call_success", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "call_block_number": {"name": "call_block_number", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "call_block_time": {"name": "call_block_time", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "call_trace_address": {"name": "call_trace_address", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "call_tx_hash": {"name": "call_tx_hash", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "contract_address": {"name": "contract_address", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "dt": {"name": "dt", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "ethereum_source://models/codegen/opensea/schema.yml", "compiled_path": "target/compiled/ethereum_source/models/codegen/opensea/WyvernExchangeV1_call_testCopy.sql", "build_path": null, "deferred": false, "unrendered_config": {"schema": "opensea", "tags": ["chain_ethereum", "level_parse", "proj_opensea"], "materialized": "incremental", "incremental_strategy": "insert_overwrite", "partition_by": ["dt"], "file_format": "parquet", "pre-hook": [{"sql": "create or replace function opensea_wyvernexchangev1_testcopy_calldecodeudf as \"io.iftech.sparkudf.hive.opensea_WyvernExchangeV1_testCopy_CallDecodeUDF\" using jar \"s3a://ifcrypto/blockchain-dbt/jars/opensea_udf.jar\";"}]}, "created_at": 1650535971.9428449, "compiled_sql": "\n\nwith base as (\n    select\n        status==1 as call_success,\n        block_number as call_block_number,\n        block_timestamp as call_block_time,\n        trace_address as call_trace_address,\n        transaction_hash as call_tx_hash,\n        to_address as contract_address,\n        dt,\n        opensea_wyvernexchangev1_testcopy_calldecodeudf(unhex_input, unhex_output, '{\"constant\": true, \"inputs\": [{\"name\": \"arrToCopy\", \"type\": \"bytes\"}], \"name\": \"testCopy\", \"outputs\": [{\"name\": \"\", \"type\": \"bytes\"}], \"payable\": false, \"stateMutability\": \"pure\", \"type\": \"function\"}', 'testCopy') as data\n    from ethereum_stg_ethereum.stg_ethereum__traces\n    where to_address = lower(\"0x7Be8076f4EA4A4AD08075C2508e481d6C946D12b\")\n    and address_hash = abs(hash(lower(\"0x7Be8076f4EA4A4AD08075C2508e481d6C946D12b\"))) % 10\n    and selector = \"0x30783365\"\n    and selector_hash = abs(hash(\"0x30783365\")) % 10\n\n    \n),\n\nfinal as (\n    select\n        call_success,\n        call_block_number,\n        call_block_time,\n        call_trace_address,\n        call_tx_hash,\n        contract_address,\n        dt,\n        data.input.*,\n        data.output.*\n    from base\n)\n\nselect /* REPARTITION(dt) */ *\nfrom final", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "ethereum_opensea.WyvernExchangeV1_call_testCopy"}, "model.ethereum_source.WyvernExchangeV1_call_exchangeToken": {"raw_sql": "{{\n    config(\n        materialized='incremental',\n        incremental_strategy='insert_overwrite',\n        partition_by=['dt'],\n        file_format='parquet',\n        pre_hook={\n            'sql': 'create or replace function opensea_wyvernexchangev1_exchangetoken_calldecodeudf as \"io.iftech.sparkudf.hive.opensea_WyvernExchangeV1_exchangeToken_CallDecodeUDF\" using jar \"s3a://ifcrypto/blockchain-dbt/jars/opensea_udf.jar\";'\n        }\n    )\n}}\n\nwith base as (\n    select\n        status==1 as call_success,\n        block_number as call_block_number,\n        block_timestamp as call_block_time,\n        trace_address as call_trace_address,\n        transaction_hash as call_tx_hash,\n        to_address as contract_address,\n        dt,\n        opensea_wyvernexchangev1_exchangetoken_calldecodeudf(unhex_input, unhex_output, '{\"constant\": true, \"inputs\": [], \"name\": \"exchangeToken\", \"outputs\": [{\"name\": \"\", \"type\": \"address\"}], \"payable\": false, \"stateMutability\": \"view\", \"type\": \"function\"}', 'exchangeToken') as data\n    from {{ ref('stg_ethereum__traces') }}\n    where to_address = lower(\"0x7Be8076f4EA4A4AD08075C2508e481d6C946D12b\")\n    and address_hash = abs(hash(lower(\"0x7Be8076f4EA4A4AD08075C2508e481d6C946D12b\"))) % 10\n    and selector = \"0x30786132\"\n    and selector_hash = abs(hash(\"0x30786132\")) % 10\n\n    {% if is_incremental() %}\n      and dt = var('dt')\n    {% endif %}\n),\n\nfinal as (\n    select\n        call_success,\n        call_block_number,\n        call_block_time,\n        call_trace_address,\n        call_tx_hash,\n        contract_address,\n        dt,\n        data.input.*,\n        data.output.*\n    from base\n)\n\nselect /* REPARTITION(dt) */ *\nfrom final", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.dbt.is_incremental"], "nodes": ["model.ethereum_source.stg_ethereum__traces"]}, "config": {"enabled": true, "alias": null, "schema": "opensea", "database": null, "tags": ["chain_ethereum", "level_parse", "proj_opensea"], "meta": {}, "materialized": "incremental", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "file_format": "parquet", "partition_by": ["dt"], "incremental_strategy": "insert_overwrite", "post-hook": [], "pre-hook": [{"sql": "create or replace function opensea_wyvernexchangev1_exchangetoken_calldecodeudf as \"io.iftech.sparkudf.hive.opensea_WyvernExchangeV1_exchangeToken_CallDecodeUDF\" using jar \"s3a://ifcrypto/blockchain-dbt/jars/opensea_udf.jar\";", "transaction": true, "index": null}]}, "database": null, "schema": "ethereum_opensea", "fqn": ["ethereum_source", "codegen", "opensea", "WyvernExchangeV1_call_exchangeToken"], "unique_id": "model.ethereum_source.WyvernExchangeV1_call_exchangeToken", "package_name": "ethereum_source", "root_path": "/Users/songv/Code/jike/web3/dbt_ethereum_source", "path": "codegen/opensea/WyvernExchangeV1_call_exchangeToken.sql", "original_file_path": "models/codegen/opensea/WyvernExchangeV1_call_exchangeToken.sql", "name": "WyvernExchangeV1_call_exchangeToken", "alias": "WyvernExchangeV1_call_exchangeToken", "checksum": {"name": "sha256", "checksum": "81dfb4f7401b904f674be8a5098d8b66d690f46eda58e862020d1c5c4a226c2e"}, "tags": ["chain_ethereum", "level_parse", "proj_opensea"], "refs": [["stg_ethereum__traces"]], "sources": [], "description": "", "columns": {"output_0": {"name": "output_0", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "call_success": {"name": "call_success", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "call_block_number": {"name": "call_block_number", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "call_block_time": {"name": "call_block_time", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "call_trace_address": {"name": "call_trace_address", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "call_tx_hash": {"name": "call_tx_hash", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "contract_address": {"name": "contract_address", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "dt": {"name": "dt", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "ethereum_source://models/codegen/opensea/schema.yml", "compiled_path": "target/compiled/ethereum_source/models/codegen/opensea/WyvernExchangeV1_call_exchangeToken.sql", "build_path": null, "deferred": false, "unrendered_config": {"schema": "opensea", "tags": ["chain_ethereum", "level_parse", "proj_opensea"], "materialized": "incremental", "incremental_strategy": "insert_overwrite", "partition_by": ["dt"], "file_format": "parquet", "pre-hook": [{"sql": "create or replace function opensea_wyvernexchangev1_exchangetoken_calldecodeudf as \"io.iftech.sparkudf.hive.opensea_WyvernExchangeV1_exchangeToken_CallDecodeUDF\" using jar \"s3a://ifcrypto/blockchain-dbt/jars/opensea_udf.jar\";"}]}, "created_at": 1650535971.980939, "compiled_sql": "\n\nwith base as (\n    select\n        status==1 as call_success,\n        block_number as call_block_number,\n        block_timestamp as call_block_time,\n        trace_address as call_trace_address,\n        transaction_hash as call_tx_hash,\n        to_address as contract_address,\n        dt,\n        opensea_wyvernexchangev1_exchangetoken_calldecodeudf(unhex_input, unhex_output, '{\"constant\": true, \"inputs\": [], \"name\": \"exchangeToken\", \"outputs\": [{\"name\": \"\", \"type\": \"address\"}], \"payable\": false, \"stateMutability\": \"view\", \"type\": \"function\"}', 'exchangeToken') as data\n    from ethereum_stg_ethereum.stg_ethereum__traces\n    where to_address = lower(\"0x7Be8076f4EA4A4AD08075C2508e481d6C946D12b\")\n    and address_hash = abs(hash(lower(\"0x7Be8076f4EA4A4AD08075C2508e481d6C946D12b\"))) % 10\n    and selector = \"0x30786132\"\n    and selector_hash = abs(hash(\"0x30786132\")) % 10\n\n    \n),\n\nfinal as (\n    select\n        call_success,\n        call_block_number,\n        call_block_time,\n        call_trace_address,\n        call_tx_hash,\n        contract_address,\n        dt,\n        data.input.*,\n        data.output.*\n    from base\n)\n\nselect /* REPARTITION(dt) */ *\nfrom final", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "ethereum_opensea.WyvernExchangeV1_call_exchangeToken"}, "model.ethereum_source.WyvernExchangeV2_call_version": {"raw_sql": "{{\n    config(\n        materialized='incremental',\n        incremental_strategy='insert_overwrite',\n        partition_by=['dt'],\n        file_format='parquet',\n        pre_hook={\n            'sql': 'create or replace function opensea_wyvernexchangev2_version_calldecodeudf as \"io.iftech.sparkudf.hive.opensea_WyvernExchangeV2_version_CallDecodeUDF\" using jar \"s3a://ifcrypto/blockchain-dbt/jars/opensea_udf.jar\";'\n        }\n    )\n}}\n\nwith base as (\n    select\n        status==1 as call_success,\n        block_number as call_block_number,\n        block_timestamp as call_block_time,\n        trace_address as call_trace_address,\n        transaction_hash as call_tx_hash,\n        to_address as contract_address,\n        dt,\n        opensea_wyvernexchangev2_version_calldecodeudf(unhex_input, unhex_output, '{\"constant\": true, \"inputs\": [], \"name\": \"version\", \"outputs\": [{\"name\": \"\", \"type\": \"string\"}], \"payable\": false, \"stateMutability\": \"view\", \"type\": \"function\"}', 'version') as data\n    from {{ ref('stg_ethereum__traces') }}\n    where to_address = lower(\"0x7f268357A8c2552623316e2562D90e642bB538E5\")\n    and address_hash = abs(hash(lower(\"0x7f268357A8c2552623316e2562D90e642bB538E5\"))) % 10\n    and selector = \"0x30783534\"\n    and selector_hash = abs(hash(\"0x30783534\")) % 10\n\n    {% if is_incremental() %}\n      and dt = var('dt')\n    {% endif %}\n),\n\nfinal as (\n    select\n        call_success,\n        call_block_number,\n        call_block_time,\n        call_trace_address,\n        call_tx_hash,\n        contract_address,\n        dt,\n        data.input.*,\n        data.output.*\n    from base\n)\n\nselect /* REPARTITION(dt) */ *\nfrom final", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.dbt.is_incremental"], "nodes": ["model.ethereum_source.stg_ethereum__traces"]}, "config": {"enabled": true, "alias": null, "schema": "opensea", "database": null, "tags": ["chain_ethereum", "level_parse", "proj_opensea"], "meta": {}, "materialized": "incremental", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "file_format": "parquet", "partition_by": ["dt"], "incremental_strategy": "insert_overwrite", "post-hook": [], "pre-hook": [{"sql": "create or replace function opensea_wyvernexchangev2_version_calldecodeudf as \"io.iftech.sparkudf.hive.opensea_WyvernExchangeV2_version_CallDecodeUDF\" using jar \"s3a://ifcrypto/blockchain-dbt/jars/opensea_udf.jar\";", "transaction": true, "index": null}]}, "database": null, "schema": "ethereum_opensea", "fqn": ["ethereum_source", "codegen", "opensea", "WyvernExchangeV2_call_version"], "unique_id": "model.ethereum_source.WyvernExchangeV2_call_version", "package_name": "ethereum_source", "root_path": "/Users/songv/Code/jike/web3/dbt_ethereum_source", "path": "codegen/opensea/WyvernExchangeV2_call_version.sql", "original_file_path": "models/codegen/opensea/WyvernExchangeV2_call_version.sql", "name": "WyvernExchangeV2_call_version", "alias": "WyvernExchangeV2_call_version", "checksum": {"name": "sha256", "checksum": "8e3df96586c56bdfd20f15d3238b64be2fcf76587e72a4172a72aa058c5f0b86"}, "tags": ["chain_ethereum", "level_parse", "proj_opensea"], "refs": [["stg_ethereum__traces"]], "sources": [], "description": "", "columns": {"output_0": {"name": "output_0", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "call_success": {"name": "call_success", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "call_block_number": {"name": "call_block_number", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "call_block_time": {"name": "call_block_time", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "call_trace_address": {"name": "call_trace_address", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "call_tx_hash": {"name": "call_tx_hash", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "contract_address": {"name": "contract_address", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "dt": {"name": "dt", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "ethereum_source://models/codegen/opensea/schema.yml", "compiled_path": "target/compiled/ethereum_source/models/codegen/opensea/WyvernExchangeV2_call_version.sql", "build_path": null, "deferred": false, "unrendered_config": {"schema": "opensea", "tags": ["chain_ethereum", "level_parse", "proj_opensea"], "materialized": "incremental", "incremental_strategy": "insert_overwrite", "partition_by": ["dt"], "file_format": "parquet", "pre-hook": [{"sql": "create or replace function opensea_wyvernexchangev2_version_calldecodeudf as \"io.iftech.sparkudf.hive.opensea_WyvernExchangeV2_version_CallDecodeUDF\" using jar \"s3a://ifcrypto/blockchain-dbt/jars/opensea_udf.jar\";"}]}, "created_at": 1650535972.0358698, "compiled_sql": "\n\nwith base as (\n    select\n        status==1 as call_success,\n        block_number as call_block_number,\n        block_timestamp as call_block_time,\n        trace_address as call_trace_address,\n        transaction_hash as call_tx_hash,\n        to_address as contract_address,\n        dt,\n        opensea_wyvernexchangev2_version_calldecodeudf(unhex_input, unhex_output, '{\"constant\": true, \"inputs\": [], \"name\": \"version\", \"outputs\": [{\"name\": \"\", \"type\": \"string\"}], \"payable\": false, \"stateMutability\": \"view\", \"type\": \"function\"}', 'version') as data\n    from ethereum_stg_ethereum.stg_ethereum__traces\n    where to_address = lower(\"0x7f268357A8c2552623316e2562D90e642bB538E5\")\n    and address_hash = abs(hash(lower(\"0x7f268357A8c2552623316e2562D90e642bB538E5\"))) % 10\n    and selector = \"0x30783534\"\n    and selector_hash = abs(hash(\"0x30783534\")) % 10\n\n    \n),\n\nfinal as (\n    select\n        call_success,\n        call_block_number,\n        call_block_time,\n        call_trace_address,\n        call_tx_hash,\n        contract_address,\n        dt,\n        data.input.*,\n        data.output.*\n    from base\n)\n\nselect /* REPARTITION(dt) */ *\nfrom final", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "ethereum_opensea.WyvernExchangeV2_call_version"}, "model.ethereum_source.WyvernExchangeV2_call_approvedOrders": {"raw_sql": "{{\n    config(\n        materialized='incremental',\n        incremental_strategy='insert_overwrite',\n        partition_by=['dt'],\n        file_format='parquet',\n        pre_hook={\n            'sql': 'create or replace function opensea_wyvernexchangev2_approvedorders_calldecodeudf as \"io.iftech.sparkudf.hive.opensea_WyvernExchangeV2_approvedOrders_CallDecodeUDF\" using jar \"s3a://ifcrypto/blockchain-dbt/jars/opensea_udf.jar\";'\n        }\n    )\n}}\n\nwith base as (\n    select\n        status==1 as call_success,\n        block_number as call_block_number,\n        block_timestamp as call_block_time,\n        trace_address as call_trace_address,\n        transaction_hash as call_tx_hash,\n        to_address as contract_address,\n        dt,\n        opensea_wyvernexchangev2_approvedorders_calldecodeudf(unhex_input, unhex_output, '{\"constant\": true, \"inputs\": [{\"name\": \"hash\", \"type\": \"bytes32\"}], \"name\": \"approvedOrders\", \"outputs\": [{\"name\": \"approved\", \"type\": \"bool\"}], \"payable\": false, \"stateMutability\": \"view\", \"type\": \"function\"}', 'approvedOrders') as data\n    from {{ ref('stg_ethereum__traces') }}\n    where to_address = lower(\"0x7f268357A8c2552623316e2562D90e642bB538E5\")\n    and address_hash = abs(hash(lower(\"0x7f268357A8c2552623316e2562D90e642bB538E5\"))) % 10\n    and selector = \"0x30786535\"\n    and selector_hash = abs(hash(\"0x30786535\")) % 10\n\n    {% if is_incremental() %}\n      and dt = var('dt')\n    {% endif %}\n),\n\nfinal as (\n    select\n        call_success,\n        call_block_number,\n        call_block_time,\n        call_trace_address,\n        call_tx_hash,\n        contract_address,\n        dt,\n        data.input.*,\n        data.output.*\n    from base\n)\n\nselect /* REPARTITION(dt) */ *\nfrom final", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.dbt.is_incremental"], "nodes": ["model.ethereum_source.stg_ethereum__traces"]}, "config": {"enabled": true, "alias": null, "schema": "opensea", "database": null, "tags": ["chain_ethereum", "level_parse", "proj_opensea"], "meta": {}, "materialized": "incremental", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "file_format": "parquet", "partition_by": ["dt"], "incremental_strategy": "insert_overwrite", "post-hook": [], "pre-hook": [{"sql": "create or replace function opensea_wyvernexchangev2_approvedorders_calldecodeudf as \"io.iftech.sparkudf.hive.opensea_WyvernExchangeV2_approvedOrders_CallDecodeUDF\" using jar \"s3a://ifcrypto/blockchain-dbt/jars/opensea_udf.jar\";", "transaction": true, "index": null}]}, "database": null, "schema": "ethereum_opensea", "fqn": ["ethereum_source", "codegen", "opensea", "WyvernExchangeV2_call_approvedOrders"], "unique_id": "model.ethereum_source.WyvernExchangeV2_call_approvedOrders", "package_name": "ethereum_source", "root_path": "/Users/songv/Code/jike/web3/dbt_ethereum_source", "path": "codegen/opensea/WyvernExchangeV2_call_approvedOrders.sql", "original_file_path": "models/codegen/opensea/WyvernExchangeV2_call_approvedOrders.sql", "name": "WyvernExchangeV2_call_approvedOrders", "alias": "WyvernExchangeV2_call_approvedOrders", "checksum": {"name": "sha256", "checksum": "04425282b063270c044dc55f54b93122cb4e6524f363b7ae77faf95e39430374"}, "tags": ["chain_ethereum", "level_parse", "proj_opensea"], "refs": [["stg_ethereum__traces"]], "sources": [], "description": "", "columns": {"hash": {"name": "hash", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "output_approved": {"name": "output_approved", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "call_success": {"name": "call_success", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "call_block_number": {"name": "call_block_number", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "call_block_time": {"name": "call_block_time", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "call_trace_address": {"name": "call_trace_address", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "call_tx_hash": {"name": "call_tx_hash", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "contract_address": {"name": "contract_address", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "dt": {"name": "dt", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "ethereum_source://models/codegen/opensea/schema.yml", "compiled_path": "target/compiled/ethereum_source/models/codegen/opensea/WyvernExchangeV2_call_approvedOrders.sql", "build_path": null, "deferred": false, "unrendered_config": {"schema": "opensea", "tags": ["chain_ethereum", "level_parse", "proj_opensea"], "materialized": "incremental", "incremental_strategy": "insert_overwrite", "partition_by": ["dt"], "file_format": "parquet", "pre-hook": [{"sql": "create or replace function opensea_wyvernexchangev2_approvedorders_calldecodeudf as \"io.iftech.sparkudf.hive.opensea_WyvernExchangeV2_approvedOrders_CallDecodeUDF\" using jar \"s3a://ifcrypto/blockchain-dbt/jars/opensea_udf.jar\";"}]}, "created_at": 1650535972.088906, "compiled_sql": "\n\nwith base as (\n    select\n        status==1 as call_success,\n        block_number as call_block_number,\n        block_timestamp as call_block_time,\n        trace_address as call_trace_address,\n        transaction_hash as call_tx_hash,\n        to_address as contract_address,\n        dt,\n        opensea_wyvernexchangev2_approvedorders_calldecodeudf(unhex_input, unhex_output, '{\"constant\": true, \"inputs\": [{\"name\": \"hash\", \"type\": \"bytes32\"}], \"name\": \"approvedOrders\", \"outputs\": [{\"name\": \"approved\", \"type\": \"bool\"}], \"payable\": false, \"stateMutability\": \"view\", \"type\": \"function\"}', 'approvedOrders') as data\n    from ethereum_stg_ethereum.stg_ethereum__traces\n    where to_address = lower(\"0x7f268357A8c2552623316e2562D90e642bB538E5\")\n    and address_hash = abs(hash(lower(\"0x7f268357A8c2552623316e2562D90e642bB538E5\"))) % 10\n    and selector = \"0x30786535\"\n    and selector_hash = abs(hash(\"0x30786535\")) % 10\n\n    \n),\n\nfinal as (\n    select\n        call_success,\n        call_block_number,\n        call_block_time,\n        call_trace_address,\n        call_tx_hash,\n        contract_address,\n        dt,\n        data.input.*,\n        data.output.*\n    from base\n)\n\nselect /* REPARTITION(dt) */ *\nfrom final", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "ethereum_opensea.WyvernExchangeV2_call_approvedOrders"}, "model.ethereum_source.WyvernExchangeV2_call_approveOrder_": {"raw_sql": "{{\n    config(\n        materialized='incremental',\n        incremental_strategy='insert_overwrite',\n        partition_by=['dt'],\n        file_format='parquet',\n        pre_hook={\n            'sql': 'create or replace function opensea_wyvernexchangev2_approveorder__calldecodeudf as \"io.iftech.sparkudf.hive.opensea_WyvernExchangeV2_approveOrder__CallDecodeUDF\" using jar \"s3a://ifcrypto/blockchain-dbt/jars/opensea_udf.jar\";'\n        }\n    )\n}}\n\nwith base as (\n    select\n        status==1 as call_success,\n        block_number as call_block_number,\n        block_timestamp as call_block_time,\n        trace_address as call_trace_address,\n        transaction_hash as call_tx_hash,\n        to_address as contract_address,\n        dt,\n        opensea_wyvernexchangev2_approveorder__calldecodeudf(unhex_input, unhex_output, '{\"constant\": false, \"inputs\": [{\"name\": \"addrs\", \"type\": \"address[7]\"}, {\"name\": \"uints\", \"type\": \"uint256[9]\"}, {\"name\": \"feeMethod\", \"type\": \"uint8\"}, {\"name\": \"side\", \"type\": \"uint8\"}, {\"name\": \"saleKind\", \"type\": \"uint8\"}, {\"name\": \"howToCall\", \"type\": \"uint8\"}, {\"name\": \"calldata\", \"type\": \"bytes\"}, {\"name\": \"replacementPattern\", \"type\": \"bytes\"}, {\"name\": \"staticExtradata\", \"type\": \"bytes\"}, {\"name\": \"orderbookInclusionDesired\", \"type\": \"bool\"}], \"name\": \"approveOrder_\", \"outputs\": [], \"payable\": false, \"stateMutability\": \"nonpayable\", \"type\": \"function\"}', 'approveOrder_') as data\n    from {{ ref('stg_ethereum__traces') }}\n    where to_address = lower(\"0x7f268357A8c2552623316e2562D90e642bB538E5\")\n    and address_hash = abs(hash(lower(\"0x7f268357A8c2552623316e2562D90e642bB538E5\"))) % 10\n    and selector = \"0x30783739\"\n    and selector_hash = abs(hash(\"0x30783739\")) % 10\n\n    {% if is_incremental() %}\n      and dt = var('dt')\n    {% endif %}\n),\n\nfinal as (\n    select\n        call_success,\n        call_block_number,\n        call_block_time,\n        call_trace_address,\n        call_tx_hash,\n        contract_address,\n        dt,\n        data.input.*,\n        data.output.*\n    from base\n)\n\nselect /* REPARTITION(dt) */ *\nfrom final", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.dbt.is_incremental"], "nodes": ["model.ethereum_source.stg_ethereum__traces"]}, "config": {"enabled": true, "alias": null, "schema": "opensea", "database": null, "tags": ["chain_ethereum", "level_parse", "proj_opensea"], "meta": {}, "materialized": "incremental", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "file_format": "parquet", "partition_by": ["dt"], "incremental_strategy": "insert_overwrite", "post-hook": [], "pre-hook": [{"sql": "create or replace function opensea_wyvernexchangev2_approveorder__calldecodeudf as \"io.iftech.sparkudf.hive.opensea_WyvernExchangeV2_approveOrder__CallDecodeUDF\" using jar \"s3a://ifcrypto/blockchain-dbt/jars/opensea_udf.jar\";", "transaction": true, "index": null}]}, "database": null, "schema": "ethereum_opensea", "fqn": ["ethereum_source", "codegen", "opensea", "WyvernExchangeV2_call_approveOrder_"], "unique_id": "model.ethereum_source.WyvernExchangeV2_call_approveOrder_", "package_name": "ethereum_source", "root_path": "/Users/songv/Code/jike/web3/dbt_ethereum_source", "path": "codegen/opensea/WyvernExchangeV2_call_approveOrder_.sql", "original_file_path": "models/codegen/opensea/WyvernExchangeV2_call_approveOrder_.sql", "name": "WyvernExchangeV2_call_approveOrder_", "alias": "WyvernExchangeV2_call_approveOrder_", "checksum": {"name": "sha256", "checksum": "bbad2c6eb414c139acb4b6d3d4514e40509b00fdfac2ba341e6baff8c05f0c79"}, "tags": ["chain_ethereum", "level_parse", "proj_opensea"], "refs": [["stg_ethereum__traces"]], "sources": [], "description": "", "columns": {"addrs": {"name": "addrs", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "uints": {"name": "uints", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "feeMethod": {"name": "feeMethod", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "side": {"name": "side", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "saleKind": {"name": "saleKind", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "howToCall": {"name": "howToCall", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "calldata": {"name": "calldata", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "replacementPattern": {"name": "replacementPattern", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "staticExtradata": {"name": "staticExtradata", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "orderbookInclusionDesired": {"name": "orderbookInclusionDesired", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "call_success": {"name": "call_success", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "call_block_number": {"name": "call_block_number", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "call_block_time": {"name": "call_block_time", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "call_trace_address": {"name": "call_trace_address", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "call_tx_hash": {"name": "call_tx_hash", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "contract_address": {"name": "contract_address", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "dt": {"name": "dt", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "ethereum_source://models/codegen/opensea/schema.yml", "compiled_path": "target/compiled/ethereum_source/models/codegen/opensea/WyvernExchangeV2_call_approveOrder_.sql", "build_path": null, "deferred": false, "unrendered_config": {"schema": "opensea", "tags": ["chain_ethereum", "level_parse", "proj_opensea"], "materialized": "incremental", "incremental_strategy": "insert_overwrite", "partition_by": ["dt"], "file_format": "parquet", "pre-hook": [{"sql": "create or replace function opensea_wyvernexchangev2_approveorder__calldecodeudf as \"io.iftech.sparkudf.hive.opensea_WyvernExchangeV2_approveOrder__CallDecodeUDF\" using jar \"s3a://ifcrypto/blockchain-dbt/jars/opensea_udf.jar\";"}]}, "created_at": 1650535972.057864, "compiled_sql": "\n\nwith base as (\n    select\n        status==1 as call_success,\n        block_number as call_block_number,\n        block_timestamp as call_block_time,\n        trace_address as call_trace_address,\n        transaction_hash as call_tx_hash,\n        to_address as contract_address,\n        dt,\n        opensea_wyvernexchangev2_approveorder__calldecodeudf(unhex_input, unhex_output, '{\"constant\": false, \"inputs\": [{\"name\": \"addrs\", \"type\": \"address[7]\"}, {\"name\": \"uints\", \"type\": \"uint256[9]\"}, {\"name\": \"feeMethod\", \"type\": \"uint8\"}, {\"name\": \"side\", \"type\": \"uint8\"}, {\"name\": \"saleKind\", \"type\": \"uint8\"}, {\"name\": \"howToCall\", \"type\": \"uint8\"}, {\"name\": \"calldata\", \"type\": \"bytes\"}, {\"name\": \"replacementPattern\", \"type\": \"bytes\"}, {\"name\": \"staticExtradata\", \"type\": \"bytes\"}, {\"name\": \"orderbookInclusionDesired\", \"type\": \"bool\"}], \"name\": \"approveOrder_\", \"outputs\": [], \"payable\": false, \"stateMutability\": \"nonpayable\", \"type\": \"function\"}', 'approveOrder_') as data\n    from ethereum_stg_ethereum.stg_ethereum__traces\n    where to_address = lower(\"0x7f268357A8c2552623316e2562D90e642bB538E5\")\n    and address_hash = abs(hash(lower(\"0x7f268357A8c2552623316e2562D90e642bB538E5\"))) % 10\n    and selector = \"0x30783739\"\n    and selector_hash = abs(hash(\"0x30783739\")) % 10\n\n    \n),\n\nfinal as (\n    select\n        call_success,\n        call_block_number,\n        call_block_time,\n        call_trace_address,\n        call_tx_hash,\n        contract_address,\n        dt,\n        data.input.*,\n        data.output.*\n    from base\n)\n\nselect /* REPARTITION(dt) */ *\nfrom final", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "ethereum_opensea.WyvernExchangeV2_call_approveOrder_"}, "model.ethereum_source.WyvernExchangeV2_call_incrementNonce": {"raw_sql": "select /* REPARTITION(dt) */\n    status==1 as call_success,\n    block_number as call_block_number,\n    block_timestamp as call_block_time,\n    trace_address as call_trace_address,\n    transaction_hash as call_tx_hash,\n    to_address as contract_address,\n    dt\nfrom {{ ref('stg_ethereum__traces') }}\nwhere to_address = lower(\"0x7f268357A8c2552623316e2562D90e642bB538E5\")\nand address_hash = abs(hash(lower(\"0x7f268357A8c2552623316e2562D90e642bB538E5\"))) % 10\nand selector = \"0x30783632376364636239\"\nand selector_hash = abs(hash(\"0x30783632376364636239\")) % 10\n\n{% if is_incremental() %}\n  and dt = var('dt')\n{% endif %}", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.dbt.is_incremental"], "nodes": ["model.ethereum_source.stg_ethereum__traces"]}, "config": {"enabled": true, "alias": null, "schema": "opensea", "database": null, "tags": ["chain_ethereum", "level_parse", "proj_opensea"], "meta": {}, "materialized": "view", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "post-hook": [], "pre-hook": []}, "database": null, "schema": "ethereum_opensea", "fqn": ["ethereum_source", "codegen", "opensea", "WyvernExchangeV2_call_incrementNonce"], "unique_id": "model.ethereum_source.WyvernExchangeV2_call_incrementNonce", "package_name": "ethereum_source", "root_path": "/Users/songv/Code/jike/web3/dbt_ethereum_source", "path": "codegen/opensea/WyvernExchangeV2_call_incrementNonce.sql", "original_file_path": "models/codegen/opensea/WyvernExchangeV2_call_incrementNonce.sql", "name": "WyvernExchangeV2_call_incrementNonce", "alias": "WyvernExchangeV2_call_incrementNonce", "checksum": {"name": "sha256", "checksum": "4f47c414eb9aa7847c9ef306a1690a5e3e51f929a2cb671292f691711f43c4a8"}, "tags": ["chain_ethereum", "level_parse", "proj_opensea"], "refs": [["stg_ethereum__traces"]], "sources": [], "description": "", "columns": {"call_success": {"name": "call_success", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "call_block_number": {"name": "call_block_number", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "call_block_time": {"name": "call_block_time", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "call_trace_address": {"name": "call_trace_address", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "call_tx_hash": {"name": "call_tx_hash", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "contract_address": {"name": "contract_address", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "dt": {"name": "dt", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "ethereum_source://models/codegen/opensea/schema.yml", "compiled_path": "target/compiled/ethereum_source/models/codegen/opensea/WyvernExchangeV2_call_incrementNonce.sql", "build_path": null, "deferred": false, "unrendered_config": {"schema": "opensea", "tags": ["chain_ethereum", "level_parse", "proj_opensea"]}, "created_at": 1650535972.0430772, "compiled_sql": "select /* REPARTITION(dt) */\n    status==1 as call_success,\n    block_number as call_block_number,\n    block_timestamp as call_block_time,\n    trace_address as call_trace_address,\n    transaction_hash as call_tx_hash,\n    to_address as contract_address,\n    dt\nfrom ethereum_stg_ethereum.stg_ethereum__traces\nwhere to_address = lower(\"0x7f268357A8c2552623316e2562D90e642bB538E5\")\nand address_hash = abs(hash(lower(\"0x7f268357A8c2552623316e2562D90e642bB538E5\"))) % 10\nand selector = \"0x30783632376364636239\"\nand selector_hash = abs(hash(\"0x30783632376364636239\")) % 10\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "ethereum_opensea.WyvernExchangeV2_call_incrementNonce"}, "model.ethereum_source.WyvernExchangeV1_call_tokenTransferProxy": {"raw_sql": "{{\n    config(\n        materialized='incremental',\n        incremental_strategy='insert_overwrite',\n        partition_by=['dt'],\n        file_format='parquet',\n        pre_hook={\n            'sql': 'create or replace function opensea_wyvernexchangev1_tokentransferproxy_calldecodeudf as \"io.iftech.sparkudf.hive.opensea_WyvernExchangeV1_tokenTransferProxy_CallDecodeUDF\" using jar \"s3a://ifcrypto/blockchain-dbt/jars/opensea_udf.jar\";'\n        }\n    )\n}}\n\nwith base as (\n    select\n        status==1 as call_success,\n        block_number as call_block_number,\n        block_timestamp as call_block_time,\n        trace_address as call_trace_address,\n        transaction_hash as call_tx_hash,\n        to_address as contract_address,\n        dt,\n        opensea_wyvernexchangev1_tokentransferproxy_calldecodeudf(unhex_input, unhex_output, '{\"constant\": true, \"inputs\": [], \"name\": \"tokenTransferProxy\", \"outputs\": [{\"name\": \"\", \"type\": \"address\"}], \"payable\": false, \"stateMutability\": \"view\", \"type\": \"function\"}', 'tokenTransferProxy') as data\n    from {{ ref('stg_ethereum__traces') }}\n    where to_address = lower(\"0x7Be8076f4EA4A4AD08075C2508e481d6C946D12b\")\n    and address_hash = abs(hash(lower(\"0x7Be8076f4EA4A4AD08075C2508e481d6C946D12b\"))) % 10\n    and selector = \"0x30783065\"\n    and selector_hash = abs(hash(\"0x30783065\")) % 10\n\n    {% if is_incremental() %}\n      and dt = var('dt')\n    {% endif %}\n),\n\nfinal as (\n    select\n        call_success,\n        call_block_number,\n        call_block_time,\n        call_trace_address,\n        call_tx_hash,\n        contract_address,\n        dt,\n        data.input.*,\n        data.output.*\n    from base\n)\n\nselect /* REPARTITION(dt) */ *\nfrom final", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.dbt.is_incremental"], "nodes": ["model.ethereum_source.stg_ethereum__traces"]}, "config": {"enabled": true, "alias": null, "schema": "opensea", "database": null, "tags": ["chain_ethereum", "level_parse", "proj_opensea"], "meta": {}, "materialized": "incremental", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "file_format": "parquet", "partition_by": ["dt"], "incremental_strategy": "insert_overwrite", "post-hook": [], "pre-hook": [{"sql": "create or replace function opensea_wyvernexchangev1_tokentransferproxy_calldecodeudf as \"io.iftech.sparkudf.hive.opensea_WyvernExchangeV1_tokenTransferProxy_CallDecodeUDF\" using jar \"s3a://ifcrypto/blockchain-dbt/jars/opensea_udf.jar\";", "transaction": true, "index": null}]}, "database": null, "schema": "ethereum_opensea", "fqn": ["ethereum_source", "codegen", "opensea", "WyvernExchangeV1_call_tokenTransferProxy"], "unique_id": "model.ethereum_source.WyvernExchangeV1_call_tokenTransferProxy", "package_name": "ethereum_source", "root_path": "/Users/songv/Code/jike/web3/dbt_ethereum_source", "path": "codegen/opensea/WyvernExchangeV1_call_tokenTransferProxy.sql", "original_file_path": "models/codegen/opensea/WyvernExchangeV1_call_tokenTransferProxy.sql", "name": "WyvernExchangeV1_call_tokenTransferProxy", "alias": "WyvernExchangeV1_call_tokenTransferProxy", "checksum": {"name": "sha256", "checksum": "d2b1f33b0d1e66586226defd38b13dcb34d8a52b54c7bc367dc0298737711057"}, "tags": ["chain_ethereum", "level_parse", "proj_opensea"], "refs": [["stg_ethereum__traces"]], "sources": [], "description": "", "columns": {"output_0": {"name": "output_0", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "call_success": {"name": "call_success", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "call_block_number": {"name": "call_block_number", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "call_block_time": {"name": "call_block_time", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "call_trace_address": {"name": "call_trace_address", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "call_tx_hash": {"name": "call_tx_hash", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "contract_address": {"name": "contract_address", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "dt": {"name": "dt", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "ethereum_source://models/codegen/opensea/schema.yml", "compiled_path": "target/compiled/ethereum_source/models/codegen/opensea/WyvernExchangeV1_call_tokenTransferProxy.sql", "build_path": null, "deferred": false, "unrendered_config": {"schema": "opensea", "tags": ["chain_ethereum", "level_parse", "proj_opensea"], "materialized": "incremental", "incremental_strategy": "insert_overwrite", "partition_by": ["dt"], "file_format": "parquet", "pre-hook": [{"sql": "create or replace function opensea_wyvernexchangev1_tokentransferproxy_calldecodeudf as \"io.iftech.sparkudf.hive.opensea_WyvernExchangeV1_tokenTransferProxy_CallDecodeUDF\" using jar \"s3a://ifcrypto/blockchain-dbt/jars/opensea_udf.jar\";"}]}, "created_at": 1650535971.9280572, "compiled_sql": "\n\nwith base as (\n    select\n        status==1 as call_success,\n        block_number as call_block_number,\n        block_timestamp as call_block_time,\n        trace_address as call_trace_address,\n        transaction_hash as call_tx_hash,\n        to_address as contract_address,\n        dt,\n        opensea_wyvernexchangev1_tokentransferproxy_calldecodeudf(unhex_input, unhex_output, '{\"constant\": true, \"inputs\": [], \"name\": \"tokenTransferProxy\", \"outputs\": [{\"name\": \"\", \"type\": \"address\"}], \"payable\": false, \"stateMutability\": \"view\", \"type\": \"function\"}', 'tokenTransferProxy') as data\n    from ethereum_stg_ethereum.stg_ethereum__traces\n    where to_address = lower(\"0x7Be8076f4EA4A4AD08075C2508e481d6C946D12b\")\n    and address_hash = abs(hash(lower(\"0x7Be8076f4EA4A4AD08075C2508e481d6C946D12b\"))) % 10\n    and selector = \"0x30783065\"\n    and selector_hash = abs(hash(\"0x30783065\")) % 10\n\n    \n),\n\nfinal as (\n    select\n        call_success,\n        call_block_number,\n        call_block_time,\n        call_trace_address,\n        call_tx_hash,\n        contract_address,\n        dt,\n        data.input.*,\n        data.output.*\n    from base\n)\n\nselect /* REPARTITION(dt) */ *\nfrom final", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "ethereum_opensea.WyvernExchangeV1_call_tokenTransferProxy"}, "model.ethereum_source.WyvernExchangeV1_call_cancelOrder_": {"raw_sql": "{{\n    config(\n        materialized='incremental',\n        incremental_strategy='insert_overwrite',\n        partition_by=['dt'],\n        file_format='parquet',\n        pre_hook={\n            'sql': 'create or replace function opensea_wyvernexchangev1_cancelorder__calldecodeudf as \"io.iftech.sparkudf.hive.opensea_WyvernExchangeV1_cancelOrder__CallDecodeUDF\" using jar \"s3a://ifcrypto/blockchain-dbt/jars/opensea_udf.jar\";'\n        }\n    )\n}}\n\nwith base as (\n    select\n        status==1 as call_success,\n        block_number as call_block_number,\n        block_timestamp as call_block_time,\n        trace_address as call_trace_address,\n        transaction_hash as call_tx_hash,\n        to_address as contract_address,\n        dt,\n        opensea_wyvernexchangev1_cancelorder__calldecodeudf(unhex_input, unhex_output, '{\"constant\": false, \"inputs\": [{\"name\": \"addrs\", \"type\": \"address[7]\"}, {\"name\": \"uints\", \"type\": \"uint256[9]\"}, {\"name\": \"feeMethod\", \"type\": \"uint8\"}, {\"name\": \"side\", \"type\": \"uint8\"}, {\"name\": \"saleKind\", \"type\": \"uint8\"}, {\"name\": \"howToCall\", \"type\": \"uint8\"}, {\"name\": \"calldata\", \"type\": \"bytes\"}, {\"name\": \"replacementPattern\", \"type\": \"bytes\"}, {\"name\": \"staticExtradata\", \"type\": \"bytes\"}, {\"name\": \"v\", \"type\": \"uint8\"}, {\"name\": \"r\", \"type\": \"bytes32\"}, {\"name\": \"s\", \"type\": \"bytes32\"}], \"name\": \"cancelOrder_\", \"outputs\": [], \"payable\": false, \"stateMutability\": \"nonpayable\", \"type\": \"function\"}', 'cancelOrder_') as data\n    from {{ ref('stg_ethereum__traces') }}\n    where to_address = lower(\"0x7Be8076f4EA4A4AD08075C2508e481d6C946D12b\")\n    and address_hash = abs(hash(lower(\"0x7Be8076f4EA4A4AD08075C2508e481d6C946D12b\"))) % 10\n    and selector = \"0x30786138\"\n    and selector_hash = abs(hash(\"0x30786138\")) % 10\n\n    {% if is_incremental() %}\n      and dt = var('dt')\n    {% endif %}\n),\n\nfinal as (\n    select\n        call_success,\n        call_block_number,\n        call_block_time,\n        call_trace_address,\n        call_tx_hash,\n        contract_address,\n        dt,\n        data.input.*,\n        data.output.*\n    from base\n)\n\nselect /* REPARTITION(dt) */ *\nfrom final", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.dbt.is_incremental"], "nodes": ["model.ethereum_source.stg_ethereum__traces"]}, "config": {"enabled": true, "alias": null, "schema": "opensea", "database": null, "tags": ["chain_ethereum", "level_parse", "proj_opensea"], "meta": {}, "materialized": "incremental", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "file_format": "parquet", "partition_by": ["dt"], "incremental_strategy": "insert_overwrite", "post-hook": [], "pre-hook": [{"sql": "create or replace function opensea_wyvernexchangev1_cancelorder__calldecodeudf as \"io.iftech.sparkudf.hive.opensea_WyvernExchangeV1_cancelOrder__CallDecodeUDF\" using jar \"s3a://ifcrypto/blockchain-dbt/jars/opensea_udf.jar\";", "transaction": true, "index": null}]}, "database": null, "schema": "ethereum_opensea", "fqn": ["ethereum_source", "codegen", "opensea", "WyvernExchangeV1_call_cancelOrder_"], "unique_id": "model.ethereum_source.WyvernExchangeV1_call_cancelOrder_", "package_name": "ethereum_source", "root_path": "/Users/songv/Code/jike/web3/dbt_ethereum_source", "path": "codegen/opensea/WyvernExchangeV1_call_cancelOrder_.sql", "original_file_path": "models/codegen/opensea/WyvernExchangeV1_call_cancelOrder_.sql", "name": "WyvernExchangeV1_call_cancelOrder_", "alias": "WyvernExchangeV1_call_cancelOrder_", "checksum": {"name": "sha256", "checksum": "769247c4e78bfe48e65b877bfa16fb9f27d47cfb93d677cd20be30f7c3286aad"}, "tags": ["chain_ethereum", "level_parse", "proj_opensea"], "refs": [["stg_ethereum__traces"]], "sources": [], "description": "", "columns": {"addrs": {"name": "addrs", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "uints": {"name": "uints", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "feeMethod": {"name": "feeMethod", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "side": {"name": "side", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "saleKind": {"name": "saleKind", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "howToCall": {"name": "howToCall", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "calldata": {"name": "calldata", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "replacementPattern": {"name": "replacementPattern", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "staticExtradata": {"name": "staticExtradata", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "v": {"name": "v", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "r": {"name": "r", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "s": {"name": "s", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "call_success": {"name": "call_success", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "call_block_number": {"name": "call_block_number", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "call_block_time": {"name": "call_block_time", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "call_trace_address": {"name": "call_trace_address", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "call_tx_hash": {"name": "call_tx_hash", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "contract_address": {"name": "contract_address", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "dt": {"name": "dt", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "ethereum_source://models/codegen/opensea/schema.yml", "compiled_path": "target/compiled/ethereum_source/models/codegen/opensea/WyvernExchangeV1_call_cancelOrder_.sql", "build_path": null, "deferred": false, "unrendered_config": {"schema": "opensea", "tags": ["chain_ethereum", "level_parse", "proj_opensea"], "materialized": "incremental", "incremental_strategy": "insert_overwrite", "partition_by": ["dt"], "file_format": "parquet", "pre-hook": [{"sql": "create or replace function opensea_wyvernexchangev1_cancelorder__calldecodeudf as \"io.iftech.sparkudf.hive.opensea_WyvernExchangeV1_cancelOrder__CallDecodeUDF\" using jar \"s3a://ifcrypto/blockchain-dbt/jars/opensea_udf.jar\";"}]}, "created_at": 1650535971.984328, "compiled_sql": "\n\nwith base as (\n    select\n        status==1 as call_success,\n        block_number as call_block_number,\n        block_timestamp as call_block_time,\n        trace_address as call_trace_address,\n        transaction_hash as call_tx_hash,\n        to_address as contract_address,\n        dt,\n        opensea_wyvernexchangev1_cancelorder__calldecodeudf(unhex_input, unhex_output, '{\"constant\": false, \"inputs\": [{\"name\": \"addrs\", \"type\": \"address[7]\"}, {\"name\": \"uints\", \"type\": \"uint256[9]\"}, {\"name\": \"feeMethod\", \"type\": \"uint8\"}, {\"name\": \"side\", \"type\": \"uint8\"}, {\"name\": \"saleKind\", \"type\": \"uint8\"}, {\"name\": \"howToCall\", \"type\": \"uint8\"}, {\"name\": \"calldata\", \"type\": \"bytes\"}, {\"name\": \"replacementPattern\", \"type\": \"bytes\"}, {\"name\": \"staticExtradata\", \"type\": \"bytes\"}, {\"name\": \"v\", \"type\": \"uint8\"}, {\"name\": \"r\", \"type\": \"bytes32\"}, {\"name\": \"s\", \"type\": \"bytes32\"}], \"name\": \"cancelOrder_\", \"outputs\": [], \"payable\": false, \"stateMutability\": \"nonpayable\", \"type\": \"function\"}', 'cancelOrder_') as data\n    from ethereum_stg_ethereum.stg_ethereum__traces\n    where to_address = lower(\"0x7Be8076f4EA4A4AD08075C2508e481d6C946D12b\")\n    and address_hash = abs(hash(lower(\"0x7Be8076f4EA4A4AD08075C2508e481d6C946D12b\"))) % 10\n    and selector = \"0x30786138\"\n    and selector_hash = abs(hash(\"0x30786138\")) % 10\n\n    \n),\n\nfinal as (\n    select\n        call_success,\n        call_block_number,\n        call_block_time,\n        call_trace_address,\n        call_tx_hash,\n        contract_address,\n        dt,\n        data.input.*,\n        data.output.*\n    from base\n)\n\nselect /* REPARTITION(dt) */ *\nfrom final", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "ethereum_opensea.WyvernExchangeV1_call_cancelOrder_"}, "model.ethereum_source.WyvernExchangeV1_call_minimumMakerProtocolFee": {"raw_sql": "{{\n    config(\n        materialized='incremental',\n        incremental_strategy='insert_overwrite',\n        partition_by=['dt'],\n        file_format='parquet',\n        pre_hook={\n            'sql': 'create or replace function opensea_wyvernexchangev1_minimummakerprotocolfee_calldecodeudf as \"io.iftech.sparkudf.hive.opensea_WyvernExchangeV1_minimumMakerProtocolFee_CallDecodeUDF\" using jar \"s3a://ifcrypto/blockchain-dbt/jars/opensea_udf.jar\";'\n        }\n    )\n}}\n\nwith base as (\n    select\n        status==1 as call_success,\n        block_number as call_block_number,\n        block_timestamp as call_block_time,\n        trace_address as call_trace_address,\n        transaction_hash as call_tx_hash,\n        to_address as contract_address,\n        dt,\n        opensea_wyvernexchangev1_minimummakerprotocolfee_calldecodeudf(unhex_input, unhex_output, '{\"constant\": true, \"inputs\": [], \"name\": \"minimumMakerProtocolFee\", \"outputs\": [{\"name\": \"\", \"type\": \"uint256\"}], \"payable\": false, \"stateMutability\": \"view\", \"type\": \"function\"}', 'minimumMakerProtocolFee') as data\n    from {{ ref('stg_ethereum__traces') }}\n    where to_address = lower(\"0x7Be8076f4EA4A4AD08075C2508e481d6C946D12b\")\n    and address_hash = abs(hash(lower(\"0x7Be8076f4EA4A4AD08075C2508e481d6C946D12b\"))) % 10\n    and selector = \"0x30783763\"\n    and selector_hash = abs(hash(\"0x30783763\")) % 10\n\n    {% if is_incremental() %}\n      and dt = var('dt')\n    {% endif %}\n),\n\nfinal as (\n    select\n        call_success,\n        call_block_number,\n        call_block_time,\n        call_trace_address,\n        call_tx_hash,\n        contract_address,\n        dt,\n        data.input.*,\n        data.output.*\n    from base\n)\n\nselect /* REPARTITION(dt) */ *\nfrom final", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.dbt.is_incremental"], "nodes": ["model.ethereum_source.stg_ethereum__traces"]}, "config": {"enabled": true, "alias": null, "schema": "opensea", "database": null, "tags": ["chain_ethereum", "level_parse", "proj_opensea"], "meta": {}, "materialized": "incremental", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "file_format": "parquet", "partition_by": ["dt"], "incremental_strategy": "insert_overwrite", "post-hook": [], "pre-hook": [{"sql": "create or replace function opensea_wyvernexchangev1_minimummakerprotocolfee_calldecodeudf as \"io.iftech.sparkudf.hive.opensea_WyvernExchangeV1_minimumMakerProtocolFee_CallDecodeUDF\" using jar \"s3a://ifcrypto/blockchain-dbt/jars/opensea_udf.jar\";", "transaction": true, "index": null}]}, "database": null, "schema": "ethereum_opensea", "fqn": ["ethereum_source", "codegen", "opensea", "WyvernExchangeV1_call_minimumMakerProtocolFee"], "unique_id": "model.ethereum_source.WyvernExchangeV1_call_minimumMakerProtocolFee", "package_name": "ethereum_source", "root_path": "/Users/songv/Code/jike/web3/dbt_ethereum_source", "path": "codegen/opensea/WyvernExchangeV1_call_minimumMakerProtocolFee.sql", "original_file_path": "models/codegen/opensea/WyvernExchangeV1_call_minimumMakerProtocolFee.sql", "name": "WyvernExchangeV1_call_minimumMakerProtocolFee", "alias": "WyvernExchangeV1_call_minimumMakerProtocolFee", "checksum": {"name": "sha256", "checksum": "187c48132aeacbedab17a570c1e0dbfce2f8037260a33b40c134302b3015865d"}, "tags": ["chain_ethereum", "level_parse", "proj_opensea"], "refs": [["stg_ethereum__traces"]], "sources": [], "description": "", "columns": {"output_0": {"name": "output_0", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "call_success": {"name": "call_success", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "call_block_number": {"name": "call_block_number", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "call_block_time": {"name": "call_block_time", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "call_trace_address": {"name": "call_trace_address", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "call_tx_hash": {"name": "call_tx_hash", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "contract_address": {"name": "contract_address", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "dt": {"name": "dt", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "ethereum_source://models/codegen/opensea/schema.yml", "compiled_path": "target/compiled/ethereum_source/models/codegen/opensea/WyvernExchangeV1_call_minimumMakerProtocolFee.sql", "build_path": null, "deferred": false, "unrendered_config": {"schema": "opensea", "tags": ["chain_ethereum", "level_parse", "proj_opensea"], "materialized": "incremental", "incremental_strategy": "insert_overwrite", "partition_by": ["dt"], "file_format": "parquet", "pre-hook": [{"sql": "create or replace function opensea_wyvernexchangev1_minimummakerprotocolfee_calldecodeudf as \"io.iftech.sparkudf.hive.opensea_WyvernExchangeV1_minimumMakerProtocolFee_CallDecodeUDF\" using jar \"s3a://ifcrypto/blockchain-dbt/jars/opensea_udf.jar\";"}]}, "created_at": 1650535971.972801, "compiled_sql": "\n\nwith base as (\n    select\n        status==1 as call_success,\n        block_number as call_block_number,\n        block_timestamp as call_block_time,\n        trace_address as call_trace_address,\n        transaction_hash as call_tx_hash,\n        to_address as contract_address,\n        dt,\n        opensea_wyvernexchangev1_minimummakerprotocolfee_calldecodeudf(unhex_input, unhex_output, '{\"constant\": true, \"inputs\": [], \"name\": \"minimumMakerProtocolFee\", \"outputs\": [{\"name\": \"\", \"type\": \"uint256\"}], \"payable\": false, \"stateMutability\": \"view\", \"type\": \"function\"}', 'minimumMakerProtocolFee') as data\n    from ethereum_stg_ethereum.stg_ethereum__traces\n    where to_address = lower(\"0x7Be8076f4EA4A4AD08075C2508e481d6C946D12b\")\n    and address_hash = abs(hash(lower(\"0x7Be8076f4EA4A4AD08075C2508e481d6C946D12b\"))) % 10\n    and selector = \"0x30783763\"\n    and selector_hash = abs(hash(\"0x30783763\")) % 10\n\n    \n),\n\nfinal as (\n    select\n        call_success,\n        call_block_number,\n        call_block_time,\n        call_trace_address,\n        call_tx_hash,\n        contract_address,\n        dt,\n        data.input.*,\n        data.output.*\n    from base\n)\n\nselect /* REPARTITION(dt) */ *\nfrom final", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "ethereum_opensea.WyvernExchangeV1_call_minimumMakerProtocolFee"}, "model.ethereum_source.OpenSeaENSResolver_call_name": {"raw_sql": "{{\n    config(\n        materialized='incremental',\n        incremental_strategy='insert_overwrite',\n        partition_by=['dt'],\n        file_format='parquet',\n        pre_hook={\n            'sql': 'create or replace function opensea_openseaensresolver_name_calldecodeudf as \"io.iftech.sparkudf.hive.opensea_OpenSeaENSResolver_name_CallDecodeUDF\" using jar \"s3a://ifcrypto/blockchain-dbt/jars/opensea_udf.jar\";'\n        }\n    )\n}}\n\nwith base as (\n    select\n        status==1 as call_success,\n        block_number as call_block_number,\n        block_timestamp as call_block_time,\n        trace_address as call_trace_address,\n        transaction_hash as call_tx_hash,\n        to_address as contract_address,\n        dt,\n        opensea_openseaensresolver_name_calldecodeudf(unhex_input, unhex_output, '{\"constant\": true, \"inputs\": [{\"name\": \"node\", \"type\": \"bytes32\"}], \"name\": \"name\", \"outputs\": [{\"name\": \"\", \"type\": \"string\"}], \"payable\": false, \"stateMutability\": \"view\", \"type\": \"function\"}', 'name') as data\n    from {{ ref('stg_ethereum__traces') }}\n    where to_address = lower(\"0x9c4e9cce4780062942a7fe34fa2fa7316c872956\")\n    and address_hash = abs(hash(lower(\"0x9c4e9cce4780062942a7fe34fa2fa7316c872956\"))) % 10\n    and selector = \"0x30783639\"\n    and selector_hash = abs(hash(\"0x30783639\")) % 10\n\n    {% if is_incremental() %}\n      and dt = var('dt')\n    {% endif %}\n),\n\nfinal as (\n    select\n        call_success,\n        call_block_number,\n        call_block_time,\n        call_trace_address,\n        call_tx_hash,\n        contract_address,\n        dt,\n        data.input.*,\n        data.output.*\n    from base\n)\n\nselect /* REPARTITION(dt) */ *\nfrom final", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.dbt.is_incremental"], "nodes": ["model.ethereum_source.stg_ethereum__traces"]}, "config": {"enabled": true, "alias": null, "schema": "opensea", "database": null, "tags": ["chain_ethereum", "level_parse", "proj_opensea"], "meta": {}, "materialized": "incremental", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "file_format": "parquet", "partition_by": ["dt"], "incremental_strategy": "insert_overwrite", "post-hook": [], "pre-hook": [{"sql": "create or replace function opensea_openseaensresolver_name_calldecodeudf as \"io.iftech.sparkudf.hive.opensea_OpenSeaENSResolver_name_CallDecodeUDF\" using jar \"s3a://ifcrypto/blockchain-dbt/jars/opensea_udf.jar\";", "transaction": true, "index": null}]}, "database": null, "schema": "ethereum_opensea", "fqn": ["ethereum_source", "codegen", "opensea", "OpenSeaENSResolver_call_name"], "unique_id": "model.ethereum_source.OpenSeaENSResolver_call_name", "package_name": "ethereum_source", "root_path": "/Users/songv/Code/jike/web3/dbt_ethereum_source", "path": "codegen/opensea/OpenSeaENSResolver_call_name.sql", "original_file_path": "models/codegen/opensea/OpenSeaENSResolver_call_name.sql", "name": "OpenSeaENSResolver_call_name", "alias": "OpenSeaENSResolver_call_name", "checksum": {"name": "sha256", "checksum": "e28a130f19f716dd26ebb2275747015f56cd6206e0bf72a18af5aa9b55749dfd"}, "tags": ["chain_ethereum", "level_parse", "proj_opensea"], "refs": [["stg_ethereum__traces"]], "sources": [], "description": "", "columns": {"node": {"name": "node", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "output_0": {"name": "output_0", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "call_success": {"name": "call_success", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "call_block_number": {"name": "call_block_number", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "call_block_time": {"name": "call_block_time", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "call_trace_address": {"name": "call_trace_address", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "call_tx_hash": {"name": "call_tx_hash", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "contract_address": {"name": "contract_address", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "dt": {"name": "dt", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "ethereum_source://models/codegen/opensea/schema.yml", "compiled_path": "target/compiled/ethereum_source/models/codegen/opensea/OpenSeaENSResolver_call_name.sql", "build_path": null, "deferred": false, "unrendered_config": {"schema": "opensea", "tags": ["chain_ethereum", "level_parse", "proj_opensea"], "materialized": "incremental", "incremental_strategy": "insert_overwrite", "partition_by": ["dt"], "file_format": "parquet", "pre-hook": [{"sql": "create or replace function opensea_openseaensresolver_name_calldecodeudf as \"io.iftech.sparkudf.hive.opensea_OpenSeaENSResolver_name_CallDecodeUDF\" using jar \"s3a://ifcrypto/blockchain-dbt/jars/opensea_udf.jar\";"}]}, "created_at": 1650535972.136937, "compiled_sql": "\n\nwith base as (\n    select\n        status==1 as call_success,\n        block_number as call_block_number,\n        block_timestamp as call_block_time,\n        trace_address as call_trace_address,\n        transaction_hash as call_tx_hash,\n        to_address as contract_address,\n        dt,\n        opensea_openseaensresolver_name_calldecodeudf(unhex_input, unhex_output, '{\"constant\": true, \"inputs\": [{\"name\": \"node\", \"type\": \"bytes32\"}], \"name\": \"name\", \"outputs\": [{\"name\": \"\", \"type\": \"string\"}], \"payable\": false, \"stateMutability\": \"view\", \"type\": \"function\"}', 'name') as data\n    from ethereum_stg_ethereum.stg_ethereum__traces\n    where to_address = lower(\"0x9c4e9cce4780062942a7fe34fa2fa7316c872956\")\n    and address_hash = abs(hash(lower(\"0x9c4e9cce4780062942a7fe34fa2fa7316c872956\"))) % 10\n    and selector = \"0x30783639\"\n    and selector_hash = abs(hash(\"0x30783639\")) % 10\n\n    \n),\n\nfinal as (\n    select\n        call_success,\n        call_block_number,\n        call_block_time,\n        call_trace_address,\n        call_tx_hash,\n        contract_address,\n        dt,\n        data.input.*,\n        data.output.*\n    from base\n)\n\nselect /* REPARTITION(dt) */ *\nfrom final", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "ethereum_opensea.OpenSeaENSResolver_call_name"}, "model.ethereum_source.WyvernExchangeV1_call_orderCalldataCanMatch": {"raw_sql": "{{\n    config(\n        materialized='incremental',\n        incremental_strategy='insert_overwrite',\n        partition_by=['dt'],\n        file_format='parquet',\n        pre_hook={\n            'sql': 'create or replace function opensea_wyvernexchangev1_ordercalldatacanmatch_calldecodeudf as \"io.iftech.sparkudf.hive.opensea_WyvernExchangeV1_orderCalldataCanMatch_CallDecodeUDF\" using jar \"s3a://ifcrypto/blockchain-dbt/jars/opensea_udf.jar\";'\n        }\n    )\n}}\n\nwith base as (\n    select\n        status==1 as call_success,\n        block_number as call_block_number,\n        block_timestamp as call_block_time,\n        trace_address as call_trace_address,\n        transaction_hash as call_tx_hash,\n        to_address as contract_address,\n        dt,\n        opensea_wyvernexchangev1_ordercalldatacanmatch_calldecodeudf(unhex_input, unhex_output, '{\"constant\": true, \"inputs\": [{\"name\": \"buyCalldata\", \"type\": \"bytes\"}, {\"name\": \"buyReplacementPattern\", \"type\": \"bytes\"}, {\"name\": \"sellCalldata\", \"type\": \"bytes\"}, {\"name\": \"sellReplacementPattern\", \"type\": \"bytes\"}], \"name\": \"orderCalldataCanMatch\", \"outputs\": [{\"name\": \"\", \"type\": \"bool\"}], \"payable\": false, \"stateMutability\": \"pure\", \"type\": \"function\"}', 'orderCalldataCanMatch') as data\n    from {{ ref('stg_ethereum__traces') }}\n    where to_address = lower(\"0x7Be8076f4EA4A4AD08075C2508e481d6C946D12b\")\n    and address_hash = abs(hash(lower(\"0x7Be8076f4EA4A4AD08075C2508e481d6C946D12b\"))) % 10\n    and selector = \"0x30783536\"\n    and selector_hash = abs(hash(\"0x30783536\")) % 10\n\n    {% if is_incremental() %}\n      and dt = var('dt')\n    {% endif %}\n),\n\nfinal as (\n    select\n        call_success,\n        call_block_number,\n        call_block_time,\n        call_trace_address,\n        call_tx_hash,\n        contract_address,\n        dt,\n        data.input.*,\n        data.output.*\n    from base\n)\n\nselect /* REPARTITION(dt) */ *\nfrom final", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.dbt.is_incremental"], "nodes": ["model.ethereum_source.stg_ethereum__traces"]}, "config": {"enabled": true, "alias": null, "schema": "opensea", "database": null, "tags": ["chain_ethereum", "level_parse", "proj_opensea"], "meta": {}, "materialized": "incremental", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "file_format": "parquet", "partition_by": ["dt"], "incremental_strategy": "insert_overwrite", "post-hook": [], "pre-hook": [{"sql": "create or replace function opensea_wyvernexchangev1_ordercalldatacanmatch_calldecodeudf as \"io.iftech.sparkudf.hive.opensea_WyvernExchangeV1_orderCalldataCanMatch_CallDecodeUDF\" using jar \"s3a://ifcrypto/blockchain-dbt/jars/opensea_udf.jar\";", "transaction": true, "index": null}]}, "database": null, "schema": "ethereum_opensea", "fqn": ["ethereum_source", "codegen", "opensea", "WyvernExchangeV1_call_orderCalldataCanMatch"], "unique_id": "model.ethereum_source.WyvernExchangeV1_call_orderCalldataCanMatch", "package_name": "ethereum_source", "root_path": "/Users/songv/Code/jike/web3/dbt_ethereum_source", "path": "codegen/opensea/WyvernExchangeV1_call_orderCalldataCanMatch.sql", "original_file_path": "models/codegen/opensea/WyvernExchangeV1_call_orderCalldataCanMatch.sql", "name": "WyvernExchangeV1_call_orderCalldataCanMatch", "alias": "WyvernExchangeV1_call_orderCalldataCanMatch", "checksum": {"name": "sha256", "checksum": "24ecdb6a8325dcba8eab00e0cbbbffefa8dc863fc613fac8eec5a3d591d7031f"}, "tags": ["chain_ethereum", "level_parse", "proj_opensea"], "refs": [["stg_ethereum__traces"]], "sources": [], "description": "", "columns": {"buyCalldata": {"name": "buyCalldata", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "buyReplacementPattern": {"name": "buyReplacementPattern", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "sellCalldata": {"name": "sellCalldata", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "sellReplacementPattern": {"name": "sellReplacementPattern", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "output_0": {"name": "output_0", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "call_success": {"name": "call_success", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "call_block_number": {"name": "call_block_number", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "call_block_time": {"name": "call_block_time", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "call_trace_address": {"name": "call_trace_address", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "call_tx_hash": {"name": "call_tx_hash", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "contract_address": {"name": "contract_address", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "dt": {"name": "dt", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "ethereum_source://models/codegen/opensea/schema.yml", "compiled_path": "target/compiled/ethereum_source/models/codegen/opensea/WyvernExchangeV1_call_orderCalldataCanMatch.sql", "build_path": null, "deferred": false, "unrendered_config": {"schema": "opensea", "tags": ["chain_ethereum", "level_parse", "proj_opensea"], "materialized": "incremental", "incremental_strategy": "insert_overwrite", "partition_by": ["dt"], "file_format": "parquet", "pre-hook": [{"sql": "create or replace function opensea_wyvernexchangev1_ordercalldatacanmatch_calldecodeudf as \"io.iftech.sparkudf.hive.opensea_WyvernExchangeV1_orderCalldataCanMatch_CallDecodeUDF\" using jar \"s3a://ifcrypto/blockchain-dbt/jars/opensea_udf.jar\";"}]}, "created_at": 1650535971.951317, "compiled_sql": "\n\nwith base as (\n    select\n        status==1 as call_success,\n        block_number as call_block_number,\n        block_timestamp as call_block_time,\n        trace_address as call_trace_address,\n        transaction_hash as call_tx_hash,\n        to_address as contract_address,\n        dt,\n        opensea_wyvernexchangev1_ordercalldatacanmatch_calldecodeudf(unhex_input, unhex_output, '{\"constant\": true, \"inputs\": [{\"name\": \"buyCalldata\", \"type\": \"bytes\"}, {\"name\": \"buyReplacementPattern\", \"type\": \"bytes\"}, {\"name\": \"sellCalldata\", \"type\": \"bytes\"}, {\"name\": \"sellReplacementPattern\", \"type\": \"bytes\"}], \"name\": \"orderCalldataCanMatch\", \"outputs\": [{\"name\": \"\", \"type\": \"bool\"}], \"payable\": false, \"stateMutability\": \"pure\", \"type\": \"function\"}', 'orderCalldataCanMatch') as data\n    from ethereum_stg_ethereum.stg_ethereum__traces\n    where to_address = lower(\"0x7Be8076f4EA4A4AD08075C2508e481d6C946D12b\")\n    and address_hash = abs(hash(lower(\"0x7Be8076f4EA4A4AD08075C2508e481d6C946D12b\"))) % 10\n    and selector = \"0x30783536\"\n    and selector_hash = abs(hash(\"0x30783536\")) % 10\n\n    \n),\n\nfinal as (\n    select\n        call_success,\n        call_block_number,\n        call_block_time,\n        call_trace_address,\n        call_tx_hash,\n        contract_address,\n        dt,\n        data.input.*,\n        data.output.*\n    from base\n)\n\nselect /* REPARTITION(dt) */ *\nfrom final", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "ethereum_opensea.WyvernExchangeV1_call_orderCalldataCanMatch"}, "model.ethereum_source.OpenSeaENSResolver_call_setABI": {"raw_sql": "{{\n    config(\n        materialized='incremental',\n        incremental_strategy='insert_overwrite',\n        partition_by=['dt'],\n        file_format='parquet',\n        pre_hook={\n            'sql': 'create or replace function opensea_openseaensresolver_setabi_calldecodeudf as \"io.iftech.sparkudf.hive.opensea_OpenSeaENSResolver_setABI_CallDecodeUDF\" using jar \"s3a://ifcrypto/blockchain-dbt/jars/opensea_udf.jar\";'\n        }\n    )\n}}\n\nwith base as (\n    select\n        status==1 as call_success,\n        block_number as call_block_number,\n        block_timestamp as call_block_time,\n        trace_address as call_trace_address,\n        transaction_hash as call_tx_hash,\n        to_address as contract_address,\n        dt,\n        opensea_openseaensresolver_setabi_calldecodeudf(unhex_input, unhex_output, '{\"constant\": false, \"inputs\": [{\"name\": \"node\", \"type\": \"bytes32\"}, {\"name\": \"contentType\", \"type\": \"uint256\"}, {\"name\": \"data\", \"type\": \"bytes\"}], \"name\": \"setABI\", \"outputs\": [], \"payable\": false, \"stateMutability\": \"nonpayable\", \"type\": \"function\"}', 'setABI') as data\n    from {{ ref('stg_ethereum__traces') }}\n    where to_address = lower(\"0x9c4e9cce4780062942a7fe34fa2fa7316c872956\")\n    and address_hash = abs(hash(lower(\"0x9c4e9cce4780062942a7fe34fa2fa7316c872956\"))) % 10\n    and selector = \"0x30783632\"\n    and selector_hash = abs(hash(\"0x30783632\")) % 10\n\n    {% if is_incremental() %}\n      and dt = var('dt')\n    {% endif %}\n),\n\nfinal as (\n    select\n        call_success,\n        call_block_number,\n        call_block_time,\n        call_trace_address,\n        call_tx_hash,\n        contract_address,\n        dt,\n        data.input.*,\n        data.output.*\n    from base\n)\n\nselect /* REPARTITION(dt) */ *\nfrom final", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.dbt.is_incremental"], "nodes": ["model.ethereum_source.stg_ethereum__traces"]}, "config": {"enabled": true, "alias": null, "schema": "opensea", "database": null, "tags": ["chain_ethereum", "level_parse", "proj_opensea"], "meta": {}, "materialized": "incremental", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "file_format": "parquet", "partition_by": ["dt"], "incremental_strategy": "insert_overwrite", "post-hook": [], "pre-hook": [{"sql": "create or replace function opensea_openseaensresolver_setabi_calldecodeudf as \"io.iftech.sparkudf.hive.opensea_OpenSeaENSResolver_setABI_CallDecodeUDF\" using jar \"s3a://ifcrypto/blockchain-dbt/jars/opensea_udf.jar\";", "transaction": true, "index": null}]}, "database": null, "schema": "ethereum_opensea", "fqn": ["ethereum_source", "codegen", "opensea", "OpenSeaENSResolver_call_setABI"], "unique_id": "model.ethereum_source.OpenSeaENSResolver_call_setABI", "package_name": "ethereum_source", "root_path": "/Users/songv/Code/jike/web3/dbt_ethereum_source", "path": "codegen/opensea/OpenSeaENSResolver_call_setABI.sql", "original_file_path": "models/codegen/opensea/OpenSeaENSResolver_call_setABI.sql", "name": "OpenSeaENSResolver_call_setABI", "alias": "OpenSeaENSResolver_call_setABI", "checksum": {"name": "sha256", "checksum": "63d8f9ac0b81b69b8e73018c4f19582a9f9c4400ae12366a69479672276c2342"}, "tags": ["chain_ethereum", "level_parse", "proj_opensea"], "refs": [["stg_ethereum__traces"]], "sources": [], "description": "", "columns": {"node": {"name": "node", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "contentType": {"name": "contentType", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "data": {"name": "data", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "call_success": {"name": "call_success", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "call_block_number": {"name": "call_block_number", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "call_block_time": {"name": "call_block_time", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "call_trace_address": {"name": "call_trace_address", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "call_tx_hash": {"name": "call_tx_hash", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "contract_address": {"name": "contract_address", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "dt": {"name": "dt", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "ethereum_source://models/codegen/opensea/schema.yml", "compiled_path": "target/compiled/ethereum_source/models/codegen/opensea/OpenSeaENSResolver_call_setABI.sql", "build_path": null, "deferred": false, "unrendered_config": {"schema": "opensea", "tags": ["chain_ethereum", "level_parse", "proj_opensea"], "materialized": "incremental", "incremental_strategy": "insert_overwrite", "partition_by": ["dt"], "file_format": "parquet", "pre-hook": [{"sql": "create or replace function opensea_openseaensresolver_setabi_calldecodeudf as \"io.iftech.sparkudf.hive.opensea_OpenSeaENSResolver_setABI_CallDecodeUDF\" using jar \"s3a://ifcrypto/blockchain-dbt/jars/opensea_udf.jar\";"}]}, "created_at": 1650535972.1347451, "compiled_sql": "\n\nwith base as (\n    select\n        status==1 as call_success,\n        block_number as call_block_number,\n        block_timestamp as call_block_time,\n        trace_address as call_trace_address,\n        transaction_hash as call_tx_hash,\n        to_address as contract_address,\n        dt,\n        opensea_openseaensresolver_setabi_calldecodeudf(unhex_input, unhex_output, '{\"constant\": false, \"inputs\": [{\"name\": \"node\", \"type\": \"bytes32\"}, {\"name\": \"contentType\", \"type\": \"uint256\"}, {\"name\": \"data\", \"type\": \"bytes\"}], \"name\": \"setABI\", \"outputs\": [], \"payable\": false, \"stateMutability\": \"nonpayable\", \"type\": \"function\"}', 'setABI') as data\n    from ethereum_stg_ethereum.stg_ethereum__traces\n    where to_address = lower(\"0x9c4e9cce4780062942a7fe34fa2fa7316c872956\")\n    and address_hash = abs(hash(lower(\"0x9c4e9cce4780062942a7fe34fa2fa7316c872956\"))) % 10\n    and selector = \"0x30783632\"\n    and selector_hash = abs(hash(\"0x30783632\")) % 10\n\n    \n),\n\nfinal as (\n    select\n        call_success,\n        call_block_number,\n        call_block_time,\n        call_trace_address,\n        call_tx_hash,\n        contract_address,\n        dt,\n        data.input.*,\n        data.output.*\n    from base\n)\n\nselect /* REPARTITION(dt) */ *\nfrom final", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "ethereum_opensea.OpenSeaENSResolver_call_setABI"}, "model.ethereum_source.WyvernExchangeV2_call_transferOwnership": {"raw_sql": "{{\n    config(\n        materialized='incremental',\n        incremental_strategy='insert_overwrite',\n        partition_by=['dt'],\n        file_format='parquet',\n        pre_hook={\n            'sql': 'create or replace function opensea_wyvernexchangev2_transferownership_calldecodeudf as \"io.iftech.sparkudf.hive.opensea_WyvernExchangeV2_transferOwnership_CallDecodeUDF\" using jar \"s3a://ifcrypto/blockchain-dbt/jars/opensea_udf.jar\";'\n        }\n    )\n}}\n\nwith base as (\n    select\n        status==1 as call_success,\n        block_number as call_block_number,\n        block_timestamp as call_block_time,\n        trace_address as call_trace_address,\n        transaction_hash as call_tx_hash,\n        to_address as contract_address,\n        dt,\n        opensea_wyvernexchangev2_transferownership_calldecodeudf(unhex_input, unhex_output, '{\"constant\": false, \"inputs\": [{\"name\": \"newOwner\", \"type\": \"address\"}], \"name\": \"transferOwnership\", \"outputs\": [], \"payable\": false, \"stateMutability\": \"nonpayable\", \"type\": \"function\"}', 'transferOwnership') as data\n    from {{ ref('stg_ethereum__traces') }}\n    where to_address = lower(\"0x7f268357A8c2552623316e2562D90e642bB538E5\")\n    and address_hash = abs(hash(lower(\"0x7f268357A8c2552623316e2562D90e642bB538E5\"))) % 10\n    and selector = \"0x30786632\"\n    and selector_hash = abs(hash(\"0x30786632\")) % 10\n\n    {% if is_incremental() %}\n      and dt = var('dt')\n    {% endif %}\n),\n\nfinal as (\n    select\n        call_success,\n        call_block_number,\n        call_block_time,\n        call_trace_address,\n        call_tx_hash,\n        contract_address,\n        dt,\n        data.input.*,\n        data.output.*\n    from base\n)\n\nselect /* REPARTITION(dt) */ *\nfrom final", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.dbt.is_incremental"], "nodes": ["model.ethereum_source.stg_ethereum__traces"]}, "config": {"enabled": true, "alias": null, "schema": "opensea", "database": null, "tags": ["chain_ethereum", "level_parse", "proj_opensea"], "meta": {}, "materialized": "incremental", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "file_format": "parquet", "partition_by": ["dt"], "incremental_strategy": "insert_overwrite", "post-hook": [], "pre-hook": [{"sql": "create or replace function opensea_wyvernexchangev2_transferownership_calldecodeudf as \"io.iftech.sparkudf.hive.opensea_WyvernExchangeV2_transferOwnership_CallDecodeUDF\" using jar \"s3a://ifcrypto/blockchain-dbt/jars/opensea_udf.jar\";", "transaction": true, "index": null}]}, "database": null, "schema": "ethereum_opensea", "fqn": ["ethereum_source", "codegen", "opensea", "WyvernExchangeV2_call_transferOwnership"], "unique_id": "model.ethereum_source.WyvernExchangeV2_call_transferOwnership", "package_name": "ethereum_source", "root_path": "/Users/songv/Code/jike/web3/dbt_ethereum_source", "path": "codegen/opensea/WyvernExchangeV2_call_transferOwnership.sql", "original_file_path": "models/codegen/opensea/WyvernExchangeV2_call_transferOwnership.sql", "name": "WyvernExchangeV2_call_transferOwnership", "alias": "WyvernExchangeV2_call_transferOwnership", "checksum": {"name": "sha256", "checksum": "e181dc52f184f7eedaa2aa9e48a5e0aec9fe5cc5575f2d808ab6f96a557b5687"}, "tags": ["chain_ethereum", "level_parse", "proj_opensea"], "refs": [["stg_ethereum__traces"]], "sources": [], "description": "", "columns": {"newOwner": {"name": "newOwner", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "call_success": {"name": "call_success", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "call_block_number": {"name": "call_block_number", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "call_block_time": {"name": "call_block_time", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "call_trace_address": {"name": "call_trace_address", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "call_tx_hash": {"name": "call_tx_hash", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "contract_address": {"name": "contract_address", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "dt": {"name": "dt", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "ethereum_source://models/codegen/opensea/schema.yml", "compiled_path": "target/compiled/ethereum_source/models/codegen/opensea/WyvernExchangeV2_call_transferOwnership.sql", "build_path": null, "deferred": false, "unrendered_config": {"schema": "opensea", "tags": ["chain_ethereum", "level_parse", "proj_opensea"], "materialized": "incremental", "incremental_strategy": "insert_overwrite", "partition_by": ["dt"], "file_format": "parquet", "pre-hook": [{"sql": "create or replace function opensea_wyvernexchangev2_transferownership_calldecodeudf as \"io.iftech.sparkudf.hive.opensea_WyvernExchangeV2_transferOwnership_CallDecodeUDF\" using jar \"s3a://ifcrypto/blockchain-dbt/jars/opensea_udf.jar\";"}]}, "created_at": 1650535972.090912, "compiled_sql": "\n\nwith base as (\n    select\n        status==1 as call_success,\n        block_number as call_block_number,\n        block_timestamp as call_block_time,\n        trace_address as call_trace_address,\n        transaction_hash as call_tx_hash,\n        to_address as contract_address,\n        dt,\n        opensea_wyvernexchangev2_transferownership_calldecodeudf(unhex_input, unhex_output, '{\"constant\": false, \"inputs\": [{\"name\": \"newOwner\", \"type\": \"address\"}], \"name\": \"transferOwnership\", \"outputs\": [], \"payable\": false, \"stateMutability\": \"nonpayable\", \"type\": \"function\"}', 'transferOwnership') as data\n    from ethereum_stg_ethereum.stg_ethereum__traces\n    where to_address = lower(\"0x7f268357A8c2552623316e2562D90e642bB538E5\")\n    and address_hash = abs(hash(lower(\"0x7f268357A8c2552623316e2562D90e642bB538E5\"))) % 10\n    and selector = \"0x30786632\"\n    and selector_hash = abs(hash(\"0x30786632\")) % 10\n\n    \n),\n\nfinal as (\n    select\n        call_success,\n        call_block_number,\n        call_block_time,\n        call_trace_address,\n        call_tx_hash,\n        contract_address,\n        dt,\n        data.input.*,\n        data.output.*\n    from base\n)\n\nselect /* REPARTITION(dt) */ *\nfrom final", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "ethereum_opensea.WyvernExchangeV2_call_transferOwnership"}, "model.ethereum_source.WyvernExchangeV2_evt_OwnershipRenounced": {"raw_sql": "{{\n    config(\n        materialized='incremental',\n        incremental_strategy='insert_overwrite',\n        partition_by=['dt'],\n        file_format='parquet',\n        pre_hook={\n            'sql': 'create or replace function opensea_wyvernexchangev2_ownershiprenounced_eventdecodeudf as \"io.iftech.sparkudf.hive.opensea_WyvernExchangeV2_OwnershipRenounced_EventDecodeUDF\" using jar \"s3a://ifcrypto/blockchain-dbt/jars/opensea_udf.jar\";'\n        }\n    )\n}}\n\nwith base as (\n    select\n        block_number as evt_block_number,\n        block_timestamp as evt_block_time,\n        log_index as evt_index,\n        transaction_hash as evt_tx_hash,\n        address as contract_address,\n        dt,\n        opensea_wyvernexchangev2_ownershiprenounced_eventdecodeudf(unhex_data, topics_arr, '{\"anonymous\": false, \"inputs\": [{\"indexed\": true, \"name\": \"previousOwner\", \"type\": \"address\"}], \"name\": \"OwnershipRenounced\", \"type\": \"event\"}', 'OwnershipRenounced') as data\n    from {{ ref('stg_ethereum__logs') }}\n    where address = lower(\"0x7f268357A8c2552623316e2562D90e642bB538E5\")\n    and address_hash = abs(hash(lower(\"0x7f268357A8c2552623316e2562D90e642bB538E5\"))) % 10\n    and selector = \"0xf8df31144d9c2f0f6b59d69b8b98abd5459d07f2742c4df920b25aae33c64820\"\n    and selector_hash = abs(hash(\"0xf8df31144d9c2f0f6b59d69b8b98abd5459d07f2742c4df920b25aae33c64820\")) % 10\n\n    {% if is_incremental() %}\n      and dt = var('dt')\n    {% endif %}\n),\n\nfinal as (\n    select\n        evt_block_number,\n        evt_block_time,\n        evt_index,\n        evt_tx_hash,\n        contract_address,\n        dt,\n        data.input.*\n    from base\n)\n\nselect /* REPARTITION(dt) */ *\nfrom final", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.dbt.is_incremental"], "nodes": ["model.ethereum_source.stg_ethereum__logs"]}, "config": {"enabled": true, "alias": null, "schema": "opensea", "database": null, "tags": ["chain_ethereum", "level_parse", "proj_opensea"], "meta": {}, "materialized": "incremental", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "file_format": "parquet", "partition_by": ["dt"], "incremental_strategy": "insert_overwrite", "post-hook": [], "pre-hook": [{"sql": "create or replace function opensea_wyvernexchangev2_ownershiprenounced_eventdecodeudf as \"io.iftech.sparkudf.hive.opensea_WyvernExchangeV2_OwnershipRenounced_EventDecodeUDF\" using jar \"s3a://ifcrypto/blockchain-dbt/jars/opensea_udf.jar\";", "transaction": true, "index": null}]}, "database": null, "schema": "ethereum_opensea", "fqn": ["ethereum_source", "codegen", "opensea", "WyvernExchangeV2_evt_OwnershipRenounced"], "unique_id": "model.ethereum_source.WyvernExchangeV2_evt_OwnershipRenounced", "package_name": "ethereum_source", "root_path": "/Users/songv/Code/jike/web3/dbt_ethereum_source", "path": "codegen/opensea/WyvernExchangeV2_evt_OwnershipRenounced.sql", "original_file_path": "models/codegen/opensea/WyvernExchangeV2_evt_OwnershipRenounced.sql", "name": "WyvernExchangeV2_evt_OwnershipRenounced", "alias": "WyvernExchangeV2_evt_OwnershipRenounced", "checksum": {"name": "sha256", "checksum": "aaa5f40168285d97e67a069f945c40df6a0fb93c903bd0f0b1855cbc1301d4ce"}, "tags": ["chain_ethereum", "level_parse", "proj_opensea"], "refs": [["stg_ethereum__logs"]], "sources": [], "description": "", "columns": {"previousOwner": {"name": "previousOwner", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "evt_block_number": {"name": "evt_block_number", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "evt_block_time": {"name": "evt_block_time", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "evt_index": {"name": "evt_index", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "evt_tx_hash": {"name": "evt_tx_hash", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "contract_address": {"name": "contract_address", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "dt": {"name": "dt", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "ethereum_source://models/codegen/opensea/schema.yml", "compiled_path": "target/compiled/ethereum_source/models/codegen/opensea/WyvernExchangeV2_evt_OwnershipRenounced.sql", "build_path": null, "deferred": false, "unrendered_config": {"schema": "opensea", "tags": ["chain_ethereum", "level_parse", "proj_opensea"], "materialized": "incremental", "incremental_strategy": "insert_overwrite", "partition_by": ["dt"], "file_format": "parquet", "pre-hook": [{"sql": "create or replace function opensea_wyvernexchangev2_ownershiprenounced_eventdecodeudf as \"io.iftech.sparkudf.hive.opensea_WyvernExchangeV2_OwnershipRenounced_EventDecodeUDF\" using jar \"s3a://ifcrypto/blockchain-dbt/jars/opensea_udf.jar\";"}]}, "created_at": 1650535972.01277, "compiled_sql": "\n\nwith base as (\n    select\n        block_number as evt_block_number,\n        block_timestamp as evt_block_time,\n        log_index as evt_index,\n        transaction_hash as evt_tx_hash,\n        address as contract_address,\n        dt,\n        opensea_wyvernexchangev2_ownershiprenounced_eventdecodeudf(unhex_data, topics_arr, '{\"anonymous\": false, \"inputs\": [{\"indexed\": true, \"name\": \"previousOwner\", \"type\": \"address\"}], \"name\": \"OwnershipRenounced\", \"type\": \"event\"}', 'OwnershipRenounced') as data\n    from ethereum_stg_ethereum.stg_ethereum__logs\n    where address = lower(\"0x7f268357A8c2552623316e2562D90e642bB538E5\")\n    and address_hash = abs(hash(lower(\"0x7f268357A8c2552623316e2562D90e642bB538E5\"))) % 10\n    and selector = \"0xf8df31144d9c2f0f6b59d69b8b98abd5459d07f2742c4df920b25aae33c64820\"\n    and selector_hash = abs(hash(\"0xf8df31144d9c2f0f6b59d69b8b98abd5459d07f2742c4df920b25aae33c64820\")) % 10\n\n    \n),\n\nfinal as (\n    select\n        evt_block_number,\n        evt_block_time,\n        evt_index,\n        evt_tx_hash,\n        contract_address,\n        dt,\n        data.input.*\n    from base\n)\n\nselect /* REPARTITION(dt) */ *\nfrom final", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "ethereum_opensea.WyvernExchangeV2_evt_OwnershipRenounced"}, "model.ethereum_source.WyvernExchangeV1_evt_OrdersMatched": {"raw_sql": "{{\n    config(\n        materialized='incremental',\n        incremental_strategy='insert_overwrite',\n        partition_by=['dt'],\n        file_format='parquet',\n        pre_hook={\n            'sql': 'create or replace function opensea_wyvernexchangev1_ordersmatched_eventdecodeudf as \"io.iftech.sparkudf.hive.opensea_WyvernExchangeV1_OrdersMatched_EventDecodeUDF\" using jar \"s3a://ifcrypto/blockchain-dbt/jars/opensea_udf.jar\";'\n        }\n    )\n}}\n\nwith base as (\n    select\n        block_number as evt_block_number,\n        block_timestamp as evt_block_time,\n        log_index as evt_index,\n        transaction_hash as evt_tx_hash,\n        address as contract_address,\n        dt,\n        opensea_wyvernexchangev1_ordersmatched_eventdecodeudf(unhex_data, topics_arr, '{\"anonymous\": false, \"inputs\": [{\"indexed\": false, \"name\": \"buyHash\", \"type\": \"bytes32\"}, {\"indexed\": false, \"name\": \"sellHash\", \"type\": \"bytes32\"}, {\"indexed\": true, \"name\": \"maker\", \"type\": \"address\"}, {\"indexed\": true, \"name\": \"taker\", \"type\": \"address\"}, {\"indexed\": false, \"name\": \"price\", \"type\": \"uint256\"}, {\"indexed\": true, \"name\": \"metadata\", \"type\": \"bytes32\"}], \"name\": \"OrdersMatched\", \"type\": \"event\"}', 'OrdersMatched') as data\n    from {{ ref('stg_ethereum__logs') }}\n    where address = lower(\"0x7Be8076f4EA4A4AD08075C2508e481d6C946D12b\")\n    and address_hash = abs(hash(lower(\"0x7Be8076f4EA4A4AD08075C2508e481d6C946D12b\"))) % 10\n    and selector = \"0xc4109843e0b7d514e4c093114b863f8e7d8d9a458c372cd51bfe526b588006c9\"\n    and selector_hash = abs(hash(\"0xc4109843e0b7d514e4c093114b863f8e7d8d9a458c372cd51bfe526b588006c9\")) % 10\n\n    {% if is_incremental() %}\n      and dt = var('dt')\n    {% endif %}\n),\n\nfinal as (\n    select\n        evt_block_number,\n        evt_block_time,\n        evt_index,\n        evt_tx_hash,\n        contract_address,\n        dt,\n        data.input.*\n    from base\n)\n\nselect /* REPARTITION(dt) */ *\nfrom final", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.dbt.is_incremental"], "nodes": ["model.ethereum_source.stg_ethereum__logs"]}, "config": {"enabled": true, "alias": null, "schema": "opensea", "database": null, "tags": ["chain_ethereum", "level_parse", "proj_opensea"], "meta": {}, "materialized": "incremental", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "file_format": "parquet", "partition_by": ["dt"], "incremental_strategy": "insert_overwrite", "post-hook": [], "pre-hook": [{"sql": "create or replace function opensea_wyvernexchangev1_ordersmatched_eventdecodeudf as \"io.iftech.sparkudf.hive.opensea_WyvernExchangeV1_OrdersMatched_EventDecodeUDF\" using jar \"s3a://ifcrypto/blockchain-dbt/jars/opensea_udf.jar\";", "transaction": true, "index": null}]}, "database": null, "schema": "ethereum_opensea", "fqn": ["ethereum_source", "codegen", "opensea", "WyvernExchangeV1_evt_OrdersMatched"], "unique_id": "model.ethereum_source.WyvernExchangeV1_evt_OrdersMatched", "package_name": "ethereum_source", "root_path": "/Users/songv/Code/jike/web3/dbt_ethereum_source", "path": "codegen/opensea/WyvernExchangeV1_evt_OrdersMatched.sql", "original_file_path": "models/codegen/opensea/WyvernExchangeV1_evt_OrdersMatched.sql", "name": "WyvernExchangeV1_evt_OrdersMatched", "alias": "WyvernExchangeV1_evt_OrdersMatched", "checksum": {"name": "sha256", "checksum": "c3d924c1d876bf868ab264331789913c9f056ee00ef2ee9788d26404da1b7e4c"}, "tags": ["chain_ethereum", "level_parse", "proj_opensea"], "refs": [["stg_ethereum__logs"]], "sources": [], "description": "", "columns": {"buyHash": {"name": "buyHash", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "sellHash": {"name": "sellHash", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "maker": {"name": "maker", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "taker": {"name": "taker", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "price": {"name": "price", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "metadata": {"name": "metadata", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "evt_block_number": {"name": "evt_block_number", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "evt_block_time": {"name": "evt_block_time", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "evt_index": {"name": "evt_index", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "evt_tx_hash": {"name": "evt_tx_hash", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "contract_address": {"name": "contract_address", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "dt": {"name": "dt", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "ethereum_source://models/codegen/opensea/schema.yml", "compiled_path": "target/compiled/ethereum_source/models/codegen/opensea/WyvernExchangeV1_evt_OrdersMatched.sql", "build_path": null, "deferred": false, "unrendered_config": {"schema": "opensea", "tags": ["chain_ethereum", "level_parse", "proj_opensea"], "materialized": "incremental", "incremental_strategy": "insert_overwrite", "partition_by": ["dt"], "file_format": "parquet", "pre-hook": [{"sql": "create or replace function opensea_wyvernexchangev1_ordersmatched_eventdecodeudf as \"io.iftech.sparkudf.hive.opensea_WyvernExchangeV1_OrdersMatched_EventDecodeUDF\" using jar \"s3a://ifcrypto/blockchain-dbt/jars/opensea_udf.jar\";"}]}, "created_at": 1650535971.9217951, "compiled_sql": "\n\nwith base as (\n    select\n        block_number as evt_block_number,\n        block_timestamp as evt_block_time,\n        log_index as evt_index,\n        transaction_hash as evt_tx_hash,\n        address as contract_address,\n        dt,\n        opensea_wyvernexchangev1_ordersmatched_eventdecodeudf(unhex_data, topics_arr, '{\"anonymous\": false, \"inputs\": [{\"indexed\": false, \"name\": \"buyHash\", \"type\": \"bytes32\"}, {\"indexed\": false, \"name\": \"sellHash\", \"type\": \"bytes32\"}, {\"indexed\": true, \"name\": \"maker\", \"type\": \"address\"}, {\"indexed\": true, \"name\": \"taker\", \"type\": \"address\"}, {\"indexed\": false, \"name\": \"price\", \"type\": \"uint256\"}, {\"indexed\": true, \"name\": \"metadata\", \"type\": \"bytes32\"}], \"name\": \"OrdersMatched\", \"type\": \"event\"}', 'OrdersMatched') as data\n    from ethereum_stg_ethereum.stg_ethereum__logs\n    where address = lower(\"0x7Be8076f4EA4A4AD08075C2508e481d6C946D12b\")\n    and address_hash = abs(hash(lower(\"0x7Be8076f4EA4A4AD08075C2508e481d6C946D12b\"))) % 10\n    and selector = \"0xc4109843e0b7d514e4c093114b863f8e7d8d9a458c372cd51bfe526b588006c9\"\n    and selector_hash = abs(hash(\"0xc4109843e0b7d514e4c093114b863f8e7d8d9a458c372cd51bfe526b588006c9\")) % 10\n\n    \n),\n\nfinal as (\n    select\n        evt_block_number,\n        evt_block_time,\n        evt_index,\n        evt_tx_hash,\n        contract_address,\n        dt,\n        data.input.*\n    from base\n)\n\nselect /* REPARTITION(dt) */ *\nfrom final", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "ethereum_opensea.WyvernExchangeV1_evt_OrdersMatched"}, "model.ethereum_source.WyvernExchangeV2_call_registry": {"raw_sql": "{{\n    config(\n        materialized='incremental',\n        incremental_strategy='insert_overwrite',\n        partition_by=['dt'],\n        file_format='parquet',\n        pre_hook={\n            'sql': 'create or replace function opensea_wyvernexchangev2_registry_calldecodeudf as \"io.iftech.sparkudf.hive.opensea_WyvernExchangeV2_registry_CallDecodeUDF\" using jar \"s3a://ifcrypto/blockchain-dbt/jars/opensea_udf.jar\";'\n        }\n    )\n}}\n\nwith base as (\n    select\n        status==1 as call_success,\n        block_number as call_block_number,\n        block_timestamp as call_block_time,\n        trace_address as call_trace_address,\n        transaction_hash as call_tx_hash,\n        to_address as contract_address,\n        dt,\n        opensea_wyvernexchangev2_registry_calldecodeudf(unhex_input, unhex_output, '{\"constant\": true, \"inputs\": [], \"name\": \"registry\", \"outputs\": [{\"name\": \"\", \"type\": \"address\"}], \"payable\": false, \"stateMutability\": \"view\", \"type\": \"function\"}', 'registry') as data\n    from {{ ref('stg_ethereum__traces') }}\n    where to_address = lower(\"0x7f268357A8c2552623316e2562D90e642bB538E5\")\n    and address_hash = abs(hash(lower(\"0x7f268357A8c2552623316e2562D90e642bB538E5\"))) % 10\n    and selector = \"0x30783762\"\n    and selector_hash = abs(hash(\"0x30783762\")) % 10\n\n    {% if is_incremental() %}\n      and dt = var('dt')\n    {% endif %}\n),\n\nfinal as (\n    select\n        call_success,\n        call_block_number,\n        call_block_time,\n        call_trace_address,\n        call_tx_hash,\n        contract_address,\n        dt,\n        data.input.*,\n        data.output.*\n    from base\n)\n\nselect /* REPARTITION(dt) */ *\nfrom final", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.dbt.is_incremental"], "nodes": ["model.ethereum_source.stg_ethereum__traces"]}, "config": {"enabled": true, "alias": null, "schema": "opensea", "database": null, "tags": ["chain_ethereum", "level_parse", "proj_opensea"], "meta": {}, "materialized": "incremental", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "file_format": "parquet", "partition_by": ["dt"], "incremental_strategy": "insert_overwrite", "post-hook": [], "pre-hook": [{"sql": "create or replace function opensea_wyvernexchangev2_registry_calldecodeudf as \"io.iftech.sparkudf.hive.opensea_WyvernExchangeV2_registry_CallDecodeUDF\" using jar \"s3a://ifcrypto/blockchain-dbt/jars/opensea_udf.jar\";", "transaction": true, "index": null}]}, "database": null, "schema": "ethereum_opensea", "fqn": ["ethereum_source", "codegen", "opensea", "WyvernExchangeV2_call_registry"], "unique_id": "model.ethereum_source.WyvernExchangeV2_call_registry", "package_name": "ethereum_source", "root_path": "/Users/songv/Code/jike/web3/dbt_ethereum_source", "path": "codegen/opensea/WyvernExchangeV2_call_registry.sql", "original_file_path": "models/codegen/opensea/WyvernExchangeV2_call_registry.sql", "name": "WyvernExchangeV2_call_registry", "alias": "WyvernExchangeV2_call_registry", "checksum": {"name": "sha256", "checksum": "a50b12b61628cc283b77153593c60e41488498b62188137801f301f99e720446"}, "tags": ["chain_ethereum", "level_parse", "proj_opensea"], "refs": [["stg_ethereum__traces"]], "sources": [], "description": "", "columns": {"output_0": {"name": "output_0", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "call_success": {"name": "call_success", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "call_block_number": {"name": "call_block_number", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "call_block_time": {"name": "call_block_time", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "call_trace_address": {"name": "call_trace_address", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "call_tx_hash": {"name": "call_tx_hash", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "contract_address": {"name": "contract_address", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "dt": {"name": "dt", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "ethereum_source://models/codegen/opensea/schema.yml", "compiled_path": "target/compiled/ethereum_source/models/codegen/opensea/WyvernExchangeV2_call_registry.sql", "build_path": null, "deferred": false, "unrendered_config": {"schema": "opensea", "tags": ["chain_ethereum", "level_parse", "proj_opensea"], "materialized": "incremental", "incremental_strategy": "insert_overwrite", "partition_by": ["dt"], "file_format": "parquet", "pre-hook": [{"sql": "create or replace function opensea_wyvernexchangev2_registry_calldecodeudf as \"io.iftech.sparkudf.hive.opensea_WyvernExchangeV2_registry_CallDecodeUDF\" using jar \"s3a://ifcrypto/blockchain-dbt/jars/opensea_udf.jar\";"}]}, "created_at": 1650535972.059406, "compiled_sql": "\n\nwith base as (\n    select\n        status==1 as call_success,\n        block_number as call_block_number,\n        block_timestamp as call_block_time,\n        trace_address as call_trace_address,\n        transaction_hash as call_tx_hash,\n        to_address as contract_address,\n        dt,\n        opensea_wyvernexchangev2_registry_calldecodeudf(unhex_input, unhex_output, '{\"constant\": true, \"inputs\": [], \"name\": \"registry\", \"outputs\": [{\"name\": \"\", \"type\": \"address\"}], \"payable\": false, \"stateMutability\": \"view\", \"type\": \"function\"}', 'registry') as data\n    from ethereum_stg_ethereum.stg_ethereum__traces\n    where to_address = lower(\"0x7f268357A8c2552623316e2562D90e642bB538E5\")\n    and address_hash = abs(hash(lower(\"0x7f268357A8c2552623316e2562D90e642bB538E5\"))) % 10\n    and selector = \"0x30783762\"\n    and selector_hash = abs(hash(\"0x30783762\")) % 10\n\n    \n),\n\nfinal as (\n    select\n        call_success,\n        call_block_number,\n        call_block_time,\n        call_trace_address,\n        call_tx_hash,\n        contract_address,\n        dt,\n        data.input.*,\n        data.output.*\n    from base\n)\n\nselect /* REPARTITION(dt) */ *\nfrom final", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "ethereum_opensea.WyvernExchangeV2_call_registry"}, "model.ethereum_source.WyvernExchangeV1_call_validateOrder_": {"raw_sql": "{{\n    config(\n        materialized='incremental',\n        incremental_strategy='insert_overwrite',\n        partition_by=['dt'],\n        file_format='parquet',\n        pre_hook={\n            'sql': 'create or replace function opensea_wyvernexchangev1_validateorder__calldecodeudf as \"io.iftech.sparkudf.hive.opensea_WyvernExchangeV1_validateOrder__CallDecodeUDF\" using jar \"s3a://ifcrypto/blockchain-dbt/jars/opensea_udf.jar\";'\n        }\n    )\n}}\n\nwith base as (\n    select\n        status==1 as call_success,\n        block_number as call_block_number,\n        block_timestamp as call_block_time,\n        trace_address as call_trace_address,\n        transaction_hash as call_tx_hash,\n        to_address as contract_address,\n        dt,\n        opensea_wyvernexchangev1_validateorder__calldecodeudf(unhex_input, unhex_output, '{\"constant\": true, \"inputs\": [{\"name\": \"addrs\", \"type\": \"address[7]\"}, {\"name\": \"uints\", \"type\": \"uint256[9]\"}, {\"name\": \"feeMethod\", \"type\": \"uint8\"}, {\"name\": \"side\", \"type\": \"uint8\"}, {\"name\": \"saleKind\", \"type\": \"uint8\"}, {\"name\": \"howToCall\", \"type\": \"uint8\"}, {\"name\": \"calldata\", \"type\": \"bytes\"}, {\"name\": \"replacementPattern\", \"type\": \"bytes\"}, {\"name\": \"staticExtradata\", \"type\": \"bytes\"}, {\"name\": \"v\", \"type\": \"uint8\"}, {\"name\": \"r\", \"type\": \"bytes32\"}, {\"name\": \"s\", \"type\": \"bytes32\"}], \"name\": \"validateOrder_\", \"outputs\": [{\"name\": \"\", \"type\": \"bool\"}], \"payable\": false, \"stateMutability\": \"view\", \"type\": \"function\"}', 'validateOrder_') as data\n    from {{ ref('stg_ethereum__traces') }}\n    where to_address = lower(\"0x7Be8076f4EA4A4AD08075C2508e481d6C946D12b\")\n    and address_hash = abs(hash(lower(\"0x7Be8076f4EA4A4AD08075C2508e481d6C946D12b\"))) % 10\n    and selector = \"0x30783630\"\n    and selector_hash = abs(hash(\"0x30783630\")) % 10\n\n    {% if is_incremental() %}\n      and dt = var('dt')\n    {% endif %}\n),\n\nfinal as (\n    select\n        call_success,\n        call_block_number,\n        call_block_time,\n        call_trace_address,\n        call_tx_hash,\n        contract_address,\n        dt,\n        data.input.*,\n        data.output.*\n    from base\n)\n\nselect /* REPARTITION(dt) */ *\nfrom final", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.dbt.is_incremental"], "nodes": ["model.ethereum_source.stg_ethereum__traces"]}, "config": {"enabled": true, "alias": null, "schema": "opensea", "database": null, "tags": ["chain_ethereum", "level_parse", "proj_opensea"], "meta": {}, "materialized": "incremental", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "file_format": "parquet", "partition_by": ["dt"], "incremental_strategy": "insert_overwrite", "post-hook": [], "pre-hook": [{"sql": "create or replace function opensea_wyvernexchangev1_validateorder__calldecodeudf as \"io.iftech.sparkudf.hive.opensea_WyvernExchangeV1_validateOrder__CallDecodeUDF\" using jar \"s3a://ifcrypto/blockchain-dbt/jars/opensea_udf.jar\";", "transaction": true, "index": null}]}, "database": null, "schema": "ethereum_opensea", "fqn": ["ethereum_source", "codegen", "opensea", "WyvernExchangeV1_call_validateOrder_"], "unique_id": "model.ethereum_source.WyvernExchangeV1_call_validateOrder_", "package_name": "ethereum_source", "root_path": "/Users/songv/Code/jike/web3/dbt_ethereum_source", "path": "codegen/opensea/WyvernExchangeV1_call_validateOrder_.sql", "original_file_path": "models/codegen/opensea/WyvernExchangeV1_call_validateOrder_.sql", "name": "WyvernExchangeV1_call_validateOrder_", "alias": "WyvernExchangeV1_call_validateOrder_", "checksum": {"name": "sha256", "checksum": "ee56991c30e078fbdc4a450da9228351800e5e8ee4a45cf736ce78562955cf11"}, "tags": ["chain_ethereum", "level_parse", "proj_opensea"], "refs": [["stg_ethereum__traces"]], "sources": [], "description": "", "columns": {"addrs": {"name": "addrs", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "uints": {"name": "uints", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "feeMethod": {"name": "feeMethod", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "side": {"name": "side", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "saleKind": {"name": "saleKind", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "howToCall": {"name": "howToCall", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "calldata": {"name": "calldata", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "replacementPattern": {"name": "replacementPattern", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "staticExtradata": {"name": "staticExtradata", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "v": {"name": "v", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "r": {"name": "r", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "s": {"name": "s", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "output_0": {"name": "output_0", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "call_success": {"name": "call_success", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "call_block_number": {"name": "call_block_number", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "call_block_time": {"name": "call_block_time", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "call_trace_address": {"name": "call_trace_address", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "call_tx_hash": {"name": "call_tx_hash", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "contract_address": {"name": "contract_address", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "dt": {"name": "dt", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "ethereum_source://models/codegen/opensea/schema.yml", "compiled_path": "target/compiled/ethereum_source/models/codegen/opensea/WyvernExchangeV1_call_validateOrder_.sql", "build_path": null, "deferred": false, "unrendered_config": {"schema": "opensea", "tags": ["chain_ethereum", "level_parse", "proj_opensea"], "materialized": "incremental", "incremental_strategy": "insert_overwrite", "partition_by": ["dt"], "file_format": "parquet", "pre-hook": [{"sql": "create or replace function opensea_wyvernexchangev1_validateorder__calldecodeudf as \"io.iftech.sparkudf.hive.opensea_WyvernExchangeV1_validateOrder__CallDecodeUDF\" using jar \"s3a://ifcrypto/blockchain-dbt/jars/opensea_udf.jar\";"}]}, "created_at": 1650535971.9548469, "compiled_sql": "\n\nwith base as (\n    select\n        status==1 as call_success,\n        block_number as call_block_number,\n        block_timestamp as call_block_time,\n        trace_address as call_trace_address,\n        transaction_hash as call_tx_hash,\n        to_address as contract_address,\n        dt,\n        opensea_wyvernexchangev1_validateorder__calldecodeudf(unhex_input, unhex_output, '{\"constant\": true, \"inputs\": [{\"name\": \"addrs\", \"type\": \"address[7]\"}, {\"name\": \"uints\", \"type\": \"uint256[9]\"}, {\"name\": \"feeMethod\", \"type\": \"uint8\"}, {\"name\": \"side\", \"type\": \"uint8\"}, {\"name\": \"saleKind\", \"type\": \"uint8\"}, {\"name\": \"howToCall\", \"type\": \"uint8\"}, {\"name\": \"calldata\", \"type\": \"bytes\"}, {\"name\": \"replacementPattern\", \"type\": \"bytes\"}, {\"name\": \"staticExtradata\", \"type\": \"bytes\"}, {\"name\": \"v\", \"type\": \"uint8\"}, {\"name\": \"r\", \"type\": \"bytes32\"}, {\"name\": \"s\", \"type\": \"bytes32\"}], \"name\": \"validateOrder_\", \"outputs\": [{\"name\": \"\", \"type\": \"bool\"}], \"payable\": false, \"stateMutability\": \"view\", \"type\": \"function\"}', 'validateOrder_') as data\n    from ethereum_stg_ethereum.stg_ethereum__traces\n    where to_address = lower(\"0x7Be8076f4EA4A4AD08075C2508e481d6C946D12b\")\n    and address_hash = abs(hash(lower(\"0x7Be8076f4EA4A4AD08075C2508e481d6C946D12b\"))) % 10\n    and selector = \"0x30783630\"\n    and selector_hash = abs(hash(\"0x30783630\")) % 10\n\n    \n),\n\nfinal as (\n    select\n        call_success,\n        call_block_number,\n        call_block_time,\n        call_trace_address,\n        call_tx_hash,\n        contract_address,\n        dt,\n        data.input.*,\n        data.output.*\n    from base\n)\n\nselect /* REPARTITION(dt) */ *\nfrom final", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "ethereum_opensea.WyvernExchangeV1_call_validateOrder_"}, "model.ethereum_source.OpenSeaENSResolver_call_setBaseURI": {"raw_sql": "{{\n    config(\n        materialized='incremental',\n        incremental_strategy='insert_overwrite',\n        partition_by=['dt'],\n        file_format='parquet',\n        pre_hook={\n            'sql': 'create or replace function opensea_openseaensresolver_setbaseuri_calldecodeudf as \"io.iftech.sparkudf.hive.opensea_OpenSeaENSResolver_setBaseURI_CallDecodeUDF\" using jar \"s3a://ifcrypto/blockchain-dbt/jars/opensea_udf.jar\";'\n        }\n    )\n}}\n\nwith base as (\n    select\n        status==1 as call_success,\n        block_number as call_block_number,\n        block_timestamp as call_block_time,\n        trace_address as call_trace_address,\n        transaction_hash as call_tx_hash,\n        to_address as contract_address,\n        dt,\n        opensea_openseaensresolver_setbaseuri_calldecodeudf(unhex_input, unhex_output, '{\"constant\": false, \"inputs\": [{\"name\": \"uri\", \"type\": \"string\"}], \"name\": \"setBaseURI\", \"outputs\": [], \"payable\": false, \"stateMutability\": \"nonpayable\", \"type\": \"function\"}', 'setBaseURI') as data\n    from {{ ref('stg_ethereum__traces') }}\n    where to_address = lower(\"0x9c4e9cce4780062942a7fe34fa2fa7316c872956\")\n    and address_hash = abs(hash(lower(\"0x9c4e9cce4780062942a7fe34fa2fa7316c872956\"))) % 10\n    and selector = \"0x30783535\"\n    and selector_hash = abs(hash(\"0x30783535\")) % 10\n\n    {% if is_incremental() %}\n      and dt = var('dt')\n    {% endif %}\n),\n\nfinal as (\n    select\n        call_success,\n        call_block_number,\n        call_block_time,\n        call_trace_address,\n        call_tx_hash,\n        contract_address,\n        dt,\n        data.input.*,\n        data.output.*\n    from base\n)\n\nselect /* REPARTITION(dt) */ *\nfrom final", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.dbt.is_incremental"], "nodes": ["model.ethereum_source.stg_ethereum__traces"]}, "config": {"enabled": true, "alias": null, "schema": "opensea", "database": null, "tags": ["chain_ethereum", "level_parse", "proj_opensea"], "meta": {}, "materialized": "incremental", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "file_format": "parquet", "partition_by": ["dt"], "incremental_strategy": "insert_overwrite", "post-hook": [], "pre-hook": [{"sql": "create or replace function opensea_openseaensresolver_setbaseuri_calldecodeudf as \"io.iftech.sparkudf.hive.opensea_OpenSeaENSResolver_setBaseURI_CallDecodeUDF\" using jar \"s3a://ifcrypto/blockchain-dbt/jars/opensea_udf.jar\";", "transaction": true, "index": null}]}, "database": null, "schema": "ethereum_opensea", "fqn": ["ethereum_source", "codegen", "opensea", "OpenSeaENSResolver_call_setBaseURI"], "unique_id": "model.ethereum_source.OpenSeaENSResolver_call_setBaseURI", "package_name": "ethereum_source", "root_path": "/Users/songv/Code/jike/web3/dbt_ethereum_source", "path": "codegen/opensea/OpenSeaENSResolver_call_setBaseURI.sql", "original_file_path": "models/codegen/opensea/OpenSeaENSResolver_call_setBaseURI.sql", "name": "OpenSeaENSResolver_call_setBaseURI", "alias": "OpenSeaENSResolver_call_setBaseURI", "checksum": {"name": "sha256", "checksum": "cce6f78b477114ea6ff1efa8e38c118df6ca0dbb0325e7abcd7fabdc1e40515c"}, "tags": ["chain_ethereum", "level_parse", "proj_opensea"], "refs": [["stg_ethereum__traces"]], "sources": [], "description": "", "columns": {"uri": {"name": "uri", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "call_success": {"name": "call_success", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "call_block_number": {"name": "call_block_number", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "call_block_time": {"name": "call_block_time", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "call_trace_address": {"name": "call_trace_address", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "call_tx_hash": {"name": "call_tx_hash", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "contract_address": {"name": "contract_address", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "dt": {"name": "dt", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "ethereum_source://models/codegen/opensea/schema.yml", "compiled_path": "target/compiled/ethereum_source/models/codegen/opensea/OpenSeaENSResolver_call_setBaseURI.sql", "build_path": null, "deferred": false, "unrendered_config": {"schema": "opensea", "tags": ["chain_ethereum", "level_parse", "proj_opensea"], "materialized": "incremental", "incremental_strategy": "insert_overwrite", "partition_by": ["dt"], "file_format": "parquet", "pre-hook": [{"sql": "create or replace function opensea_openseaensresolver_setbaseuri_calldecodeudf as \"io.iftech.sparkudf.hive.opensea_OpenSeaENSResolver_setBaseURI_CallDecodeUDF\" using jar \"s3a://ifcrypto/blockchain-dbt/jars/opensea_udf.jar\";"}]}, "created_at": 1650535972.130903, "compiled_sql": "\n\nwith base as (\n    select\n        status==1 as call_success,\n        block_number as call_block_number,\n        block_timestamp as call_block_time,\n        trace_address as call_trace_address,\n        transaction_hash as call_tx_hash,\n        to_address as contract_address,\n        dt,\n        opensea_openseaensresolver_setbaseuri_calldecodeudf(unhex_input, unhex_output, '{\"constant\": false, \"inputs\": [{\"name\": \"uri\", \"type\": \"string\"}], \"name\": \"setBaseURI\", \"outputs\": [], \"payable\": false, \"stateMutability\": \"nonpayable\", \"type\": \"function\"}', 'setBaseURI') as data\n    from ethereum_stg_ethereum.stg_ethereum__traces\n    where to_address = lower(\"0x9c4e9cce4780062942a7fe34fa2fa7316c872956\")\n    and address_hash = abs(hash(lower(\"0x9c4e9cce4780062942a7fe34fa2fa7316c872956\"))) % 10\n    and selector = \"0x30783535\"\n    and selector_hash = abs(hash(\"0x30783535\")) % 10\n\n    \n),\n\nfinal as (\n    select\n        call_success,\n        call_block_number,\n        call_block_time,\n        call_trace_address,\n        call_tx_hash,\n        contract_address,\n        dt,\n        data.input.*,\n        data.output.*\n    from base\n)\n\nselect /* REPARTITION(dt) */ *\nfrom final", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "ethereum_opensea.OpenSeaENSResolver_call_setBaseURI"}, "model.ethereum_source.WyvernExchangeV1_call_changeProtocolFeeRecipient": {"raw_sql": "{{\n    config(\n        materialized='incremental',\n        incremental_strategy='insert_overwrite',\n        partition_by=['dt'],\n        file_format='parquet',\n        pre_hook={\n            'sql': 'create or replace function opensea_wyvernexchangev1_changeprotocolfeerecipient_calldecodeudf as \"io.iftech.sparkudf.hive.opensea_WyvernExchangeV1_changeProtocolFeeRecipient_CallDecodeUDF\" using jar \"s3a://ifcrypto/blockchain-dbt/jars/opensea_udf.jar\";'\n        }\n    )\n}}\n\nwith base as (\n    select\n        status==1 as call_success,\n        block_number as call_block_number,\n        block_timestamp as call_block_time,\n        trace_address as call_trace_address,\n        transaction_hash as call_tx_hash,\n        to_address as contract_address,\n        dt,\n        opensea_wyvernexchangev1_changeprotocolfeerecipient_calldecodeudf(unhex_input, unhex_output, '{\"constant\": false, \"inputs\": [{\"name\": \"newProtocolFeeRecipient\", \"type\": \"address\"}], \"name\": \"changeProtocolFeeRecipient\", \"outputs\": [], \"payable\": false, \"stateMutability\": \"nonpayable\", \"type\": \"function\"}', 'changeProtocolFeeRecipient') as data\n    from {{ ref('stg_ethereum__traces') }}\n    where to_address = lower(\"0x7Be8076f4EA4A4AD08075C2508e481d6C946D12b\")\n    and address_hash = abs(hash(lower(\"0x7Be8076f4EA4A4AD08075C2508e481d6C946D12b\"))) % 10\n    and selector = \"0x30783531\"\n    and selector_hash = abs(hash(\"0x30783531\")) % 10\n\n    {% if is_incremental() %}\n      and dt = var('dt')\n    {% endif %}\n),\n\nfinal as (\n    select\n        call_success,\n        call_block_number,\n        call_block_time,\n        call_trace_address,\n        call_tx_hash,\n        contract_address,\n        dt,\n        data.input.*,\n        data.output.*\n    from base\n)\n\nselect /* REPARTITION(dt) */ *\nfrom final", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.dbt.is_incremental"], "nodes": ["model.ethereum_source.stg_ethereum__traces"]}, "config": {"enabled": true, "alias": null, "schema": "opensea", "database": null, "tags": ["chain_ethereum", "level_parse", "proj_opensea"], "meta": {}, "materialized": "incremental", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "file_format": "parquet", "partition_by": ["dt"], "incremental_strategy": "insert_overwrite", "post-hook": [], "pre-hook": [{"sql": "create or replace function opensea_wyvernexchangev1_changeprotocolfeerecipient_calldecodeudf as \"io.iftech.sparkudf.hive.opensea_WyvernExchangeV1_changeProtocolFeeRecipient_CallDecodeUDF\" using jar \"s3a://ifcrypto/blockchain-dbt/jars/opensea_udf.jar\";", "transaction": true, "index": null}]}, "database": null, "schema": "ethereum_opensea", "fqn": ["ethereum_source", "codegen", "opensea", "WyvernExchangeV1_call_changeProtocolFeeRecipient"], "unique_id": "model.ethereum_source.WyvernExchangeV1_call_changeProtocolFeeRecipient", "package_name": "ethereum_source", "root_path": "/Users/songv/Code/jike/web3/dbt_ethereum_source", "path": "codegen/opensea/WyvernExchangeV1_call_changeProtocolFeeRecipient.sql", "original_file_path": "models/codegen/opensea/WyvernExchangeV1_call_changeProtocolFeeRecipient.sql", "name": "WyvernExchangeV1_call_changeProtocolFeeRecipient", "alias": "WyvernExchangeV1_call_changeProtocolFeeRecipient", "checksum": {"name": "sha256", "checksum": "78d68c6098dd7caf0caf3fbc84cf8cda4cef93dbacc172b9050f7ae88717f62a"}, "tags": ["chain_ethereum", "level_parse", "proj_opensea"], "refs": [["stg_ethereum__traces"]], "sources": [], "description": "", "columns": {"newProtocolFeeRecipient": {"name": "newProtocolFeeRecipient", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "call_success": {"name": "call_success", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "call_block_number": {"name": "call_block_number", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "call_block_time": {"name": "call_block_time", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "call_trace_address": {"name": "call_trace_address", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "call_tx_hash": {"name": "call_tx_hash", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "contract_address": {"name": "contract_address", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "dt": {"name": "dt", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "ethereum_source://models/codegen/opensea/schema.yml", "compiled_path": "target/compiled/ethereum_source/models/codegen/opensea/WyvernExchangeV1_call_changeProtocolFeeRecipient.sql", "build_path": null, "deferred": false, "unrendered_config": {"schema": "opensea", "tags": ["chain_ethereum", "level_parse", "proj_opensea"], "materialized": "incremental", "incremental_strategy": "insert_overwrite", "partition_by": ["dt"], "file_format": "parquet", "pre-hook": [{"sql": "create or replace function opensea_wyvernexchangev1_changeprotocolfeerecipient_calldecodeudf as \"io.iftech.sparkudf.hive.opensea_WyvernExchangeV1_changeProtocolFeeRecipient_CallDecodeUDF\" using jar \"s3a://ifcrypto/blockchain-dbt/jars/opensea_udf.jar\";"}]}, "created_at": 1650535971.947428, "compiled_sql": "\n\nwith base as (\n    select\n        status==1 as call_success,\n        block_number as call_block_number,\n        block_timestamp as call_block_time,\n        trace_address as call_trace_address,\n        transaction_hash as call_tx_hash,\n        to_address as contract_address,\n        dt,\n        opensea_wyvernexchangev1_changeprotocolfeerecipient_calldecodeudf(unhex_input, unhex_output, '{\"constant\": false, \"inputs\": [{\"name\": \"newProtocolFeeRecipient\", \"type\": \"address\"}], \"name\": \"changeProtocolFeeRecipient\", \"outputs\": [], \"payable\": false, \"stateMutability\": \"nonpayable\", \"type\": \"function\"}', 'changeProtocolFeeRecipient') as data\n    from ethereum_stg_ethereum.stg_ethereum__traces\n    where to_address = lower(\"0x7Be8076f4EA4A4AD08075C2508e481d6C946D12b\")\n    and address_hash = abs(hash(lower(\"0x7Be8076f4EA4A4AD08075C2508e481d6C946D12b\"))) % 10\n    and selector = \"0x30783531\"\n    and selector_hash = abs(hash(\"0x30783531\")) % 10\n\n    \n),\n\nfinal as (\n    select\n        call_success,\n        call_block_number,\n        call_block_time,\n        call_trace_address,\n        call_tx_hash,\n        contract_address,\n        dt,\n        data.input.*,\n        data.output.*\n    from base\n)\n\nselect /* REPARTITION(dt) */ *\nfrom final", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "ethereum_opensea.WyvernExchangeV1_call_changeProtocolFeeRecipient"}, "model.ethereum_source.WyvernExchangeV2_call_codename": {"raw_sql": "{{\n    config(\n        materialized='incremental',\n        incremental_strategy='insert_overwrite',\n        partition_by=['dt'],\n        file_format='parquet',\n        pre_hook={\n            'sql': 'create or replace function opensea_wyvernexchangev2_codename_calldecodeudf as \"io.iftech.sparkudf.hive.opensea_WyvernExchangeV2_codename_CallDecodeUDF\" using jar \"s3a://ifcrypto/blockchain-dbt/jars/opensea_udf.jar\";'\n        }\n    )\n}}\n\nwith base as (\n    select\n        status==1 as call_success,\n        block_number as call_block_number,\n        block_timestamp as call_block_time,\n        trace_address as call_trace_address,\n        transaction_hash as call_tx_hash,\n        to_address as contract_address,\n        dt,\n        opensea_wyvernexchangev2_codename_calldecodeudf(unhex_input, unhex_output, '{\"constant\": true, \"inputs\": [], \"name\": \"codename\", \"outputs\": [{\"name\": \"\", \"type\": \"string\"}], \"payable\": false, \"stateMutability\": \"view\", \"type\": \"function\"}', 'codename') as data\n    from {{ ref('stg_ethereum__traces') }}\n    where to_address = lower(\"0x7f268357A8c2552623316e2562D90e642bB538E5\")\n    and address_hash = abs(hash(lower(\"0x7f268357A8c2552623316e2562D90e642bB538E5\"))) % 10\n    and selector = \"0x30783331\"\n    and selector_hash = abs(hash(\"0x30783331\")) % 10\n\n    {% if is_incremental() %}\n      and dt = var('dt')\n    {% endif %}\n),\n\nfinal as (\n    select\n        call_success,\n        call_block_number,\n        call_block_time,\n        call_trace_address,\n        call_tx_hash,\n        contract_address,\n        dt,\n        data.input.*,\n        data.output.*\n    from base\n)\n\nselect /* REPARTITION(dt) */ *\nfrom final", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.dbt.is_incremental"], "nodes": ["model.ethereum_source.stg_ethereum__traces"]}, "config": {"enabled": true, "alias": null, "schema": "opensea", "database": null, "tags": ["chain_ethereum", "level_parse", "proj_opensea"], "meta": {}, "materialized": "incremental", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "file_format": "parquet", "partition_by": ["dt"], "incremental_strategy": "insert_overwrite", "post-hook": [], "pre-hook": [{"sql": "create or replace function opensea_wyvernexchangev2_codename_calldecodeudf as \"io.iftech.sparkudf.hive.opensea_WyvernExchangeV2_codename_CallDecodeUDF\" using jar \"s3a://ifcrypto/blockchain-dbt/jars/opensea_udf.jar\";", "transaction": true, "index": null}]}, "database": null, "schema": "ethereum_opensea", "fqn": ["ethereum_source", "codegen", "opensea", "WyvernExchangeV2_call_codename"], "unique_id": "model.ethereum_source.WyvernExchangeV2_call_codename", "package_name": "ethereum_source", "root_path": "/Users/songv/Code/jike/web3/dbt_ethereum_source", "path": "codegen/opensea/WyvernExchangeV2_call_codename.sql", "original_file_path": "models/codegen/opensea/WyvernExchangeV2_call_codename.sql", "name": "WyvernExchangeV2_call_codename", "alias": "WyvernExchangeV2_call_codename", "checksum": {"name": "sha256", "checksum": "0feb50a72d1858832582b7d9b1305cdb9577eb39e241cf1948b291f53ae2af2b"}, "tags": ["chain_ethereum", "level_parse", "proj_opensea"], "refs": [["stg_ethereum__traces"]], "sources": [], "description": "", "columns": {"output_0": {"name": "output_0", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "call_success": {"name": "call_success", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "call_block_number": {"name": "call_block_number", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "call_block_time": {"name": "call_block_time", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "call_trace_address": {"name": "call_trace_address", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "call_tx_hash": {"name": "call_tx_hash", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "contract_address": {"name": "contract_address", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "dt": {"name": "dt", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "ethereum_source://models/codegen/opensea/schema.yml", "compiled_path": "target/compiled/ethereum_source/models/codegen/opensea/WyvernExchangeV2_call_codename.sql", "build_path": null, "deferred": false, "unrendered_config": {"schema": "opensea", "tags": ["chain_ethereum", "level_parse", "proj_opensea"], "materialized": "incremental", "incremental_strategy": "insert_overwrite", "partition_by": ["dt"], "file_format": "parquet", "pre-hook": [{"sql": "create or replace function opensea_wyvernexchangev2_codename_calldecodeudf as \"io.iftech.sparkudf.hive.opensea_WyvernExchangeV2_codename_CallDecodeUDF\" using jar \"s3a://ifcrypto/blockchain-dbt/jars/opensea_udf.jar\";"}]}, "created_at": 1650535972.028064, "compiled_sql": "\n\nwith base as (\n    select\n        status==1 as call_success,\n        block_number as call_block_number,\n        block_timestamp as call_block_time,\n        trace_address as call_trace_address,\n        transaction_hash as call_tx_hash,\n        to_address as contract_address,\n        dt,\n        opensea_wyvernexchangev2_codename_calldecodeudf(unhex_input, unhex_output, '{\"constant\": true, \"inputs\": [], \"name\": \"codename\", \"outputs\": [{\"name\": \"\", \"type\": \"string\"}], \"payable\": false, \"stateMutability\": \"view\", \"type\": \"function\"}', 'codename') as data\n    from ethereum_stg_ethereum.stg_ethereum__traces\n    where to_address = lower(\"0x7f268357A8c2552623316e2562D90e642bB538E5\")\n    and address_hash = abs(hash(lower(\"0x7f268357A8c2552623316e2562D90e642bB538E5\"))) % 10\n    and selector = \"0x30783331\"\n    and selector_hash = abs(hash(\"0x30783331\")) % 10\n\n    \n),\n\nfinal as (\n    select\n        call_success,\n        call_block_number,\n        call_block_time,\n        call_trace_address,\n        call_tx_hash,\n        contract_address,\n        dt,\n        data.input.*,\n        data.output.*\n    from base\n)\n\nselect /* REPARTITION(dt) */ *\nfrom final", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "ethereum_opensea.WyvernExchangeV2_call_codename"}, "model.ethereum_source.WyvernExchangeV2_call_renounceOwnership": {"raw_sql": "select /* REPARTITION(dt) */\n    status==1 as call_success,\n    block_number as call_block_number,\n    block_timestamp as call_block_time,\n    trace_address as call_trace_address,\n    transaction_hash as call_tx_hash,\n    to_address as contract_address,\n    dt\nfrom {{ ref('stg_ethereum__traces') }}\nwhere to_address = lower(\"0x7f268357A8c2552623316e2562D90e642bB538E5\")\nand address_hash = abs(hash(lower(\"0x7f268357A8c2552623316e2562D90e642bB538E5\"))) % 10\nand selector = \"0x30783731353031386136\"\nand selector_hash = abs(hash(\"0x30783731353031386136\")) % 10\n\n{% if is_incremental() %}\n  and dt = var('dt')\n{% endif %}", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.dbt.is_incremental"], "nodes": ["model.ethereum_source.stg_ethereum__traces"]}, "config": {"enabled": true, "alias": null, "schema": "opensea", "database": null, "tags": ["chain_ethereum", "level_parse", "proj_opensea"], "meta": {}, "materialized": "view", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "post-hook": [], "pre-hook": []}, "database": null, "schema": "ethereum_opensea", "fqn": ["ethereum_source", "codegen", "opensea", "WyvernExchangeV2_call_renounceOwnership"], "unique_id": "model.ethereum_source.WyvernExchangeV2_call_renounceOwnership", "package_name": "ethereum_source", "root_path": "/Users/songv/Code/jike/web3/dbt_ethereum_source", "path": "codegen/opensea/WyvernExchangeV2_call_renounceOwnership.sql", "original_file_path": "models/codegen/opensea/WyvernExchangeV2_call_renounceOwnership.sql", "name": "WyvernExchangeV2_call_renounceOwnership", "alias": "WyvernExchangeV2_call_renounceOwnership", "checksum": {"name": "sha256", "checksum": "3adae934418faa065b96590dfc92dfe5fdfd5eca5d5ead05094c3919a913e71e"}, "tags": ["chain_ethereum", "level_parse", "proj_opensea"], "refs": [["stg_ethereum__traces"]], "sources": [], "description": "", "columns": {"call_success": {"name": "call_success", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "call_block_number": {"name": "call_block_number", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "call_block_time": {"name": "call_block_time", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "call_trace_address": {"name": "call_trace_address", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "call_tx_hash": {"name": "call_tx_hash", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "contract_address": {"name": "contract_address", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "dt": {"name": "dt", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "ethereum_source://models/codegen/opensea/schema.yml", "compiled_path": "target/compiled/ethereum_source/models/codegen/opensea/WyvernExchangeV2_call_renounceOwnership.sql", "build_path": null, "deferred": false, "unrendered_config": {"schema": "opensea", "tags": ["chain_ethereum", "level_parse", "proj_opensea"]}, "created_at": 1650535972.0486422, "compiled_sql": "select /* REPARTITION(dt) */\n    status==1 as call_success,\n    block_number as call_block_number,\n    block_timestamp as call_block_time,\n    trace_address as call_trace_address,\n    transaction_hash as call_tx_hash,\n    to_address as contract_address,\n    dt\nfrom ethereum_stg_ethereum.stg_ethereum__traces\nwhere to_address = lower(\"0x7f268357A8c2552623316e2562D90e642bB538E5\")\nand address_hash = abs(hash(lower(\"0x7f268357A8c2552623316e2562D90e642bB538E5\"))) % 10\nand selector = \"0x30783731353031386136\"\nand selector_hash = abs(hash(\"0x30783731353031386136\")) % 10\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "ethereum_opensea.WyvernExchangeV2_call_renounceOwnership"}, "model.ethereum_source.WyvernExchangeV2_call_ordersCanMatch_": {"raw_sql": "{{\n    config(\n        materialized='incremental',\n        incremental_strategy='insert_overwrite',\n        partition_by=['dt'],\n        file_format='parquet',\n        pre_hook={\n            'sql': 'create or replace function opensea_wyvernexchangev2_orderscanmatch__calldecodeudf as \"io.iftech.sparkudf.hive.opensea_WyvernExchangeV2_ordersCanMatch__CallDecodeUDF\" using jar \"s3a://ifcrypto/blockchain-dbt/jars/opensea_udf.jar\";'\n        }\n    )\n}}\n\nwith base as (\n    select\n        status==1 as call_success,\n        block_number as call_block_number,\n        block_timestamp as call_block_time,\n        trace_address as call_trace_address,\n        transaction_hash as call_tx_hash,\n        to_address as contract_address,\n        dt,\n        opensea_wyvernexchangev2_orderscanmatch__calldecodeudf(unhex_input, unhex_output, '{\"constant\": true, \"inputs\": [{\"name\": \"addrs\", \"type\": \"address[14]\"}, {\"name\": \"uints\", \"type\": \"uint256[18]\"}, {\"name\": \"feeMethodsSidesKindsHowToCalls\", \"type\": \"uint8[8]\"}, {\"name\": \"calldataBuy\", \"type\": \"bytes\"}, {\"name\": \"calldataSell\", \"type\": \"bytes\"}, {\"name\": \"replacementPatternBuy\", \"type\": \"bytes\"}, {\"name\": \"replacementPatternSell\", \"type\": \"bytes\"}, {\"name\": \"staticExtradataBuy\", \"type\": \"bytes\"}, {\"name\": \"staticExtradataSell\", \"type\": \"bytes\"}], \"name\": \"ordersCanMatch_\", \"outputs\": [{\"name\": \"\", \"type\": \"bool\"}], \"payable\": false, \"stateMutability\": \"view\", \"type\": \"function\"}', 'ordersCanMatch_') as data\n    from {{ ref('stg_ethereum__traces') }}\n    where to_address = lower(\"0x7f268357A8c2552623316e2562D90e642bB538E5\")\n    and address_hash = abs(hash(lower(\"0x7f268357A8c2552623316e2562D90e642bB538E5\"))) % 10\n    and selector = \"0x30783732\"\n    and selector_hash = abs(hash(\"0x30783732\")) % 10\n\n    {% if is_incremental() %}\n      and dt = var('dt')\n    {% endif %}\n),\n\nfinal as (\n    select\n        call_success,\n        call_block_number,\n        call_block_time,\n        call_trace_address,\n        call_tx_hash,\n        contract_address,\n        dt,\n        data.input.*,\n        data.output.*\n    from base\n)\n\nselect /* REPARTITION(dt) */ *\nfrom final", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.dbt.is_incremental"], "nodes": ["model.ethereum_source.stg_ethereum__traces"]}, "config": {"enabled": true, "alias": null, "schema": "opensea", "database": null, "tags": ["chain_ethereum", "level_parse", "proj_opensea"], "meta": {}, "materialized": "incremental", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "file_format": "parquet", "partition_by": ["dt"], "incremental_strategy": "insert_overwrite", "post-hook": [], "pre-hook": [{"sql": "create or replace function opensea_wyvernexchangev2_orderscanmatch__calldecodeudf as \"io.iftech.sparkudf.hive.opensea_WyvernExchangeV2_ordersCanMatch__CallDecodeUDF\" using jar \"s3a://ifcrypto/blockchain-dbt/jars/opensea_udf.jar\";", "transaction": true, "index": null}]}, "database": null, "schema": "ethereum_opensea", "fqn": ["ethereum_source", "codegen", "opensea", "WyvernExchangeV2_call_ordersCanMatch_"], "unique_id": "model.ethereum_source.WyvernExchangeV2_call_ordersCanMatch_", "package_name": "ethereum_source", "root_path": "/Users/songv/Code/jike/web3/dbt_ethereum_source", "path": "codegen/opensea/WyvernExchangeV2_call_ordersCanMatch_.sql", "original_file_path": "models/codegen/opensea/WyvernExchangeV2_call_ordersCanMatch_.sql", "name": "WyvernExchangeV2_call_ordersCanMatch_", "alias": "WyvernExchangeV2_call_ordersCanMatch_", "checksum": {"name": "sha256", "checksum": "aa0d5af7cf71e7abfc52b3a03ce678dea9f7ffe784dc8262ff26472c13a77b8a"}, "tags": ["chain_ethereum", "level_parse", "proj_opensea"], "refs": [["stg_ethereum__traces"]], "sources": [], "description": "", "columns": {"addrs": {"name": "addrs", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "uints": {"name": "uints", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "feeMethodsSidesKindsHowToCalls": {"name": "feeMethodsSidesKindsHowToCalls", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "calldataBuy": {"name": "calldataBuy", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "calldataSell": {"name": "calldataSell", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "replacementPatternBuy": {"name": "replacementPatternBuy", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "replacementPatternSell": {"name": "replacementPatternSell", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "staticExtradataBuy": {"name": "staticExtradataBuy", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "staticExtradataSell": {"name": "staticExtradataSell", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "output_0": {"name": "output_0", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "call_success": {"name": "call_success", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "call_block_number": {"name": "call_block_number", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "call_block_time": {"name": "call_block_time", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "call_trace_address": {"name": "call_trace_address", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "call_tx_hash": {"name": "call_tx_hash", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "contract_address": {"name": "contract_address", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "dt": {"name": "dt", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "ethereum_source://models/codegen/opensea/schema.yml", "compiled_path": "target/compiled/ethereum_source/models/codegen/opensea/WyvernExchangeV2_call_ordersCanMatch_.sql", "build_path": null, "deferred": false, "unrendered_config": {"schema": "opensea", "tags": ["chain_ethereum", "level_parse", "proj_opensea"], "materialized": "incremental", "incremental_strategy": "insert_overwrite", "partition_by": ["dt"], "file_format": "parquet", "pre-hook": [{"sql": "create or replace function opensea_wyvernexchangev2_orderscanmatch__calldecodeudf as \"io.iftech.sparkudf.hive.opensea_WyvernExchangeV2_ordersCanMatch__CallDecodeUDF\" using jar \"s3a://ifcrypto/blockchain-dbt/jars/opensea_udf.jar\";"}]}, "created_at": 1650535972.0547462, "compiled_sql": "\n\nwith base as (\n    select\n        status==1 as call_success,\n        block_number as call_block_number,\n        block_timestamp as call_block_time,\n        trace_address as call_trace_address,\n        transaction_hash as call_tx_hash,\n        to_address as contract_address,\n        dt,\n        opensea_wyvernexchangev2_orderscanmatch__calldecodeudf(unhex_input, unhex_output, '{\"constant\": true, \"inputs\": [{\"name\": \"addrs\", \"type\": \"address[14]\"}, {\"name\": \"uints\", \"type\": \"uint256[18]\"}, {\"name\": \"feeMethodsSidesKindsHowToCalls\", \"type\": \"uint8[8]\"}, {\"name\": \"calldataBuy\", \"type\": \"bytes\"}, {\"name\": \"calldataSell\", \"type\": \"bytes\"}, {\"name\": \"replacementPatternBuy\", \"type\": \"bytes\"}, {\"name\": \"replacementPatternSell\", \"type\": \"bytes\"}, {\"name\": \"staticExtradataBuy\", \"type\": \"bytes\"}, {\"name\": \"staticExtradataSell\", \"type\": \"bytes\"}], \"name\": \"ordersCanMatch_\", \"outputs\": [{\"name\": \"\", \"type\": \"bool\"}], \"payable\": false, \"stateMutability\": \"view\", \"type\": \"function\"}', 'ordersCanMatch_') as data\n    from ethereum_stg_ethereum.stg_ethereum__traces\n    where to_address = lower(\"0x7f268357A8c2552623316e2562D90e642bB538E5\")\n    and address_hash = abs(hash(lower(\"0x7f268357A8c2552623316e2562D90e642bB538E5\"))) % 10\n    and selector = \"0x30783732\"\n    and selector_hash = abs(hash(\"0x30783732\")) % 10\n\n    \n),\n\nfinal as (\n    select\n        call_success,\n        call_block_number,\n        call_block_time,\n        call_trace_address,\n        call_tx_hash,\n        contract_address,\n        dt,\n        data.input.*,\n        data.output.*\n    from base\n)\n\nselect /* REPARTITION(dt) */ *\nfrom final", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "ethereum_opensea.WyvernExchangeV2_call_ordersCanMatch_"}, "model.ethereum_source.OpenSeaENSResolver_call_pubkey": {"raw_sql": "{{\n    config(\n        materialized='incremental',\n        incremental_strategy='insert_overwrite',\n        partition_by=['dt'],\n        file_format='parquet',\n        pre_hook={\n            'sql': 'create or replace function opensea_openseaensresolver_pubkey_calldecodeudf as \"io.iftech.sparkudf.hive.opensea_OpenSeaENSResolver_pubkey_CallDecodeUDF\" using jar \"s3a://ifcrypto/blockchain-dbt/jars/opensea_udf.jar\";'\n        }\n    )\n}}\n\nwith base as (\n    select\n        status==1 as call_success,\n        block_number as call_block_number,\n        block_timestamp as call_block_time,\n        trace_address as call_trace_address,\n        transaction_hash as call_tx_hash,\n        to_address as contract_address,\n        dt,\n        opensea_openseaensresolver_pubkey_calldecodeudf(unhex_input, unhex_output, '{\"constant\": true, \"inputs\": [{\"name\": \"node\", \"type\": \"bytes32\"}], \"name\": \"pubkey\", \"outputs\": [{\"name\": \"x\", \"type\": \"bytes32\"}, {\"name\": \"y\", \"type\": \"bytes32\"}], \"payable\": false, \"stateMutability\": \"view\", \"type\": \"function\"}', 'pubkey') as data\n    from {{ ref('stg_ethereum__traces') }}\n    where to_address = lower(\"0x9c4e9cce4780062942a7fe34fa2fa7316c872956\")\n    and address_hash = abs(hash(lower(\"0x9c4e9cce4780062942a7fe34fa2fa7316c872956\"))) % 10\n    and selector = \"0x30786338\"\n    and selector_hash = abs(hash(\"0x30786338\")) % 10\n\n    {% if is_incremental() %}\n      and dt = var('dt')\n    {% endif %}\n),\n\nfinal as (\n    select\n        call_success,\n        call_block_number,\n        call_block_time,\n        call_trace_address,\n        call_tx_hash,\n        contract_address,\n        dt,\n        data.input.*,\n        data.output.*\n    from base\n)\n\nselect /* REPARTITION(dt) */ *\nfrom final", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.dbt.is_incremental"], "nodes": ["model.ethereum_source.stg_ethereum__traces"]}, "config": {"enabled": true, "alias": null, "schema": "opensea", "database": null, "tags": ["chain_ethereum", "level_parse", "proj_opensea"], "meta": {}, "materialized": "incremental", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "file_format": "parquet", "partition_by": ["dt"], "incremental_strategy": "insert_overwrite", "post-hook": [], "pre-hook": [{"sql": "create or replace function opensea_openseaensresolver_pubkey_calldecodeudf as \"io.iftech.sparkudf.hive.opensea_OpenSeaENSResolver_pubkey_CallDecodeUDF\" using jar \"s3a://ifcrypto/blockchain-dbt/jars/opensea_udf.jar\";", "transaction": true, "index": null}]}, "database": null, "schema": "ethereum_opensea", "fqn": ["ethereum_source", "codegen", "opensea", "OpenSeaENSResolver_call_pubkey"], "unique_id": "model.ethereum_source.OpenSeaENSResolver_call_pubkey", "package_name": "ethereum_source", "root_path": "/Users/songv/Code/jike/web3/dbt_ethereum_source", "path": "codegen/opensea/OpenSeaENSResolver_call_pubkey.sql", "original_file_path": "models/codegen/opensea/OpenSeaENSResolver_call_pubkey.sql", "name": "OpenSeaENSResolver_call_pubkey", "alias": "OpenSeaENSResolver_call_pubkey", "checksum": {"name": "sha256", "checksum": "06c47f0b9be7d86ea6d1266a13f18708bf3f535cac67e6526237ef415ce38e1a"}, "tags": ["chain_ethereum", "level_parse", "proj_opensea"], "refs": [["stg_ethereum__traces"]], "sources": [], "description": "", "columns": {"node": {"name": "node", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "output_x": {"name": "output_x", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "output_y": {"name": "output_y", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "call_success": {"name": "call_success", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "call_block_number": {"name": "call_block_number", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "call_block_time": {"name": "call_block_time", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "call_trace_address": {"name": "call_trace_address", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "call_tx_hash": {"name": "call_tx_hash", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "contract_address": {"name": "contract_address", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "dt": {"name": "dt", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "ethereum_source://models/codegen/opensea/schema.yml", "compiled_path": "target/compiled/ethereum_source/models/codegen/opensea/OpenSeaENSResolver_call_pubkey.sql", "build_path": null, "deferred": false, "unrendered_config": {"schema": "opensea", "tags": ["chain_ethereum", "level_parse", "proj_opensea"], "materialized": "incremental", "incremental_strategy": "insert_overwrite", "partition_by": ["dt"], "file_format": "parquet", "pre-hook": [{"sql": "create or replace function opensea_openseaensresolver_pubkey_calldecodeudf as \"io.iftech.sparkudf.hive.opensea_OpenSeaENSResolver_pubkey_CallDecodeUDF\" using jar \"s3a://ifcrypto/blockchain-dbt/jars/opensea_udf.jar\";"}]}, "created_at": 1650535972.148733, "compiled_sql": "\n\nwith base as (\n    select\n        status==1 as call_success,\n        block_number as call_block_number,\n        block_timestamp as call_block_time,\n        trace_address as call_trace_address,\n        transaction_hash as call_tx_hash,\n        to_address as contract_address,\n        dt,\n        opensea_openseaensresolver_pubkey_calldecodeudf(unhex_input, unhex_output, '{\"constant\": true, \"inputs\": [{\"name\": \"node\", \"type\": \"bytes32\"}], \"name\": \"pubkey\", \"outputs\": [{\"name\": \"x\", \"type\": \"bytes32\"}, {\"name\": \"y\", \"type\": \"bytes32\"}], \"payable\": false, \"stateMutability\": \"view\", \"type\": \"function\"}', 'pubkey') as data\n    from ethereum_stg_ethereum.stg_ethereum__traces\n    where to_address = lower(\"0x9c4e9cce4780062942a7fe34fa2fa7316c872956\")\n    and address_hash = abs(hash(lower(\"0x9c4e9cce4780062942a7fe34fa2fa7316c872956\"))) % 10\n    and selector = \"0x30786338\"\n    and selector_hash = abs(hash(\"0x30786338\")) % 10\n\n    \n),\n\nfinal as (\n    select\n        call_success,\n        call_block_number,\n        call_block_time,\n        call_trace_address,\n        call_tx_hash,\n        contract_address,\n        dt,\n        data.input.*,\n        data.output.*\n    from base\n)\n\nselect /* REPARTITION(dt) */ *\nfrom final", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "ethereum_opensea.OpenSeaENSResolver_call_pubkey"}, "model.ethereum_source.WyvernExchangeV2_call_calculateCurrentPrice_": {"raw_sql": "{{\n    config(\n        materialized='incremental',\n        incremental_strategy='insert_overwrite',\n        partition_by=['dt'],\n        file_format='parquet',\n        pre_hook={\n            'sql': 'create or replace function opensea_wyvernexchangev2_calculatecurrentprice__calldecodeudf as \"io.iftech.sparkudf.hive.opensea_WyvernExchangeV2_calculateCurrentPrice__CallDecodeUDF\" using jar \"s3a://ifcrypto/blockchain-dbt/jars/opensea_udf.jar\";'\n        }\n    )\n}}\n\nwith base as (\n    select\n        status==1 as call_success,\n        block_number as call_block_number,\n        block_timestamp as call_block_time,\n        trace_address as call_trace_address,\n        transaction_hash as call_tx_hash,\n        to_address as contract_address,\n        dt,\n        opensea_wyvernexchangev2_calculatecurrentprice__calldecodeudf(unhex_input, unhex_output, '{\"constant\": true, \"inputs\": [{\"name\": \"addrs\", \"type\": \"address[7]\"}, {\"name\": \"uints\", \"type\": \"uint256[9]\"}, {\"name\": \"feeMethod\", \"type\": \"uint8\"}, {\"name\": \"side\", \"type\": \"uint8\"}, {\"name\": \"saleKind\", \"type\": \"uint8\"}, {\"name\": \"howToCall\", \"type\": \"uint8\"}, {\"name\": \"calldata\", \"type\": \"bytes\"}, {\"name\": \"replacementPattern\", \"type\": \"bytes\"}, {\"name\": \"staticExtradata\", \"type\": \"bytes\"}], \"name\": \"calculateCurrentPrice_\", \"outputs\": [{\"name\": \"\", \"type\": \"uint256\"}], \"payable\": false, \"stateMutability\": \"view\", \"type\": \"function\"}', 'calculateCurrentPrice_') as data\n    from {{ ref('stg_ethereum__traces') }}\n    where to_address = lower(\"0x7f268357A8c2552623316e2562D90e642bB538E5\")\n    and address_hash = abs(hash(lower(\"0x7f268357A8c2552623316e2562D90e642bB538E5\"))) % 10\n    and selector = \"0x30783366\"\n    and selector_hash = abs(hash(\"0x30783366\")) % 10\n\n    {% if is_incremental() %}\n      and dt = var('dt')\n    {% endif %}\n),\n\nfinal as (\n    select\n        call_success,\n        call_block_number,\n        call_block_time,\n        call_trace_address,\n        call_tx_hash,\n        contract_address,\n        dt,\n        data.input.*,\n        data.output.*\n    from base\n)\n\nselect /* REPARTITION(dt) */ *\nfrom final", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.dbt.is_incremental"], "nodes": ["model.ethereum_source.stg_ethereum__traces"]}, "config": {"enabled": true, "alias": null, "schema": "opensea", "database": null, "tags": ["chain_ethereum", "level_parse", "proj_opensea"], "meta": {}, "materialized": "incremental", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "file_format": "parquet", "partition_by": ["dt"], "incremental_strategy": "insert_overwrite", "post-hook": [], "pre-hook": [{"sql": "create or replace function opensea_wyvernexchangev2_calculatecurrentprice__calldecodeudf as \"io.iftech.sparkudf.hive.opensea_WyvernExchangeV2_calculateCurrentPrice__CallDecodeUDF\" using jar \"s3a://ifcrypto/blockchain-dbt/jars/opensea_udf.jar\";", "transaction": true, "index": null}]}, "database": null, "schema": "ethereum_opensea", "fqn": ["ethereum_source", "codegen", "opensea", "WyvernExchangeV2_call_calculateCurrentPrice_"], "unique_id": "model.ethereum_source.WyvernExchangeV2_call_calculateCurrentPrice_", "package_name": "ethereum_source", "root_path": "/Users/songv/Code/jike/web3/dbt_ethereum_source", "path": "codegen/opensea/WyvernExchangeV2_call_calculateCurrentPrice_.sql", "original_file_path": "models/codegen/opensea/WyvernExchangeV2_call_calculateCurrentPrice_.sql", "name": "WyvernExchangeV2_call_calculateCurrentPrice_", "alias": "WyvernExchangeV2_call_calculateCurrentPrice_", "checksum": {"name": "sha256", "checksum": "3d1514e770e3d52ed1d3377eecede1a1a13db44129ab4cf25d2c497377130c6e"}, "tags": ["chain_ethereum", "level_parse", "proj_opensea"], "refs": [["stg_ethereum__traces"]], "sources": [], "description": "", "columns": {"addrs": {"name": "addrs", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "uints": {"name": "uints", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "feeMethod": {"name": "feeMethod", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "side": {"name": "side", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "saleKind": {"name": "saleKind", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "howToCall": {"name": "howToCall", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "calldata": {"name": "calldata", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "replacementPattern": {"name": "replacementPattern", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "staticExtradata": {"name": "staticExtradata", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "output_0": {"name": "output_0", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "call_success": {"name": "call_success", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "call_block_number": {"name": "call_block_number", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "call_block_time": {"name": "call_block_time", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "call_trace_address": {"name": "call_trace_address", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "call_tx_hash": {"name": "call_tx_hash", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "contract_address": {"name": "contract_address", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "dt": {"name": "dt", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "ethereum_source://models/codegen/opensea/schema.yml", "compiled_path": "target/compiled/ethereum_source/models/codegen/opensea/WyvernExchangeV2_call_calculateCurrentPrice_.sql", "build_path": null, "deferred": false, "unrendered_config": {"schema": "opensea", "tags": ["chain_ethereum", "level_parse", "proj_opensea"], "materialized": "incremental", "incremental_strategy": "insert_overwrite", "partition_by": ["dt"], "file_format": "parquet", "pre-hook": [{"sql": "create or replace function opensea_wyvernexchangev2_calculatecurrentprice__calldecodeudf as \"io.iftech.sparkudf.hive.opensea_WyvernExchangeV2_calculateCurrentPrice__CallDecodeUDF\" using jar \"s3a://ifcrypto/blockchain-dbt/jars/opensea_udf.jar\";"}]}, "created_at": 1650535972.032736, "compiled_sql": "\n\nwith base as (\n    select\n        status==1 as call_success,\n        block_number as call_block_number,\n        block_timestamp as call_block_time,\n        trace_address as call_trace_address,\n        transaction_hash as call_tx_hash,\n        to_address as contract_address,\n        dt,\n        opensea_wyvernexchangev2_calculatecurrentprice__calldecodeudf(unhex_input, unhex_output, '{\"constant\": true, \"inputs\": [{\"name\": \"addrs\", \"type\": \"address[7]\"}, {\"name\": \"uints\", \"type\": \"uint256[9]\"}, {\"name\": \"feeMethod\", \"type\": \"uint8\"}, {\"name\": \"side\", \"type\": \"uint8\"}, {\"name\": \"saleKind\", \"type\": \"uint8\"}, {\"name\": \"howToCall\", \"type\": \"uint8\"}, {\"name\": \"calldata\", \"type\": \"bytes\"}, {\"name\": \"replacementPattern\", \"type\": \"bytes\"}, {\"name\": \"staticExtradata\", \"type\": \"bytes\"}], \"name\": \"calculateCurrentPrice_\", \"outputs\": [{\"name\": \"\", \"type\": \"uint256\"}], \"payable\": false, \"stateMutability\": \"view\", \"type\": \"function\"}', 'calculateCurrentPrice_') as data\n    from ethereum_stg_ethereum.stg_ethereum__traces\n    where to_address = lower(\"0x7f268357A8c2552623316e2562D90e642bB538E5\")\n    and address_hash = abs(hash(lower(\"0x7f268357A8c2552623316e2562D90e642bB538E5\"))) % 10\n    and selector = \"0x30783366\"\n    and selector_hash = abs(hash(\"0x30783366\")) % 10\n\n    \n),\n\nfinal as (\n    select\n        call_success,\n        call_block_number,\n        call_block_time,\n        call_trace_address,\n        call_tx_hash,\n        contract_address,\n        dt,\n        data.input.*,\n        data.output.*\n    from base\n)\n\nselect /* REPARTITION(dt) */ *\nfrom final", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "ethereum_opensea.WyvernExchangeV2_call_calculateCurrentPrice_"}, "model.ethereum_source.OpenSeaENSResolver_call_setName": {"raw_sql": "{{\n    config(\n        materialized='incremental',\n        incremental_strategy='insert_overwrite',\n        partition_by=['dt'],\n        file_format='parquet',\n        pre_hook={\n            'sql': 'create or replace function opensea_openseaensresolver_setname_calldecodeudf as \"io.iftech.sparkudf.hive.opensea_OpenSeaENSResolver_setName_CallDecodeUDF\" using jar \"s3a://ifcrypto/blockchain-dbt/jars/opensea_udf.jar\";'\n        }\n    )\n}}\n\nwith base as (\n    select\n        status==1 as call_success,\n        block_number as call_block_number,\n        block_timestamp as call_block_time,\n        trace_address as call_trace_address,\n        transaction_hash as call_tx_hash,\n        to_address as contract_address,\n        dt,\n        opensea_openseaensresolver_setname_calldecodeudf(unhex_input, unhex_output, '{\"constant\": false, \"inputs\": [{\"name\": \"node\", \"type\": \"bytes32\"}, {\"name\": \"name\", \"type\": \"string\"}], \"name\": \"setName\", \"outputs\": [], \"payable\": false, \"stateMutability\": \"nonpayable\", \"type\": \"function\"}', 'setName') as data\n    from {{ ref('stg_ethereum__traces') }}\n    where to_address = lower(\"0x9c4e9cce4780062942a7fe34fa2fa7316c872956\")\n    and address_hash = abs(hash(lower(\"0x9c4e9cce4780062942a7fe34fa2fa7316c872956\"))) % 10\n    and selector = \"0x30783737\"\n    and selector_hash = abs(hash(\"0x30783737\")) % 10\n\n    {% if is_incremental() %}\n      and dt = var('dt')\n    {% endif %}\n),\n\nfinal as (\n    select\n        call_success,\n        call_block_number,\n        call_block_time,\n        call_trace_address,\n        call_tx_hash,\n        contract_address,\n        dt,\n        data.input.*,\n        data.output.*\n    from base\n)\n\nselect /* REPARTITION(dt) */ *\nfrom final", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.dbt.is_incremental"], "nodes": ["model.ethereum_source.stg_ethereum__traces"]}, "config": {"enabled": true, "alias": null, "schema": "opensea", "database": null, "tags": ["chain_ethereum", "level_parse", "proj_opensea"], "meta": {}, "materialized": "incremental", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "file_format": "parquet", "partition_by": ["dt"], "incremental_strategy": "insert_overwrite", "post-hook": [], "pre-hook": [{"sql": "create or replace function opensea_openseaensresolver_setname_calldecodeudf as \"io.iftech.sparkudf.hive.opensea_OpenSeaENSResolver_setName_CallDecodeUDF\" using jar \"s3a://ifcrypto/blockchain-dbt/jars/opensea_udf.jar\";", "transaction": true, "index": null}]}, "database": null, "schema": "ethereum_opensea", "fqn": ["ethereum_source", "codegen", "opensea", "OpenSeaENSResolver_call_setName"], "unique_id": "model.ethereum_source.OpenSeaENSResolver_call_setName", "package_name": "ethereum_source", "root_path": "/Users/songv/Code/jike/web3/dbt_ethereum_source", "path": "codegen/opensea/OpenSeaENSResolver_call_setName.sql", "original_file_path": "models/codegen/opensea/OpenSeaENSResolver_call_setName.sql", "name": "OpenSeaENSResolver_call_setName", "alias": "OpenSeaENSResolver_call_setName", "checksum": {"name": "sha256", "checksum": "5780b1673169facb03de807663315a37398f93cbb7b6e59149fdf5752c29b6e6"}, "tags": ["chain_ethereum", "level_parse", "proj_opensea"], "refs": [["stg_ethereum__traces"]], "sources": [], "description": "", "columns": {"node": {"name": "node", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "name": {"name": "name", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "call_success": {"name": "call_success", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "call_block_number": {"name": "call_block_number", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "call_block_time": {"name": "call_block_time", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "call_trace_address": {"name": "call_trace_address", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "call_tx_hash": {"name": "call_tx_hash", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "contract_address": {"name": "contract_address", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "dt": {"name": "dt", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "ethereum_source://models/codegen/opensea/schema.yml", "compiled_path": "target/compiled/ethereum_source/models/codegen/opensea/OpenSeaENSResolver_call_setName.sql", "build_path": null, "deferred": false, "unrendered_config": {"schema": "opensea", "tags": ["chain_ethereum", "level_parse", "proj_opensea"], "materialized": "incremental", "incremental_strategy": "insert_overwrite", "partition_by": ["dt"], "file_format": "parquet", "pre-hook": [{"sql": "create or replace function opensea_openseaensresolver_setname_calldecodeudf as \"io.iftech.sparkudf.hive.opensea_OpenSeaENSResolver_setName_CallDecodeUDF\" using jar \"s3a://ifcrypto/blockchain-dbt/jars/opensea_udf.jar\";"}]}, "created_at": 1650535972.141696, "compiled_sql": "\n\nwith base as (\n    select\n        status==1 as call_success,\n        block_number as call_block_number,\n        block_timestamp as call_block_time,\n        trace_address as call_trace_address,\n        transaction_hash as call_tx_hash,\n        to_address as contract_address,\n        dt,\n        opensea_openseaensresolver_setname_calldecodeudf(unhex_input, unhex_output, '{\"constant\": false, \"inputs\": [{\"name\": \"node\", \"type\": \"bytes32\"}, {\"name\": \"name\", \"type\": \"string\"}], \"name\": \"setName\", \"outputs\": [], \"payable\": false, \"stateMutability\": \"nonpayable\", \"type\": \"function\"}', 'setName') as data\n    from ethereum_stg_ethereum.stg_ethereum__traces\n    where to_address = lower(\"0x9c4e9cce4780062942a7fe34fa2fa7316c872956\")\n    and address_hash = abs(hash(lower(\"0x9c4e9cce4780062942a7fe34fa2fa7316c872956\"))) % 10\n    and selector = \"0x30783737\"\n    and selector_hash = abs(hash(\"0x30783737\")) % 10\n\n    \n),\n\nfinal as (\n    select\n        call_success,\n        call_block_number,\n        call_block_time,\n        call_trace_address,\n        call_tx_hash,\n        contract_address,\n        dt,\n        data.input.*,\n        data.output.*\n    from base\n)\n\nselect /* REPARTITION(dt) */ *\nfrom final", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "ethereum_opensea.OpenSeaENSResolver_call_setName"}, "model.ethereum_source.WyvernExchangeV2_call_tokenTransferProxy": {"raw_sql": "{{\n    config(\n        materialized='incremental',\n        incremental_strategy='insert_overwrite',\n        partition_by=['dt'],\n        file_format='parquet',\n        pre_hook={\n            'sql': 'create or replace function opensea_wyvernexchangev2_tokentransferproxy_calldecodeudf as \"io.iftech.sparkudf.hive.opensea_WyvernExchangeV2_tokenTransferProxy_CallDecodeUDF\" using jar \"s3a://ifcrypto/blockchain-dbt/jars/opensea_udf.jar\";'\n        }\n    )\n}}\n\nwith base as (\n    select\n        status==1 as call_success,\n        block_number as call_block_number,\n        block_timestamp as call_block_time,\n        trace_address as call_trace_address,\n        transaction_hash as call_tx_hash,\n        to_address as contract_address,\n        dt,\n        opensea_wyvernexchangev2_tokentransferproxy_calldecodeudf(unhex_input, unhex_output, '{\"constant\": true, \"inputs\": [], \"name\": \"tokenTransferProxy\", \"outputs\": [{\"name\": \"\", \"type\": \"address\"}], \"payable\": false, \"stateMutability\": \"view\", \"type\": \"function\"}', 'tokenTransferProxy') as data\n    from {{ ref('stg_ethereum__traces') }}\n    where to_address = lower(\"0x7f268357A8c2552623316e2562D90e642bB538E5\")\n    and address_hash = abs(hash(lower(\"0x7f268357A8c2552623316e2562D90e642bB538E5\"))) % 10\n    and selector = \"0x30783065\"\n    and selector_hash = abs(hash(\"0x30783065\")) % 10\n\n    {% if is_incremental() %}\n      and dt = var('dt')\n    {% endif %}\n),\n\nfinal as (\n    select\n        call_success,\n        call_block_number,\n        call_block_time,\n        call_trace_address,\n        call_tx_hash,\n        contract_address,\n        dt,\n        data.input.*,\n        data.output.*\n    from base\n)\n\nselect /* REPARTITION(dt) */ *\nfrom final", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.dbt.is_incremental"], "nodes": ["model.ethereum_source.stg_ethereum__traces"]}, "config": {"enabled": true, "alias": null, "schema": "opensea", "database": null, "tags": ["chain_ethereum", "level_parse", "proj_opensea"], "meta": {}, "materialized": "incremental", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "file_format": "parquet", "partition_by": ["dt"], "incremental_strategy": "insert_overwrite", "post-hook": [], "pre-hook": [{"sql": "create or replace function opensea_wyvernexchangev2_tokentransferproxy_calldecodeudf as \"io.iftech.sparkudf.hive.opensea_WyvernExchangeV2_tokenTransferProxy_CallDecodeUDF\" using jar \"s3a://ifcrypto/blockchain-dbt/jars/opensea_udf.jar\";", "transaction": true, "index": null}]}, "database": null, "schema": "ethereum_opensea", "fqn": ["ethereum_source", "codegen", "opensea", "WyvernExchangeV2_call_tokenTransferProxy"], "unique_id": "model.ethereum_source.WyvernExchangeV2_call_tokenTransferProxy", "package_name": "ethereum_source", "root_path": "/Users/songv/Code/jike/web3/dbt_ethereum_source", "path": "codegen/opensea/WyvernExchangeV2_call_tokenTransferProxy.sql", "original_file_path": "models/codegen/opensea/WyvernExchangeV2_call_tokenTransferProxy.sql", "name": "WyvernExchangeV2_call_tokenTransferProxy", "alias": "WyvernExchangeV2_call_tokenTransferProxy", "checksum": {"name": "sha256", "checksum": "d1777aa2c415e94da3f0fad92e8d5dca1710d8e1f6448c19d8f9601118bc4655"}, "tags": ["chain_ethereum", "level_parse", "proj_opensea"], "refs": [["stg_ethereum__traces"]], "sources": [], "description": "", "columns": {"output_0": {"name": "output_0", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "call_success": {"name": "call_success", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "call_block_number": {"name": "call_block_number", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "call_block_time": {"name": "call_block_time", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "call_trace_address": {"name": "call_trace_address", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "call_tx_hash": {"name": "call_tx_hash", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "contract_address": {"name": "contract_address", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "dt": {"name": "dt", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "ethereum_source://models/codegen/opensea/schema.yml", "compiled_path": "target/compiled/ethereum_source/models/codegen/opensea/WyvernExchangeV2_call_tokenTransferProxy.sql", "build_path": null, "deferred": false, "unrendered_config": {"schema": "opensea", "tags": ["chain_ethereum", "level_parse", "proj_opensea"], "materialized": "incremental", "incremental_strategy": "insert_overwrite", "partition_by": ["dt"], "file_format": "parquet", "pre-hook": [{"sql": "create or replace function opensea_wyvernexchangev2_tokentransferproxy_calldecodeudf as \"io.iftech.sparkudf.hive.opensea_WyvernExchangeV2_tokenTransferProxy_CallDecodeUDF\" using jar \"s3a://ifcrypto/blockchain-dbt/jars/opensea_udf.jar\";"}]}, "created_at": 1650535972.017461, "compiled_sql": "\n\nwith base as (\n    select\n        status==1 as call_success,\n        block_number as call_block_number,\n        block_timestamp as call_block_time,\n        trace_address as call_trace_address,\n        transaction_hash as call_tx_hash,\n        to_address as contract_address,\n        dt,\n        opensea_wyvernexchangev2_tokentransferproxy_calldecodeudf(unhex_input, unhex_output, '{\"constant\": true, \"inputs\": [], \"name\": \"tokenTransferProxy\", \"outputs\": [{\"name\": \"\", \"type\": \"address\"}], \"payable\": false, \"stateMutability\": \"view\", \"type\": \"function\"}', 'tokenTransferProxy') as data\n    from ethereum_stg_ethereum.stg_ethereum__traces\n    where to_address = lower(\"0x7f268357A8c2552623316e2562D90e642bB538E5\")\n    and address_hash = abs(hash(lower(\"0x7f268357A8c2552623316e2562D90e642bB538E5\"))) % 10\n    and selector = \"0x30783065\"\n    and selector_hash = abs(hash(\"0x30783065\")) % 10\n\n    \n),\n\nfinal as (\n    select\n        call_success,\n        call_block_number,\n        call_block_time,\n        call_trace_address,\n        call_tx_hash,\n        contract_address,\n        dt,\n        data.input.*,\n        data.output.*\n    from base\n)\n\nselect /* REPARTITION(dt) */ *\nfrom final", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "ethereum_opensea.WyvernExchangeV2_call_tokenTransferProxy"}, "model.ethereum_source.WyvernExchangeV1_evt_OwnershipTransferred": {"raw_sql": "{{\n    config(\n        materialized='incremental',\n        incremental_strategy='insert_overwrite',\n        partition_by=['dt'],\n        file_format='parquet',\n        pre_hook={\n            'sql': 'create or replace function opensea_wyvernexchangev1_ownershiptransferred_eventdecodeudf as \"io.iftech.sparkudf.hive.opensea_WyvernExchangeV1_OwnershipTransferred_EventDecodeUDF\" using jar \"s3a://ifcrypto/blockchain-dbt/jars/opensea_udf.jar\";'\n        }\n    )\n}}\n\nwith base as (\n    select\n        block_number as evt_block_number,\n        block_timestamp as evt_block_time,\n        log_index as evt_index,\n        transaction_hash as evt_tx_hash,\n        address as contract_address,\n        dt,\n        opensea_wyvernexchangev1_ownershiptransferred_eventdecodeudf(unhex_data, topics_arr, '{\"anonymous\": false, \"inputs\": [{\"indexed\": true, \"name\": \"previousOwner\", \"type\": \"address\"}, {\"indexed\": true, \"name\": \"newOwner\", \"type\": \"address\"}], \"name\": \"OwnershipTransferred\", \"type\": \"event\"}', 'OwnershipTransferred') as data\n    from {{ ref('stg_ethereum__logs') }}\n    where address = lower(\"0x7Be8076f4EA4A4AD08075C2508e481d6C946D12b\")\n    and address_hash = abs(hash(lower(\"0x7Be8076f4EA4A4AD08075C2508e481d6C946D12b\"))) % 10\n    and selector = \"0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0\"\n    and selector_hash = abs(hash(\"0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0\")) % 10\n\n    {% if is_incremental() %}\n      and dt = var('dt')\n    {% endif %}\n),\n\nfinal as (\n    select\n        evt_block_number,\n        evt_block_time,\n        evt_index,\n        evt_tx_hash,\n        contract_address,\n        dt,\n        data.input.*\n    from base\n)\n\nselect /* REPARTITION(dt) */ *\nfrom final", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.dbt.is_incremental"], "nodes": ["model.ethereum_source.stg_ethereum__logs"]}, "config": {"enabled": true, "alias": null, "schema": "opensea", "database": null, "tags": ["chain_ethereum", "level_parse", "proj_opensea"], "meta": {}, "materialized": "incremental", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "file_format": "parquet", "partition_by": ["dt"], "incremental_strategy": "insert_overwrite", "post-hook": [], "pre-hook": [{"sql": "create or replace function opensea_wyvernexchangev1_ownershiptransferred_eventdecodeudf as \"io.iftech.sparkudf.hive.opensea_WyvernExchangeV1_OwnershipTransferred_EventDecodeUDF\" using jar \"s3a://ifcrypto/blockchain-dbt/jars/opensea_udf.jar\";", "transaction": true, "index": null}]}, "database": null, "schema": "ethereum_opensea", "fqn": ["ethereum_source", "codegen", "opensea", "WyvernExchangeV1_evt_OwnershipTransferred"], "unique_id": "model.ethereum_source.WyvernExchangeV1_evt_OwnershipTransferred", "package_name": "ethereum_source", "root_path": "/Users/songv/Code/jike/web3/dbt_ethereum_source", "path": "codegen/opensea/WyvernExchangeV1_evt_OwnershipTransferred.sql", "original_file_path": "models/codegen/opensea/WyvernExchangeV1_evt_OwnershipTransferred.sql", "name": "WyvernExchangeV1_evt_OwnershipTransferred", "alias": "WyvernExchangeV1_evt_OwnershipTransferred", "checksum": {"name": "sha256", "checksum": "c8e417f65bfa6d49141cc8f6e9181f5fbf59edfa678d44dc3d0f905375bb43f8"}, "tags": ["chain_ethereum", "level_parse", "proj_opensea"], "refs": [["stg_ethereum__logs"]], "sources": [], "description": "", "columns": {"previousOwner": {"name": "previousOwner", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "newOwner": {"name": "newOwner", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "evt_block_number": {"name": "evt_block_number", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "evt_block_time": {"name": "evt_block_time", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "evt_index": {"name": "evt_index", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "evt_tx_hash": {"name": "evt_tx_hash", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "contract_address": {"name": "contract_address", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "dt": {"name": "dt", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "ethereum_source://models/codegen/opensea/schema.yml", "compiled_path": "target/compiled/ethereum_source/models/codegen/opensea/WyvernExchangeV1_evt_OwnershipTransferred.sql", "build_path": null, "deferred": false, "unrendered_config": {"schema": "opensea", "tags": ["chain_ethereum", "level_parse", "proj_opensea"], "materialized": "incremental", "incremental_strategy": "insert_overwrite", "partition_by": ["dt"], "file_format": "parquet", "pre-hook": [{"sql": "create or replace function opensea_wyvernexchangev1_ownershiptransferred_eventdecodeudf as \"io.iftech.sparkudf.hive.opensea_WyvernExchangeV1_OwnershipTransferred_EventDecodeUDF\" using jar \"s3a://ifcrypto/blockchain-dbt/jars/opensea_udf.jar\";"}]}, "created_at": 1650535971.924865, "compiled_sql": "\n\nwith base as (\n    select\n        block_number as evt_block_number,\n        block_timestamp as evt_block_time,\n        log_index as evt_index,\n        transaction_hash as evt_tx_hash,\n        address as contract_address,\n        dt,\n        opensea_wyvernexchangev1_ownershiptransferred_eventdecodeudf(unhex_data, topics_arr, '{\"anonymous\": false, \"inputs\": [{\"indexed\": true, \"name\": \"previousOwner\", \"type\": \"address\"}, {\"indexed\": true, \"name\": \"newOwner\", \"type\": \"address\"}], \"name\": \"OwnershipTransferred\", \"type\": \"event\"}', 'OwnershipTransferred') as data\n    from ethereum_stg_ethereum.stg_ethereum__logs\n    where address = lower(\"0x7Be8076f4EA4A4AD08075C2508e481d6C946D12b\")\n    and address_hash = abs(hash(lower(\"0x7Be8076f4EA4A4AD08075C2508e481d6C946D12b\"))) % 10\n    and selector = \"0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0\"\n    and selector_hash = abs(hash(\"0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0\")) % 10\n\n    \n),\n\nfinal as (\n    select\n        evt_block_number,\n        evt_block_time,\n        evt_index,\n        evt_tx_hash,\n        contract_address,\n        dt,\n        data.input.*\n    from base\n)\n\nselect /* REPARTITION(dt) */ *\nfrom final", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "ethereum_opensea.WyvernExchangeV1_evt_OwnershipTransferred"}, "model.ethereum_source.OpenSeaENSResolver_evt_PubkeyChanged": {"raw_sql": "{{\n    config(\n        materialized='incremental',\n        incremental_strategy='insert_overwrite',\n        partition_by=['dt'],\n        file_format='parquet',\n        pre_hook={\n            'sql': 'create or replace function opensea_openseaensresolver_pubkeychanged_eventdecodeudf as \"io.iftech.sparkudf.hive.opensea_OpenSeaENSResolver_PubkeyChanged_EventDecodeUDF\" using jar \"s3a://ifcrypto/blockchain-dbt/jars/opensea_udf.jar\";'\n        }\n    )\n}}\n\nwith base as (\n    select\n        block_number as evt_block_number,\n        block_timestamp as evt_block_time,\n        log_index as evt_index,\n        transaction_hash as evt_tx_hash,\n        address as contract_address,\n        dt,\n        opensea_openseaensresolver_pubkeychanged_eventdecodeudf(unhex_data, topics_arr, '{\"anonymous\": false, \"inputs\": [{\"indexed\": true, \"name\": \"node\", \"type\": \"bytes32\"}, {\"indexed\": false, \"name\": \"x\", \"type\": \"bytes32\"}, {\"indexed\": false, \"name\": \"y\", \"type\": \"bytes32\"}], \"name\": \"PubkeyChanged\", \"type\": \"event\"}', 'PubkeyChanged') as data\n    from {{ ref('stg_ethereum__logs') }}\n    where address = lower(\"0x9c4e9cce4780062942a7fe34fa2fa7316c872956\")\n    and address_hash = abs(hash(lower(\"0x9c4e9cce4780062942a7fe34fa2fa7316c872956\"))) % 10\n    and selector = \"0x1d6f5e03d3f63eb58751986629a5439baee5079ff04f345becb66e23eb154e46\"\n    and selector_hash = abs(hash(\"0x1d6f5e03d3f63eb58751986629a5439baee5079ff04f345becb66e23eb154e46\")) % 10\n\n    {% if is_incremental() %}\n      and dt = var('dt')\n    {% endif %}\n),\n\nfinal as (\n    select\n        evt_block_number,\n        evt_block_time,\n        evt_index,\n        evt_tx_hash,\n        contract_address,\n        dt,\n        data.input.*\n    from base\n)\n\nselect /* REPARTITION(dt) */ *\nfrom final", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.dbt.is_incremental"], "nodes": ["model.ethereum_source.stg_ethereum__logs"]}, "config": {"enabled": true, "alias": null, "schema": "opensea", "database": null, "tags": ["chain_ethereum", "level_parse", "proj_opensea"], "meta": {}, "materialized": "incremental", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "file_format": "parquet", "partition_by": ["dt"], "incremental_strategy": "insert_overwrite", "post-hook": [], "pre-hook": [{"sql": "create or replace function opensea_openseaensresolver_pubkeychanged_eventdecodeudf as \"io.iftech.sparkudf.hive.opensea_OpenSeaENSResolver_PubkeyChanged_EventDecodeUDF\" using jar \"s3a://ifcrypto/blockchain-dbt/jars/opensea_udf.jar\";", "transaction": true, "index": null}]}, "database": null, "schema": "ethereum_opensea", "fqn": ["ethereum_source", "codegen", "opensea", "OpenSeaENSResolver_evt_PubkeyChanged"], "unique_id": "model.ethereum_source.OpenSeaENSResolver_evt_PubkeyChanged", "package_name": "ethereum_source", "root_path": "/Users/songv/Code/jike/web3/dbt_ethereum_source", "path": "codegen/opensea/OpenSeaENSResolver_evt_PubkeyChanged.sql", "original_file_path": "models/codegen/opensea/OpenSeaENSResolver_evt_PubkeyChanged.sql", "name": "OpenSeaENSResolver_evt_PubkeyChanged", "alias": "OpenSeaENSResolver_evt_PubkeyChanged", "checksum": {"name": "sha256", "checksum": "a3ad13f0854960f081d6aea639f7ba916bf5f3d4fc4c2dff616302c3e5c72133"}, "tags": ["chain_ethereum", "level_parse", "proj_opensea"], "refs": [["stg_ethereum__logs"]], "sources": [], "description": "", "columns": {"node": {"name": "node", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "x": {"name": "x", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "y": {"name": "y", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "evt_block_number": {"name": "evt_block_number", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "evt_block_time": {"name": "evt_block_time", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "evt_index": {"name": "evt_index", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "evt_tx_hash": {"name": "evt_tx_hash", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "contract_address": {"name": "contract_address", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "dt": {"name": "dt", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "ethereum_source://models/codegen/opensea/schema.yml", "compiled_path": "target/compiled/ethereum_source/models/codegen/opensea/OpenSeaENSResolver_evt_PubkeyChanged.sql", "build_path": null, "deferred": false, "unrendered_config": {"schema": "opensea", "tags": ["chain_ethereum", "level_parse", "proj_opensea"], "materialized": "incremental", "incremental_strategy": "insert_overwrite", "partition_by": ["dt"], "file_format": "parquet", "pre-hook": [{"sql": "create or replace function opensea_openseaensresolver_pubkeychanged_eventdecodeudf as \"io.iftech.sparkudf.hive.opensea_OpenSeaENSResolver_PubkeyChanged_EventDecodeUDF\" using jar \"s3a://ifcrypto/blockchain-dbt/jars/opensea_udf.jar\";"}]}, "created_at": 1650535972.101161, "compiled_sql": "\n\nwith base as (\n    select\n        block_number as evt_block_number,\n        block_timestamp as evt_block_time,\n        log_index as evt_index,\n        transaction_hash as evt_tx_hash,\n        address as contract_address,\n        dt,\n        opensea_openseaensresolver_pubkeychanged_eventdecodeudf(unhex_data, topics_arr, '{\"anonymous\": false, \"inputs\": [{\"indexed\": true, \"name\": \"node\", \"type\": \"bytes32\"}, {\"indexed\": false, \"name\": \"x\", \"type\": \"bytes32\"}, {\"indexed\": false, \"name\": \"y\", \"type\": \"bytes32\"}], \"name\": \"PubkeyChanged\", \"type\": \"event\"}', 'PubkeyChanged') as data\n    from ethereum_stg_ethereum.stg_ethereum__logs\n    where address = lower(\"0x9c4e9cce4780062942a7fe34fa2fa7316c872956\")\n    and address_hash = abs(hash(lower(\"0x9c4e9cce4780062942a7fe34fa2fa7316c872956\"))) % 10\n    and selector = \"0x1d6f5e03d3f63eb58751986629a5439baee5079ff04f345becb66e23eb154e46\"\n    and selector_hash = abs(hash(\"0x1d6f5e03d3f63eb58751986629a5439baee5079ff04f345becb66e23eb154e46\")) % 10\n\n    \n),\n\nfinal as (\n    select\n        evt_block_number,\n        evt_block_time,\n        evt_index,\n        evt_tx_hash,\n        contract_address,\n        dt,\n        data.input.*\n    from base\n)\n\nselect /* REPARTITION(dt) */ *\nfrom final", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "ethereum_opensea.OpenSeaENSResolver_evt_PubkeyChanged"}, "model.ethereum_source.OpenSeaENSResolver_call_interfaceImplementer": {"raw_sql": "{{\n    config(\n        materialized='incremental',\n        incremental_strategy='insert_overwrite',\n        partition_by=['dt'],\n        file_format='parquet',\n        pre_hook={\n            'sql': 'create or replace function opensea_openseaensresolver_interfaceimplementer_calldecodeudf as \"io.iftech.sparkudf.hive.opensea_OpenSeaENSResolver_interfaceImplementer_CallDecodeUDF\" using jar \"s3a://ifcrypto/blockchain-dbt/jars/opensea_udf.jar\";'\n        }\n    )\n}}\n\nwith base as (\n    select\n        status==1 as call_success,\n        block_number as call_block_number,\n        block_timestamp as call_block_time,\n        trace_address as call_trace_address,\n        transaction_hash as call_tx_hash,\n        to_address as contract_address,\n        dt,\n        opensea_openseaensresolver_interfaceimplementer_calldecodeudf(unhex_input, unhex_output, '{\"constant\": true, \"inputs\": [{\"name\": \"node\", \"type\": \"bytes32\"}, {\"name\": \"interfaceID\", \"type\": \"bytes4\"}], \"name\": \"interfaceImplementer\", \"outputs\": [{\"name\": \"\", \"type\": \"address\"}], \"payable\": false, \"stateMutability\": \"view\", \"type\": \"function\"}', 'interfaceImplementer') as data\n    from {{ ref('stg_ethereum__traces') }}\n    where to_address = lower(\"0x9c4e9cce4780062942a7fe34fa2fa7316c872956\")\n    and address_hash = abs(hash(lower(\"0x9c4e9cce4780062942a7fe34fa2fa7316c872956\"))) % 10\n    and selector = \"0x30783132\"\n    and selector_hash = abs(hash(\"0x30783132\")) % 10\n\n    {% if is_incremental() %}\n      and dt = var('dt')\n    {% endif %}\n),\n\nfinal as (\n    select\n        call_success,\n        call_block_number,\n        call_block_time,\n        call_trace_address,\n        call_tx_hash,\n        contract_address,\n        dt,\n        data.input.*,\n        data.output.*\n    from base\n)\n\nselect /* REPARTITION(dt) */ *\nfrom final", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.dbt.is_incremental"], "nodes": ["model.ethereum_source.stg_ethereum__traces"]}, "config": {"enabled": true, "alias": null, "schema": "opensea", "database": null, "tags": ["chain_ethereum", "level_parse", "proj_opensea"], "meta": {}, "materialized": "incremental", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "file_format": "parquet", "partition_by": ["dt"], "incremental_strategy": "insert_overwrite", "post-hook": [], "pre-hook": [{"sql": "create or replace function opensea_openseaensresolver_interfaceimplementer_calldecodeudf as \"io.iftech.sparkudf.hive.opensea_OpenSeaENSResolver_interfaceImplementer_CallDecodeUDF\" using jar \"s3a://ifcrypto/blockchain-dbt/jars/opensea_udf.jar\";", "transaction": true, "index": null}]}, "database": null, "schema": "ethereum_opensea", "fqn": ["ethereum_source", "codegen", "opensea", "OpenSeaENSResolver_call_interfaceImplementer"], "unique_id": "model.ethereum_source.OpenSeaENSResolver_call_interfaceImplementer", "package_name": "ethereum_source", "root_path": "/Users/songv/Code/jike/web3/dbt_ethereum_source", "path": "codegen/opensea/OpenSeaENSResolver_call_interfaceImplementer.sql", "original_file_path": "models/codegen/opensea/OpenSeaENSResolver_call_interfaceImplementer.sql", "name": "OpenSeaENSResolver_call_interfaceImplementer", "alias": "OpenSeaENSResolver_call_interfaceImplementer", "checksum": {"name": "sha256", "checksum": "9df2067e550fbde3a028f32986fb7922eb4295dcae18fc6396bcc64febf5ca1a"}, "tags": ["chain_ethereum", "level_parse", "proj_opensea"], "refs": [["stg_ethereum__traces"]], "sources": [], "description": "", "columns": {"node": {"name": "node", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "interfaceID": {"name": "interfaceID", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "output_0": {"name": "output_0", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "call_success": {"name": "call_success", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "call_block_number": {"name": "call_block_number", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "call_block_time": {"name": "call_block_time", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "call_trace_address": {"name": "call_trace_address", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "call_tx_hash": {"name": "call_tx_hash", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "contract_address": {"name": "contract_address", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "dt": {"name": "dt", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "ethereum_source://models/codegen/opensea/schema.yml", "compiled_path": "target/compiled/ethereum_source/models/codegen/opensea/OpenSeaENSResolver_call_interfaceImplementer.sql", "build_path": null, "deferred": false, "unrendered_config": {"schema": "opensea", "tags": ["chain_ethereum", "level_parse", "proj_opensea"], "materialized": "incremental", "incremental_strategy": "insert_overwrite", "partition_by": ["dt"], "file_format": "parquet", "pre-hook": [{"sql": "create or replace function opensea_openseaensresolver_interfaceimplementer_calldecodeudf as \"io.iftech.sparkudf.hive.opensea_OpenSeaENSResolver_interfaceImplementer_CallDecodeUDF\" using jar \"s3a://ifcrypto/blockchain-dbt/jars/opensea_udf.jar\";"}]}, "created_at": 1650535972.11763, "compiled_sql": "\n\nwith base as (\n    select\n        status==1 as call_success,\n        block_number as call_block_number,\n        block_timestamp as call_block_time,\n        trace_address as call_trace_address,\n        transaction_hash as call_tx_hash,\n        to_address as contract_address,\n        dt,\n        opensea_openseaensresolver_interfaceimplementer_calldecodeudf(unhex_input, unhex_output, '{\"constant\": true, \"inputs\": [{\"name\": \"node\", \"type\": \"bytes32\"}, {\"name\": \"interfaceID\", \"type\": \"bytes4\"}], \"name\": \"interfaceImplementer\", \"outputs\": [{\"name\": \"\", \"type\": \"address\"}], \"payable\": false, \"stateMutability\": \"view\", \"type\": \"function\"}', 'interfaceImplementer') as data\n    from ethereum_stg_ethereum.stg_ethereum__traces\n    where to_address = lower(\"0x9c4e9cce4780062942a7fe34fa2fa7316c872956\")\n    and address_hash = abs(hash(lower(\"0x9c4e9cce4780062942a7fe34fa2fa7316c872956\"))) % 10\n    and selector = \"0x30783132\"\n    and selector_hash = abs(hash(\"0x30783132\")) % 10\n\n    \n),\n\nfinal as (\n    select\n        call_success,\n        call_block_number,\n        call_block_time,\n        call_trace_address,\n        call_tx_hash,\n        contract_address,\n        dt,\n        data.input.*,\n        data.output.*\n    from base\n)\n\nselect /* REPARTITION(dt) */ *\nfrom final", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "ethereum_opensea.OpenSeaENSResolver_call_interfaceImplementer"}, "model.ethereum_source.WyvernExchangeV2_call_hashToSign_": {"raw_sql": "{{\n    config(\n        materialized='incremental',\n        incremental_strategy='insert_overwrite',\n        partition_by=['dt'],\n        file_format='parquet',\n        pre_hook={\n            'sql': 'create or replace function opensea_wyvernexchangev2_hashtosign__calldecodeudf as \"io.iftech.sparkudf.hive.opensea_WyvernExchangeV2_hashToSign__CallDecodeUDF\" using jar \"s3a://ifcrypto/blockchain-dbt/jars/opensea_udf.jar\";'\n        }\n    )\n}}\n\nwith base as (\n    select\n        status==1 as call_success,\n        block_number as call_block_number,\n        block_timestamp as call_block_time,\n        trace_address as call_trace_address,\n        transaction_hash as call_tx_hash,\n        to_address as contract_address,\n        dt,\n        opensea_wyvernexchangev2_hashtosign__calldecodeudf(unhex_input, unhex_output, '{\"constant\": true, \"inputs\": [{\"name\": \"addrs\", \"type\": \"address[7]\"}, {\"name\": \"uints\", \"type\": \"uint256[9]\"}, {\"name\": \"feeMethod\", \"type\": \"uint8\"}, {\"name\": \"side\", \"type\": \"uint8\"}, {\"name\": \"saleKind\", \"type\": \"uint8\"}, {\"name\": \"howToCall\", \"type\": \"uint8\"}, {\"name\": \"calldata\", \"type\": \"bytes\"}, {\"name\": \"replacementPattern\", \"type\": \"bytes\"}, {\"name\": \"staticExtradata\", \"type\": \"bytes\"}], \"name\": \"hashToSign_\", \"outputs\": [{\"name\": \"\", \"type\": \"bytes32\"}], \"payable\": false, \"stateMutability\": \"view\", \"type\": \"function\"}', 'hashToSign_') as data\n    from {{ ref('stg_ethereum__traces') }}\n    where to_address = lower(\"0x7f268357A8c2552623316e2562D90e642bB538E5\")\n    and address_hash = abs(hash(lower(\"0x7f268357A8c2552623316e2562D90e642bB538E5\"))) % 10\n    and selector = \"0x30783764\"\n    and selector_hash = abs(hash(\"0x30783764\")) % 10\n\n    {% if is_incremental() %}\n      and dt = var('dt')\n    {% endif %}\n),\n\nfinal as (\n    select\n        call_success,\n        call_block_number,\n        call_block_time,\n        call_trace_address,\n        call_tx_hash,\n        contract_address,\n        dt,\n        data.input.*,\n        data.output.*\n    from base\n)\n\nselect /* REPARTITION(dt) */ *\nfrom final", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.dbt.is_incremental"], "nodes": ["model.ethereum_source.stg_ethereum__traces"]}, "config": {"enabled": true, "alias": null, "schema": "opensea", "database": null, "tags": ["chain_ethereum", "level_parse", "proj_opensea"], "meta": {}, "materialized": "incremental", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "file_format": "parquet", "partition_by": ["dt"], "incremental_strategy": "insert_overwrite", "post-hook": [], "pre-hook": [{"sql": "create or replace function opensea_wyvernexchangev2_hashtosign__calldecodeudf as \"io.iftech.sparkudf.hive.opensea_WyvernExchangeV2_hashToSign__CallDecodeUDF\" using jar \"s3a://ifcrypto/blockchain-dbt/jars/opensea_udf.jar\";", "transaction": true, "index": null}]}, "database": null, "schema": "ethereum_opensea", "fqn": ["ethereum_source", "codegen", "opensea", "WyvernExchangeV2_call_hashToSign_"], "unique_id": "model.ethereum_source.WyvernExchangeV2_call_hashToSign_", "package_name": "ethereum_source", "root_path": "/Users/songv/Code/jike/web3/dbt_ethereum_source", "path": "codegen/opensea/WyvernExchangeV2_call_hashToSign_.sql", "original_file_path": "models/codegen/opensea/WyvernExchangeV2_call_hashToSign_.sql", "name": "WyvernExchangeV2_call_hashToSign_", "alias": "WyvernExchangeV2_call_hashToSign_", "checksum": {"name": "sha256", "checksum": "a358fd9cb549bf8c36c99b975c206dbd1ca5ef56b4212d9f41b0f93aa5fe037e"}, "tags": ["chain_ethereum", "level_parse", "proj_opensea"], "refs": [["stg_ethereum__traces"]], "sources": [], "description": "", "columns": {"addrs": {"name": "addrs", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "uints": {"name": "uints", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "feeMethod": {"name": "feeMethod", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "side": {"name": "side", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "saleKind": {"name": "saleKind", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "howToCall": {"name": "howToCall", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "calldata": {"name": "calldata", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "replacementPattern": {"name": "replacementPattern", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "staticExtradata": {"name": "staticExtradata", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "output_0": {"name": "output_0", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "call_success": {"name": "call_success", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "call_block_number": {"name": "call_block_number", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "call_block_time": {"name": "call_block_time", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "call_trace_address": {"name": "call_trace_address", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "call_tx_hash": {"name": "call_tx_hash", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "contract_address": {"name": "contract_address", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "dt": {"name": "dt", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "ethereum_source://models/codegen/opensea/schema.yml", "compiled_path": "target/compiled/ethereum_source/models/codegen/opensea/WyvernExchangeV2_call_hashToSign_.sql", "build_path": null, "deferred": false, "unrendered_config": {"schema": "opensea", "tags": ["chain_ethereum", "level_parse", "proj_opensea"], "materialized": "incremental", "incremental_strategy": "insert_overwrite", "partition_by": ["dt"], "file_format": "parquet", "pre-hook": [{"sql": "create or replace function opensea_wyvernexchangev2_hashtosign__calldecodeudf as \"io.iftech.sparkudf.hive.opensea_WyvernExchangeV2_hashToSign__CallDecodeUDF\" using jar \"s3a://ifcrypto/blockchain-dbt/jars/opensea_udf.jar\";"}]}, "created_at": 1650535972.0640829, "compiled_sql": "\n\nwith base as (\n    select\n        status==1 as call_success,\n        block_number as call_block_number,\n        block_timestamp as call_block_time,\n        trace_address as call_trace_address,\n        transaction_hash as call_tx_hash,\n        to_address as contract_address,\n        dt,\n        opensea_wyvernexchangev2_hashtosign__calldecodeudf(unhex_input, unhex_output, '{\"constant\": true, \"inputs\": [{\"name\": \"addrs\", \"type\": \"address[7]\"}, {\"name\": \"uints\", \"type\": \"uint256[9]\"}, {\"name\": \"feeMethod\", \"type\": \"uint8\"}, {\"name\": \"side\", \"type\": \"uint8\"}, {\"name\": \"saleKind\", \"type\": \"uint8\"}, {\"name\": \"howToCall\", \"type\": \"uint8\"}, {\"name\": \"calldata\", \"type\": \"bytes\"}, {\"name\": \"replacementPattern\", \"type\": \"bytes\"}, {\"name\": \"staticExtradata\", \"type\": \"bytes\"}], \"name\": \"hashToSign_\", \"outputs\": [{\"name\": \"\", \"type\": \"bytes32\"}], \"payable\": false, \"stateMutability\": \"view\", \"type\": \"function\"}', 'hashToSign_') as data\n    from ethereum_stg_ethereum.stg_ethereum__traces\n    where to_address = lower(\"0x7f268357A8c2552623316e2562D90e642bB538E5\")\n    and address_hash = abs(hash(lower(\"0x7f268357A8c2552623316e2562D90e642bB538E5\"))) % 10\n    and selector = \"0x30783764\"\n    and selector_hash = abs(hash(\"0x30783764\")) % 10\n\n    \n),\n\nfinal as (\n    select\n        call_success,\n        call_block_number,\n        call_block_time,\n        call_trace_address,\n        call_tx_hash,\n        contract_address,\n        dt,\n        data.input.*,\n        data.output.*\n    from base\n)\n\nselect /* REPARTITION(dt) */ *\nfrom final", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "ethereum_opensea.WyvernExchangeV2_call_hashToSign_"}, "model.ethereum_source.WyvernExchangeV2_call_changeProtocolFeeRecipient": {"raw_sql": "{{\n    config(\n        materialized='incremental',\n        incremental_strategy='insert_overwrite',\n        partition_by=['dt'],\n        file_format='parquet',\n        pre_hook={\n            'sql': 'create or replace function opensea_wyvernexchangev2_changeprotocolfeerecipient_calldecodeudf as \"io.iftech.sparkudf.hive.opensea_WyvernExchangeV2_changeProtocolFeeRecipient_CallDecodeUDF\" using jar \"s3a://ifcrypto/blockchain-dbt/jars/opensea_udf.jar\";'\n        }\n    )\n}}\n\nwith base as (\n    select\n        status==1 as call_success,\n        block_number as call_block_number,\n        block_timestamp as call_block_time,\n        trace_address as call_trace_address,\n        transaction_hash as call_tx_hash,\n        to_address as contract_address,\n        dt,\n        opensea_wyvernexchangev2_changeprotocolfeerecipient_calldecodeudf(unhex_input, unhex_output, '{\"constant\": false, \"inputs\": [{\"name\": \"newProtocolFeeRecipient\", \"type\": \"address\"}], \"name\": \"changeProtocolFeeRecipient\", \"outputs\": [], \"payable\": false, \"stateMutability\": \"nonpayable\", \"type\": \"function\"}', 'changeProtocolFeeRecipient') as data\n    from {{ ref('stg_ethereum__traces') }}\n    where to_address = lower(\"0x7f268357A8c2552623316e2562D90e642bB538E5\")\n    and address_hash = abs(hash(lower(\"0x7f268357A8c2552623316e2562D90e642bB538E5\"))) % 10\n    and selector = \"0x30783531\"\n    and selector_hash = abs(hash(\"0x30783531\")) % 10\n\n    {% if is_incremental() %}\n      and dt = var('dt')\n    {% endif %}\n),\n\nfinal as (\n    select\n        call_success,\n        call_block_number,\n        call_block_time,\n        call_trace_address,\n        call_tx_hash,\n        contract_address,\n        dt,\n        data.input.*,\n        data.output.*\n    from base\n)\n\nselect /* REPARTITION(dt) */ *\nfrom final", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.dbt.is_incremental"], "nodes": ["model.ethereum_source.stg_ethereum__traces"]}, "config": {"enabled": true, "alias": null, "schema": "opensea", "database": null, "tags": ["chain_ethereum", "level_parse", "proj_opensea"], "meta": {}, "materialized": "incremental", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "file_format": "parquet", "partition_by": ["dt"], "incremental_strategy": "insert_overwrite", "post-hook": [], "pre-hook": [{"sql": "create or replace function opensea_wyvernexchangev2_changeprotocolfeerecipient_calldecodeudf as \"io.iftech.sparkudf.hive.opensea_WyvernExchangeV2_changeProtocolFeeRecipient_CallDecodeUDF\" using jar \"s3a://ifcrypto/blockchain-dbt/jars/opensea_udf.jar\";", "transaction": true, "index": null}]}, "database": null, "schema": "ethereum_opensea", "fqn": ["ethereum_source", "codegen", "opensea", "WyvernExchangeV2_call_changeProtocolFeeRecipient"], "unique_id": "model.ethereum_source.WyvernExchangeV2_call_changeProtocolFeeRecipient", "package_name": "ethereum_source", "root_path": "/Users/songv/Code/jike/web3/dbt_ethereum_source", "path": "codegen/opensea/WyvernExchangeV2_call_changeProtocolFeeRecipient.sql", "original_file_path": "models/codegen/opensea/WyvernExchangeV2_call_changeProtocolFeeRecipient.sql", "name": "WyvernExchangeV2_call_changeProtocolFeeRecipient", "alias": "WyvernExchangeV2_call_changeProtocolFeeRecipient", "checksum": {"name": "sha256", "checksum": "d91955f0696042f599a0e38f95a15941420d913e42ce91bc7b59574547922e14"}, "tags": ["chain_ethereum", "level_parse", "proj_opensea"], "refs": [["stg_ethereum__traces"]], "sources": [], "description": "", "columns": {"newProtocolFeeRecipient": {"name": "newProtocolFeeRecipient", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "call_success": {"name": "call_success", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "call_block_number": {"name": "call_block_number", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "call_block_time": {"name": "call_block_time", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "call_trace_address": {"name": "call_trace_address", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "call_tx_hash": {"name": "call_tx_hash", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "contract_address": {"name": "contract_address", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "dt": {"name": "dt", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "ethereum_source://models/codegen/opensea/schema.yml", "compiled_path": "target/compiled/ethereum_source/models/codegen/opensea/WyvernExchangeV2_call_changeProtocolFeeRecipient.sql", "build_path": null, "deferred": false, "unrendered_config": {"schema": "opensea", "tags": ["chain_ethereum", "level_parse", "proj_opensea"], "materialized": "incremental", "incremental_strategy": "insert_overwrite", "partition_by": ["dt"], "file_format": "parquet", "pre-hook": [{"sql": "create or replace function opensea_wyvernexchangev2_changeprotocolfeerecipient_calldecodeudf as \"io.iftech.sparkudf.hive.opensea_WyvernExchangeV2_changeProtocolFeeRecipient_CallDecodeUDF\" using jar \"s3a://ifcrypto/blockchain-dbt/jars/opensea_udf.jar\";"}]}, "created_at": 1650535972.03426, "compiled_sql": "\n\nwith base as (\n    select\n        status==1 as call_success,\n        block_number as call_block_number,\n        block_timestamp as call_block_time,\n        trace_address as call_trace_address,\n        transaction_hash as call_tx_hash,\n        to_address as contract_address,\n        dt,\n        opensea_wyvernexchangev2_changeprotocolfeerecipient_calldecodeudf(unhex_input, unhex_output, '{\"constant\": false, \"inputs\": [{\"name\": \"newProtocolFeeRecipient\", \"type\": \"address\"}], \"name\": \"changeProtocolFeeRecipient\", \"outputs\": [], \"payable\": false, \"stateMutability\": \"nonpayable\", \"type\": \"function\"}', 'changeProtocolFeeRecipient') as data\n    from ethereum_stg_ethereum.stg_ethereum__traces\n    where to_address = lower(\"0x7f268357A8c2552623316e2562D90e642bB538E5\")\n    and address_hash = abs(hash(lower(\"0x7f268357A8c2552623316e2562D90e642bB538E5\"))) % 10\n    and selector = \"0x30783531\"\n    and selector_hash = abs(hash(\"0x30783531\")) % 10\n\n    \n),\n\nfinal as (\n    select\n        call_success,\n        call_block_number,\n        call_block_time,\n        call_trace_address,\n        call_tx_hash,\n        contract_address,\n        dt,\n        data.input.*,\n        data.output.*\n    from base\n)\n\nselect /* REPARTITION(dt) */ *\nfrom final", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "ethereum_opensea.WyvernExchangeV2_call_changeProtocolFeeRecipient"}, "model.ethereum_source.WyvernExchangeV1_call_protocolFeeRecipient": {"raw_sql": "{{\n    config(\n        materialized='incremental',\n        incremental_strategy='insert_overwrite',\n        partition_by=['dt'],\n        file_format='parquet',\n        pre_hook={\n            'sql': 'create or replace function opensea_wyvernexchangev1_protocolfeerecipient_calldecodeudf as \"io.iftech.sparkudf.hive.opensea_WyvernExchangeV1_protocolFeeRecipient_CallDecodeUDF\" using jar \"s3a://ifcrypto/blockchain-dbt/jars/opensea_udf.jar\";'\n        }\n    )\n}}\n\nwith base as (\n    select\n        status==1 as call_success,\n        block_number as call_block_number,\n        block_timestamp as call_block_time,\n        trace_address as call_trace_address,\n        transaction_hash as call_tx_hash,\n        to_address as contract_address,\n        dt,\n        opensea_wyvernexchangev1_protocolfeerecipient_calldecodeudf(unhex_input, unhex_output, '{\"constant\": true, \"inputs\": [], \"name\": \"protocolFeeRecipient\", \"outputs\": [{\"name\": \"\", \"type\": \"address\"}], \"payable\": false, \"stateMutability\": \"view\", \"type\": \"function\"}', 'protocolFeeRecipient') as data\n    from {{ ref('stg_ethereum__traces') }}\n    where to_address = lower(\"0x7Be8076f4EA4A4AD08075C2508e481d6C946D12b\")\n    and address_hash = abs(hash(lower(\"0x7Be8076f4EA4A4AD08075C2508e481d6C946D12b\"))) % 10\n    and selector = \"0x30783634\"\n    and selector_hash = abs(hash(\"0x30783634\")) % 10\n\n    {% if is_incremental() %}\n      and dt = var('dt')\n    {% endif %}\n),\n\nfinal as (\n    select\n        call_success,\n        call_block_number,\n        call_block_time,\n        call_trace_address,\n        call_tx_hash,\n        contract_address,\n        dt,\n        data.input.*,\n        data.output.*\n    from base\n)\n\nselect /* REPARTITION(dt) */ *\nfrom final", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.dbt.is_incremental"], "nodes": ["model.ethereum_source.stg_ethereum__traces"]}, "config": {"enabled": true, "alias": null, "schema": "opensea", "database": null, "tags": ["chain_ethereum", "level_parse", "proj_opensea"], "meta": {}, "materialized": "incremental", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "file_format": "parquet", "partition_by": ["dt"], "incremental_strategy": "insert_overwrite", "post-hook": [], "pre-hook": [{"sql": "create or replace function opensea_wyvernexchangev1_protocolfeerecipient_calldecodeudf as \"io.iftech.sparkudf.hive.opensea_WyvernExchangeV1_protocolFeeRecipient_CallDecodeUDF\" using jar \"s3a://ifcrypto/blockchain-dbt/jars/opensea_udf.jar\";", "transaction": true, "index": null}]}, "database": null, "schema": "ethereum_opensea", "fqn": ["ethereum_source", "codegen", "opensea", "WyvernExchangeV1_call_protocolFeeRecipient"], "unique_id": "model.ethereum_source.WyvernExchangeV1_call_protocolFeeRecipient", "package_name": "ethereum_source", "root_path": "/Users/songv/Code/jike/web3/dbt_ethereum_source", "path": "codegen/opensea/WyvernExchangeV1_call_protocolFeeRecipient.sql", "original_file_path": "models/codegen/opensea/WyvernExchangeV1_call_protocolFeeRecipient.sql", "name": "WyvernExchangeV1_call_protocolFeeRecipient", "alias": "WyvernExchangeV1_call_protocolFeeRecipient", "checksum": {"name": "sha256", "checksum": "2683b1a6e42ad1de45ea2e6aa709bd9a7c19eb7be39b14971c5d68c6ffc667b6"}, "tags": ["chain_ethereum", "level_parse", "proj_opensea"], "refs": [["stg_ethereum__traces"]], "sources": [], "description": "", "columns": {"output_0": {"name": "output_0", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "call_success": {"name": "call_success", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "call_block_number": {"name": "call_block_number", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "call_block_time": {"name": "call_block_time", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "call_trace_address": {"name": "call_trace_address", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "call_tx_hash": {"name": "call_tx_hash", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "contract_address": {"name": "contract_address", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "dt": {"name": "dt", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "ethereum_source://models/codegen/opensea/schema.yml", "compiled_path": "target/compiled/ethereum_source/models/codegen/opensea/WyvernExchangeV1_call_protocolFeeRecipient.sql", "build_path": null, "deferred": false, "unrendered_config": {"schema": "opensea", "tags": ["chain_ethereum", "level_parse", "proj_opensea"], "materialized": "incremental", "incremental_strategy": "insert_overwrite", "partition_by": ["dt"], "file_format": "parquet", "pre-hook": [{"sql": "create or replace function opensea_wyvernexchangev1_protocolfeerecipient_calldecodeudf as \"io.iftech.sparkudf.hive.opensea_WyvernExchangeV1_protocolFeeRecipient_CallDecodeUDF\" using jar \"s3a://ifcrypto/blockchain-dbt/jars/opensea_udf.jar\";"}]}, "created_at": 1650535971.9589581, "compiled_sql": "\n\nwith base as (\n    select\n        status==1 as call_success,\n        block_number as call_block_number,\n        block_timestamp as call_block_time,\n        trace_address as call_trace_address,\n        transaction_hash as call_tx_hash,\n        to_address as contract_address,\n        dt,\n        opensea_wyvernexchangev1_protocolfeerecipient_calldecodeudf(unhex_input, unhex_output, '{\"constant\": true, \"inputs\": [], \"name\": \"protocolFeeRecipient\", \"outputs\": [{\"name\": \"\", \"type\": \"address\"}], \"payable\": false, \"stateMutability\": \"view\", \"type\": \"function\"}', 'protocolFeeRecipient') as data\n    from ethereum_stg_ethereum.stg_ethereum__traces\n    where to_address = lower(\"0x7Be8076f4EA4A4AD08075C2508e481d6C946D12b\")\n    and address_hash = abs(hash(lower(\"0x7Be8076f4EA4A4AD08075C2508e481d6C946D12b\"))) % 10\n    and selector = \"0x30783634\"\n    and selector_hash = abs(hash(\"0x30783634\")) % 10\n\n    \n),\n\nfinal as (\n    select\n        call_success,\n        call_block_number,\n        call_block_time,\n        call_trace_address,\n        call_tx_hash,\n        contract_address,\n        dt,\n        data.input.*,\n        data.output.*\n    from base\n)\n\nselect /* REPARTITION(dt) */ *\nfrom final", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "ethereum_opensea.WyvernExchangeV1_call_protocolFeeRecipient"}, "model.ethereum_source.WyvernExchangeV2_call_orderCalldataCanMatch": {"raw_sql": "{{\n    config(\n        materialized='incremental',\n        incremental_strategy='insert_overwrite',\n        partition_by=['dt'],\n        file_format='parquet',\n        pre_hook={\n            'sql': 'create or replace function opensea_wyvernexchangev2_ordercalldatacanmatch_calldecodeudf as \"io.iftech.sparkudf.hive.opensea_WyvernExchangeV2_orderCalldataCanMatch_CallDecodeUDF\" using jar \"s3a://ifcrypto/blockchain-dbt/jars/opensea_udf.jar\";'\n        }\n    )\n}}\n\nwith base as (\n    select\n        status==1 as call_success,\n        block_number as call_block_number,\n        block_timestamp as call_block_time,\n        trace_address as call_trace_address,\n        transaction_hash as call_tx_hash,\n        to_address as contract_address,\n        dt,\n        opensea_wyvernexchangev2_ordercalldatacanmatch_calldecodeudf(unhex_input, unhex_output, '{\"constant\": true, \"inputs\": [{\"name\": \"buyCalldata\", \"type\": \"bytes\"}, {\"name\": \"buyReplacementPattern\", \"type\": \"bytes\"}, {\"name\": \"sellCalldata\", \"type\": \"bytes\"}, {\"name\": \"sellReplacementPattern\", \"type\": \"bytes\"}], \"name\": \"orderCalldataCanMatch\", \"outputs\": [{\"name\": \"\", \"type\": \"bool\"}], \"payable\": false, \"stateMutability\": \"pure\", \"type\": \"function\"}', 'orderCalldataCanMatch') as data\n    from {{ ref('stg_ethereum__traces') }}\n    where to_address = lower(\"0x7f268357A8c2552623316e2562D90e642bB538E5\")\n    and address_hash = abs(hash(lower(\"0x7f268357A8c2552623316e2562D90e642bB538E5\"))) % 10\n    and selector = \"0x30783536\"\n    and selector_hash = abs(hash(\"0x30783536\")) % 10\n\n    {% if is_incremental() %}\n      and dt = var('dt')\n    {% endif %}\n),\n\nfinal as (\n    select\n        call_success,\n        call_block_number,\n        call_block_time,\n        call_trace_address,\n        call_tx_hash,\n        contract_address,\n        dt,\n        data.input.*,\n        data.output.*\n    from base\n)\n\nselect /* REPARTITION(dt) */ *\nfrom final", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.dbt.is_incremental"], "nodes": ["model.ethereum_source.stg_ethereum__traces"]}, "config": {"enabled": true, "alias": null, "schema": "opensea", "database": null, "tags": ["chain_ethereum", "level_parse", "proj_opensea"], "meta": {}, "materialized": "incremental", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "file_format": "parquet", "partition_by": ["dt"], "incremental_strategy": "insert_overwrite", "post-hook": [], "pre-hook": [{"sql": "create or replace function opensea_wyvernexchangev2_ordercalldatacanmatch_calldecodeudf as \"io.iftech.sparkudf.hive.opensea_WyvernExchangeV2_orderCalldataCanMatch_CallDecodeUDF\" using jar \"s3a://ifcrypto/blockchain-dbt/jars/opensea_udf.jar\";", "transaction": true, "index": null}]}, "database": null, "schema": "ethereum_opensea", "fqn": ["ethereum_source", "codegen", "opensea", "WyvernExchangeV2_call_orderCalldataCanMatch"], "unique_id": "model.ethereum_source.WyvernExchangeV2_call_orderCalldataCanMatch", "package_name": "ethereum_source", "root_path": "/Users/songv/Code/jike/web3/dbt_ethereum_source", "path": "codegen/opensea/WyvernExchangeV2_call_orderCalldataCanMatch.sql", "original_file_path": "models/codegen/opensea/WyvernExchangeV2_call_orderCalldataCanMatch.sql", "name": "WyvernExchangeV2_call_orderCalldataCanMatch", "alias": "WyvernExchangeV2_call_orderCalldataCanMatch", "checksum": {"name": "sha256", "checksum": "cc3705929e1c42f6c58798b2d0e465fb2d08023223c0ad094db1bedbd844ce33"}, "tags": ["chain_ethereum", "level_parse", "proj_opensea"], "refs": [["stg_ethereum__traces"]], "sources": [], "description": "", "columns": {"buyCalldata": {"name": "buyCalldata", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "buyReplacementPattern": {"name": "buyReplacementPattern", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "sellCalldata": {"name": "sellCalldata", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "sellReplacementPattern": {"name": "sellReplacementPattern", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "output_0": {"name": "output_0", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "call_success": {"name": "call_success", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "call_block_number": {"name": "call_block_number", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "call_block_time": {"name": "call_block_time", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "call_trace_address": {"name": "call_trace_address", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "call_tx_hash": {"name": "call_tx_hash", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "contract_address": {"name": "contract_address", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "dt": {"name": "dt", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "ethereum_source://models/codegen/opensea/schema.yml", "compiled_path": "target/compiled/ethereum_source/models/codegen/opensea/WyvernExchangeV2_call_orderCalldataCanMatch.sql", "build_path": null, "deferred": false, "unrendered_config": {"schema": "opensea", "tags": ["chain_ethereum", "level_parse", "proj_opensea"], "materialized": "incremental", "incremental_strategy": "insert_overwrite", "partition_by": ["dt"], "file_format": "parquet", "pre-hook": [{"sql": "create or replace function opensea_wyvernexchangev2_ordercalldatacanmatch_calldecodeudf as \"io.iftech.sparkudf.hive.opensea_WyvernExchangeV2_orderCalldataCanMatch_CallDecodeUDF\" using jar \"s3a://ifcrypto/blockchain-dbt/jars/opensea_udf.jar\";"}]}, "created_at": 1650535972.038103, "compiled_sql": "\n\nwith base as (\n    select\n        status==1 as call_success,\n        block_number as call_block_number,\n        block_timestamp as call_block_time,\n        trace_address as call_trace_address,\n        transaction_hash as call_tx_hash,\n        to_address as contract_address,\n        dt,\n        opensea_wyvernexchangev2_ordercalldatacanmatch_calldecodeudf(unhex_input, unhex_output, '{\"constant\": true, \"inputs\": [{\"name\": \"buyCalldata\", \"type\": \"bytes\"}, {\"name\": \"buyReplacementPattern\", \"type\": \"bytes\"}, {\"name\": \"sellCalldata\", \"type\": \"bytes\"}, {\"name\": \"sellReplacementPattern\", \"type\": \"bytes\"}], \"name\": \"orderCalldataCanMatch\", \"outputs\": [{\"name\": \"\", \"type\": \"bool\"}], \"payable\": false, \"stateMutability\": \"pure\", \"type\": \"function\"}', 'orderCalldataCanMatch') as data\n    from ethereum_stg_ethereum.stg_ethereum__traces\n    where to_address = lower(\"0x7f268357A8c2552623316e2562D90e642bB538E5\")\n    and address_hash = abs(hash(lower(\"0x7f268357A8c2552623316e2562D90e642bB538E5\"))) % 10\n    and selector = \"0x30783536\"\n    and selector_hash = abs(hash(\"0x30783536\")) % 10\n\n    \n),\n\nfinal as (\n    select\n        call_success,\n        call_block_number,\n        call_block_time,\n        call_trace_address,\n        call_tx_hash,\n        contract_address,\n        dt,\n        data.input.*,\n        data.output.*\n    from base\n)\n\nselect /* REPARTITION(dt) */ *\nfrom final", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "ethereum_opensea.WyvernExchangeV2_call_orderCalldataCanMatch"}, "model.ethereum_source.OpenSeaENSResolver_evt_ContenthashChanged": {"raw_sql": "{{\n    config(\n        materialized='incremental',\n        incremental_strategy='insert_overwrite',\n        partition_by=['dt'],\n        file_format='parquet',\n        pre_hook={\n            'sql': 'create or replace function opensea_openseaensresolver_contenthashchanged_eventdecodeudf as \"io.iftech.sparkudf.hive.opensea_OpenSeaENSResolver_ContenthashChanged_EventDecodeUDF\" using jar \"s3a://ifcrypto/blockchain-dbt/jars/opensea_udf.jar\";'\n        }\n    )\n}}\n\nwith base as (\n    select\n        block_number as evt_block_number,\n        block_timestamp as evt_block_time,\n        log_index as evt_index,\n        transaction_hash as evt_tx_hash,\n        address as contract_address,\n        dt,\n        opensea_openseaensresolver_contenthashchanged_eventdecodeudf(unhex_data, topics_arr, '{\"anonymous\": false, \"inputs\": [{\"indexed\": true, \"name\": \"node\", \"type\": \"bytes32\"}, {\"indexed\": false, \"name\": \"hash\", \"type\": \"bytes\"}], \"name\": \"ContenthashChanged\", \"type\": \"event\"}', 'ContenthashChanged') as data\n    from {{ ref('stg_ethereum__logs') }}\n    where address = lower(\"0x9c4e9cce4780062942a7fe34fa2fa7316c872956\")\n    and address_hash = abs(hash(lower(\"0x9c4e9cce4780062942a7fe34fa2fa7316c872956\"))) % 10\n    and selector = \"0xe379c1624ed7e714cc0937528a32359d69d5281337765313dba4e081b72d7578\"\n    and selector_hash = abs(hash(\"0xe379c1624ed7e714cc0937528a32359d69d5281337765313dba4e081b72d7578\")) % 10\n\n    {% if is_incremental() %}\n      and dt = var('dt')\n    {% endif %}\n),\n\nfinal as (\n    select\n        evt_block_number,\n        evt_block_time,\n        evt_index,\n        evt_tx_hash,\n        contract_address,\n        dt,\n        data.input.*\n    from base\n)\n\nselect /* REPARTITION(dt) */ *\nfrom final", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.dbt.is_incremental"], "nodes": ["model.ethereum_source.stg_ethereum__logs"]}, "config": {"enabled": true, "alias": null, "schema": "opensea", "database": null, "tags": ["chain_ethereum", "level_parse", "proj_opensea"], "meta": {}, "materialized": "incremental", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "file_format": "parquet", "partition_by": ["dt"], "incremental_strategy": "insert_overwrite", "post-hook": [], "pre-hook": [{"sql": "create or replace function opensea_openseaensresolver_contenthashchanged_eventdecodeudf as \"io.iftech.sparkudf.hive.opensea_OpenSeaENSResolver_ContenthashChanged_EventDecodeUDF\" using jar \"s3a://ifcrypto/blockchain-dbt/jars/opensea_udf.jar\";", "transaction": true, "index": null}]}, "database": null, "schema": "ethereum_opensea", "fqn": ["ethereum_source", "codegen", "opensea", "OpenSeaENSResolver_evt_ContenthashChanged"], "unique_id": "model.ethereum_source.OpenSeaENSResolver_evt_ContenthashChanged", "package_name": "ethereum_source", "root_path": "/Users/songv/Code/jike/web3/dbt_ethereum_source", "path": "codegen/opensea/OpenSeaENSResolver_evt_ContenthashChanged.sql", "original_file_path": "models/codegen/opensea/OpenSeaENSResolver_evt_ContenthashChanged.sql", "name": "OpenSeaENSResolver_evt_ContenthashChanged", "alias": "OpenSeaENSResolver_evt_ContenthashChanged", "checksum": {"name": "sha256", "checksum": "24e082d8075b300c6030e6103121816e902f53be3c5850194ce3bc95a744bc34"}, "tags": ["chain_ethereum", "level_parse", "proj_opensea"], "refs": [["stg_ethereum__logs"]], "sources": [], "description": "", "columns": {"node": {"name": "node", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "hash": {"name": "hash", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "evt_block_number": {"name": "evt_block_number", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "evt_block_time": {"name": "evt_block_time", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "evt_index": {"name": "evt_index", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "evt_tx_hash": {"name": "evt_tx_hash", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "contract_address": {"name": "contract_address", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "dt": {"name": "dt", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "ethereum_source://models/codegen/opensea/schema.yml", "compiled_path": "target/compiled/ethereum_source/models/codegen/opensea/OpenSeaENSResolver_evt_ContenthashChanged.sql", "build_path": null, "deferred": false, "unrendered_config": {"schema": "opensea", "tags": ["chain_ethereum", "level_parse", "proj_opensea"], "materialized": "incremental", "incremental_strategy": "insert_overwrite", "partition_by": ["dt"], "file_format": "parquet", "pre-hook": [{"sql": "create or replace function opensea_openseaensresolver_contenthashchanged_eventdecodeudf as \"io.iftech.sparkudf.hive.opensea_OpenSeaENSResolver_ContenthashChanged_EventDecodeUDF\" using jar \"s3a://ifcrypto/blockchain-dbt/jars/opensea_udf.jar\";"}]}, "created_at": 1650535972.107073, "compiled_sql": "\n\nwith base as (\n    select\n        block_number as evt_block_number,\n        block_timestamp as evt_block_time,\n        log_index as evt_index,\n        transaction_hash as evt_tx_hash,\n        address as contract_address,\n        dt,\n        opensea_openseaensresolver_contenthashchanged_eventdecodeudf(unhex_data, topics_arr, '{\"anonymous\": false, \"inputs\": [{\"indexed\": true, \"name\": \"node\", \"type\": \"bytes32\"}, {\"indexed\": false, \"name\": \"hash\", \"type\": \"bytes\"}], \"name\": \"ContenthashChanged\", \"type\": \"event\"}', 'ContenthashChanged') as data\n    from ethereum_stg_ethereum.stg_ethereum__logs\n    where address = lower(\"0x9c4e9cce4780062942a7fe34fa2fa7316c872956\")\n    and address_hash = abs(hash(lower(\"0x9c4e9cce4780062942a7fe34fa2fa7316c872956\"))) % 10\n    and selector = \"0xe379c1624ed7e714cc0937528a32359d69d5281337765313dba4e081b72d7578\"\n    and selector_hash = abs(hash(\"0xe379c1624ed7e714cc0937528a32359d69d5281337765313dba4e081b72d7578\")) % 10\n\n    \n),\n\nfinal as (\n    select\n        evt_block_number,\n        evt_block_time,\n        evt_index,\n        evt_tx_hash,\n        contract_address,\n        dt,\n        data.input.*\n    from base\n)\n\nselect /* REPARTITION(dt) */ *\nfrom final", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "ethereum_opensea.OpenSeaENSResolver_evt_ContenthashChanged"}, "model.ethereum_source.WyvernExchangeV2_evt_OwnershipTransferred": {"raw_sql": "{{\n    config(\n        materialized='incremental',\n        incremental_strategy='insert_overwrite',\n        partition_by=['dt'],\n        file_format='parquet',\n        pre_hook={\n            'sql': 'create or replace function opensea_wyvernexchangev2_ownershiptransferred_eventdecodeudf as \"io.iftech.sparkudf.hive.opensea_WyvernExchangeV2_OwnershipTransferred_EventDecodeUDF\" using jar \"s3a://ifcrypto/blockchain-dbt/jars/opensea_udf.jar\";'\n        }\n    )\n}}\n\nwith base as (\n    select\n        block_number as evt_block_number,\n        block_timestamp as evt_block_time,\n        log_index as evt_index,\n        transaction_hash as evt_tx_hash,\n        address as contract_address,\n        dt,\n        opensea_wyvernexchangev2_ownershiptransferred_eventdecodeudf(unhex_data, topics_arr, '{\"anonymous\": false, \"inputs\": [{\"indexed\": true, \"name\": \"previousOwner\", \"type\": \"address\"}, {\"indexed\": true, \"name\": \"newOwner\", \"type\": \"address\"}], \"name\": \"OwnershipTransferred\", \"type\": \"event\"}', 'OwnershipTransferred') as data\n    from {{ ref('stg_ethereum__logs') }}\n    where address = lower(\"0x7f268357A8c2552623316e2562D90e642bB538E5\")\n    and address_hash = abs(hash(lower(\"0x7f268357A8c2552623316e2562D90e642bB538E5\"))) % 10\n    and selector = \"0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0\"\n    and selector_hash = abs(hash(\"0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0\")) % 10\n\n    {% if is_incremental() %}\n      and dt = var('dt')\n    {% endif %}\n),\n\nfinal as (\n    select\n        evt_block_number,\n        evt_block_time,\n        evt_index,\n        evt_tx_hash,\n        contract_address,\n        dt,\n        data.input.*\n    from base\n)\n\nselect /* REPARTITION(dt) */ *\nfrom final", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.dbt.is_incremental"], "nodes": ["model.ethereum_source.stg_ethereum__logs"]}, "config": {"enabled": true, "alias": null, "schema": "opensea", "database": null, "tags": ["chain_ethereum", "level_parse", "proj_opensea"], "meta": {}, "materialized": "incremental", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "file_format": "parquet", "partition_by": ["dt"], "incremental_strategy": "insert_overwrite", "post-hook": [], "pre-hook": [{"sql": "create or replace function opensea_wyvernexchangev2_ownershiptransferred_eventdecodeudf as \"io.iftech.sparkudf.hive.opensea_WyvernExchangeV2_OwnershipTransferred_EventDecodeUDF\" using jar \"s3a://ifcrypto/blockchain-dbt/jars/opensea_udf.jar\";", "transaction": true, "index": null}]}, "database": null, "schema": "ethereum_opensea", "fqn": ["ethereum_source", "codegen", "opensea", "WyvernExchangeV2_evt_OwnershipTransferred"], "unique_id": "model.ethereum_source.WyvernExchangeV2_evt_OwnershipTransferred", "package_name": "ethereum_source", "root_path": "/Users/songv/Code/jike/web3/dbt_ethereum_source", "path": "codegen/opensea/WyvernExchangeV2_evt_OwnershipTransferred.sql", "original_file_path": "models/codegen/opensea/WyvernExchangeV2_evt_OwnershipTransferred.sql", "name": "WyvernExchangeV2_evt_OwnershipTransferred", "alias": "WyvernExchangeV2_evt_OwnershipTransferred", "checksum": {"name": "sha256", "checksum": "65f1a37a3b9d77d81c3242bc072433af4e8b5e3204b86354f24ee5e53aba9918"}, "tags": ["chain_ethereum", "level_parse", "proj_opensea"], "refs": [["stg_ethereum__logs"]], "sources": [], "description": "", "columns": {"previousOwner": {"name": "previousOwner", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "newOwner": {"name": "newOwner", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "evt_block_number": {"name": "evt_block_number", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "evt_block_time": {"name": "evt_block_time", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "evt_index": {"name": "evt_index", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "evt_tx_hash": {"name": "evt_tx_hash", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "contract_address": {"name": "contract_address", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "dt": {"name": "dt", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "ethereum_source://models/codegen/opensea/schema.yml", "compiled_path": "target/compiled/ethereum_source/models/codegen/opensea/WyvernExchangeV2_evt_OwnershipTransferred.sql", "build_path": null, "deferred": false, "unrendered_config": {"schema": "opensea", "tags": ["chain_ethereum", "level_parse", "proj_opensea"], "materialized": "incremental", "incremental_strategy": "insert_overwrite", "partition_by": ["dt"], "file_format": "parquet", "pre-hook": [{"sql": "create or replace function opensea_wyvernexchangev2_ownershiptransferred_eventdecodeudf as \"io.iftech.sparkudf.hive.opensea_WyvernExchangeV2_OwnershipTransferred_EventDecodeUDF\" using jar \"s3a://ifcrypto/blockchain-dbt/jars/opensea_udf.jar\";"}]}, "created_at": 1650535972.014291, "compiled_sql": "\n\nwith base as (\n    select\n        block_number as evt_block_number,\n        block_timestamp as evt_block_time,\n        log_index as evt_index,\n        transaction_hash as evt_tx_hash,\n        address as contract_address,\n        dt,\n        opensea_wyvernexchangev2_ownershiptransferred_eventdecodeudf(unhex_data, topics_arr, '{\"anonymous\": false, \"inputs\": [{\"indexed\": true, \"name\": \"previousOwner\", \"type\": \"address\"}, {\"indexed\": true, \"name\": \"newOwner\", \"type\": \"address\"}], \"name\": \"OwnershipTransferred\", \"type\": \"event\"}', 'OwnershipTransferred') as data\n    from ethereum_stg_ethereum.stg_ethereum__logs\n    where address = lower(\"0x7f268357A8c2552623316e2562D90e642bB538E5\")\n    and address_hash = abs(hash(lower(\"0x7f268357A8c2552623316e2562D90e642bB538E5\"))) % 10\n    and selector = \"0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0\"\n    and selector_hash = abs(hash(\"0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0\")) % 10\n\n    \n),\n\nfinal as (\n    select\n        evt_block_number,\n        evt_block_time,\n        evt_index,\n        evt_tx_hash,\n        contract_address,\n        dt,\n        data.input.*\n    from base\n)\n\nselect /* REPARTITION(dt) */ *\nfrom final", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "ethereum_opensea.WyvernExchangeV2_evt_OwnershipTransferred"}, "model.ethereum_source.WyvernExchangeV1_call_version": {"raw_sql": "{{\n    config(\n        materialized='incremental',\n        incremental_strategy='insert_overwrite',\n        partition_by=['dt'],\n        file_format='parquet',\n        pre_hook={\n            'sql': 'create or replace function opensea_wyvernexchangev1_version_calldecodeudf as \"io.iftech.sparkudf.hive.opensea_WyvernExchangeV1_version_CallDecodeUDF\" using jar \"s3a://ifcrypto/blockchain-dbt/jars/opensea_udf.jar\";'\n        }\n    )\n}}\n\nwith base as (\n    select\n        status==1 as call_success,\n        block_number as call_block_number,\n        block_timestamp as call_block_time,\n        trace_address as call_trace_address,\n        transaction_hash as call_tx_hash,\n        to_address as contract_address,\n        dt,\n        opensea_wyvernexchangev1_version_calldecodeudf(unhex_input, unhex_output, '{\"constant\": true, \"inputs\": [], \"name\": \"version\", \"outputs\": [{\"name\": \"\", \"type\": \"string\"}], \"payable\": false, \"stateMutability\": \"view\", \"type\": \"function\"}', 'version') as data\n    from {{ ref('stg_ethereum__traces') }}\n    where to_address = lower(\"0x7Be8076f4EA4A4AD08075C2508e481d6C946D12b\")\n    and address_hash = abs(hash(lower(\"0x7Be8076f4EA4A4AD08075C2508e481d6C946D12b\"))) % 10\n    and selector = \"0x30783534\"\n    and selector_hash = abs(hash(\"0x30783534\")) % 10\n\n    {% if is_incremental() %}\n      and dt = var('dt')\n    {% endif %}\n),\n\nfinal as (\n    select\n        call_success,\n        call_block_number,\n        call_block_time,\n        call_trace_address,\n        call_tx_hash,\n        contract_address,\n        dt,\n        data.input.*,\n        data.output.*\n    from base\n)\n\nselect /* REPARTITION(dt) */ *\nfrom final", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.dbt.is_incremental"], "nodes": ["model.ethereum_source.stg_ethereum__traces"]}, "config": {"enabled": true, "alias": null, "schema": "opensea", "database": null, "tags": ["chain_ethereum", "level_parse", "proj_opensea"], "meta": {}, "materialized": "incremental", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "file_format": "parquet", "partition_by": ["dt"], "incremental_strategy": "insert_overwrite", "post-hook": [], "pre-hook": [{"sql": "create or replace function opensea_wyvernexchangev1_version_calldecodeudf as \"io.iftech.sparkudf.hive.opensea_WyvernExchangeV1_version_CallDecodeUDF\" using jar \"s3a://ifcrypto/blockchain-dbt/jars/opensea_udf.jar\";", "transaction": true, "index": null}]}, "database": null, "schema": "ethereum_opensea", "fqn": ["ethereum_source", "codegen", "opensea", "WyvernExchangeV1_call_version"], "unique_id": "model.ethereum_source.WyvernExchangeV1_call_version", "package_name": "ethereum_source", "root_path": "/Users/songv/Code/jike/web3/dbt_ethereum_source", "path": "codegen/opensea/WyvernExchangeV1_call_version.sql", "original_file_path": "models/codegen/opensea/WyvernExchangeV1_call_version.sql", "name": "WyvernExchangeV1_call_version", "alias": "WyvernExchangeV1_call_version", "checksum": {"name": "sha256", "checksum": "72c40bb37a578a78797810afeef4b182ad17548e5a173a60f3bb6bd539028c28"}, "tags": ["chain_ethereum", "level_parse", "proj_opensea"], "refs": [["stg_ethereum__traces"]], "sources": [], "description": "", "columns": {"output_0": {"name": "output_0", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "call_success": {"name": "call_success", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "call_block_number": {"name": "call_block_number", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "call_block_time": {"name": "call_block_time", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "call_trace_address": {"name": "call_trace_address", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "call_tx_hash": {"name": "call_tx_hash", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "contract_address": {"name": "contract_address", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "dt": {"name": "dt", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "ethereum_source://models/codegen/opensea/schema.yml", "compiled_path": "target/compiled/ethereum_source/models/codegen/opensea/WyvernExchangeV1_call_version.sql", "build_path": null, "deferred": false, "unrendered_config": {"schema": "opensea", "tags": ["chain_ethereum", "level_parse", "proj_opensea"], "materialized": "incremental", "incremental_strategy": "insert_overwrite", "partition_by": ["dt"], "file_format": "parquet", "pre-hook": [{"sql": "create or replace function opensea_wyvernexchangev1_version_calldecodeudf as \"io.iftech.sparkudf.hive.opensea_WyvernExchangeV1_version_CallDecodeUDF\" using jar \"s3a://ifcrypto/blockchain-dbt/jars/opensea_udf.jar\";"}]}, "created_at": 1650535971.949054, "compiled_sql": "\n\nwith base as (\n    select\n        status==1 as call_success,\n        block_number as call_block_number,\n        block_timestamp as call_block_time,\n        trace_address as call_trace_address,\n        transaction_hash as call_tx_hash,\n        to_address as contract_address,\n        dt,\n        opensea_wyvernexchangev1_version_calldecodeudf(unhex_input, unhex_output, '{\"constant\": true, \"inputs\": [], \"name\": \"version\", \"outputs\": [{\"name\": \"\", \"type\": \"string\"}], \"payable\": false, \"stateMutability\": \"view\", \"type\": \"function\"}', 'version') as data\n    from ethereum_stg_ethereum.stg_ethereum__traces\n    where to_address = lower(\"0x7Be8076f4EA4A4AD08075C2508e481d6C946D12b\")\n    and address_hash = abs(hash(lower(\"0x7Be8076f4EA4A4AD08075C2508e481d6C946D12b\"))) % 10\n    and selector = \"0x30783534\"\n    and selector_hash = abs(hash(\"0x30783534\")) % 10\n\n    \n),\n\nfinal as (\n    select\n        call_success,\n        call_block_number,\n        call_block_time,\n        call_trace_address,\n        call_tx_hash,\n        contract_address,\n        dt,\n        data.input.*,\n        data.output.*\n    from base\n)\n\nselect /* REPARTITION(dt) */ *\nfrom final", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "ethereum_opensea.WyvernExchangeV1_call_version"}, "model.ethereum_source.OpenSeaENSResolver_call_isOwner": {"raw_sql": "{{\n    config(\n        materialized='incremental',\n        incremental_strategy='insert_overwrite',\n        partition_by=['dt'],\n        file_format='parquet',\n        pre_hook={\n            'sql': 'create or replace function opensea_openseaensresolver_isowner_calldecodeudf as \"io.iftech.sparkudf.hive.opensea_OpenSeaENSResolver_isOwner_CallDecodeUDF\" using jar \"s3a://ifcrypto/blockchain-dbt/jars/opensea_udf.jar\";'\n        }\n    )\n}}\n\nwith base as (\n    select\n        status==1 as call_success,\n        block_number as call_block_number,\n        block_timestamp as call_block_time,\n        trace_address as call_trace_address,\n        transaction_hash as call_tx_hash,\n        to_address as contract_address,\n        dt,\n        opensea_openseaensresolver_isowner_calldecodeudf(unhex_input, unhex_output, '{\"constant\": true, \"inputs\": [], \"name\": \"isOwner\", \"outputs\": [{\"name\": \"\", \"type\": \"bool\"}], \"payable\": false, \"stateMutability\": \"view\", \"type\": \"function\"}', 'isOwner') as data\n    from {{ ref('stg_ethereum__traces') }}\n    where to_address = lower(\"0x9c4e9cce4780062942a7fe34fa2fa7316c872956\")\n    and address_hash = abs(hash(lower(\"0x9c4e9cce4780062942a7fe34fa2fa7316c872956\"))) % 10\n    and selector = \"0x30783866\"\n    and selector_hash = abs(hash(\"0x30783866\")) % 10\n\n    {% if is_incremental() %}\n      and dt = var('dt')\n    {% endif %}\n),\n\nfinal as (\n    select\n        call_success,\n        call_block_number,\n        call_block_time,\n        call_trace_address,\n        call_tx_hash,\n        contract_address,\n        dt,\n        data.input.*,\n        data.output.*\n    from base\n)\n\nselect /* REPARTITION(dt) */ *\nfrom final", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.dbt.is_incremental"], "nodes": ["model.ethereum_source.stg_ethereum__traces"]}, "config": {"enabled": true, "alias": null, "schema": "opensea", "database": null, "tags": ["chain_ethereum", "level_parse", "proj_opensea"], "meta": {}, "materialized": "incremental", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "file_format": "parquet", "partition_by": ["dt"], "incremental_strategy": "insert_overwrite", "post-hook": [], "pre-hook": [{"sql": "create or replace function opensea_openseaensresolver_isowner_calldecodeudf as \"io.iftech.sparkudf.hive.opensea_OpenSeaENSResolver_isOwner_CallDecodeUDF\" using jar \"s3a://ifcrypto/blockchain-dbt/jars/opensea_udf.jar\";", "transaction": true, "index": null}]}, "database": null, "schema": "ethereum_opensea", "fqn": ["ethereum_source", "codegen", "opensea", "OpenSeaENSResolver_call_isOwner"], "unique_id": "model.ethereum_source.OpenSeaENSResolver_call_isOwner", "package_name": "ethereum_source", "root_path": "/Users/songv/Code/jike/web3/dbt_ethereum_source", "path": "codegen/opensea/OpenSeaENSResolver_call_isOwner.sql", "original_file_path": "models/codegen/opensea/OpenSeaENSResolver_call_isOwner.sql", "name": "OpenSeaENSResolver_call_isOwner", "alias": "OpenSeaENSResolver_call_isOwner", "checksum": {"name": "sha256", "checksum": "43086ea3d7c01b9732ee3a5ccf0e61ac3af2cd14c2d935290e205b7e0147b34c"}, "tags": ["chain_ethereum", "level_parse", "proj_opensea"], "refs": [["stg_ethereum__traces"]], "sources": [], "description": "", "columns": {"output_0": {"name": "output_0", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "call_success": {"name": "call_success", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "call_block_number": {"name": "call_block_number", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "call_block_time": {"name": "call_block_time", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "call_trace_address": {"name": "call_trace_address", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "call_tx_hash": {"name": "call_tx_hash", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "contract_address": {"name": "contract_address", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "dt": {"name": "dt", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "ethereum_source://models/codegen/opensea/schema.yml", "compiled_path": "target/compiled/ethereum_source/models/codegen/opensea/OpenSeaENSResolver_call_isOwner.sql", "build_path": null, "deferred": false, "unrendered_config": {"schema": "opensea", "tags": ["chain_ethereum", "level_parse", "proj_opensea"], "materialized": "incremental", "incremental_strategy": "insert_overwrite", "partition_by": ["dt"], "file_format": "parquet", "pre-hook": [{"sql": "create or replace function opensea_openseaensresolver_isowner_calldecodeudf as \"io.iftech.sparkudf.hive.opensea_OpenSeaENSResolver_isOwner_CallDecodeUDF\" using jar \"s3a://ifcrypto/blockchain-dbt/jars/opensea_udf.jar\";"}]}, "created_at": 1650535972.1449358, "compiled_sql": "\n\nwith base as (\n    select\n        status==1 as call_success,\n        block_number as call_block_number,\n        block_timestamp as call_block_time,\n        trace_address as call_trace_address,\n        transaction_hash as call_tx_hash,\n        to_address as contract_address,\n        dt,\n        opensea_openseaensresolver_isowner_calldecodeudf(unhex_input, unhex_output, '{\"constant\": true, \"inputs\": [], \"name\": \"isOwner\", \"outputs\": [{\"name\": \"\", \"type\": \"bool\"}], \"payable\": false, \"stateMutability\": \"view\", \"type\": \"function\"}', 'isOwner') as data\n    from ethereum_stg_ethereum.stg_ethereum__traces\n    where to_address = lower(\"0x9c4e9cce4780062942a7fe34fa2fa7316c872956\")\n    and address_hash = abs(hash(lower(\"0x9c4e9cce4780062942a7fe34fa2fa7316c872956\"))) % 10\n    and selector = \"0x30783866\"\n    and selector_hash = abs(hash(\"0x30783866\")) % 10\n\n    \n),\n\nfinal as (\n    select\n        call_success,\n        call_block_number,\n        call_block_time,\n        call_trace_address,\n        call_tx_hash,\n        contract_address,\n        dt,\n        data.input.*,\n        data.output.*\n    from base\n)\n\nselect /* REPARTITION(dt) */ *\nfrom final", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "ethereum_opensea.OpenSeaENSResolver_call_isOwner"}, "model.ethereum_source.OpenSeaENSResolver_call_setText": {"raw_sql": "{{\n    config(\n        materialized='incremental',\n        incremental_strategy='insert_overwrite',\n        partition_by=['dt'],\n        file_format='parquet',\n        pre_hook={\n            'sql': 'create or replace function opensea_openseaensresolver_settext_calldecodeudf as \"io.iftech.sparkudf.hive.opensea_OpenSeaENSResolver_setText_CallDecodeUDF\" using jar \"s3a://ifcrypto/blockchain-dbt/jars/opensea_udf.jar\";'\n        }\n    )\n}}\n\nwith base as (\n    select\n        status==1 as call_success,\n        block_number as call_block_number,\n        block_timestamp as call_block_time,\n        trace_address as call_trace_address,\n        transaction_hash as call_tx_hash,\n        to_address as contract_address,\n        dt,\n        opensea_openseaensresolver_settext_calldecodeudf(unhex_input, unhex_output, '{\"constant\": false, \"inputs\": [{\"name\": \"node\", \"type\": \"bytes32\"}, {\"name\": \"key\", \"type\": \"string\"}, {\"name\": \"value\", \"type\": \"string\"}], \"name\": \"setText\", \"outputs\": [], \"payable\": false, \"stateMutability\": \"nonpayable\", \"type\": \"function\"}', 'setText') as data\n    from {{ ref('stg_ethereum__traces') }}\n    where to_address = lower(\"0x9c4e9cce4780062942a7fe34fa2fa7316c872956\")\n    and address_hash = abs(hash(lower(\"0x9c4e9cce4780062942a7fe34fa2fa7316c872956\"))) % 10\n    and selector = \"0x30783130\"\n    and selector_hash = abs(hash(\"0x30783130\")) % 10\n\n    {% if is_incremental() %}\n      and dt = var('dt')\n    {% endif %}\n),\n\nfinal as (\n    select\n        call_success,\n        call_block_number,\n        call_block_time,\n        call_trace_address,\n        call_tx_hash,\n        contract_address,\n        dt,\n        data.input.*,\n        data.output.*\n    from base\n)\n\nselect /* REPARTITION(dt) */ *\nfrom final", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.dbt.is_incremental"], "nodes": ["model.ethereum_source.stg_ethereum__traces"]}, "config": {"enabled": true, "alias": null, "schema": "opensea", "database": null, "tags": ["chain_ethereum", "level_parse", "proj_opensea"], "meta": {}, "materialized": "incremental", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "file_format": "parquet", "partition_by": ["dt"], "incremental_strategy": "insert_overwrite", "post-hook": [], "pre-hook": [{"sql": "create or replace function opensea_openseaensresolver_settext_calldecodeudf as \"io.iftech.sparkudf.hive.opensea_OpenSeaENSResolver_setText_CallDecodeUDF\" using jar \"s3a://ifcrypto/blockchain-dbt/jars/opensea_udf.jar\";", "transaction": true, "index": null}]}, "database": null, "schema": "ethereum_opensea", "fqn": ["ethereum_source", "codegen", "opensea", "OpenSeaENSResolver_call_setText"], "unique_id": "model.ethereum_source.OpenSeaENSResolver_call_setText", "package_name": "ethereum_source", "root_path": "/Users/songv/Code/jike/web3/dbt_ethereum_source", "path": "codegen/opensea/OpenSeaENSResolver_call_setText.sql", "original_file_path": "models/codegen/opensea/OpenSeaENSResolver_call_setText.sql", "name": "OpenSeaENSResolver_call_setText", "alias": "OpenSeaENSResolver_call_setText", "checksum": {"name": "sha256", "checksum": "13d4f397d7976bcadc9268259c3fc1fa52f4eabb45bbd500257d0acfa181a65c"}, "tags": ["chain_ethereum", "level_parse", "proj_opensea"], "refs": [["stg_ethereum__traces"]], "sources": [], "description": "", "columns": {"node": {"name": "node", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "key": {"name": "key", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "value": {"name": "value", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "call_success": {"name": "call_success", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "call_block_number": {"name": "call_block_number", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "call_block_time": {"name": "call_block_time", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "call_trace_address": {"name": "call_trace_address", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "call_tx_hash": {"name": "call_tx_hash", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "contract_address": {"name": "contract_address", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "dt": {"name": "dt", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "ethereum_source://models/codegen/opensea/schema.yml", "compiled_path": "target/compiled/ethereum_source/models/codegen/opensea/OpenSeaENSResolver_call_setText.sql", "build_path": null, "deferred": false, "unrendered_config": {"schema": "opensea", "tags": ["chain_ethereum", "level_parse", "proj_opensea"], "materialized": "incremental", "incremental_strategy": "insert_overwrite", "partition_by": ["dt"], "file_format": "parquet", "pre-hook": [{"sql": "create or replace function opensea_openseaensresolver_settext_calldecodeudf as \"io.iftech.sparkudf.hive.opensea_OpenSeaENSResolver_setText_CallDecodeUDF\" using jar \"s3a://ifcrypto/blockchain-dbt/jars/opensea_udf.jar\";"}]}, "created_at": 1650535972.115716, "compiled_sql": "\n\nwith base as (\n    select\n        status==1 as call_success,\n        block_number as call_block_number,\n        block_timestamp as call_block_time,\n        trace_address as call_trace_address,\n        transaction_hash as call_tx_hash,\n        to_address as contract_address,\n        dt,\n        opensea_openseaensresolver_settext_calldecodeudf(unhex_input, unhex_output, '{\"constant\": false, \"inputs\": [{\"name\": \"node\", \"type\": \"bytes32\"}, {\"name\": \"key\", \"type\": \"string\"}, {\"name\": \"value\", \"type\": \"string\"}], \"name\": \"setText\", \"outputs\": [], \"payable\": false, \"stateMutability\": \"nonpayable\", \"type\": \"function\"}', 'setText') as data\n    from ethereum_stg_ethereum.stg_ethereum__traces\n    where to_address = lower(\"0x9c4e9cce4780062942a7fe34fa2fa7316c872956\")\n    and address_hash = abs(hash(lower(\"0x9c4e9cce4780062942a7fe34fa2fa7316c872956\"))) % 10\n    and selector = \"0x30783130\"\n    and selector_hash = abs(hash(\"0x30783130\")) % 10\n\n    \n),\n\nfinal as (\n    select\n        call_success,\n        call_block_number,\n        call_block_time,\n        call_trace_address,\n        call_tx_hash,\n        contract_address,\n        dt,\n        data.input.*,\n        data.output.*\n    from base\n)\n\nselect /* REPARTITION(dt) */ *\nfrom final", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "ethereum_opensea.OpenSeaENSResolver_call_setText"}, "model.ethereum_source.OpenSeaENSResolver_call_setContenthash": {"raw_sql": "{{\n    config(\n        materialized='incremental',\n        incremental_strategy='insert_overwrite',\n        partition_by=['dt'],\n        file_format='parquet',\n        pre_hook={\n            'sql': 'create or replace function opensea_openseaensresolver_setcontenthash_calldecodeudf as \"io.iftech.sparkudf.hive.opensea_OpenSeaENSResolver_setContenthash_CallDecodeUDF\" using jar \"s3a://ifcrypto/blockchain-dbt/jars/opensea_udf.jar\";'\n        }\n    )\n}}\n\nwith base as (\n    select\n        status==1 as call_success,\n        block_number as call_block_number,\n        block_timestamp as call_block_time,\n        trace_address as call_trace_address,\n        transaction_hash as call_tx_hash,\n        to_address as contract_address,\n        dt,\n        opensea_openseaensresolver_setcontenthash_calldecodeudf(unhex_input, unhex_output, '{\"constant\": false, \"inputs\": [{\"name\": \"node\", \"type\": \"bytes32\"}, {\"name\": \"hash\", \"type\": \"bytes\"}], \"name\": \"setContenthash\", \"outputs\": [], \"payable\": false, \"stateMutability\": \"nonpayable\", \"type\": \"function\"}', 'setContenthash') as data\n    from {{ ref('stg_ethereum__traces') }}\n    where to_address = lower(\"0x9c4e9cce4780062942a7fe34fa2fa7316c872956\")\n    and address_hash = abs(hash(lower(\"0x9c4e9cce4780062942a7fe34fa2fa7316c872956\"))) % 10\n    and selector = \"0x30783330\"\n    and selector_hash = abs(hash(\"0x30783330\")) % 10\n\n    {% if is_incremental() %}\n      and dt = var('dt')\n    {% endif %}\n),\n\nfinal as (\n    select\n        call_success,\n        call_block_number,\n        call_block_time,\n        call_trace_address,\n        call_tx_hash,\n        contract_address,\n        dt,\n        data.input.*,\n        data.output.*\n    from base\n)\n\nselect /* REPARTITION(dt) */ *\nfrom final", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.dbt.is_incremental"], "nodes": ["model.ethereum_source.stg_ethereum__traces"]}, "config": {"enabled": true, "alias": null, "schema": "opensea", "database": null, "tags": ["chain_ethereum", "level_parse", "proj_opensea"], "meta": {}, "materialized": "incremental", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "file_format": "parquet", "partition_by": ["dt"], "incremental_strategy": "insert_overwrite", "post-hook": [], "pre-hook": [{"sql": "create or replace function opensea_openseaensresolver_setcontenthash_calldecodeudf as \"io.iftech.sparkudf.hive.opensea_OpenSeaENSResolver_setContenthash_CallDecodeUDF\" using jar \"s3a://ifcrypto/blockchain-dbt/jars/opensea_udf.jar\";", "transaction": true, "index": null}]}, "database": null, "schema": "ethereum_opensea", "fqn": ["ethereum_source", "codegen", "opensea", "OpenSeaENSResolver_call_setContenthash"], "unique_id": "model.ethereum_source.OpenSeaENSResolver_call_setContenthash", "package_name": "ethereum_source", "root_path": "/Users/songv/Code/jike/web3/dbt_ethereum_source", "path": "codegen/opensea/OpenSeaENSResolver_call_setContenthash.sql", "original_file_path": "models/codegen/opensea/OpenSeaENSResolver_call_setContenthash.sql", "name": "OpenSeaENSResolver_call_setContenthash", "alias": "OpenSeaENSResolver_call_setContenthash", "checksum": {"name": "sha256", "checksum": "b2a310ba8516c205de66969cf8a04dfd2bdcf08d5d36e7c09c11af37df1b0eff"}, "tags": ["chain_ethereum", "level_parse", "proj_opensea"], "refs": [["stg_ethereum__traces"]], "sources": [], "description": "", "columns": {"node": {"name": "node", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "hash": {"name": "hash", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "call_success": {"name": "call_success", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "call_block_number": {"name": "call_block_number", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "call_block_time": {"name": "call_block_time", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "call_trace_address": {"name": "call_trace_address", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "call_tx_hash": {"name": "call_tx_hash", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "contract_address": {"name": "contract_address", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "dt": {"name": "dt", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "ethereum_source://models/codegen/opensea/schema.yml", "compiled_path": "target/compiled/ethereum_source/models/codegen/opensea/OpenSeaENSResolver_call_setContenthash.sql", "build_path": null, "deferred": false, "unrendered_config": {"schema": "opensea", "tags": ["chain_ethereum", "level_parse", "proj_opensea"], "materialized": "incremental", "incremental_strategy": "insert_overwrite", "partition_by": ["dt"], "file_format": "parquet", "pre-hook": [{"sql": "create or replace function opensea_openseaensresolver_setcontenthash_calldecodeudf as \"io.iftech.sparkudf.hive.opensea_OpenSeaENSResolver_setContenthash_CallDecodeUDF\" using jar \"s3a://ifcrypto/blockchain-dbt/jars/opensea_udf.jar\";"}]}, "created_at": 1650535972.123988, "compiled_sql": "\n\nwith base as (\n    select\n        status==1 as call_success,\n        block_number as call_block_number,\n        block_timestamp as call_block_time,\n        trace_address as call_trace_address,\n        transaction_hash as call_tx_hash,\n        to_address as contract_address,\n        dt,\n        opensea_openseaensresolver_setcontenthash_calldecodeudf(unhex_input, unhex_output, '{\"constant\": false, \"inputs\": [{\"name\": \"node\", \"type\": \"bytes32\"}, {\"name\": \"hash\", \"type\": \"bytes\"}], \"name\": \"setContenthash\", \"outputs\": [], \"payable\": false, \"stateMutability\": \"nonpayable\", \"type\": \"function\"}', 'setContenthash') as data\n    from ethereum_stg_ethereum.stg_ethereum__traces\n    where to_address = lower(\"0x9c4e9cce4780062942a7fe34fa2fa7316c872956\")\n    and address_hash = abs(hash(lower(\"0x9c4e9cce4780062942a7fe34fa2fa7316c872956\"))) % 10\n    and selector = \"0x30783330\"\n    and selector_hash = abs(hash(\"0x30783330\")) % 10\n\n    \n),\n\nfinal as (\n    select\n        call_success,\n        call_block_number,\n        call_block_time,\n        call_trace_address,\n        call_tx_hash,\n        contract_address,\n        dt,\n        data.input.*,\n        data.output.*\n    from base\n)\n\nselect /* REPARTITION(dt) */ *\nfrom final", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "ethereum_opensea.OpenSeaENSResolver_call_setContenthash"}, "model.ethereum_source.WyvernExchangeV1_call_calculateMatchPrice_": {"raw_sql": "{{\n    config(\n        materialized='incremental',\n        incremental_strategy='insert_overwrite',\n        partition_by=['dt'],\n        file_format='parquet',\n        pre_hook={\n            'sql': 'create or replace function opensea_wyvernexchangev1_calculatematchprice__calldecodeudf as \"io.iftech.sparkudf.hive.opensea_WyvernExchangeV1_calculateMatchPrice__CallDecodeUDF\" using jar \"s3a://ifcrypto/blockchain-dbt/jars/opensea_udf.jar\";'\n        }\n    )\n}}\n\nwith base as (\n    select\n        status==1 as call_success,\n        block_number as call_block_number,\n        block_timestamp as call_block_time,\n        trace_address as call_trace_address,\n        transaction_hash as call_tx_hash,\n        to_address as contract_address,\n        dt,\n        opensea_wyvernexchangev1_calculatematchprice__calldecodeudf(unhex_input, unhex_output, '{\"constant\": true, \"inputs\": [{\"name\": \"addrs\", \"type\": \"address[14]\"}, {\"name\": \"uints\", \"type\": \"uint256[18]\"}, {\"name\": \"feeMethodsSidesKindsHowToCalls\", \"type\": \"uint8[8]\"}, {\"name\": \"calldataBuy\", \"type\": \"bytes\"}, {\"name\": \"calldataSell\", \"type\": \"bytes\"}, {\"name\": \"replacementPatternBuy\", \"type\": \"bytes\"}, {\"name\": \"replacementPatternSell\", \"type\": \"bytes\"}, {\"name\": \"staticExtradataBuy\", \"type\": \"bytes\"}, {\"name\": \"staticExtradataSell\", \"type\": \"bytes\"}], \"name\": \"calculateMatchPrice_\", \"outputs\": [{\"name\": \"\", \"type\": \"uint256\"}], \"payable\": false, \"stateMutability\": \"view\", \"type\": \"function\"}', 'calculateMatchPrice_') as data\n    from {{ ref('stg_ethereum__traces') }}\n    where to_address = lower(\"0x7Be8076f4EA4A4AD08075C2508e481d6C946D12b\")\n    and address_hash = abs(hash(lower(\"0x7Be8076f4EA4A4AD08075C2508e481d6C946D12b\"))) % 10\n    and selector = \"0x30786435\"\n    and selector_hash = abs(hash(\"0x30786435\")) % 10\n\n    {% if is_incremental() %}\n      and dt = var('dt')\n    {% endif %}\n),\n\nfinal as (\n    select\n        call_success,\n        call_block_number,\n        call_block_time,\n        call_trace_address,\n        call_tx_hash,\n        contract_address,\n        dt,\n        data.input.*,\n        data.output.*\n    from base\n)\n\nselect /* REPARTITION(dt) */ *\nfrom final", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.dbt.is_incremental"], "nodes": ["model.ethereum_source.stg_ethereum__traces"]}, "config": {"enabled": true, "alias": null, "schema": "opensea", "database": null, "tags": ["chain_ethereum", "level_parse", "proj_opensea"], "meta": {}, "materialized": "incremental", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "file_format": "parquet", "partition_by": ["dt"], "incremental_strategy": "insert_overwrite", "post-hook": [], "pre-hook": [{"sql": "create or replace function opensea_wyvernexchangev1_calculatematchprice__calldecodeudf as \"io.iftech.sparkudf.hive.opensea_WyvernExchangeV1_calculateMatchPrice__CallDecodeUDF\" using jar \"s3a://ifcrypto/blockchain-dbt/jars/opensea_udf.jar\";", "transaction": true, "index": null}]}, "database": null, "schema": "ethereum_opensea", "fqn": ["ethereum_source", "codegen", "opensea", "WyvernExchangeV1_call_calculateMatchPrice_"], "unique_id": "model.ethereum_source.WyvernExchangeV1_call_calculateMatchPrice_", "package_name": "ethereum_source", "root_path": "/Users/songv/Code/jike/web3/dbt_ethereum_source", "path": "codegen/opensea/WyvernExchangeV1_call_calculateMatchPrice_.sql", "original_file_path": "models/codegen/opensea/WyvernExchangeV1_call_calculateMatchPrice_.sql", "name": "WyvernExchangeV1_call_calculateMatchPrice_", "alias": "WyvernExchangeV1_call_calculateMatchPrice_", "checksum": {"name": "sha256", "checksum": "8e3396c7f16a6455254390bfedc17122a636223d8d182568369295ea7c956e82"}, "tags": ["chain_ethereum", "level_parse", "proj_opensea"], "refs": [["stg_ethereum__traces"]], "sources": [], "description": "", "columns": {"addrs": {"name": "addrs", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "uints": {"name": "uints", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "feeMethodsSidesKindsHowToCalls": {"name": "feeMethodsSidesKindsHowToCalls", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "calldataBuy": {"name": "calldataBuy", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "calldataSell": {"name": "calldataSell", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "replacementPatternBuy": {"name": "replacementPatternBuy", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "replacementPatternSell": {"name": "replacementPatternSell", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "staticExtradataBuy": {"name": "staticExtradataBuy", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "staticExtradataSell": {"name": "staticExtradataSell", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "output_0": {"name": "output_0", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "call_success": {"name": "call_success", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "call_block_number": {"name": "call_block_number", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "call_block_time": {"name": "call_block_time", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "call_trace_address": {"name": "call_trace_address", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "call_tx_hash": {"name": "call_tx_hash", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "contract_address": {"name": "contract_address", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "dt": {"name": "dt", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "ethereum_source://models/codegen/opensea/schema.yml", "compiled_path": "target/compiled/ethereum_source/models/codegen/opensea/WyvernExchangeV1_call_calculateMatchPrice_.sql", "build_path": null, "deferred": false, "unrendered_config": {"schema": "opensea", "tags": ["chain_ethereum", "level_parse", "proj_opensea"], "materialized": "incremental", "incremental_strategy": "insert_overwrite", "partition_by": ["dt"], "file_format": "parquet", "pre-hook": [{"sql": "create or replace function opensea_wyvernexchangev1_calculatematchprice__calldecodeudf as \"io.iftech.sparkudf.hive.opensea_WyvernExchangeV1_calculateMatchPrice__CallDecodeUDF\" using jar \"s3a://ifcrypto/blockchain-dbt/jars/opensea_udf.jar\";"}]}, "created_at": 1650535971.9953458, "compiled_sql": "\n\nwith base as (\n    select\n        status==1 as call_success,\n        block_number as call_block_number,\n        block_timestamp as call_block_time,\n        trace_address as call_trace_address,\n        transaction_hash as call_tx_hash,\n        to_address as contract_address,\n        dt,\n        opensea_wyvernexchangev1_calculatematchprice__calldecodeudf(unhex_input, unhex_output, '{\"constant\": true, \"inputs\": [{\"name\": \"addrs\", \"type\": \"address[14]\"}, {\"name\": \"uints\", \"type\": \"uint256[18]\"}, {\"name\": \"feeMethodsSidesKindsHowToCalls\", \"type\": \"uint8[8]\"}, {\"name\": \"calldataBuy\", \"type\": \"bytes\"}, {\"name\": \"calldataSell\", \"type\": \"bytes\"}, {\"name\": \"replacementPatternBuy\", \"type\": \"bytes\"}, {\"name\": \"replacementPatternSell\", \"type\": \"bytes\"}, {\"name\": \"staticExtradataBuy\", \"type\": \"bytes\"}, {\"name\": \"staticExtradataSell\", \"type\": \"bytes\"}], \"name\": \"calculateMatchPrice_\", \"outputs\": [{\"name\": \"\", \"type\": \"uint256\"}], \"payable\": false, \"stateMutability\": \"view\", \"type\": \"function\"}', 'calculateMatchPrice_') as data\n    from ethereum_stg_ethereum.stg_ethereum__traces\n    where to_address = lower(\"0x7Be8076f4EA4A4AD08075C2508e481d6C946D12b\")\n    and address_hash = abs(hash(lower(\"0x7Be8076f4EA4A4AD08075C2508e481d6C946D12b\"))) % 10\n    and selector = \"0x30786435\"\n    and selector_hash = abs(hash(\"0x30786435\")) % 10\n\n    \n),\n\nfinal as (\n    select\n        call_success,\n        call_block_number,\n        call_block_time,\n        call_trace_address,\n        call_tx_hash,\n        contract_address,\n        dt,\n        data.input.*,\n        data.output.*\n    from base\n)\n\nselect /* REPARTITION(dt) */ *\nfrom final", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "ethereum_opensea.WyvernExchangeV1_call_calculateMatchPrice_"}, "model.ethereum_source.WyvernExchangeV2_call_nonces": {"raw_sql": "{{\n    config(\n        materialized='incremental',\n        incremental_strategy='insert_overwrite',\n        partition_by=['dt'],\n        file_format='parquet',\n        pre_hook={\n            'sql': 'create or replace function opensea_wyvernexchangev2_nonces_calldecodeudf as \"io.iftech.sparkudf.hive.opensea_WyvernExchangeV2_nonces_CallDecodeUDF\" using jar \"s3a://ifcrypto/blockchain-dbt/jars/opensea_udf.jar\";'\n        }\n    )\n}}\n\nwith base as (\n    select\n        status==1 as call_success,\n        block_number as call_block_number,\n        block_timestamp as call_block_time,\n        trace_address as call_trace_address,\n        transaction_hash as call_tx_hash,\n        to_address as contract_address,\n        dt,\n        opensea_wyvernexchangev2_nonces_calldecodeudf(unhex_input, unhex_output, '{\"constant\": true, \"inputs\": [{\"name\": \"\", \"type\": \"address\"}], \"name\": \"nonces\", \"outputs\": [{\"name\": \"\", \"type\": \"uint256\"}], \"payable\": false, \"stateMutability\": \"view\", \"type\": \"function\"}', 'nonces') as data\n    from {{ ref('stg_ethereum__traces') }}\n    where to_address = lower(\"0x7f268357A8c2552623316e2562D90e642bB538E5\")\n    and address_hash = abs(hash(lower(\"0x7f268357A8c2552623316e2562D90e642bB538E5\"))) % 10\n    and selector = \"0x30783765\"\n    and selector_hash = abs(hash(\"0x30783765\")) % 10\n\n    {% if is_incremental() %}\n      and dt = var('dt')\n    {% endif %}\n),\n\nfinal as (\n    select\n        call_success,\n        call_block_number,\n        call_block_time,\n        call_trace_address,\n        call_tx_hash,\n        contract_address,\n        dt,\n        data.input.*,\n        data.output.*\n    from base\n)\n\nselect /* REPARTITION(dt) */ *\nfrom final", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.dbt.is_incremental"], "nodes": ["model.ethereum_source.stg_ethereum__traces"]}, "config": {"enabled": true, "alias": null, "schema": "opensea", "database": null, "tags": ["chain_ethereum", "level_parse", "proj_opensea"], "meta": {}, "materialized": "incremental", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "file_format": "parquet", "partition_by": ["dt"], "incremental_strategy": "insert_overwrite", "post-hook": [], "pre-hook": [{"sql": "create or replace function opensea_wyvernexchangev2_nonces_calldecodeudf as \"io.iftech.sparkudf.hive.opensea_WyvernExchangeV2_nonces_CallDecodeUDF\" using jar \"s3a://ifcrypto/blockchain-dbt/jars/opensea_udf.jar\";", "transaction": true, "index": null}]}, "database": null, "schema": "ethereum_opensea", "fqn": ["ethereum_source", "codegen", "opensea", "WyvernExchangeV2_call_nonces"], "unique_id": "model.ethereum_source.WyvernExchangeV2_call_nonces", "package_name": "ethereum_source", "root_path": "/Users/songv/Code/jike/web3/dbt_ethereum_source", "path": "codegen/opensea/WyvernExchangeV2_call_nonces.sql", "original_file_path": "models/codegen/opensea/WyvernExchangeV2_call_nonces.sql", "name": "WyvernExchangeV2_call_nonces", "alias": "WyvernExchangeV2_call_nonces", "checksum": {"name": "sha256", "checksum": "7b3ea3921ecf57983eeb8f76b23b9ce07b162e5a1e4f5616ef190ac9cb37a172"}, "tags": ["chain_ethereum", "level_parse", "proj_opensea"], "refs": [["stg_ethereum__traces"]], "sources": [], "description": "", "columns": {"_0": {"name": "_0", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "output_0": {"name": "output_0", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "call_success": {"name": "call_success", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "call_block_number": {"name": "call_block_number", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "call_block_time": {"name": "call_block_time", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "call_trace_address": {"name": "call_trace_address", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "call_tx_hash": {"name": "call_tx_hash", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "contract_address": {"name": "contract_address", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "dt": {"name": "dt", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "ethereum_source://models/codegen/opensea/schema.yml", "compiled_path": "target/compiled/ethereum_source/models/codegen/opensea/WyvernExchangeV2_call_nonces.sql", "build_path": null, "deferred": false, "unrendered_config": {"schema": "opensea", "tags": ["chain_ethereum", "level_parse", "proj_opensea"], "materialized": "incremental", "incremental_strategy": "insert_overwrite", "partition_by": ["dt"], "file_format": "parquet", "pre-hook": [{"sql": "create or replace function opensea_wyvernexchangev2_nonces_calldecodeudf as \"io.iftech.sparkudf.hive.opensea_WyvernExchangeV2_nonces_CallDecodeUDF\" using jar \"s3a://ifcrypto/blockchain-dbt/jars/opensea_udf.jar\";"}]}, "created_at": 1650535972.065776, "compiled_sql": "\n\nwith base as (\n    select\n        status==1 as call_success,\n        block_number as call_block_number,\n        block_timestamp as call_block_time,\n        trace_address as call_trace_address,\n        transaction_hash as call_tx_hash,\n        to_address as contract_address,\n        dt,\n        opensea_wyvernexchangev2_nonces_calldecodeudf(unhex_input, unhex_output, '{\"constant\": true, \"inputs\": [{\"name\": \"\", \"type\": \"address\"}], \"name\": \"nonces\", \"outputs\": [{\"name\": \"\", \"type\": \"uint256\"}], \"payable\": false, \"stateMutability\": \"view\", \"type\": \"function\"}', 'nonces') as data\n    from ethereum_stg_ethereum.stg_ethereum__traces\n    where to_address = lower(\"0x7f268357A8c2552623316e2562D90e642bB538E5\")\n    and address_hash = abs(hash(lower(\"0x7f268357A8c2552623316e2562D90e642bB538E5\"))) % 10\n    and selector = \"0x30783765\"\n    and selector_hash = abs(hash(\"0x30783765\")) % 10\n\n    \n),\n\nfinal as (\n    select\n        call_success,\n        call_block_number,\n        call_block_time,\n        call_trace_address,\n        call_tx_hash,\n        contract_address,\n        dt,\n        data.input.*,\n        data.output.*\n    from base\n)\n\nselect /* REPARTITION(dt) */ *\nfrom final", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "ethereum_opensea.WyvernExchangeV2_call_nonces"}, "model.ethereum_source.OpenSeaENSResolver_call_baseURI": {"raw_sql": "{{\n    config(\n        materialized='incremental',\n        incremental_strategy='insert_overwrite',\n        partition_by=['dt'],\n        file_format='parquet',\n        pre_hook={\n            'sql': 'create or replace function opensea_openseaensresolver_baseuri_calldecodeudf as \"io.iftech.sparkudf.hive.opensea_OpenSeaENSResolver_baseURI_CallDecodeUDF\" using jar \"s3a://ifcrypto/blockchain-dbt/jars/opensea_udf.jar\";'\n        }\n    )\n}}\n\nwith base as (\n    select\n        status==1 as call_success,\n        block_number as call_block_number,\n        block_timestamp as call_block_time,\n        trace_address as call_trace_address,\n        transaction_hash as call_tx_hash,\n        to_address as contract_address,\n        dt,\n        opensea_openseaensresolver_baseuri_calldecodeudf(unhex_input, unhex_output, '{\"constant\": true, \"inputs\": [], \"name\": \"baseURI\", \"outputs\": [{\"name\": \"\", \"type\": \"string\"}], \"payable\": false, \"stateMutability\": \"view\", \"type\": \"function\"}', 'baseURI') as data\n    from {{ ref('stg_ethereum__traces') }}\n    where to_address = lower(\"0x9c4e9cce4780062942a7fe34fa2fa7316c872956\")\n    and address_hash = abs(hash(lower(\"0x9c4e9cce4780062942a7fe34fa2fa7316c872956\"))) % 10\n    and selector = \"0x30783663\"\n    and selector_hash = abs(hash(\"0x30783663\")) % 10\n\n    {% if is_incremental() %}\n      and dt = var('dt')\n    {% endif %}\n),\n\nfinal as (\n    select\n        call_success,\n        call_block_number,\n        call_block_time,\n        call_trace_address,\n        call_tx_hash,\n        contract_address,\n        dt,\n        data.input.*,\n        data.output.*\n    from base\n)\n\nselect /* REPARTITION(dt) */ *\nfrom final", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.dbt.is_incremental"], "nodes": ["model.ethereum_source.stg_ethereum__traces"]}, "config": {"enabled": true, "alias": null, "schema": "opensea", "database": null, "tags": ["chain_ethereum", "level_parse", "proj_opensea"], "meta": {}, "materialized": "incremental", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "file_format": "parquet", "partition_by": ["dt"], "incremental_strategy": "insert_overwrite", "post-hook": [], "pre-hook": [{"sql": "create or replace function opensea_openseaensresolver_baseuri_calldecodeudf as \"io.iftech.sparkudf.hive.opensea_OpenSeaENSResolver_baseURI_CallDecodeUDF\" using jar \"s3a://ifcrypto/blockchain-dbt/jars/opensea_udf.jar\";", "transaction": true, "index": null}]}, "database": null, "schema": "ethereum_opensea", "fqn": ["ethereum_source", "codegen", "opensea", "OpenSeaENSResolver_call_baseURI"], "unique_id": "model.ethereum_source.OpenSeaENSResolver_call_baseURI", "package_name": "ethereum_source", "root_path": "/Users/songv/Code/jike/web3/dbt_ethereum_source", "path": "codegen/opensea/OpenSeaENSResolver_call_baseURI.sql", "original_file_path": "models/codegen/opensea/OpenSeaENSResolver_call_baseURI.sql", "name": "OpenSeaENSResolver_call_baseURI", "alias": "OpenSeaENSResolver_call_baseURI", "checksum": {"name": "sha256", "checksum": "70bcd96291f029b332b0bfd3064a1aebcbfc5ea43c00367416110f22d417fc33"}, "tags": ["chain_ethereum", "level_parse", "proj_opensea"], "refs": [["stg_ethereum__traces"]], "sources": [], "description": "", "columns": {"output_0": {"name": "output_0", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "call_success": {"name": "call_success", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "call_block_number": {"name": "call_block_number", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "call_block_time": {"name": "call_block_time", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "call_trace_address": {"name": "call_trace_address", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "call_tx_hash": {"name": "call_tx_hash", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "contract_address": {"name": "contract_address", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "dt": {"name": "dt", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "ethereum_source://models/codegen/opensea/schema.yml", "compiled_path": "target/compiled/ethereum_source/models/codegen/opensea/OpenSeaENSResolver_call_baseURI.sql", "build_path": null, "deferred": false, "unrendered_config": {"schema": "opensea", "tags": ["chain_ethereum", "level_parse", "proj_opensea"], "materialized": "incremental", "incremental_strategy": "insert_overwrite", "partition_by": ["dt"], "file_format": "parquet", "pre-hook": [{"sql": "create or replace function opensea_openseaensresolver_baseuri_calldecodeudf as \"io.iftech.sparkudf.hive.opensea_OpenSeaENSResolver_baseURI_CallDecodeUDF\" using jar \"s3a://ifcrypto/blockchain-dbt/jars/opensea_udf.jar\";"}]}, "created_at": 1650535972.138486, "compiled_sql": "\n\nwith base as (\n    select\n        status==1 as call_success,\n        block_number as call_block_number,\n        block_timestamp as call_block_time,\n        trace_address as call_trace_address,\n        transaction_hash as call_tx_hash,\n        to_address as contract_address,\n        dt,\n        opensea_openseaensresolver_baseuri_calldecodeudf(unhex_input, unhex_output, '{\"constant\": true, \"inputs\": [], \"name\": \"baseURI\", \"outputs\": [{\"name\": \"\", \"type\": \"string\"}], \"payable\": false, \"stateMutability\": \"view\", \"type\": \"function\"}', 'baseURI') as data\n    from ethereum_stg_ethereum.stg_ethereum__traces\n    where to_address = lower(\"0x9c4e9cce4780062942a7fe34fa2fa7316c872956\")\n    and address_hash = abs(hash(lower(\"0x9c4e9cce4780062942a7fe34fa2fa7316c872956\"))) % 10\n    and selector = \"0x30783663\"\n    and selector_hash = abs(hash(\"0x30783663\")) % 10\n\n    \n),\n\nfinal as (\n    select\n        call_success,\n        call_block_number,\n        call_block_time,\n        call_trace_address,\n        call_tx_hash,\n        contract_address,\n        dt,\n        data.input.*,\n        data.output.*\n    from base\n)\n\nselect /* REPARTITION(dt) */ *\nfrom final", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "ethereum_opensea.OpenSeaENSResolver_call_baseURI"}, "model.ethereum_source.OpenSeaENSResolver_evt_InterfaceChanged": {"raw_sql": "{{\n    config(\n        materialized='incremental',\n        incremental_strategy='insert_overwrite',\n        partition_by=['dt'],\n        file_format='parquet',\n        pre_hook={\n            'sql': 'create or replace function opensea_openseaensresolver_interfacechanged_eventdecodeudf as \"io.iftech.sparkudf.hive.opensea_OpenSeaENSResolver_InterfaceChanged_EventDecodeUDF\" using jar \"s3a://ifcrypto/blockchain-dbt/jars/opensea_udf.jar\";'\n        }\n    )\n}}\n\nwith base as (\n    select\n        block_number as evt_block_number,\n        block_timestamp as evt_block_time,\n        log_index as evt_index,\n        transaction_hash as evt_tx_hash,\n        address as contract_address,\n        dt,\n        opensea_openseaensresolver_interfacechanged_eventdecodeudf(unhex_data, topics_arr, '{\"anonymous\": false, \"inputs\": [{\"indexed\": true, \"name\": \"node\", \"type\": \"bytes32\"}, {\"indexed\": true, \"name\": \"interfaceID\", \"type\": \"bytes4\"}, {\"indexed\": false, \"name\": \"implementer\", \"type\": \"address\"}], \"name\": \"InterfaceChanged\", \"type\": \"event\"}', 'InterfaceChanged') as data\n    from {{ ref('stg_ethereum__logs') }}\n    where address = lower(\"0x9c4e9cce4780062942a7fe34fa2fa7316c872956\")\n    and address_hash = abs(hash(lower(\"0x9c4e9cce4780062942a7fe34fa2fa7316c872956\"))) % 10\n    and selector = \"0x7c69f06bea0bdef565b709e93a147836b0063ba2dd89f02d0b7e8d931e6a6daa\"\n    and selector_hash = abs(hash(\"0x7c69f06bea0bdef565b709e93a147836b0063ba2dd89f02d0b7e8d931e6a6daa\")) % 10\n\n    {% if is_incremental() %}\n      and dt = var('dt')\n    {% endif %}\n),\n\nfinal as (\n    select\n        evt_block_number,\n        evt_block_time,\n        evt_index,\n        evt_tx_hash,\n        contract_address,\n        dt,\n        data.input.*\n    from base\n)\n\nselect /* REPARTITION(dt) */ *\nfrom final", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.dbt.is_incremental"], "nodes": ["model.ethereum_source.stg_ethereum__logs"]}, "config": {"enabled": true, "alias": null, "schema": "opensea", "database": null, "tags": ["chain_ethereum", "level_parse", "proj_opensea"], "meta": {}, "materialized": "incremental", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "file_format": "parquet", "partition_by": ["dt"], "incremental_strategy": "insert_overwrite", "post-hook": [], "pre-hook": [{"sql": "create or replace function opensea_openseaensresolver_interfacechanged_eventdecodeudf as \"io.iftech.sparkudf.hive.opensea_OpenSeaENSResolver_InterfaceChanged_EventDecodeUDF\" using jar \"s3a://ifcrypto/blockchain-dbt/jars/opensea_udf.jar\";", "transaction": true, "index": null}]}, "database": null, "schema": "ethereum_opensea", "fqn": ["ethereum_source", "codegen", "opensea", "OpenSeaENSResolver_evt_InterfaceChanged"], "unique_id": "model.ethereum_source.OpenSeaENSResolver_evt_InterfaceChanged", "package_name": "ethereum_source", "root_path": "/Users/songv/Code/jike/web3/dbt_ethereum_source", "path": "codegen/opensea/OpenSeaENSResolver_evt_InterfaceChanged.sql", "original_file_path": "models/codegen/opensea/OpenSeaENSResolver_evt_InterfaceChanged.sql", "name": "OpenSeaENSResolver_evt_InterfaceChanged", "alias": "OpenSeaENSResolver_evt_InterfaceChanged", "checksum": {"name": "sha256", "checksum": "25f6b10e1930b3b8c649e356b5987a3051395afa0ca76f8024065e7f2f4cd9c0"}, "tags": ["chain_ethereum", "level_parse", "proj_opensea"], "refs": [["stg_ethereum__logs"]], "sources": [], "description": "", "columns": {"node": {"name": "node", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "interfaceID": {"name": "interfaceID", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "implementer": {"name": "implementer", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "evt_block_number": {"name": "evt_block_number", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "evt_block_time": {"name": "evt_block_time", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "evt_index": {"name": "evt_index", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "evt_tx_hash": {"name": "evt_tx_hash", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "contract_address": {"name": "contract_address", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "dt": {"name": "dt", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "ethereum_source://models/codegen/opensea/schema.yml", "compiled_path": "target/compiled/ethereum_source/models/codegen/opensea/OpenSeaENSResolver_evt_InterfaceChanged.sql", "build_path": null, "deferred": false, "unrendered_config": {"schema": "opensea", "tags": ["chain_ethereum", "level_parse", "proj_opensea"], "materialized": "incremental", "incremental_strategy": "insert_overwrite", "partition_by": ["dt"], "file_format": "parquet", "pre-hook": [{"sql": "create or replace function opensea_openseaensresolver_interfacechanged_eventdecodeudf as \"io.iftech.sparkudf.hive.opensea_OpenSeaENSResolver_InterfaceChanged_EventDecodeUDF\" using jar \"s3a://ifcrypto/blockchain-dbt/jars/opensea_udf.jar\";"}]}, "created_at": 1650535972.105075, "compiled_sql": "\n\nwith base as (\n    select\n        block_number as evt_block_number,\n        block_timestamp as evt_block_time,\n        log_index as evt_index,\n        transaction_hash as evt_tx_hash,\n        address as contract_address,\n        dt,\n        opensea_openseaensresolver_interfacechanged_eventdecodeudf(unhex_data, topics_arr, '{\"anonymous\": false, \"inputs\": [{\"indexed\": true, \"name\": \"node\", \"type\": \"bytes32\"}, {\"indexed\": true, \"name\": \"interfaceID\", \"type\": \"bytes4\"}, {\"indexed\": false, \"name\": \"implementer\", \"type\": \"address\"}], \"name\": \"InterfaceChanged\", \"type\": \"event\"}', 'InterfaceChanged') as data\n    from ethereum_stg_ethereum.stg_ethereum__logs\n    where address = lower(\"0x9c4e9cce4780062942a7fe34fa2fa7316c872956\")\n    and address_hash = abs(hash(lower(\"0x9c4e9cce4780062942a7fe34fa2fa7316c872956\"))) % 10\n    and selector = \"0x7c69f06bea0bdef565b709e93a147836b0063ba2dd89f02d0b7e8d931e6a6daa\"\n    and selector_hash = abs(hash(\"0x7c69f06bea0bdef565b709e93a147836b0063ba2dd89f02d0b7e8d931e6a6daa\")) % 10\n\n    \n),\n\nfinal as (\n    select\n        evt_block_number,\n        evt_block_time,\n        evt_index,\n        evt_tx_hash,\n        contract_address,\n        dt,\n        data.input.*\n    from base\n)\n\nselect /* REPARTITION(dt) */ *\nfrom final", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "ethereum_opensea.OpenSeaENSResolver_evt_InterfaceChanged"}, "model.ethereum_source.WyvernExchangeV1_call_changeMinimumMakerProtocolFee": {"raw_sql": "{{\n    config(\n        materialized='incremental',\n        incremental_strategy='insert_overwrite',\n        partition_by=['dt'],\n        file_format='parquet',\n        pre_hook={\n            'sql': 'create or replace function opensea_wyvernexchangev1_changeminimummakerprotocolfee_calldecodeudf as \"io.iftech.sparkudf.hive.opensea_WyvernExchangeV1_changeMinimumMakerProtocolFee_CallDecodeUDF\" using jar \"s3a://ifcrypto/blockchain-dbt/jars/opensea_udf.jar\";'\n        }\n    )\n}}\n\nwith base as (\n    select\n        status==1 as call_success,\n        block_number as call_block_number,\n        block_timestamp as call_block_time,\n        trace_address as call_trace_address,\n        transaction_hash as call_tx_hash,\n        to_address as contract_address,\n        dt,\n        opensea_wyvernexchangev1_changeminimummakerprotocolfee_calldecodeudf(unhex_input, unhex_output, '{\"constant\": false, \"inputs\": [{\"name\": \"newMinimumMakerProtocolFee\", \"type\": \"uint256\"}], \"name\": \"changeMinimumMakerProtocolFee\", \"outputs\": [], \"payable\": false, \"stateMutability\": \"nonpayable\", \"type\": \"function\"}', 'changeMinimumMakerProtocolFee') as data\n    from {{ ref('stg_ethereum__traces') }}\n    where to_address = lower(\"0x7Be8076f4EA4A4AD08075C2508e481d6C946D12b\")\n    and address_hash = abs(hash(lower(\"0x7Be8076f4EA4A4AD08075C2508e481d6C946D12b\"))) % 10\n    and selector = \"0x30783134\"\n    and selector_hash = abs(hash(\"0x30783134\")) % 10\n\n    {% if is_incremental() %}\n      and dt = var('dt')\n    {% endif %}\n),\n\nfinal as (\n    select\n        call_success,\n        call_block_number,\n        call_block_time,\n        call_trace_address,\n        call_tx_hash,\n        contract_address,\n        dt,\n        data.input.*,\n        data.output.*\n    from base\n)\n\nselect /* REPARTITION(dt) */ *\nfrom final", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.dbt.is_incremental"], "nodes": ["model.ethereum_source.stg_ethereum__traces"]}, "config": {"enabled": true, "alias": null, "schema": "opensea", "database": null, "tags": ["chain_ethereum", "level_parse", "proj_opensea"], "meta": {}, "materialized": "incremental", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "file_format": "parquet", "partition_by": ["dt"], "incremental_strategy": "insert_overwrite", "post-hook": [], "pre-hook": [{"sql": "create or replace function opensea_wyvernexchangev1_changeminimummakerprotocolfee_calldecodeudf as \"io.iftech.sparkudf.hive.opensea_WyvernExchangeV1_changeMinimumMakerProtocolFee_CallDecodeUDF\" using jar \"s3a://ifcrypto/blockchain-dbt/jars/opensea_udf.jar\";", "transaction": true, "index": null}]}, "database": null, "schema": "ethereum_opensea", "fqn": ["ethereum_source", "codegen", "opensea", "WyvernExchangeV1_call_changeMinimumMakerProtocolFee"], "unique_id": "model.ethereum_source.WyvernExchangeV1_call_changeMinimumMakerProtocolFee", "package_name": "ethereum_source", "root_path": "/Users/songv/Code/jike/web3/dbt_ethereum_source", "path": "codegen/opensea/WyvernExchangeV1_call_changeMinimumMakerProtocolFee.sql", "original_file_path": "models/codegen/opensea/WyvernExchangeV1_call_changeMinimumMakerProtocolFee.sql", "name": "WyvernExchangeV1_call_changeMinimumMakerProtocolFee", "alias": "WyvernExchangeV1_call_changeMinimumMakerProtocolFee", "checksum": {"name": "sha256", "checksum": "580a2138662922d50b196dbf715d4808451d7293dcc7cd1b0f2913f54562b293"}, "tags": ["chain_ethereum", "level_parse", "proj_opensea"], "refs": [["stg_ethereum__traces"]], "sources": [], "description": "", "columns": {"newMinimumMakerProtocolFee": {"name": "newMinimumMakerProtocolFee", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "call_success": {"name": "call_success", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "call_block_number": {"name": "call_block_number", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "call_block_time": {"name": "call_block_time", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "call_trace_address": {"name": "call_trace_address", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "call_tx_hash": {"name": "call_tx_hash", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "contract_address": {"name": "contract_address", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "dt": {"name": "dt", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "ethereum_source://models/codegen/opensea/schema.yml", "compiled_path": "target/compiled/ethereum_source/models/codegen/opensea/WyvernExchangeV1_call_changeMinimumMakerProtocolFee.sql", "build_path": null, "deferred": false, "unrendered_config": {"schema": "opensea", "tags": ["chain_ethereum", "level_parse", "proj_opensea"], "materialized": "incremental", "incremental_strategy": "insert_overwrite", "partition_by": ["dt"], "file_format": "parquet", "pre-hook": [{"sql": "create or replace function opensea_wyvernexchangev1_changeminimummakerprotocolfee_calldecodeudf as \"io.iftech.sparkudf.hive.opensea_WyvernExchangeV1_changeMinimumMakerProtocolFee_CallDecodeUDF\" using jar \"s3a://ifcrypto/blockchain-dbt/jars/opensea_udf.jar\";"}]}, "created_at": 1650535971.931741, "compiled_sql": "\n\nwith base as (\n    select\n        status==1 as call_success,\n        block_number as call_block_number,\n        block_timestamp as call_block_time,\n        trace_address as call_trace_address,\n        transaction_hash as call_tx_hash,\n        to_address as contract_address,\n        dt,\n        opensea_wyvernexchangev1_changeminimummakerprotocolfee_calldecodeudf(unhex_input, unhex_output, '{\"constant\": false, \"inputs\": [{\"name\": \"newMinimumMakerProtocolFee\", \"type\": \"uint256\"}], \"name\": \"changeMinimumMakerProtocolFee\", \"outputs\": [], \"payable\": false, \"stateMutability\": \"nonpayable\", \"type\": \"function\"}', 'changeMinimumMakerProtocolFee') as data\n    from ethereum_stg_ethereum.stg_ethereum__traces\n    where to_address = lower(\"0x7Be8076f4EA4A4AD08075C2508e481d6C946D12b\")\n    and address_hash = abs(hash(lower(\"0x7Be8076f4EA4A4AD08075C2508e481d6C946D12b\"))) % 10\n    and selector = \"0x30783134\"\n    and selector_hash = abs(hash(\"0x30783134\")) % 10\n\n    \n),\n\nfinal as (\n    select\n        call_success,\n        call_block_number,\n        call_block_time,\n        call_trace_address,\n        call_tx_hash,\n        contract_address,\n        dt,\n        data.input.*,\n        data.output.*\n    from base\n)\n\nselect /* REPARTITION(dt) */ *\nfrom final", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "ethereum_opensea.WyvernExchangeV1_call_changeMinimumMakerProtocolFee"}, "model.ethereum_source.WyvernExchangeV2_evt_OrdersMatched": {"raw_sql": "{{\n    config(\n        materialized='incremental',\n        incremental_strategy='insert_overwrite',\n        partition_by=['dt'],\n        file_format='parquet',\n        pre_hook={\n            'sql': 'create or replace function opensea_wyvernexchangev2_ordersmatched_eventdecodeudf as \"io.iftech.sparkudf.hive.opensea_WyvernExchangeV2_OrdersMatched_EventDecodeUDF\" using jar \"s3a://ifcrypto/blockchain-dbt/jars/opensea_udf.jar\";'\n        }\n    )\n}}\n\nwith base as (\n    select\n        block_number as evt_block_number,\n        block_timestamp as evt_block_time,\n        log_index as evt_index,\n        transaction_hash as evt_tx_hash,\n        address as contract_address,\n        dt,\n        opensea_wyvernexchangev2_ordersmatched_eventdecodeudf(unhex_data, topics_arr, '{\"anonymous\": false, \"inputs\": [{\"indexed\": false, \"name\": \"buyHash\", \"type\": \"bytes32\"}, {\"indexed\": false, \"name\": \"sellHash\", \"type\": \"bytes32\"}, {\"indexed\": true, \"name\": \"maker\", \"type\": \"address\"}, {\"indexed\": true, \"name\": \"taker\", \"type\": \"address\"}, {\"indexed\": false, \"name\": \"price\", \"type\": \"uint256\"}, {\"indexed\": true, \"name\": \"metadata\", \"type\": \"bytes32\"}], \"name\": \"OrdersMatched\", \"type\": \"event\"}', 'OrdersMatched') as data\n    from {{ ref('stg_ethereum__logs') }}\n    where address = lower(\"0x7f268357A8c2552623316e2562D90e642bB538E5\")\n    and address_hash = abs(hash(lower(\"0x7f268357A8c2552623316e2562D90e642bB538E5\"))) % 10\n    and selector = \"0xc4109843e0b7d514e4c093114b863f8e7d8d9a458c372cd51bfe526b588006c9\"\n    and selector_hash = abs(hash(\"0xc4109843e0b7d514e4c093114b863f8e7d8d9a458c372cd51bfe526b588006c9\")) % 10\n\n    {% if is_incremental() %}\n      and dt = var('dt')\n    {% endif %}\n),\n\nfinal as (\n    select\n        evt_block_number,\n        evt_block_time,\n        evt_index,\n        evt_tx_hash,\n        contract_address,\n        dt,\n        data.input.*\n    from base\n)\n\nselect /* REPARTITION(dt) */ *\nfrom final", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.dbt.is_incremental"], "nodes": ["model.ethereum_source.stg_ethereum__logs"]}, "config": {"enabled": true, "alias": null, "schema": "opensea", "database": null, "tags": ["chain_ethereum", "level_parse", "proj_opensea"], "meta": {}, "materialized": "incremental", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "file_format": "parquet", "partition_by": ["dt"], "incremental_strategy": "insert_overwrite", "post-hook": [], "pre-hook": [{"sql": "create or replace function opensea_wyvernexchangev2_ordersmatched_eventdecodeudf as \"io.iftech.sparkudf.hive.opensea_WyvernExchangeV2_OrdersMatched_EventDecodeUDF\" using jar \"s3a://ifcrypto/blockchain-dbt/jars/opensea_udf.jar\";", "transaction": true, "index": null}]}, "database": null, "schema": "ethereum_opensea", "fqn": ["ethereum_source", "codegen", "opensea", "WyvernExchangeV2_evt_OrdersMatched"], "unique_id": "model.ethereum_source.WyvernExchangeV2_evt_OrdersMatched", "package_name": "ethereum_source", "root_path": "/Users/songv/Code/jike/web3/dbt_ethereum_source", "path": "codegen/opensea/WyvernExchangeV2_evt_OrdersMatched.sql", "original_file_path": "models/codegen/opensea/WyvernExchangeV2_evt_OrdersMatched.sql", "name": "WyvernExchangeV2_evt_OrdersMatched", "alias": "WyvernExchangeV2_evt_OrdersMatched", "checksum": {"name": "sha256", "checksum": "3b1c6bdb7fc922b316f3477a2b0114f32500a84158deae43caf88032479066ac"}, "tags": ["chain_ethereum", "level_parse", "proj_opensea"], "refs": [["stg_ethereum__logs"]], "sources": [], "description": "", "columns": {"buyHash": {"name": "buyHash", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "sellHash": {"name": "sellHash", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "maker": {"name": "maker", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "taker": {"name": "taker", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "price": {"name": "price", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "metadata": {"name": "metadata", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "evt_block_number": {"name": "evt_block_number", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "evt_block_time": {"name": "evt_block_time", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "evt_index": {"name": "evt_index", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "evt_tx_hash": {"name": "evt_tx_hash", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "contract_address": {"name": "contract_address", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "dt": {"name": "dt", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "ethereum_source://models/codegen/opensea/schema.yml", "compiled_path": "target/compiled/ethereum_source/models/codegen/opensea/WyvernExchangeV2_evt_OrdersMatched.sql", "build_path": null, "deferred": false, "unrendered_config": {"schema": "opensea", "tags": ["chain_ethereum", "level_parse", "proj_opensea"], "materialized": "incremental", "incremental_strategy": "insert_overwrite", "partition_by": ["dt"], "file_format": "parquet", "pre-hook": [{"sql": "create or replace function opensea_wyvernexchangev2_ordersmatched_eventdecodeudf as \"io.iftech.sparkudf.hive.opensea_WyvernExchangeV2_OrdersMatched_EventDecodeUDF\" using jar \"s3a://ifcrypto/blockchain-dbt/jars/opensea_udf.jar\";"}]}, "created_at": 1650535972.009749, "compiled_sql": "\n\nwith base as (\n    select\n        block_number as evt_block_number,\n        block_timestamp as evt_block_time,\n        log_index as evt_index,\n        transaction_hash as evt_tx_hash,\n        address as contract_address,\n        dt,\n        opensea_wyvernexchangev2_ordersmatched_eventdecodeudf(unhex_data, topics_arr, '{\"anonymous\": false, \"inputs\": [{\"indexed\": false, \"name\": \"buyHash\", \"type\": \"bytes32\"}, {\"indexed\": false, \"name\": \"sellHash\", \"type\": \"bytes32\"}, {\"indexed\": true, \"name\": \"maker\", \"type\": \"address\"}, {\"indexed\": true, \"name\": \"taker\", \"type\": \"address\"}, {\"indexed\": false, \"name\": \"price\", \"type\": \"uint256\"}, {\"indexed\": true, \"name\": \"metadata\", \"type\": \"bytes32\"}], \"name\": \"OrdersMatched\", \"type\": \"event\"}', 'OrdersMatched') as data\n    from ethereum_stg_ethereum.stg_ethereum__logs\n    where address = lower(\"0x7f268357A8c2552623316e2562D90e642bB538E5\")\n    and address_hash = abs(hash(lower(\"0x7f268357A8c2552623316e2562D90e642bB538E5\"))) % 10\n    and selector = \"0xc4109843e0b7d514e4c093114b863f8e7d8d9a458c372cd51bfe526b588006c9\"\n    and selector_hash = abs(hash(\"0xc4109843e0b7d514e4c093114b863f8e7d8d9a458c372cd51bfe526b588006c9\")) % 10\n\n    \n),\n\nfinal as (\n    select\n        evt_block_number,\n        evt_block_time,\n        evt_index,\n        evt_tx_hash,\n        contract_address,\n        dt,\n        data.input.*\n    from base\n)\n\nselect /* REPARTITION(dt) */ *\nfrom final", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "ethereum_opensea.WyvernExchangeV2_evt_OrdersMatched"}, "model.ethereum_source.WyvernExchangeV2_evt_NonceIncremented": {"raw_sql": "{{\n    config(\n        materialized='incremental',\n        incremental_strategy='insert_overwrite',\n        partition_by=['dt'],\n        file_format='parquet',\n        pre_hook={\n            'sql': 'create or replace function opensea_wyvernexchangev2_nonceincremented_eventdecodeudf as \"io.iftech.sparkudf.hive.opensea_WyvernExchangeV2_NonceIncremented_EventDecodeUDF\" using jar \"s3a://ifcrypto/blockchain-dbt/jars/opensea_udf.jar\";'\n        }\n    )\n}}\n\nwith base as (\n    select\n        block_number as evt_block_number,\n        block_timestamp as evt_block_time,\n        log_index as evt_index,\n        transaction_hash as evt_tx_hash,\n        address as contract_address,\n        dt,\n        opensea_wyvernexchangev2_nonceincremented_eventdecodeudf(unhex_data, topics_arr, '{\"anonymous\": false, \"inputs\": [{\"indexed\": true, \"name\": \"maker\", \"type\": \"address\"}, {\"indexed\": false, \"name\": \"newNonce\", \"type\": \"uint256\"}], \"name\": \"NonceIncremented\", \"type\": \"event\"}', 'NonceIncremented') as data\n    from {{ ref('stg_ethereum__logs') }}\n    where address = lower(\"0x7f268357A8c2552623316e2562D90e642bB538E5\")\n    and address_hash = abs(hash(lower(\"0x7f268357A8c2552623316e2562D90e642bB538E5\"))) % 10\n    and selector = \"0xa82a649bbd060c9099cd7b7326e2b0dc9e9af0836480e0f849dc9eaa79710b3b\"\n    and selector_hash = abs(hash(\"0xa82a649bbd060c9099cd7b7326e2b0dc9e9af0836480e0f849dc9eaa79710b3b\")) % 10\n\n    {% if is_incremental() %}\n      and dt = var('dt')\n    {% endif %}\n),\n\nfinal as (\n    select\n        evt_block_number,\n        evt_block_time,\n        evt_index,\n        evt_tx_hash,\n        contract_address,\n        dt,\n        data.input.*\n    from base\n)\n\nselect /* REPARTITION(dt) */ *\nfrom final", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.dbt.is_incremental"], "nodes": ["model.ethereum_source.stg_ethereum__logs"]}, "config": {"enabled": true, "alias": null, "schema": "opensea", "database": null, "tags": ["chain_ethereum", "level_parse", "proj_opensea"], "meta": {}, "materialized": "incremental", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "file_format": "parquet", "partition_by": ["dt"], "incremental_strategy": "insert_overwrite", "post-hook": [], "pre-hook": [{"sql": "create or replace function opensea_wyvernexchangev2_nonceincremented_eventdecodeudf as \"io.iftech.sparkudf.hive.opensea_WyvernExchangeV2_NonceIncremented_EventDecodeUDF\" using jar \"s3a://ifcrypto/blockchain-dbt/jars/opensea_udf.jar\";", "transaction": true, "index": null}]}, "database": null, "schema": "ethereum_opensea", "fqn": ["ethereum_source", "codegen", "opensea", "WyvernExchangeV2_evt_NonceIncremented"], "unique_id": "model.ethereum_source.WyvernExchangeV2_evt_NonceIncremented", "package_name": "ethereum_source", "root_path": "/Users/songv/Code/jike/web3/dbt_ethereum_source", "path": "codegen/opensea/WyvernExchangeV2_evt_NonceIncremented.sql", "original_file_path": "models/codegen/opensea/WyvernExchangeV2_evt_NonceIncremented.sql", "name": "WyvernExchangeV2_evt_NonceIncremented", "alias": "WyvernExchangeV2_evt_NonceIncremented", "checksum": {"name": "sha256", "checksum": "5aeb6090873999d68b67ed04bcba8a7176c883997d5cc059ab8ef83da4970228"}, "tags": ["chain_ethereum", "level_parse", "proj_opensea"], "refs": [["stg_ethereum__logs"]], "sources": [], "description": "", "columns": {"maker": {"name": "maker", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "newNonce": {"name": "newNonce", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "evt_block_number": {"name": "evt_block_number", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "evt_block_time": {"name": "evt_block_time", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "evt_index": {"name": "evt_index", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "evt_tx_hash": {"name": "evt_tx_hash", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "contract_address": {"name": "contract_address", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "dt": {"name": "dt", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "ethereum_source://models/codegen/opensea/schema.yml", "compiled_path": "target/compiled/ethereum_source/models/codegen/opensea/WyvernExchangeV2_evt_NonceIncremented.sql", "build_path": null, "deferred": false, "unrendered_config": {"schema": "opensea", "tags": ["chain_ethereum", "level_parse", "proj_opensea"], "materialized": "incremental", "incremental_strategy": "insert_overwrite", "partition_by": ["dt"], "file_format": "parquet", "pre-hook": [{"sql": "create or replace function opensea_wyvernexchangev2_nonceincremented_eventdecodeudf as \"io.iftech.sparkudf.hive.opensea_WyvernExchangeV2_NonceIncremented_EventDecodeUDF\" using jar \"s3a://ifcrypto/blockchain-dbt/jars/opensea_udf.jar\";"}]}, "created_at": 1650535972.011283, "compiled_sql": "\n\nwith base as (\n    select\n        block_number as evt_block_number,\n        block_timestamp as evt_block_time,\n        log_index as evt_index,\n        transaction_hash as evt_tx_hash,\n        address as contract_address,\n        dt,\n        opensea_wyvernexchangev2_nonceincremented_eventdecodeudf(unhex_data, topics_arr, '{\"anonymous\": false, \"inputs\": [{\"indexed\": true, \"name\": \"maker\", \"type\": \"address\"}, {\"indexed\": false, \"name\": \"newNonce\", \"type\": \"uint256\"}], \"name\": \"NonceIncremented\", \"type\": \"event\"}', 'NonceIncremented') as data\n    from ethereum_stg_ethereum.stg_ethereum__logs\n    where address = lower(\"0x7f268357A8c2552623316e2562D90e642bB538E5\")\n    and address_hash = abs(hash(lower(\"0x7f268357A8c2552623316e2562D90e642bB538E5\"))) % 10\n    and selector = \"0xa82a649bbd060c9099cd7b7326e2b0dc9e9af0836480e0f849dc9eaa79710b3b\"\n    and selector_hash = abs(hash(\"0xa82a649bbd060c9099cd7b7326e2b0dc9e9af0836480e0f849dc9eaa79710b3b\")) % 10\n\n    \n),\n\nfinal as (\n    select\n        evt_block_number,\n        evt_block_time,\n        evt_index,\n        evt_tx_hash,\n        contract_address,\n        dt,\n        data.input.*\n    from base\n)\n\nselect /* REPARTITION(dt) */ *\nfrom final", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "ethereum_opensea.WyvernExchangeV2_evt_NonceIncremented"}, "model.ethereum_source.OpenSeaENSResolver_call_setPubkey": {"raw_sql": "{{\n    config(\n        materialized='incremental',\n        incremental_strategy='insert_overwrite',\n        partition_by=['dt'],\n        file_format='parquet',\n        pre_hook={\n            'sql': 'create or replace function opensea_openseaensresolver_setpubkey_calldecodeudf as \"io.iftech.sparkudf.hive.opensea_OpenSeaENSResolver_setPubkey_CallDecodeUDF\" using jar \"s3a://ifcrypto/blockchain-dbt/jars/opensea_udf.jar\";'\n        }\n    )\n}}\n\nwith base as (\n    select\n        status==1 as call_success,\n        block_number as call_block_number,\n        block_timestamp as call_block_time,\n        trace_address as call_trace_address,\n        transaction_hash as call_tx_hash,\n        to_address as contract_address,\n        dt,\n        opensea_openseaensresolver_setpubkey_calldecodeudf(unhex_input, unhex_output, '{\"constant\": false, \"inputs\": [{\"name\": \"node\", \"type\": \"bytes32\"}, {\"name\": \"x\", \"type\": \"bytes32\"}, {\"name\": \"y\", \"type\": \"bytes32\"}], \"name\": \"setPubkey\", \"outputs\": [], \"payable\": false, \"stateMutability\": \"nonpayable\", \"type\": \"function\"}', 'setPubkey') as data\n    from {{ ref('stg_ethereum__traces') }}\n    where to_address = lower(\"0x9c4e9cce4780062942a7fe34fa2fa7316c872956\")\n    and address_hash = abs(hash(lower(\"0x9c4e9cce4780062942a7fe34fa2fa7316c872956\"))) % 10\n    and selector = \"0x30783239\"\n    and selector_hash = abs(hash(\"0x30783239\")) % 10\n\n    {% if is_incremental() %}\n      and dt = var('dt')\n    {% endif %}\n),\n\nfinal as (\n    select\n        call_success,\n        call_block_number,\n        call_block_time,\n        call_trace_address,\n        call_tx_hash,\n        contract_address,\n        dt,\n        data.input.*,\n        data.output.*\n    from base\n)\n\nselect /* REPARTITION(dt) */ *\nfrom final", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.dbt.is_incremental"], "nodes": ["model.ethereum_source.stg_ethereum__traces"]}, "config": {"enabled": true, "alias": null, "schema": "opensea", "database": null, "tags": ["chain_ethereum", "level_parse", "proj_opensea"], "meta": {}, "materialized": "incremental", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "file_format": "parquet", "partition_by": ["dt"], "incremental_strategy": "insert_overwrite", "post-hook": [], "pre-hook": [{"sql": "create or replace function opensea_openseaensresolver_setpubkey_calldecodeudf as \"io.iftech.sparkudf.hive.opensea_OpenSeaENSResolver_setPubkey_CallDecodeUDF\" using jar \"s3a://ifcrypto/blockchain-dbt/jars/opensea_udf.jar\";", "transaction": true, "index": null}]}, "database": null, "schema": "ethereum_opensea", "fqn": ["ethereum_source", "codegen", "opensea", "OpenSeaENSResolver_call_setPubkey"], "unique_id": "model.ethereum_source.OpenSeaENSResolver_call_setPubkey", "package_name": "ethereum_source", "root_path": "/Users/songv/Code/jike/web3/dbt_ethereum_source", "path": "codegen/opensea/OpenSeaENSResolver_call_setPubkey.sql", "original_file_path": "models/codegen/opensea/OpenSeaENSResolver_call_setPubkey.sql", "name": "OpenSeaENSResolver_call_setPubkey", "alias": "OpenSeaENSResolver_call_setPubkey", "checksum": {"name": "sha256", "checksum": "5055233deda4d305eb97ebd1f61a33add56c8ea182ff33f5f8a1a3a7e27053d7"}, "tags": ["chain_ethereum", "level_parse", "proj_opensea"], "refs": [["stg_ethereum__traces"]], "sources": [], "description": "", "columns": {"node": {"name": "node", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "x": {"name": "x", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "y": {"name": "y", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "call_success": {"name": "call_success", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "call_block_number": {"name": "call_block_number", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "call_block_time": {"name": "call_block_time", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "call_trace_address": {"name": "call_trace_address", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "call_tx_hash": {"name": "call_tx_hash", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "contract_address": {"name": "contract_address", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "dt": {"name": "dt", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "ethereum_source://models/codegen/opensea/schema.yml", "compiled_path": "target/compiled/ethereum_source/models/codegen/opensea/OpenSeaENSResolver_call_setPubkey.sql", "build_path": null, "deferred": false, "unrendered_config": {"schema": "opensea", "tags": ["chain_ethereum", "level_parse", "proj_opensea"], "materialized": "incremental", "incremental_strategy": "insert_overwrite", "partition_by": ["dt"], "file_format": "parquet", "pre-hook": [{"sql": "create or replace function opensea_openseaensresolver_setpubkey_calldecodeudf as \"io.iftech.sparkudf.hive.opensea_OpenSeaENSResolver_setPubkey_CallDecodeUDF\" using jar \"s3a://ifcrypto/blockchain-dbt/jars/opensea_udf.jar\";"}]}, "created_at": 1650535972.122155, "compiled_sql": "\n\nwith base as (\n    select\n        status==1 as call_success,\n        block_number as call_block_number,\n        block_timestamp as call_block_time,\n        trace_address as call_trace_address,\n        transaction_hash as call_tx_hash,\n        to_address as contract_address,\n        dt,\n        opensea_openseaensresolver_setpubkey_calldecodeudf(unhex_input, unhex_output, '{\"constant\": false, \"inputs\": [{\"name\": \"node\", \"type\": \"bytes32\"}, {\"name\": \"x\", \"type\": \"bytes32\"}, {\"name\": \"y\", \"type\": \"bytes32\"}], \"name\": \"setPubkey\", \"outputs\": [], \"payable\": false, \"stateMutability\": \"nonpayable\", \"type\": \"function\"}', 'setPubkey') as data\n    from ethereum_stg_ethereum.stg_ethereum__traces\n    where to_address = lower(\"0x9c4e9cce4780062942a7fe34fa2fa7316c872956\")\n    and address_hash = abs(hash(lower(\"0x9c4e9cce4780062942a7fe34fa2fa7316c872956\"))) % 10\n    and selector = \"0x30783239\"\n    and selector_hash = abs(hash(\"0x30783239\")) % 10\n\n    \n),\n\nfinal as (\n    select\n        call_success,\n        call_block_number,\n        call_block_time,\n        call_trace_address,\n        call_tx_hash,\n        contract_address,\n        dt,\n        data.input.*,\n        data.output.*\n    from base\n)\n\nselect /* REPARTITION(dt) */ *\nfrom final", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "ethereum_opensea.OpenSeaENSResolver_call_setPubkey"}, "model.ethereum_source.OpenSeaENSResolver_evt_AddrChanged": {"raw_sql": "{{\n    config(\n        materialized='incremental',\n        incremental_strategy='insert_overwrite',\n        partition_by=['dt'],\n        file_format='parquet',\n        pre_hook={\n            'sql': 'create or replace function opensea_openseaensresolver_addrchanged_eventdecodeudf as \"io.iftech.sparkudf.hive.opensea_OpenSeaENSResolver_AddrChanged_EventDecodeUDF\" using jar \"s3a://ifcrypto/blockchain-dbt/jars/opensea_udf.jar\";'\n        }\n    )\n}}\n\nwith base as (\n    select\n        block_number as evt_block_number,\n        block_timestamp as evt_block_time,\n        log_index as evt_index,\n        transaction_hash as evt_tx_hash,\n        address as contract_address,\n        dt,\n        opensea_openseaensresolver_addrchanged_eventdecodeudf(unhex_data, topics_arr, '{\"anonymous\": false, \"inputs\": [{\"indexed\": true, \"name\": \"node\", \"type\": \"bytes32\"}, {\"indexed\": false, \"name\": \"a\", \"type\": \"address\"}], \"name\": \"AddrChanged\", \"type\": \"event\"}', 'AddrChanged') as data\n    from {{ ref('stg_ethereum__logs') }}\n    where address = lower(\"0x9c4e9cce4780062942a7fe34fa2fa7316c872956\")\n    and address_hash = abs(hash(lower(\"0x9c4e9cce4780062942a7fe34fa2fa7316c872956\"))) % 10\n    and selector = \"0x52d7d861f09ab3d26239d492e8968629f95e9e318cf0b73bfddc441522a15fd2\"\n    and selector_hash = abs(hash(\"0x52d7d861f09ab3d26239d492e8968629f95e9e318cf0b73bfddc441522a15fd2\")) % 10\n\n    {% if is_incremental() %}\n      and dt = var('dt')\n    {% endif %}\n),\n\nfinal as (\n    select\n        evt_block_number,\n        evt_block_time,\n        evt_index,\n        evt_tx_hash,\n        contract_address,\n        dt,\n        data.input.*\n    from base\n)\n\nselect /* REPARTITION(dt) */ *\nfrom final", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.dbt.is_incremental"], "nodes": ["model.ethereum_source.stg_ethereum__logs"]}, "config": {"enabled": true, "alias": null, "schema": "opensea", "database": null, "tags": ["chain_ethereum", "level_parse", "proj_opensea"], "meta": {}, "materialized": "incremental", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "file_format": "parquet", "partition_by": ["dt"], "incremental_strategy": "insert_overwrite", "post-hook": [], "pre-hook": [{"sql": "create or replace function opensea_openseaensresolver_addrchanged_eventdecodeudf as \"io.iftech.sparkudf.hive.opensea_OpenSeaENSResolver_AddrChanged_EventDecodeUDF\" using jar \"s3a://ifcrypto/blockchain-dbt/jars/opensea_udf.jar\";", "transaction": true, "index": null}]}, "database": null, "schema": "ethereum_opensea", "fqn": ["ethereum_source", "codegen", "opensea", "OpenSeaENSResolver_evt_AddrChanged"], "unique_id": "model.ethereum_source.OpenSeaENSResolver_evt_AddrChanged", "package_name": "ethereum_source", "root_path": "/Users/songv/Code/jike/web3/dbt_ethereum_source", "path": "codegen/opensea/OpenSeaENSResolver_evt_AddrChanged.sql", "original_file_path": "models/codegen/opensea/OpenSeaENSResolver_evt_AddrChanged.sql", "name": "OpenSeaENSResolver_evt_AddrChanged", "alias": "OpenSeaENSResolver_evt_AddrChanged", "checksum": {"name": "sha256", "checksum": "7a20e0fece1fdd60fb726346fce574e0b216c0dbc90d781b37593ed25bda232c"}, "tags": ["chain_ethereum", "level_parse", "proj_opensea"], "refs": [["stg_ethereum__logs"]], "sources": [], "description": "", "columns": {"node": {"name": "node", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "a": {"name": "a", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "evt_block_number": {"name": "evt_block_number", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "evt_block_time": {"name": "evt_block_time", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "evt_index": {"name": "evt_index", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "evt_tx_hash": {"name": "evt_tx_hash", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "contract_address": {"name": "contract_address", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "dt": {"name": "dt", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "ethereum_source://models/codegen/opensea/schema.yml", "compiled_path": "target/compiled/ethereum_source/models/codegen/opensea/OpenSeaENSResolver_evt_AddrChanged.sql", "build_path": null, "deferred": false, "unrendered_config": {"schema": "opensea", "tags": ["chain_ethereum", "level_parse", "proj_opensea"], "materialized": "incremental", "incremental_strategy": "insert_overwrite", "partition_by": ["dt"], "file_format": "parquet", "pre-hook": [{"sql": "create or replace function opensea_openseaensresolver_addrchanged_eventdecodeudf as \"io.iftech.sparkudf.hive.opensea_OpenSeaENSResolver_AddrChanged_EventDecodeUDF\" using jar \"s3a://ifcrypto/blockchain-dbt/jars/opensea_udf.jar\";"}]}, "created_at": 1650535972.1086562, "compiled_sql": "\n\nwith base as (\n    select\n        block_number as evt_block_number,\n        block_timestamp as evt_block_time,\n        log_index as evt_index,\n        transaction_hash as evt_tx_hash,\n        address as contract_address,\n        dt,\n        opensea_openseaensresolver_addrchanged_eventdecodeudf(unhex_data, topics_arr, '{\"anonymous\": false, \"inputs\": [{\"indexed\": true, \"name\": \"node\", \"type\": \"bytes32\"}, {\"indexed\": false, \"name\": \"a\", \"type\": \"address\"}], \"name\": \"AddrChanged\", \"type\": \"event\"}', 'AddrChanged') as data\n    from ethereum_stg_ethereum.stg_ethereum__logs\n    where address = lower(\"0x9c4e9cce4780062942a7fe34fa2fa7316c872956\")\n    and address_hash = abs(hash(lower(\"0x9c4e9cce4780062942a7fe34fa2fa7316c872956\"))) % 10\n    and selector = \"0x52d7d861f09ab3d26239d492e8968629f95e9e318cf0b73bfddc441522a15fd2\"\n    and selector_hash = abs(hash(\"0x52d7d861f09ab3d26239d492e8968629f95e9e318cf0b73bfddc441522a15fd2\")) % 10\n\n    \n),\n\nfinal as (\n    select\n        evt_block_number,\n        evt_block_time,\n        evt_index,\n        evt_tx_hash,\n        contract_address,\n        dt,\n        data.input.*\n    from base\n)\n\nselect /* REPARTITION(dt) */ *\nfrom final", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "ethereum_opensea.OpenSeaENSResolver_evt_AddrChanged"}, "model.ethereum_source.WyvernExchangeV2_call_calculateFinalPrice": {"raw_sql": "{{\n    config(\n        materialized='incremental',\n        incremental_strategy='insert_overwrite',\n        partition_by=['dt'],\n        file_format='parquet',\n        pre_hook={\n            'sql': 'create or replace function opensea_wyvernexchangev2_calculatefinalprice_calldecodeudf as \"io.iftech.sparkudf.hive.opensea_WyvernExchangeV2_calculateFinalPrice_CallDecodeUDF\" using jar \"s3a://ifcrypto/blockchain-dbt/jars/opensea_udf.jar\";'\n        }\n    )\n}}\n\nwith base as (\n    select\n        status==1 as call_success,\n        block_number as call_block_number,\n        block_timestamp as call_block_time,\n        trace_address as call_trace_address,\n        transaction_hash as call_tx_hash,\n        to_address as contract_address,\n        dt,\n        opensea_wyvernexchangev2_calculatefinalprice_calldecodeudf(unhex_input, unhex_output, '{\"constant\": true, \"inputs\": [{\"name\": \"side\", \"type\": \"uint8\"}, {\"name\": \"saleKind\", \"type\": \"uint8\"}, {\"name\": \"basePrice\", \"type\": \"uint256\"}, {\"name\": \"extra\", \"type\": \"uint256\"}, {\"name\": \"listingTime\", \"type\": \"uint256\"}, {\"name\": \"expirationTime\", \"type\": \"uint256\"}], \"name\": \"calculateFinalPrice\", \"outputs\": [{\"name\": \"\", \"type\": \"uint256\"}], \"payable\": false, \"stateMutability\": \"view\", \"type\": \"function\"}', 'calculateFinalPrice') as data\n    from {{ ref('stg_ethereum__traces') }}\n    where to_address = lower(\"0x7f268357A8c2552623316e2562D90e642bB538E5\")\n    and address_hash = abs(hash(lower(\"0x7f268357A8c2552623316e2562D90e642bB538E5\"))) % 10\n    and selector = \"0x30783633\"\n    and selector_hash = abs(hash(\"0x30783633\")) % 10\n\n    {% if is_incremental() %}\n      and dt = var('dt')\n    {% endif %}\n),\n\nfinal as (\n    select\n        call_success,\n        call_block_number,\n        call_block_time,\n        call_trace_address,\n        call_tx_hash,\n        contract_address,\n        dt,\n        data.input.*,\n        data.output.*\n    from base\n)\n\nselect /* REPARTITION(dt) */ *\nfrom final", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.dbt.is_incremental"], "nodes": ["model.ethereum_source.stg_ethereum__traces"]}, "config": {"enabled": true, "alias": null, "schema": "opensea", "database": null, "tags": ["chain_ethereum", "level_parse", "proj_opensea"], "meta": {}, "materialized": "incremental", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "file_format": "parquet", "partition_by": ["dt"], "incremental_strategy": "insert_overwrite", "post-hook": [], "pre-hook": [{"sql": "create or replace function opensea_wyvernexchangev2_calculatefinalprice_calldecodeudf as \"io.iftech.sparkudf.hive.opensea_WyvernExchangeV2_calculateFinalPrice_CallDecodeUDF\" using jar \"s3a://ifcrypto/blockchain-dbt/jars/opensea_udf.jar\";", "transaction": true, "index": null}]}, "database": null, "schema": "ethereum_opensea", "fqn": ["ethereum_source", "codegen", "opensea", "WyvernExchangeV2_call_calculateFinalPrice"], "unique_id": "model.ethereum_source.WyvernExchangeV2_call_calculateFinalPrice", "package_name": "ethereum_source", "root_path": "/Users/songv/Code/jike/web3/dbt_ethereum_source", "path": "codegen/opensea/WyvernExchangeV2_call_calculateFinalPrice.sql", "original_file_path": "models/codegen/opensea/WyvernExchangeV2_call_calculateFinalPrice.sql", "name": "WyvernExchangeV2_call_calculateFinalPrice", "alias": "WyvernExchangeV2_call_calculateFinalPrice", "checksum": {"name": "sha256", "checksum": "cd30ee64002a4990ec45b9c02356e1b0e9a5356baf622f2b3ea0b0da90a83d10"}, "tags": ["chain_ethereum", "level_parse", "proj_opensea"], "refs": [["stg_ethereum__traces"]], "sources": [], "description": "", "columns": {"side": {"name": "side", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "saleKind": {"name": "saleKind", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "basePrice": {"name": "basePrice", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "extra": {"name": "extra", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "listingTime": {"name": "listingTime", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "expirationTime": {"name": "expirationTime", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "output_0": {"name": "output_0", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "call_success": {"name": "call_success", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "call_block_number": {"name": "call_block_number", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "call_block_time": {"name": "call_block_time", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "call_trace_address": {"name": "call_trace_address", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "call_tx_hash": {"name": "call_tx_hash", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "contract_address": {"name": "contract_address", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "dt": {"name": "dt", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "ethereum_source://models/codegen/opensea/schema.yml", "compiled_path": "target/compiled/ethereum_source/models/codegen/opensea/WyvernExchangeV2_call_calculateFinalPrice.sql", "build_path": null, "deferred": false, "unrendered_config": {"schema": "opensea", "tags": ["chain_ethereum", "level_parse", "proj_opensea"], "materialized": "incremental", "incremental_strategy": "insert_overwrite", "partition_by": ["dt"], "file_format": "parquet", "pre-hook": [{"sql": "create or replace function opensea_wyvernexchangev2_calculatefinalprice_calldecodeudf as \"io.iftech.sparkudf.hive.opensea_WyvernExchangeV2_calculateFinalPrice_CallDecodeUDF\" using jar \"s3a://ifcrypto/blockchain-dbt/jars/opensea_udf.jar\";"}]}, "created_at": 1650535972.045631, "compiled_sql": "\n\nwith base as (\n    select\n        status==1 as call_success,\n        block_number as call_block_number,\n        block_timestamp as call_block_time,\n        trace_address as call_trace_address,\n        transaction_hash as call_tx_hash,\n        to_address as contract_address,\n        dt,\n        opensea_wyvernexchangev2_calculatefinalprice_calldecodeudf(unhex_input, unhex_output, '{\"constant\": true, \"inputs\": [{\"name\": \"side\", \"type\": \"uint8\"}, {\"name\": \"saleKind\", \"type\": \"uint8\"}, {\"name\": \"basePrice\", \"type\": \"uint256\"}, {\"name\": \"extra\", \"type\": \"uint256\"}, {\"name\": \"listingTime\", \"type\": \"uint256\"}, {\"name\": \"expirationTime\", \"type\": \"uint256\"}], \"name\": \"calculateFinalPrice\", \"outputs\": [{\"name\": \"\", \"type\": \"uint256\"}], \"payable\": false, \"stateMutability\": \"view\", \"type\": \"function\"}', 'calculateFinalPrice') as data\n    from ethereum_stg_ethereum.stg_ethereum__traces\n    where to_address = lower(\"0x7f268357A8c2552623316e2562D90e642bB538E5\")\n    and address_hash = abs(hash(lower(\"0x7f268357A8c2552623316e2562D90e642bB538E5\"))) % 10\n    and selector = \"0x30783633\"\n    and selector_hash = abs(hash(\"0x30783633\")) % 10\n\n    \n),\n\nfinal as (\n    select\n        call_success,\n        call_block_number,\n        call_block_time,\n        call_trace_address,\n        call_tx_hash,\n        contract_address,\n        dt,\n        data.input.*,\n        data.output.*\n    from base\n)\n\nselect /* REPARTITION(dt) */ *\nfrom final", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "ethereum_opensea.WyvernExchangeV2_call_calculateFinalPrice"}, "model.ethereum_source.WyvernExchangeV2_call_cancelOrder_": {"raw_sql": "{{\n    config(\n        materialized='incremental',\n        incremental_strategy='insert_overwrite',\n        partition_by=['dt'],\n        file_format='parquet',\n        pre_hook={\n            'sql': 'create or replace function opensea_wyvernexchangev2_cancelorder__calldecodeudf as \"io.iftech.sparkudf.hive.opensea_WyvernExchangeV2_cancelOrder__CallDecodeUDF\" using jar \"s3a://ifcrypto/blockchain-dbt/jars/opensea_udf.jar\";'\n        }\n    )\n}}\n\nwith base as (\n    select\n        status==1 as call_success,\n        block_number as call_block_number,\n        block_timestamp as call_block_time,\n        trace_address as call_trace_address,\n        transaction_hash as call_tx_hash,\n        to_address as contract_address,\n        dt,\n        opensea_wyvernexchangev2_cancelorder__calldecodeudf(unhex_input, unhex_output, '{\"constant\": false, \"inputs\": [{\"name\": \"addrs\", \"type\": \"address[7]\"}, {\"name\": \"uints\", \"type\": \"uint256[9]\"}, {\"name\": \"feeMethod\", \"type\": \"uint8\"}, {\"name\": \"side\", \"type\": \"uint8\"}, {\"name\": \"saleKind\", \"type\": \"uint8\"}, {\"name\": \"howToCall\", \"type\": \"uint8\"}, {\"name\": \"calldata\", \"type\": \"bytes\"}, {\"name\": \"replacementPattern\", \"type\": \"bytes\"}, {\"name\": \"staticExtradata\", \"type\": \"bytes\"}, {\"name\": \"v\", \"type\": \"uint8\"}, {\"name\": \"r\", \"type\": \"bytes32\"}, {\"name\": \"s\", \"type\": \"bytes32\"}], \"name\": \"cancelOrder_\", \"outputs\": [], \"payable\": false, \"stateMutability\": \"nonpayable\", \"type\": \"function\"}', 'cancelOrder_') as data\n    from {{ ref('stg_ethereum__traces') }}\n    where to_address = lower(\"0x7f268357A8c2552623316e2562D90e642bB538E5\")\n    and address_hash = abs(hash(lower(\"0x7f268357A8c2552623316e2562D90e642bB538E5\"))) % 10\n    and selector = \"0x30786138\"\n    and selector_hash = abs(hash(\"0x30786138\")) % 10\n\n    {% if is_incremental() %}\n      and dt = var('dt')\n    {% endif %}\n),\n\nfinal as (\n    select\n        call_success,\n        call_block_number,\n        call_block_time,\n        call_trace_address,\n        call_tx_hash,\n        contract_address,\n        dt,\n        data.input.*,\n        data.output.*\n    from base\n)\n\nselect /* REPARTITION(dt) */ *\nfrom final", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.dbt.is_incremental"], "nodes": ["model.ethereum_source.stg_ethereum__traces"]}, "config": {"enabled": true, "alias": null, "schema": "opensea", "database": null, "tags": ["chain_ethereum", "level_parse", "proj_opensea"], "meta": {}, "materialized": "incremental", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "file_format": "parquet", "partition_by": ["dt"], "incremental_strategy": "insert_overwrite", "post-hook": [], "pre-hook": [{"sql": "create or replace function opensea_wyvernexchangev2_cancelorder__calldecodeudf as \"io.iftech.sparkudf.hive.opensea_WyvernExchangeV2_cancelOrder__CallDecodeUDF\" using jar \"s3a://ifcrypto/blockchain-dbt/jars/opensea_udf.jar\";", "transaction": true, "index": null}]}, "database": null, "schema": "ethereum_opensea", "fqn": ["ethereum_source", "codegen", "opensea", "WyvernExchangeV2_call_cancelOrder_"], "unique_id": "model.ethereum_source.WyvernExchangeV2_call_cancelOrder_", "package_name": "ethereum_source", "root_path": "/Users/songv/Code/jike/web3/dbt_ethereum_source", "path": "codegen/opensea/WyvernExchangeV2_call_cancelOrder_.sql", "original_file_path": "models/codegen/opensea/WyvernExchangeV2_call_cancelOrder_.sql", "name": "WyvernExchangeV2_call_cancelOrder_", "alias": "WyvernExchangeV2_call_cancelOrder_", "checksum": {"name": "sha256", "checksum": "7bd4679ed7580b0a1b4708d1852db8e7fb7e74b83086f690c98911384867b074"}, "tags": ["chain_ethereum", "level_parse", "proj_opensea"], "refs": [["stg_ethereum__traces"]], "sources": [], "description": "", "columns": {"addrs": {"name": "addrs", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "uints": {"name": "uints", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "feeMethod": {"name": "feeMethod", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "side": {"name": "side", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "saleKind": {"name": "saleKind", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "howToCall": {"name": "howToCall", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "calldata": {"name": "calldata", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "replacementPattern": {"name": "replacementPattern", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "staticExtradata": {"name": "staticExtradata", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "v": {"name": "v", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "r": {"name": "r", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "s": {"name": "s", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "call_success": {"name": "call_success", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "call_block_number": {"name": "call_block_number", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "call_block_time": {"name": "call_block_time", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "call_trace_address": {"name": "call_trace_address", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "call_tx_hash": {"name": "call_tx_hash", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "contract_address": {"name": "contract_address", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "dt": {"name": "dt", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "ethereum_source://models/codegen/opensea/schema.yml", "compiled_path": "target/compiled/ethereum_source/models/codegen/opensea/WyvernExchangeV2_call_cancelOrder_.sql", "build_path": null, "deferred": false, "unrendered_config": {"schema": "opensea", "tags": ["chain_ethereum", "level_parse", "proj_opensea"], "materialized": "incremental", "incremental_strategy": "insert_overwrite", "partition_by": ["dt"], "file_format": "parquet", "pre-hook": [{"sql": "create or replace function opensea_wyvernexchangev2_cancelorder__calldecodeudf as \"io.iftech.sparkudf.hive.opensea_WyvernExchangeV2_cancelOrder__CallDecodeUDF\" using jar \"s3a://ifcrypto/blockchain-dbt/jars/opensea_udf.jar\";"}]}, "created_at": 1650535972.0748658, "compiled_sql": "\n\nwith base as (\n    select\n        status==1 as call_success,\n        block_number as call_block_number,\n        block_timestamp as call_block_time,\n        trace_address as call_trace_address,\n        transaction_hash as call_tx_hash,\n        to_address as contract_address,\n        dt,\n        opensea_wyvernexchangev2_cancelorder__calldecodeudf(unhex_input, unhex_output, '{\"constant\": false, \"inputs\": [{\"name\": \"addrs\", \"type\": \"address[7]\"}, {\"name\": \"uints\", \"type\": \"uint256[9]\"}, {\"name\": \"feeMethod\", \"type\": \"uint8\"}, {\"name\": \"side\", \"type\": \"uint8\"}, {\"name\": \"saleKind\", \"type\": \"uint8\"}, {\"name\": \"howToCall\", \"type\": \"uint8\"}, {\"name\": \"calldata\", \"type\": \"bytes\"}, {\"name\": \"replacementPattern\", \"type\": \"bytes\"}, {\"name\": \"staticExtradata\", \"type\": \"bytes\"}, {\"name\": \"v\", \"type\": \"uint8\"}, {\"name\": \"r\", \"type\": \"bytes32\"}, {\"name\": \"s\", \"type\": \"bytes32\"}], \"name\": \"cancelOrder_\", \"outputs\": [], \"payable\": false, \"stateMutability\": \"nonpayable\", \"type\": \"function\"}', 'cancelOrder_') as data\n    from ethereum_stg_ethereum.stg_ethereum__traces\n    where to_address = lower(\"0x7f268357A8c2552623316e2562D90e642bB538E5\")\n    and address_hash = abs(hash(lower(\"0x7f268357A8c2552623316e2562D90e642bB538E5\"))) % 10\n    and selector = \"0x30786138\"\n    and selector_hash = abs(hash(\"0x30786138\")) % 10\n\n    \n),\n\nfinal as (\n    select\n        call_success,\n        call_block_number,\n        call_block_time,\n        call_trace_address,\n        call_tx_hash,\n        contract_address,\n        dt,\n        data.input.*,\n        data.output.*\n    from base\n)\n\nselect /* REPARTITION(dt) */ *\nfrom final", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "ethereum_opensea.WyvernExchangeV2_call_cancelOrder_"}, "model.ethereum_source.WyvernExchangeV1_call_transferOwnership": {"raw_sql": "{{\n    config(\n        materialized='incremental',\n        incremental_strategy='insert_overwrite',\n        partition_by=['dt'],\n        file_format='parquet',\n        pre_hook={\n            'sql': 'create or replace function opensea_wyvernexchangev1_transferownership_calldecodeudf as \"io.iftech.sparkudf.hive.opensea_WyvernExchangeV1_transferOwnership_CallDecodeUDF\" using jar \"s3a://ifcrypto/blockchain-dbt/jars/opensea_udf.jar\";'\n        }\n    )\n}}\n\nwith base as (\n    select\n        status==1 as call_success,\n        block_number as call_block_number,\n        block_timestamp as call_block_time,\n        trace_address as call_trace_address,\n        transaction_hash as call_tx_hash,\n        to_address as contract_address,\n        dt,\n        opensea_wyvernexchangev1_transferownership_calldecodeudf(unhex_input, unhex_output, '{\"constant\": false, \"inputs\": [{\"name\": \"newOwner\", \"type\": \"address\"}], \"name\": \"transferOwnership\", \"outputs\": [], \"payable\": false, \"stateMutability\": \"nonpayable\", \"type\": \"function\"}', 'transferOwnership') as data\n    from {{ ref('stg_ethereum__traces') }}\n    where to_address = lower(\"0x7Be8076f4EA4A4AD08075C2508e481d6C946D12b\")\n    and address_hash = abs(hash(lower(\"0x7Be8076f4EA4A4AD08075C2508e481d6C946D12b\"))) % 10\n    and selector = \"0x30786632\"\n    and selector_hash = abs(hash(\"0x30786632\")) % 10\n\n    {% if is_incremental() %}\n      and dt = var('dt')\n    {% endif %}\n),\n\nfinal as (\n    select\n        call_success,\n        call_block_number,\n        call_block_time,\n        call_trace_address,\n        call_tx_hash,\n        contract_address,\n        dt,\n        data.input.*,\n        data.output.*\n    from base\n)\n\nselect /* REPARTITION(dt) */ *\nfrom final", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.dbt.is_incremental"], "nodes": ["model.ethereum_source.stg_ethereum__traces"]}, "config": {"enabled": true, "alias": null, "schema": "opensea", "database": null, "tags": ["chain_ethereum", "level_parse", "proj_opensea"], "meta": {}, "materialized": "incremental", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "file_format": "parquet", "partition_by": ["dt"], "incremental_strategy": "insert_overwrite", "post-hook": [], "pre-hook": [{"sql": "create or replace function opensea_wyvernexchangev1_transferownership_calldecodeudf as \"io.iftech.sparkudf.hive.opensea_WyvernExchangeV1_transferOwnership_CallDecodeUDF\" using jar \"s3a://ifcrypto/blockchain-dbt/jars/opensea_udf.jar\";", "transaction": true, "index": null}]}, "database": null, "schema": "ethereum_opensea", "fqn": ["ethereum_source", "codegen", "opensea", "WyvernExchangeV1_call_transferOwnership"], "unique_id": "model.ethereum_source.WyvernExchangeV1_call_transferOwnership", "package_name": "ethereum_source", "root_path": "/Users/songv/Code/jike/web3/dbt_ethereum_source", "path": "codegen/opensea/WyvernExchangeV1_call_transferOwnership.sql", "original_file_path": "models/codegen/opensea/WyvernExchangeV1_call_transferOwnership.sql", "name": "WyvernExchangeV1_call_transferOwnership", "alias": "WyvernExchangeV1_call_transferOwnership", "checksum": {"name": "sha256", "checksum": "048e2811464bf2aec11595236b89ca37c13225b1f696ca19f9902abea56f7381"}, "tags": ["chain_ethereum", "level_parse", "proj_opensea"], "refs": [["stg_ethereum__traces"]], "sources": [], "description": "", "columns": {"newOwner": {"name": "newOwner", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "call_success": {"name": "call_success", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "call_block_number": {"name": "call_block_number", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "call_block_time": {"name": "call_block_time", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "call_trace_address": {"name": "call_trace_address", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "call_tx_hash": {"name": "call_tx_hash", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "contract_address": {"name": "contract_address", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "dt": {"name": "dt", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "ethereum_source://models/codegen/opensea/schema.yml", "compiled_path": "target/compiled/ethereum_source/models/codegen/opensea/WyvernExchangeV1_call_transferOwnership.sql", "build_path": null, "deferred": false, "unrendered_config": {"schema": "opensea", "tags": ["chain_ethereum", "level_parse", "proj_opensea"], "materialized": "incremental", "incremental_strategy": "insert_overwrite", "partition_by": ["dt"], "file_format": "parquet", "pre-hook": [{"sql": "create or replace function opensea_wyvernexchangev1_transferownership_calldecodeudf as \"io.iftech.sparkudf.hive.opensea_WyvernExchangeV1_transferOwnership_CallDecodeUDF\" using jar \"s3a://ifcrypto/blockchain-dbt/jars/opensea_udf.jar\";"}]}, "created_at": 1650535971.998934, "compiled_sql": "\n\nwith base as (\n    select\n        status==1 as call_success,\n        block_number as call_block_number,\n        block_timestamp as call_block_time,\n        trace_address as call_trace_address,\n        transaction_hash as call_tx_hash,\n        to_address as contract_address,\n        dt,\n        opensea_wyvernexchangev1_transferownership_calldecodeudf(unhex_input, unhex_output, '{\"constant\": false, \"inputs\": [{\"name\": \"newOwner\", \"type\": \"address\"}], \"name\": \"transferOwnership\", \"outputs\": [], \"payable\": false, \"stateMutability\": \"nonpayable\", \"type\": \"function\"}', 'transferOwnership') as data\n    from ethereum_stg_ethereum.stg_ethereum__traces\n    where to_address = lower(\"0x7Be8076f4EA4A4AD08075C2508e481d6C946D12b\")\n    and address_hash = abs(hash(lower(\"0x7Be8076f4EA4A4AD08075C2508e481d6C946D12b\"))) % 10\n    and selector = \"0x30786632\"\n    and selector_hash = abs(hash(\"0x30786632\")) % 10\n\n    \n),\n\nfinal as (\n    select\n        call_success,\n        call_block_number,\n        call_block_time,\n        call_trace_address,\n        call_tx_hash,\n        contract_address,\n        dt,\n        data.input.*,\n        data.output.*\n    from base\n)\n\nselect /* REPARTITION(dt) */ *\nfrom final", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "ethereum_opensea.WyvernExchangeV1_call_transferOwnership"}, "model.ethereum_source.WyvernExchangeV1_evt_OwnershipRenounced": {"raw_sql": "{{\n    config(\n        materialized='incremental',\n        incremental_strategy='insert_overwrite',\n        partition_by=['dt'],\n        file_format='parquet',\n        pre_hook={\n            'sql': 'create or replace function opensea_wyvernexchangev1_ownershiprenounced_eventdecodeudf as \"io.iftech.sparkudf.hive.opensea_WyvernExchangeV1_OwnershipRenounced_EventDecodeUDF\" using jar \"s3a://ifcrypto/blockchain-dbt/jars/opensea_udf.jar\";'\n        }\n    )\n}}\n\nwith base as (\n    select\n        block_number as evt_block_number,\n        block_timestamp as evt_block_time,\n        log_index as evt_index,\n        transaction_hash as evt_tx_hash,\n        address as contract_address,\n        dt,\n        opensea_wyvernexchangev1_ownershiprenounced_eventdecodeudf(unhex_data, topics_arr, '{\"anonymous\": false, \"inputs\": [{\"indexed\": true, \"name\": \"previousOwner\", \"type\": \"address\"}], \"name\": \"OwnershipRenounced\", \"type\": \"event\"}', 'OwnershipRenounced') as data\n    from {{ ref('stg_ethereum__logs') }}\n    where address = lower(\"0x7Be8076f4EA4A4AD08075C2508e481d6C946D12b\")\n    and address_hash = abs(hash(lower(\"0x7Be8076f4EA4A4AD08075C2508e481d6C946D12b\"))) % 10\n    and selector = \"0xf8df31144d9c2f0f6b59d69b8b98abd5459d07f2742c4df920b25aae33c64820\"\n    and selector_hash = abs(hash(\"0xf8df31144d9c2f0f6b59d69b8b98abd5459d07f2742c4df920b25aae33c64820\")) % 10\n\n    {% if is_incremental() %}\n      and dt = var('dt')\n    {% endif %}\n),\n\nfinal as (\n    select\n        evt_block_number,\n        evt_block_time,\n        evt_index,\n        evt_tx_hash,\n        contract_address,\n        dt,\n        data.input.*\n    from base\n)\n\nselect /* REPARTITION(dt) */ *\nfrom final", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.dbt.is_incremental"], "nodes": ["model.ethereum_source.stg_ethereum__logs"]}, "config": {"enabled": true, "alias": null, "schema": "opensea", "database": null, "tags": ["chain_ethereum", "level_parse", "proj_opensea"], "meta": {}, "materialized": "incremental", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "file_format": "parquet", "partition_by": ["dt"], "incremental_strategy": "insert_overwrite", "post-hook": [], "pre-hook": [{"sql": "create or replace function opensea_wyvernexchangev1_ownershiprenounced_eventdecodeudf as \"io.iftech.sparkudf.hive.opensea_WyvernExchangeV1_OwnershipRenounced_EventDecodeUDF\" using jar \"s3a://ifcrypto/blockchain-dbt/jars/opensea_udf.jar\";", "transaction": true, "index": null}]}, "database": null, "schema": "ethereum_opensea", "fqn": ["ethereum_source", "codegen", "opensea", "WyvernExchangeV1_evt_OwnershipRenounced"], "unique_id": "model.ethereum_source.WyvernExchangeV1_evt_OwnershipRenounced", "package_name": "ethereum_source", "root_path": "/Users/songv/Code/jike/web3/dbt_ethereum_source", "path": "codegen/opensea/WyvernExchangeV1_evt_OwnershipRenounced.sql", "original_file_path": "models/codegen/opensea/WyvernExchangeV1_evt_OwnershipRenounced.sql", "name": "WyvernExchangeV1_evt_OwnershipRenounced", "alias": "WyvernExchangeV1_evt_OwnershipRenounced", "checksum": {"name": "sha256", "checksum": "a92d700a8080942c1acf91769c4106246c2fcc8aeeeb1e7a99cad9d2e4ac4032"}, "tags": ["chain_ethereum", "level_parse", "proj_opensea"], "refs": [["stg_ethereum__logs"]], "sources": [], "description": "", "columns": {"previousOwner": {"name": "previousOwner", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "evt_block_number": {"name": "evt_block_number", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "evt_block_time": {"name": "evt_block_time", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "evt_index": {"name": "evt_index", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "evt_tx_hash": {"name": "evt_tx_hash", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "contract_address": {"name": "contract_address", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "dt": {"name": "dt", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "ethereum_source://models/codegen/opensea/schema.yml", "compiled_path": "target/compiled/ethereum_source/models/codegen/opensea/WyvernExchangeV1_evt_OwnershipRenounced.sql", "build_path": null, "deferred": false, "unrendered_config": {"schema": "opensea", "tags": ["chain_ethereum", "level_parse", "proj_opensea"], "materialized": "incremental", "incremental_strategy": "insert_overwrite", "partition_by": ["dt"], "file_format": "parquet", "pre-hook": [{"sql": "create or replace function opensea_wyvernexchangev1_ownershiprenounced_eventdecodeudf as \"io.iftech.sparkudf.hive.opensea_WyvernExchangeV1_OwnershipRenounced_EventDecodeUDF\" using jar \"s3a://ifcrypto/blockchain-dbt/jars/opensea_udf.jar\";"}]}, "created_at": 1650535971.923197, "compiled_sql": "\n\nwith base as (\n    select\n        block_number as evt_block_number,\n        block_timestamp as evt_block_time,\n        log_index as evt_index,\n        transaction_hash as evt_tx_hash,\n        address as contract_address,\n        dt,\n        opensea_wyvernexchangev1_ownershiprenounced_eventdecodeudf(unhex_data, topics_arr, '{\"anonymous\": false, \"inputs\": [{\"indexed\": true, \"name\": \"previousOwner\", \"type\": \"address\"}], \"name\": \"OwnershipRenounced\", \"type\": \"event\"}', 'OwnershipRenounced') as data\n    from ethereum_stg_ethereum.stg_ethereum__logs\n    where address = lower(\"0x7Be8076f4EA4A4AD08075C2508e481d6C946D12b\")\n    and address_hash = abs(hash(lower(\"0x7Be8076f4EA4A4AD08075C2508e481d6C946D12b\"))) % 10\n    and selector = \"0xf8df31144d9c2f0f6b59d69b8b98abd5459d07f2742c4df920b25aae33c64820\"\n    and selector_hash = abs(hash(\"0xf8df31144d9c2f0f6b59d69b8b98abd5459d07f2742c4df920b25aae33c64820\")) % 10\n\n    \n),\n\nfinal as (\n    select\n        evt_block_number,\n        evt_block_time,\n        evt_index,\n        evt_tx_hash,\n        contract_address,\n        dt,\n        data.input.*\n    from base\n)\n\nselect /* REPARTITION(dt) */ *\nfrom final", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "ethereum_opensea.WyvernExchangeV1_evt_OwnershipRenounced"}, "model.ethereum_source.WyvernExchangeV1_evt_OrderApprovedPartTwo": {"raw_sql": "{{\n    config(\n        materialized='incremental',\n        incremental_strategy='insert_overwrite',\n        partition_by=['dt'],\n        file_format='parquet',\n        pre_hook={\n            'sql': 'create or replace function opensea_wyvernexchangev1_orderapprovedparttwo_eventdecodeudf as \"io.iftech.sparkudf.hive.opensea_WyvernExchangeV1_OrderApprovedPartTwo_EventDecodeUDF\" using jar \"s3a://ifcrypto/blockchain-dbt/jars/opensea_udf.jar\";'\n        }\n    )\n}}\n\nwith base as (\n    select\n        block_number as evt_block_number,\n        block_timestamp as evt_block_time,\n        log_index as evt_index,\n        transaction_hash as evt_tx_hash,\n        address as contract_address,\n        dt,\n        opensea_wyvernexchangev1_orderapprovedparttwo_eventdecodeudf(unhex_data, topics_arr, '{\"anonymous\": false, \"inputs\": [{\"indexed\": true, \"name\": \"hash\", \"type\": \"bytes32\"}, {\"indexed\": false, \"name\": \"howToCall\", \"type\": \"uint8\"}, {\"indexed\": false, \"name\": \"calldata\", \"type\": \"bytes\"}, {\"indexed\": false, \"name\": \"replacementPattern\", \"type\": \"bytes\"}, {\"indexed\": false, \"name\": \"staticTarget\", \"type\": \"address\"}, {\"indexed\": false, \"name\": \"staticExtradata\", \"type\": \"bytes\"}, {\"indexed\": false, \"name\": \"paymentToken\", \"type\": \"address\"}, {\"indexed\": false, \"name\": \"basePrice\", \"type\": \"uint256\"}, {\"indexed\": false, \"name\": \"extra\", \"type\": \"uint256\"}, {\"indexed\": false, \"name\": \"listingTime\", \"type\": \"uint256\"}, {\"indexed\": false, \"name\": \"expirationTime\", \"type\": \"uint256\"}, {\"indexed\": false, \"name\": \"salt\", \"type\": \"uint256\"}, {\"indexed\": false, \"name\": \"orderbookInclusionDesired\", \"type\": \"bool\"}], \"name\": \"OrderApprovedPartTwo\", \"type\": \"event\"}', 'OrderApprovedPartTwo') as data\n    from {{ ref('stg_ethereum__logs') }}\n    where address = lower(\"0x7Be8076f4EA4A4AD08075C2508e481d6C946D12b\")\n    and address_hash = abs(hash(lower(\"0x7Be8076f4EA4A4AD08075C2508e481d6C946D12b\"))) % 10\n    and selector = \"0xe55393c778364e440d958b39ac1debd99dcfae3775a8a04d1e79124adf6a2d08\"\n    and selector_hash = abs(hash(\"0xe55393c778364e440d958b39ac1debd99dcfae3775a8a04d1e79124adf6a2d08\")) % 10\n\n    {% if is_incremental() %}\n      and dt = var('dt')\n    {% endif %}\n),\n\nfinal as (\n    select\n        evt_block_number,\n        evt_block_time,\n        evt_index,\n        evt_tx_hash,\n        contract_address,\n        dt,\n        data.input.*\n    from base\n)\n\nselect /* REPARTITION(dt) */ *\nfrom final", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.dbt.is_incremental"], "nodes": ["model.ethereum_source.stg_ethereum__logs"]}, "config": {"enabled": true, "alias": null, "schema": "opensea", "database": null, "tags": ["chain_ethereum", "level_parse", "proj_opensea"], "meta": {}, "materialized": "incremental", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "file_format": "parquet", "partition_by": ["dt"], "incremental_strategy": "insert_overwrite", "post-hook": [], "pre-hook": [{"sql": "create or replace function opensea_wyvernexchangev1_orderapprovedparttwo_eventdecodeudf as \"io.iftech.sparkudf.hive.opensea_WyvernExchangeV1_OrderApprovedPartTwo_EventDecodeUDF\" using jar \"s3a://ifcrypto/blockchain-dbt/jars/opensea_udf.jar\";", "transaction": true, "index": null}]}, "database": null, "schema": "ethereum_opensea", "fqn": ["ethereum_source", "codegen", "opensea", "WyvernExchangeV1_evt_OrderApprovedPartTwo"], "unique_id": "model.ethereum_source.WyvernExchangeV1_evt_OrderApprovedPartTwo", "package_name": "ethereum_source", "root_path": "/Users/songv/Code/jike/web3/dbt_ethereum_source", "path": "codegen/opensea/WyvernExchangeV1_evt_OrderApprovedPartTwo.sql", "original_file_path": "models/codegen/opensea/WyvernExchangeV1_evt_OrderApprovedPartTwo.sql", "name": "WyvernExchangeV1_evt_OrderApprovedPartTwo", "alias": "WyvernExchangeV1_evt_OrderApprovedPartTwo", "checksum": {"name": "sha256", "checksum": "ab2240aa9b1b0b8e06800cd4c8a6295fc28e600cfeab9793325036bab788bd6d"}, "tags": ["chain_ethereum", "level_parse", "proj_opensea"], "refs": [["stg_ethereum__logs"]], "sources": [], "description": "", "columns": {"hash": {"name": "hash", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "howToCall": {"name": "howToCall", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "calldata": {"name": "calldata", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "replacementPattern": {"name": "replacementPattern", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "staticTarget": {"name": "staticTarget", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "staticExtradata": {"name": "staticExtradata", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "paymentToken": {"name": "paymentToken", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "basePrice": {"name": "basePrice", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "extra": {"name": "extra", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "listingTime": {"name": "listingTime", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "expirationTime": {"name": "expirationTime", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "salt": {"name": "salt", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "orderbookInclusionDesired": {"name": "orderbookInclusionDesired", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "evt_block_number": {"name": "evt_block_number", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "evt_block_time": {"name": "evt_block_time", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "evt_index": {"name": "evt_index", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "evt_tx_hash": {"name": "evt_tx_hash", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "contract_address": {"name": "contract_address", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "dt": {"name": "dt", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "ethereum_source://models/codegen/opensea/schema.yml", "compiled_path": "target/compiled/ethereum_source/models/codegen/opensea/WyvernExchangeV1_evt_OrderApprovedPartTwo.sql", "build_path": null, "deferred": false, "unrendered_config": {"schema": "opensea", "tags": ["chain_ethereum", "level_parse", "proj_opensea"], "materialized": "incremental", "incremental_strategy": "insert_overwrite", "partition_by": ["dt"], "file_format": "parquet", "pre-hook": [{"sql": "create or replace function opensea_wyvernexchangev1_orderapprovedparttwo_eventdecodeudf as \"io.iftech.sparkudf.hive.opensea_WyvernExchangeV1_OrderApprovedPartTwo_EventDecodeUDF\" using jar \"s3a://ifcrypto/blockchain-dbt/jars/opensea_udf.jar\";"}]}, "created_at": 1650535971.917809, "compiled_sql": "\n\nwith base as (\n    select\n        block_number as evt_block_number,\n        block_timestamp as evt_block_time,\n        log_index as evt_index,\n        transaction_hash as evt_tx_hash,\n        address as contract_address,\n        dt,\n        opensea_wyvernexchangev1_orderapprovedparttwo_eventdecodeudf(unhex_data, topics_arr, '{\"anonymous\": false, \"inputs\": [{\"indexed\": true, \"name\": \"hash\", \"type\": \"bytes32\"}, {\"indexed\": false, \"name\": \"howToCall\", \"type\": \"uint8\"}, {\"indexed\": false, \"name\": \"calldata\", \"type\": \"bytes\"}, {\"indexed\": false, \"name\": \"replacementPattern\", \"type\": \"bytes\"}, {\"indexed\": false, \"name\": \"staticTarget\", \"type\": \"address\"}, {\"indexed\": false, \"name\": \"staticExtradata\", \"type\": \"bytes\"}, {\"indexed\": false, \"name\": \"paymentToken\", \"type\": \"address\"}, {\"indexed\": false, \"name\": \"basePrice\", \"type\": \"uint256\"}, {\"indexed\": false, \"name\": \"extra\", \"type\": \"uint256\"}, {\"indexed\": false, \"name\": \"listingTime\", \"type\": \"uint256\"}, {\"indexed\": false, \"name\": \"expirationTime\", \"type\": \"uint256\"}, {\"indexed\": false, \"name\": \"salt\", \"type\": \"uint256\"}, {\"indexed\": false, \"name\": \"orderbookInclusionDesired\", \"type\": \"bool\"}], \"name\": \"OrderApprovedPartTwo\", \"type\": \"event\"}', 'OrderApprovedPartTwo') as data\n    from ethereum_stg_ethereum.stg_ethereum__logs\n    where address = lower(\"0x7Be8076f4EA4A4AD08075C2508e481d6C946D12b\")\n    and address_hash = abs(hash(lower(\"0x7Be8076f4EA4A4AD08075C2508e481d6C946D12b\"))) % 10\n    and selector = \"0xe55393c778364e440d958b39ac1debd99dcfae3775a8a04d1e79124adf6a2d08\"\n    and selector_hash = abs(hash(\"0xe55393c778364e440d958b39ac1debd99dcfae3775a8a04d1e79124adf6a2d08\")) % 10\n\n    \n),\n\nfinal as (\n    select\n        evt_block_number,\n        evt_block_time,\n        evt_index,\n        evt_tx_hash,\n        contract_address,\n        dt,\n        data.input.*\n    from base\n)\n\nselect /* REPARTITION(dt) */ *\nfrom final", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "ethereum_opensea.WyvernExchangeV1_evt_OrderApprovedPartTwo"}, "model.ethereum_source.WyvernExchangeV1_call_INVERSE_BASIS_POINT": {"raw_sql": "{{\n    config(\n        materialized='incremental',\n        incremental_strategy='insert_overwrite',\n        partition_by=['dt'],\n        file_format='parquet',\n        pre_hook={\n            'sql': 'create or replace function opensea_wyvernexchangev1_inverse_basis_point_calldecodeudf as \"io.iftech.sparkudf.hive.opensea_WyvernExchangeV1_INVERSE_BASIS_POINT_CallDecodeUDF\" using jar \"s3a://ifcrypto/blockchain-dbt/jars/opensea_udf.jar\";'\n        }\n    )\n}}\n\nwith base as (\n    select\n        status==1 as call_success,\n        block_number as call_block_number,\n        block_timestamp as call_block_time,\n        trace_address as call_trace_address,\n        transaction_hash as call_tx_hash,\n        to_address as contract_address,\n        dt,\n        opensea_wyvernexchangev1_inverse_basis_point_calldecodeudf(unhex_input, unhex_output, '{\"constant\": true, \"inputs\": [], \"name\": \"INVERSE_BASIS_POINT\", \"outputs\": [{\"name\": \"\", \"type\": \"uint256\"}], \"payable\": false, \"stateMutability\": \"view\", \"type\": \"function\"}', 'INVERSE_BASIS_POINT') as data\n    from {{ ref('stg_ethereum__traces') }}\n    where to_address = lower(\"0x7Be8076f4EA4A4AD08075C2508e481d6C946D12b\")\n    and address_hash = abs(hash(lower(\"0x7Be8076f4EA4A4AD08075C2508e481d6C946D12b\"))) % 10\n    and selector = \"0x30786361\"\n    and selector_hash = abs(hash(\"0x30786361\")) % 10\n\n    {% if is_incremental() %}\n      and dt = var('dt')\n    {% endif %}\n),\n\nfinal as (\n    select\n        call_success,\n        call_block_number,\n        call_block_time,\n        call_trace_address,\n        call_tx_hash,\n        contract_address,\n        dt,\n        data.input.*,\n        data.output.*\n    from base\n)\n\nselect /* REPARTITION(dt) */ *\nfrom final", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.dbt.is_incremental"], "nodes": ["model.ethereum_source.stg_ethereum__traces"]}, "config": {"enabled": true, "alias": null, "schema": "opensea", "database": null, "tags": ["chain_ethereum", "level_parse", "proj_opensea"], "meta": {}, "materialized": "incremental", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "file_format": "parquet", "partition_by": ["dt"], "incremental_strategy": "insert_overwrite", "post-hook": [], "pre-hook": [{"sql": "create or replace function opensea_wyvernexchangev1_inverse_basis_point_calldecodeudf as \"io.iftech.sparkudf.hive.opensea_WyvernExchangeV1_INVERSE_BASIS_POINT_CallDecodeUDF\" using jar \"s3a://ifcrypto/blockchain-dbt/jars/opensea_udf.jar\";", "transaction": true, "index": null}]}, "database": null, "schema": "ethereum_opensea", "fqn": ["ethereum_source", "codegen", "opensea", "WyvernExchangeV1_call_INVERSE_BASIS_POINT"], "unique_id": "model.ethereum_source.WyvernExchangeV1_call_INVERSE_BASIS_POINT", "package_name": "ethereum_source", "root_path": "/Users/songv/Code/jike/web3/dbt_ethereum_source", "path": "codegen/opensea/WyvernExchangeV1_call_INVERSE_BASIS_POINT.sql", "original_file_path": "models/codegen/opensea/WyvernExchangeV1_call_INVERSE_BASIS_POINT.sql", "name": "WyvernExchangeV1_call_INVERSE_BASIS_POINT", "alias": "WyvernExchangeV1_call_INVERSE_BASIS_POINT", "checksum": {"name": "sha256", "checksum": "78d47b9b9102b6044898edafb6725b25cc4ab03e5d77a767a22fc33285844bb0"}, "tags": ["chain_ethereum", "level_parse", "proj_opensea"], "refs": [["stg_ethereum__traces"]], "sources": [], "description": "", "columns": {"output_0": {"name": "output_0", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "call_success": {"name": "call_success", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "call_block_number": {"name": "call_block_number", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "call_block_time": {"name": "call_block_time", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "call_trace_address": {"name": "call_trace_address", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "call_tx_hash": {"name": "call_tx_hash", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "contract_address": {"name": "contract_address", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "dt": {"name": "dt", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "ethereum_source://models/codegen/opensea/schema.yml", "compiled_path": "target/compiled/ethereum_source/models/codegen/opensea/WyvernExchangeV1_call_INVERSE_BASIS_POINT.sql", "build_path": null, "deferred": false, "unrendered_config": {"schema": "opensea", "tags": ["chain_ethereum", "level_parse", "proj_opensea"], "materialized": "incremental", "incremental_strategy": "insert_overwrite", "partition_by": ["dt"], "file_format": "parquet", "pre-hook": [{"sql": "create or replace function opensea_wyvernexchangev1_inverse_basis_point_calldecodeudf as \"io.iftech.sparkudf.hive.opensea_WyvernExchangeV1_INVERSE_BASIS_POINT_CallDecodeUDF\" using jar \"s3a://ifcrypto/blockchain-dbt/jars/opensea_udf.jar\";"}]}, "created_at": 1650535971.99226, "compiled_sql": "\n\nwith base as (\n    select\n        status==1 as call_success,\n        block_number as call_block_number,\n        block_timestamp as call_block_time,\n        trace_address as call_trace_address,\n        transaction_hash as call_tx_hash,\n        to_address as contract_address,\n        dt,\n        opensea_wyvernexchangev1_inverse_basis_point_calldecodeudf(unhex_input, unhex_output, '{\"constant\": true, \"inputs\": [], \"name\": \"INVERSE_BASIS_POINT\", \"outputs\": [{\"name\": \"\", \"type\": \"uint256\"}], \"payable\": false, \"stateMutability\": \"view\", \"type\": \"function\"}', 'INVERSE_BASIS_POINT') as data\n    from ethereum_stg_ethereum.stg_ethereum__traces\n    where to_address = lower(\"0x7Be8076f4EA4A4AD08075C2508e481d6C946D12b\")\n    and address_hash = abs(hash(lower(\"0x7Be8076f4EA4A4AD08075C2508e481d6C946D12b\"))) % 10\n    and selector = \"0x30786361\"\n    and selector_hash = abs(hash(\"0x30786361\")) % 10\n\n    \n),\n\nfinal as (\n    select\n        call_success,\n        call_block_number,\n        call_block_time,\n        call_trace_address,\n        call_tx_hash,\n        contract_address,\n        dt,\n        data.input.*,\n        data.output.*\n    from base\n)\n\nselect /* REPARTITION(dt) */ *\nfrom final", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "ethereum_opensea.WyvernExchangeV1_call_INVERSE_BASIS_POINT"}, "model.ethereum_source.WyvernExchangeV2_call_changeMinimumMakerProtocolFee": {"raw_sql": "{{\n    config(\n        materialized='incremental',\n        incremental_strategy='insert_overwrite',\n        partition_by=['dt'],\n        file_format='parquet',\n        pre_hook={\n            'sql': 'create or replace function opensea_wyvernexchangev2_changeminimummakerprotocolfee_calldecodeudf as \"io.iftech.sparkudf.hive.opensea_WyvernExchangeV2_changeMinimumMakerProtocolFee_CallDecodeUDF\" using jar \"s3a://ifcrypto/blockchain-dbt/jars/opensea_udf.jar\";'\n        }\n    )\n}}\n\nwith base as (\n    select\n        status==1 as call_success,\n        block_number as call_block_number,\n        block_timestamp as call_block_time,\n        trace_address as call_trace_address,\n        transaction_hash as call_tx_hash,\n        to_address as contract_address,\n        dt,\n        opensea_wyvernexchangev2_changeminimummakerprotocolfee_calldecodeudf(unhex_input, unhex_output, '{\"constant\": false, \"inputs\": [{\"name\": \"newMinimumMakerProtocolFee\", \"type\": \"uint256\"}], \"name\": \"changeMinimumMakerProtocolFee\", \"outputs\": [], \"payable\": false, \"stateMutability\": \"nonpayable\", \"type\": \"function\"}', 'changeMinimumMakerProtocolFee') as data\n    from {{ ref('stg_ethereum__traces') }}\n    where to_address = lower(\"0x7f268357A8c2552623316e2562D90e642bB538E5\")\n    and address_hash = abs(hash(lower(\"0x7f268357A8c2552623316e2562D90e642bB538E5\"))) % 10\n    and selector = \"0x30783134\"\n    and selector_hash = abs(hash(\"0x30783134\")) % 10\n\n    {% if is_incremental() %}\n      and dt = var('dt')\n    {% endif %}\n),\n\nfinal as (\n    select\n        call_success,\n        call_block_number,\n        call_block_time,\n        call_trace_address,\n        call_tx_hash,\n        contract_address,\n        dt,\n        data.input.*,\n        data.output.*\n    from base\n)\n\nselect /* REPARTITION(dt) */ *\nfrom final", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.dbt.is_incremental"], "nodes": ["model.ethereum_source.stg_ethereum__traces"]}, "config": {"enabled": true, "alias": null, "schema": "opensea", "database": null, "tags": ["chain_ethereum", "level_parse", "proj_opensea"], "meta": {}, "materialized": "incremental", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "file_format": "parquet", "partition_by": ["dt"], "incremental_strategy": "insert_overwrite", "post-hook": [], "pre-hook": [{"sql": "create or replace function opensea_wyvernexchangev2_changeminimummakerprotocolfee_calldecodeudf as \"io.iftech.sparkudf.hive.opensea_WyvernExchangeV2_changeMinimumMakerProtocolFee_CallDecodeUDF\" using jar \"s3a://ifcrypto/blockchain-dbt/jars/opensea_udf.jar\";", "transaction": true, "index": null}]}, "database": null, "schema": "ethereum_opensea", "fqn": ["ethereum_source", "codegen", "opensea", "WyvernExchangeV2_call_changeMinimumMakerProtocolFee"], "unique_id": "model.ethereum_source.WyvernExchangeV2_call_changeMinimumMakerProtocolFee", "package_name": "ethereum_source", "root_path": "/Users/songv/Code/jike/web3/dbt_ethereum_source", "path": "codegen/opensea/WyvernExchangeV2_call_changeMinimumMakerProtocolFee.sql", "original_file_path": "models/codegen/opensea/WyvernExchangeV2_call_changeMinimumMakerProtocolFee.sql", "name": "WyvernExchangeV2_call_changeMinimumMakerProtocolFee", "alias": "WyvernExchangeV2_call_changeMinimumMakerProtocolFee", "checksum": {"name": "sha256", "checksum": "bf940a7cd464ad7a7abf05fcd31cf84ebd53205c2401bda7fe8fbeacee1c4e70"}, "tags": ["chain_ethereum", "level_parse", "proj_opensea"], "refs": [["stg_ethereum__traces"]], "sources": [], "description": "", "columns": {"newMinimumMakerProtocolFee": {"name": "newMinimumMakerProtocolFee", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "call_success": {"name": "call_success", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "call_block_number": {"name": "call_block_number", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "call_block_time": {"name": "call_block_time", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "call_trace_address": {"name": "call_trace_address", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "call_tx_hash": {"name": "call_tx_hash", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "contract_address": {"name": "contract_address", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "dt": {"name": "dt", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "ethereum_source://models/codegen/opensea/schema.yml", "compiled_path": "target/compiled/ethereum_source/models/codegen/opensea/WyvernExchangeV2_call_changeMinimumMakerProtocolFee.sql", "build_path": null, "deferred": false, "unrendered_config": {"schema": "opensea", "tags": ["chain_ethereum", "level_parse", "proj_opensea"], "materialized": "incremental", "incremental_strategy": "insert_overwrite", "partition_by": ["dt"], "file_format": "parquet", "pre-hook": [{"sql": "create or replace function opensea_wyvernexchangev2_changeminimummakerprotocolfee_calldecodeudf as \"io.iftech.sparkudf.hive.opensea_WyvernExchangeV2_changeMinimumMakerProtocolFee_CallDecodeUDF\" using jar \"s3a://ifcrypto/blockchain-dbt/jars/opensea_udf.jar\";"}]}, "created_at": 1650535972.021203, "compiled_sql": "\n\nwith base as (\n    select\n        status==1 as call_success,\n        block_number as call_block_number,\n        block_timestamp as call_block_time,\n        trace_address as call_trace_address,\n        transaction_hash as call_tx_hash,\n        to_address as contract_address,\n        dt,\n        opensea_wyvernexchangev2_changeminimummakerprotocolfee_calldecodeudf(unhex_input, unhex_output, '{\"constant\": false, \"inputs\": [{\"name\": \"newMinimumMakerProtocolFee\", \"type\": \"uint256\"}], \"name\": \"changeMinimumMakerProtocolFee\", \"outputs\": [], \"payable\": false, \"stateMutability\": \"nonpayable\", \"type\": \"function\"}', 'changeMinimumMakerProtocolFee') as data\n    from ethereum_stg_ethereum.stg_ethereum__traces\n    where to_address = lower(\"0x7f268357A8c2552623316e2562D90e642bB538E5\")\n    and address_hash = abs(hash(lower(\"0x7f268357A8c2552623316e2562D90e642bB538E5\"))) % 10\n    and selector = \"0x30783134\"\n    and selector_hash = abs(hash(\"0x30783134\")) % 10\n\n    \n),\n\nfinal as (\n    select\n        call_success,\n        call_block_number,\n        call_block_time,\n        call_trace_address,\n        call_tx_hash,\n        contract_address,\n        dt,\n        data.input.*,\n        data.output.*\n    from base\n)\n\nselect /* REPARTITION(dt) */ *\nfrom final", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "ethereum_opensea.WyvernExchangeV2_call_changeMinimumMakerProtocolFee"}, "model.ethereum_source.OpenSeaENSResolver_evt_OwnershipTransferred": {"raw_sql": "{{\n    config(\n        materialized='incremental',\n        incremental_strategy='insert_overwrite',\n        partition_by=['dt'],\n        file_format='parquet',\n        pre_hook={\n            'sql': 'create or replace function opensea_openseaensresolver_ownershiptransferred_eventdecodeudf as \"io.iftech.sparkudf.hive.opensea_OpenSeaENSResolver_OwnershipTransferred_EventDecodeUDF\" using jar \"s3a://ifcrypto/blockchain-dbt/jars/opensea_udf.jar\";'\n        }\n    )\n}}\n\nwith base as (\n    select\n        block_number as evt_block_number,\n        block_timestamp as evt_block_time,\n        log_index as evt_index,\n        transaction_hash as evt_tx_hash,\n        address as contract_address,\n        dt,\n        opensea_openseaensresolver_ownershiptransferred_eventdecodeudf(unhex_data, topics_arr, '{\"anonymous\": false, \"inputs\": [{\"indexed\": true, \"name\": \"previousOwner\", \"type\": \"address\"}, {\"indexed\": true, \"name\": \"newOwner\", \"type\": \"address\"}], \"name\": \"OwnershipTransferred\", \"type\": \"event\"}', 'OwnershipTransferred') as data\n    from {{ ref('stg_ethereum__logs') }}\n    where address = lower(\"0x9c4e9cce4780062942a7fe34fa2fa7316c872956\")\n    and address_hash = abs(hash(lower(\"0x9c4e9cce4780062942a7fe34fa2fa7316c872956\"))) % 10\n    and selector = \"0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0\"\n    and selector_hash = abs(hash(\"0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0\")) % 10\n\n    {% if is_incremental() %}\n      and dt = var('dt')\n    {% endif %}\n),\n\nfinal as (\n    select\n        evt_block_number,\n        evt_block_time,\n        evt_index,\n        evt_tx_hash,\n        contract_address,\n        dt,\n        data.input.*\n    from base\n)\n\nselect /* REPARTITION(dt) */ *\nfrom final", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.dbt.is_incremental"], "nodes": ["model.ethereum_source.stg_ethereum__logs"]}, "config": {"enabled": true, "alias": null, "schema": "opensea", "database": null, "tags": ["chain_ethereum", "level_parse", "proj_opensea"], "meta": {}, "materialized": "incremental", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "file_format": "parquet", "partition_by": ["dt"], "incremental_strategy": "insert_overwrite", "post-hook": [], "pre-hook": [{"sql": "create or replace function opensea_openseaensresolver_ownershiptransferred_eventdecodeudf as \"io.iftech.sparkudf.hive.opensea_OpenSeaENSResolver_OwnershipTransferred_EventDecodeUDF\" using jar \"s3a://ifcrypto/blockchain-dbt/jars/opensea_udf.jar\";", "transaction": true, "index": null}]}, "database": null, "schema": "ethereum_opensea", "fqn": ["ethereum_source", "codegen", "opensea", "OpenSeaENSResolver_evt_OwnershipTransferred"], "unique_id": "model.ethereum_source.OpenSeaENSResolver_evt_OwnershipTransferred", "package_name": "ethereum_source", "root_path": "/Users/songv/Code/jike/web3/dbt_ethereum_source", "path": "codegen/opensea/OpenSeaENSResolver_evt_OwnershipTransferred.sql", "original_file_path": "models/codegen/opensea/OpenSeaENSResolver_evt_OwnershipTransferred.sql", "name": "OpenSeaENSResolver_evt_OwnershipTransferred", "alias": "OpenSeaENSResolver_evt_OwnershipTransferred", "checksum": {"name": "sha256", "checksum": "886e180597d1e54154ca8ce760d17d551e23e141a92c0100152173455be50b1b"}, "tags": ["chain_ethereum", "level_parse", "proj_opensea"], "refs": [["stg_ethereum__logs"]], "sources": [], "description": "", "columns": {"previousOwner": {"name": "previousOwner", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "newOwner": {"name": "newOwner", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "evt_block_number": {"name": "evt_block_number", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "evt_block_time": {"name": "evt_block_time", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "evt_index": {"name": "evt_index", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "evt_tx_hash": {"name": "evt_tx_hash", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "contract_address": {"name": "contract_address", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "dt": {"name": "dt", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "ethereum_source://models/codegen/opensea/schema.yml", "compiled_path": "target/compiled/ethereum_source/models/codegen/opensea/OpenSeaENSResolver_evt_OwnershipTransferred.sql", "build_path": null, "deferred": false, "unrendered_config": {"schema": "opensea", "tags": ["chain_ethereum", "level_parse", "proj_opensea"], "materialized": "incremental", "incremental_strategy": "insert_overwrite", "partition_by": ["dt"], "file_format": "parquet", "pre-hook": [{"sql": "create or replace function opensea_openseaensresolver_ownershiptransferred_eventdecodeudf as \"io.iftech.sparkudf.hive.opensea_OpenSeaENSResolver_OwnershipTransferred_EventDecodeUDF\" using jar \"s3a://ifcrypto/blockchain-dbt/jars/opensea_udf.jar\";"}]}, "created_at": 1650535972.111944, "compiled_sql": "\n\nwith base as (\n    select\n        block_number as evt_block_number,\n        block_timestamp as evt_block_time,\n        log_index as evt_index,\n        transaction_hash as evt_tx_hash,\n        address as contract_address,\n        dt,\n        opensea_openseaensresolver_ownershiptransferred_eventdecodeudf(unhex_data, topics_arr, '{\"anonymous\": false, \"inputs\": [{\"indexed\": true, \"name\": \"previousOwner\", \"type\": \"address\"}, {\"indexed\": true, \"name\": \"newOwner\", \"type\": \"address\"}], \"name\": \"OwnershipTransferred\", \"type\": \"event\"}', 'OwnershipTransferred') as data\n    from ethereum_stg_ethereum.stg_ethereum__logs\n    where address = lower(\"0x9c4e9cce4780062942a7fe34fa2fa7316c872956\")\n    and address_hash = abs(hash(lower(\"0x9c4e9cce4780062942a7fe34fa2fa7316c872956\"))) % 10\n    and selector = \"0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0\"\n    and selector_hash = abs(hash(\"0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0\")) % 10\n\n    \n),\n\nfinal as (\n    select\n        evt_block_number,\n        evt_block_time,\n        evt_index,\n        evt_tx_hash,\n        contract_address,\n        dt,\n        data.input.*\n    from base\n)\n\nselect /* REPARTITION(dt) */ *\nfrom final", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "ethereum_opensea.OpenSeaENSResolver_evt_OwnershipTransferred"}, "model.ethereum_source.OpenSeaENSResolver_call_setAddr": {"raw_sql": "{{\n    config(\n        materialized='incremental',\n        incremental_strategy='insert_overwrite',\n        partition_by=['dt'],\n        file_format='parquet',\n        pre_hook={\n            'sql': 'create or replace function opensea_openseaensresolver_setaddr_calldecodeudf as \"io.iftech.sparkudf.hive.opensea_OpenSeaENSResolver_setAddr_CallDecodeUDF\" using jar \"s3a://ifcrypto/blockchain-dbt/jars/opensea_udf.jar\";'\n        }\n    )\n}}\n\nwith base as (\n    select\n        status==1 as call_success,\n        block_number as call_block_number,\n        block_timestamp as call_block_time,\n        trace_address as call_trace_address,\n        transaction_hash as call_tx_hash,\n        to_address as contract_address,\n        dt,\n        opensea_openseaensresolver_setaddr_calldecodeudf(unhex_input, unhex_output, '{\"constant\": false, \"inputs\": [{\"name\": \"node\", \"type\": \"bytes32\"}, {\"name\": \"addr\", \"type\": \"address\"}], \"name\": \"setAddr\", \"outputs\": [], \"payable\": false, \"stateMutability\": \"nonpayable\", \"type\": \"function\"}', 'setAddr') as data\n    from {{ ref('stg_ethereum__traces') }}\n    where to_address = lower(\"0x9c4e9cce4780062942a7fe34fa2fa7316c872956\")\n    and address_hash = abs(hash(lower(\"0x9c4e9cce4780062942a7fe34fa2fa7316c872956\"))) % 10\n    and selector = \"0x30786435\"\n    and selector_hash = abs(hash(\"0x30786435\")) % 10\n\n    {% if is_incremental() %}\n      and dt = var('dt')\n    {% endif %}\n),\n\nfinal as (\n    select\n        call_success,\n        call_block_number,\n        call_block_time,\n        call_trace_address,\n        call_tx_hash,\n        contract_address,\n        dt,\n        data.input.*,\n        data.output.*\n    from base\n)\n\nselect /* REPARTITION(dt) */ *\nfrom final", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.dbt.is_incremental"], "nodes": ["model.ethereum_source.stg_ethereum__traces"]}, "config": {"enabled": true, "alias": null, "schema": "opensea", "database": null, "tags": ["chain_ethereum", "level_parse", "proj_opensea"], "meta": {}, "materialized": "incremental", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "file_format": "parquet", "partition_by": ["dt"], "incremental_strategy": "insert_overwrite", "post-hook": [], "pre-hook": [{"sql": "create or replace function opensea_openseaensresolver_setaddr_calldecodeudf as \"io.iftech.sparkudf.hive.opensea_OpenSeaENSResolver_setAddr_CallDecodeUDF\" using jar \"s3a://ifcrypto/blockchain-dbt/jars/opensea_udf.jar\";", "transaction": true, "index": null}]}, "database": null, "schema": "ethereum_opensea", "fqn": ["ethereum_source", "codegen", "opensea", "OpenSeaENSResolver_call_setAddr"], "unique_id": "model.ethereum_source.OpenSeaENSResolver_call_setAddr", "package_name": "ethereum_source", "root_path": "/Users/songv/Code/jike/web3/dbt_ethereum_source", "path": "codegen/opensea/OpenSeaENSResolver_call_setAddr.sql", "original_file_path": "models/codegen/opensea/OpenSeaENSResolver_call_setAddr.sql", "name": "OpenSeaENSResolver_call_setAddr", "alias": "OpenSeaENSResolver_call_setAddr", "checksum": {"name": "sha256", "checksum": "c6303d69dd5fadb895b244387ef599f4c57bdc4eac6df0d5ce725d9508019afb"}, "tags": ["chain_ethereum", "level_parse", "proj_opensea"], "refs": [["stg_ethereum__traces"]], "sources": [], "description": "", "columns": {"node": {"name": "node", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "addr": {"name": "addr", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "call_success": {"name": "call_success", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "call_block_number": {"name": "call_block_number", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "call_block_time": {"name": "call_block_time", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "call_trace_address": {"name": "call_trace_address", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "call_tx_hash": {"name": "call_tx_hash", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "contract_address": {"name": "contract_address", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "dt": {"name": "dt", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "ethereum_source://models/codegen/opensea/schema.yml", "compiled_path": "target/compiled/ethereum_source/models/codegen/opensea/OpenSeaENSResolver_call_setAddr.sql", "build_path": null, "deferred": false, "unrendered_config": {"schema": "opensea", "tags": ["chain_ethereum", "level_parse", "proj_opensea"], "materialized": "incremental", "incremental_strategy": "insert_overwrite", "partition_by": ["dt"], "file_format": "parquet", "pre-hook": [{"sql": "create or replace function opensea_openseaensresolver_setaddr_calldecodeudf as \"io.iftech.sparkudf.hive.opensea_OpenSeaENSResolver_setAddr_CallDecodeUDF\" using jar \"s3a://ifcrypto/blockchain-dbt/jars/opensea_udf.jar\";"}]}, "created_at": 1650535972.15236, "compiled_sql": "\n\nwith base as (\n    select\n        status==1 as call_success,\n        block_number as call_block_number,\n        block_timestamp as call_block_time,\n        trace_address as call_trace_address,\n        transaction_hash as call_tx_hash,\n        to_address as contract_address,\n        dt,\n        opensea_openseaensresolver_setaddr_calldecodeudf(unhex_input, unhex_output, '{\"constant\": false, \"inputs\": [{\"name\": \"node\", \"type\": \"bytes32\"}, {\"name\": \"addr\", \"type\": \"address\"}], \"name\": \"setAddr\", \"outputs\": [], \"payable\": false, \"stateMutability\": \"nonpayable\", \"type\": \"function\"}', 'setAddr') as data\n    from ethereum_stg_ethereum.stg_ethereum__traces\n    where to_address = lower(\"0x9c4e9cce4780062942a7fe34fa2fa7316c872956\")\n    and address_hash = abs(hash(lower(\"0x9c4e9cce4780062942a7fe34fa2fa7316c872956\"))) % 10\n    and selector = \"0x30786435\"\n    and selector_hash = abs(hash(\"0x30786435\")) % 10\n\n    \n),\n\nfinal as (\n    select\n        call_success,\n        call_block_number,\n        call_block_time,\n        call_trace_address,\n        call_tx_hash,\n        contract_address,\n        dt,\n        data.input.*,\n        data.output.*\n    from base\n)\n\nselect /* REPARTITION(dt) */ *\nfrom final", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "ethereum_opensea.OpenSeaENSResolver_call_setAddr"}, "model.ethereum_source.OpenSeaENSResolver_evt_AuthorisationChanged": {"raw_sql": "{{\n    config(\n        materialized='incremental',\n        incremental_strategy='insert_overwrite',\n        partition_by=['dt'],\n        file_format='parquet',\n        pre_hook={\n            'sql': 'create or replace function opensea_openseaensresolver_authorisationchanged_eventdecodeudf as \"io.iftech.sparkudf.hive.opensea_OpenSeaENSResolver_AuthorisationChanged_EventDecodeUDF\" using jar \"s3a://ifcrypto/blockchain-dbt/jars/opensea_udf.jar\";'\n        }\n    )\n}}\n\nwith base as (\n    select\n        block_number as evt_block_number,\n        block_timestamp as evt_block_time,\n        log_index as evt_index,\n        transaction_hash as evt_tx_hash,\n        address as contract_address,\n        dt,\n        opensea_openseaensresolver_authorisationchanged_eventdecodeudf(unhex_data, topics_arr, '{\"anonymous\": false, \"inputs\": [{\"indexed\": true, \"name\": \"node\", \"type\": \"bytes32\"}, {\"indexed\": true, \"name\": \"owner\", \"type\": \"address\"}, {\"indexed\": true, \"name\": \"target\", \"type\": \"address\"}, {\"indexed\": false, \"name\": \"isAuthorised\", \"type\": \"bool\"}], \"name\": \"AuthorisationChanged\", \"type\": \"event\"}', 'AuthorisationChanged') as data\n    from {{ ref('stg_ethereum__logs') }}\n    where address = lower(\"0x9c4e9cce4780062942a7fe34fa2fa7316c872956\")\n    and address_hash = abs(hash(lower(\"0x9c4e9cce4780062942a7fe34fa2fa7316c872956\"))) % 10\n    and selector = \"0xe1c5610a6e0cbe10764ecd182adcef1ec338dc4e199c99c32ce98f38e12791df\"\n    and selector_hash = abs(hash(\"0xe1c5610a6e0cbe10764ecd182adcef1ec338dc4e199c99c32ce98f38e12791df\")) % 10\n\n    {% if is_incremental() %}\n      and dt = var('dt')\n    {% endif %}\n),\n\nfinal as (\n    select\n        evt_block_number,\n        evt_block_time,\n        evt_index,\n        evt_tx_hash,\n        contract_address,\n        dt,\n        data.input.*\n    from base\n)\n\nselect /* REPARTITION(dt) */ *\nfrom final", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.dbt.is_incremental"], "nodes": ["model.ethereum_source.stg_ethereum__logs"]}, "config": {"enabled": true, "alias": null, "schema": "opensea", "database": null, "tags": ["chain_ethereum", "level_parse", "proj_opensea"], "meta": {}, "materialized": "incremental", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "file_format": "parquet", "partition_by": ["dt"], "incremental_strategy": "insert_overwrite", "post-hook": [], "pre-hook": [{"sql": "create or replace function opensea_openseaensresolver_authorisationchanged_eventdecodeudf as \"io.iftech.sparkudf.hive.opensea_OpenSeaENSResolver_AuthorisationChanged_EventDecodeUDF\" using jar \"s3a://ifcrypto/blockchain-dbt/jars/opensea_udf.jar\";", "transaction": true, "index": null}]}, "database": null, "schema": "ethereum_opensea", "fqn": ["ethereum_source", "codegen", "opensea", "OpenSeaENSResolver_evt_AuthorisationChanged"], "unique_id": "model.ethereum_source.OpenSeaENSResolver_evt_AuthorisationChanged", "package_name": "ethereum_source", "root_path": "/Users/songv/Code/jike/web3/dbt_ethereum_source", "path": "codegen/opensea/OpenSeaENSResolver_evt_AuthorisationChanged.sql", "original_file_path": "models/codegen/opensea/OpenSeaENSResolver_evt_AuthorisationChanged.sql", "name": "OpenSeaENSResolver_evt_AuthorisationChanged", "alias": "OpenSeaENSResolver_evt_AuthorisationChanged", "checksum": {"name": "sha256", "checksum": "2afb8df570d2d2f92c43cd6da35b137b42305c7a759a03a5a2ffa272a8fac126"}, "tags": ["chain_ethereum", "level_parse", "proj_opensea"], "refs": [["stg_ethereum__logs"]], "sources": [], "description": "", "columns": {"node": {"name": "node", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "owner": {"name": "owner", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "target": {"name": "target", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "isAuthorised": {"name": "isAuthorised", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "evt_block_number": {"name": "evt_block_number", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "evt_block_time": {"name": "evt_block_time", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "evt_index": {"name": "evt_index", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "evt_tx_hash": {"name": "evt_tx_hash", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "contract_address": {"name": "contract_address", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "dt": {"name": "dt", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "ethereum_source://models/codegen/opensea/schema.yml", "compiled_path": "target/compiled/ethereum_source/models/codegen/opensea/OpenSeaENSResolver_evt_AuthorisationChanged.sql", "build_path": null, "deferred": false, "unrendered_config": {"schema": "opensea", "tags": ["chain_ethereum", "level_parse", "proj_opensea"], "materialized": "incremental", "incremental_strategy": "insert_overwrite", "partition_by": ["dt"], "file_format": "parquet", "pre-hook": [{"sql": "create or replace function opensea_openseaensresolver_authorisationchanged_eventdecodeudf as \"io.iftech.sparkudf.hive.opensea_OpenSeaENSResolver_AuthorisationChanged_EventDecodeUDF\" using jar \"s3a://ifcrypto/blockchain-dbt/jars/opensea_udf.jar\";"}]}, "created_at": 1650535972.097261, "compiled_sql": "\n\nwith base as (\n    select\n        block_number as evt_block_number,\n        block_timestamp as evt_block_time,\n        log_index as evt_index,\n        transaction_hash as evt_tx_hash,\n        address as contract_address,\n        dt,\n        opensea_openseaensresolver_authorisationchanged_eventdecodeudf(unhex_data, topics_arr, '{\"anonymous\": false, \"inputs\": [{\"indexed\": true, \"name\": \"node\", \"type\": \"bytes32\"}, {\"indexed\": true, \"name\": \"owner\", \"type\": \"address\"}, {\"indexed\": true, \"name\": \"target\", \"type\": \"address\"}, {\"indexed\": false, \"name\": \"isAuthorised\", \"type\": \"bool\"}], \"name\": \"AuthorisationChanged\", \"type\": \"event\"}', 'AuthorisationChanged') as data\n    from ethereum_stg_ethereum.stg_ethereum__logs\n    where address = lower(\"0x9c4e9cce4780062942a7fe34fa2fa7316c872956\")\n    and address_hash = abs(hash(lower(\"0x9c4e9cce4780062942a7fe34fa2fa7316c872956\"))) % 10\n    and selector = \"0xe1c5610a6e0cbe10764ecd182adcef1ec338dc4e199c99c32ce98f38e12791df\"\n    and selector_hash = abs(hash(\"0xe1c5610a6e0cbe10764ecd182adcef1ec338dc4e199c99c32ce98f38e12791df\")) % 10\n\n    \n),\n\nfinal as (\n    select\n        evt_block_number,\n        evt_block_time,\n        evt_index,\n        evt_tx_hash,\n        contract_address,\n        dt,\n        data.input.*\n    from base\n)\n\nselect /* REPARTITION(dt) */ *\nfrom final", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "ethereum_opensea.OpenSeaENSResolver_evt_AuthorisationChanged"}, "model.ethereum_source.WyvernExchangeV1_call_codename": {"raw_sql": "{{\n    config(\n        materialized='incremental',\n        incremental_strategy='insert_overwrite',\n        partition_by=['dt'],\n        file_format='parquet',\n        pre_hook={\n            'sql': 'create or replace function opensea_wyvernexchangev1_codename_calldecodeudf as \"io.iftech.sparkudf.hive.opensea_WyvernExchangeV1_codename_CallDecodeUDF\" using jar \"s3a://ifcrypto/blockchain-dbt/jars/opensea_udf.jar\";'\n        }\n    )\n}}\n\nwith base as (\n    select\n        status==1 as call_success,\n        block_number as call_block_number,\n        block_timestamp as call_block_time,\n        trace_address as call_trace_address,\n        transaction_hash as call_tx_hash,\n        to_address as contract_address,\n        dt,\n        opensea_wyvernexchangev1_codename_calldecodeudf(unhex_input, unhex_output, '{\"constant\": true, \"inputs\": [], \"name\": \"codename\", \"outputs\": [{\"name\": \"\", \"type\": \"string\"}], \"payable\": false, \"stateMutability\": \"view\", \"type\": \"function\"}', 'codename') as data\n    from {{ ref('stg_ethereum__traces') }}\n    where to_address = lower(\"0x7Be8076f4EA4A4AD08075C2508e481d6C946D12b\")\n    and address_hash = abs(hash(lower(\"0x7Be8076f4EA4A4AD08075C2508e481d6C946D12b\"))) % 10\n    and selector = \"0x30783331\"\n    and selector_hash = abs(hash(\"0x30783331\")) % 10\n\n    {% if is_incremental() %}\n      and dt = var('dt')\n    {% endif %}\n),\n\nfinal as (\n    select\n        call_success,\n        call_block_number,\n        call_block_time,\n        call_trace_address,\n        call_tx_hash,\n        contract_address,\n        dt,\n        data.input.*,\n        data.output.*\n    from base\n)\n\nselect /* REPARTITION(dt) */ *\nfrom final", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.dbt.is_incremental"], "nodes": ["model.ethereum_source.stg_ethereum__traces"]}, "config": {"enabled": true, "alias": null, "schema": "opensea", "database": null, "tags": ["chain_ethereum", "level_parse", "proj_opensea"], "meta": {}, "materialized": "incremental", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "file_format": "parquet", "partition_by": ["dt"], "incremental_strategy": "insert_overwrite", "post-hook": [], "pre-hook": [{"sql": "create or replace function opensea_wyvernexchangev1_codename_calldecodeudf as \"io.iftech.sparkudf.hive.opensea_WyvernExchangeV1_codename_CallDecodeUDF\" using jar \"s3a://ifcrypto/blockchain-dbt/jars/opensea_udf.jar\";", "transaction": true, "index": null}]}, "database": null, "schema": "ethereum_opensea", "fqn": ["ethereum_source", "codegen", "opensea", "WyvernExchangeV1_call_codename"], "unique_id": "model.ethereum_source.WyvernExchangeV1_call_codename", "package_name": "ethereum_source", "root_path": "/Users/songv/Code/jike/web3/dbt_ethereum_source", "path": "codegen/opensea/WyvernExchangeV1_call_codename.sql", "original_file_path": "models/codegen/opensea/WyvernExchangeV1_call_codename.sql", "name": "WyvernExchangeV1_call_codename", "alias": "WyvernExchangeV1_call_codename", "checksum": {"name": "sha256", "checksum": "52978a0565577b70d57e1f30ea821d66e14825fdc0e95165a5d5b92874e0da9c"}, "tags": ["chain_ethereum", "level_parse", "proj_opensea"], "refs": [["stg_ethereum__traces"]], "sources": [], "description": "", "columns": {"output_0": {"name": "output_0", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "call_success": {"name": "call_success", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "call_block_number": {"name": "call_block_number", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "call_block_time": {"name": "call_block_time", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "call_trace_address": {"name": "call_trace_address", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "call_tx_hash": {"name": "call_tx_hash", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "contract_address": {"name": "contract_address", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "dt": {"name": "dt", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "ethereum_source://models/codegen/opensea/schema.yml", "compiled_path": "target/compiled/ethereum_source/models/codegen/opensea/WyvernExchangeV1_call_codename.sql", "build_path": null, "deferred": false, "unrendered_config": {"schema": "opensea", "tags": ["chain_ethereum", "level_parse", "proj_opensea"], "materialized": "incremental", "incremental_strategy": "insert_overwrite", "partition_by": ["dt"], "file_format": "parquet", "pre-hook": [{"sql": "create or replace function opensea_wyvernexchangev1_codename_calldecodeudf as \"io.iftech.sparkudf.hive.opensea_WyvernExchangeV1_codename_CallDecodeUDF\" using jar \"s3a://ifcrypto/blockchain-dbt/jars/opensea_udf.jar\";"}]}, "created_at": 1650535971.939327, "compiled_sql": "\n\nwith base as (\n    select\n        status==1 as call_success,\n        block_number as call_block_number,\n        block_timestamp as call_block_time,\n        trace_address as call_trace_address,\n        transaction_hash as call_tx_hash,\n        to_address as contract_address,\n        dt,\n        opensea_wyvernexchangev1_codename_calldecodeudf(unhex_input, unhex_output, '{\"constant\": true, \"inputs\": [], \"name\": \"codename\", \"outputs\": [{\"name\": \"\", \"type\": \"string\"}], \"payable\": false, \"stateMutability\": \"view\", \"type\": \"function\"}', 'codename') as data\n    from ethereum_stg_ethereum.stg_ethereum__traces\n    where to_address = lower(\"0x7Be8076f4EA4A4AD08075C2508e481d6C946D12b\")\n    and address_hash = abs(hash(lower(\"0x7Be8076f4EA4A4AD08075C2508e481d6C946D12b\"))) % 10\n    and selector = \"0x30783331\"\n    and selector_hash = abs(hash(\"0x30783331\")) % 10\n\n    \n),\n\nfinal as (\n    select\n        call_success,\n        call_block_number,\n        call_block_time,\n        call_trace_address,\n        call_tx_hash,\n        contract_address,\n        dt,\n        data.input.*,\n        data.output.*\n    from base\n)\n\nselect /* REPARTITION(dt) */ *\nfrom final", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "ethereum_opensea.WyvernExchangeV1_call_codename"}, "model.ethereum_source.WyvernExchangeV1_call_calculateFinalPrice": {"raw_sql": "{{\n    config(\n        materialized='incremental',\n        incremental_strategy='insert_overwrite',\n        partition_by=['dt'],\n        file_format='parquet',\n        pre_hook={\n            'sql': 'create or replace function opensea_wyvernexchangev1_calculatefinalprice_calldecodeudf as \"io.iftech.sparkudf.hive.opensea_WyvernExchangeV1_calculateFinalPrice_CallDecodeUDF\" using jar \"s3a://ifcrypto/blockchain-dbt/jars/opensea_udf.jar\";'\n        }\n    )\n}}\n\nwith base as (\n    select\n        status==1 as call_success,\n        block_number as call_block_number,\n        block_timestamp as call_block_time,\n        trace_address as call_trace_address,\n        transaction_hash as call_tx_hash,\n        to_address as contract_address,\n        dt,\n        opensea_wyvernexchangev1_calculatefinalprice_calldecodeudf(unhex_input, unhex_output, '{\"constant\": true, \"inputs\": [{\"name\": \"side\", \"type\": \"uint8\"}, {\"name\": \"saleKind\", \"type\": \"uint8\"}, {\"name\": \"basePrice\", \"type\": \"uint256\"}, {\"name\": \"extra\", \"type\": \"uint256\"}, {\"name\": \"listingTime\", \"type\": \"uint256\"}, {\"name\": \"expirationTime\", \"type\": \"uint256\"}], \"name\": \"calculateFinalPrice\", \"outputs\": [{\"name\": \"\", \"type\": \"uint256\"}], \"payable\": false, \"stateMutability\": \"view\", \"type\": \"function\"}', 'calculateFinalPrice') as data\n    from {{ ref('stg_ethereum__traces') }}\n    where to_address = lower(\"0x7Be8076f4EA4A4AD08075C2508e481d6C946D12b\")\n    and address_hash = abs(hash(lower(\"0x7Be8076f4EA4A4AD08075C2508e481d6C946D12b\"))) % 10\n    and selector = \"0x30783633\"\n    and selector_hash = abs(hash(\"0x30783633\")) % 10\n\n    {% if is_incremental() %}\n      and dt = var('dt')\n    {% endif %}\n),\n\nfinal as (\n    select\n        call_success,\n        call_block_number,\n        call_block_time,\n        call_trace_address,\n        call_tx_hash,\n        contract_address,\n        dt,\n        data.input.*,\n        data.output.*\n    from base\n)\n\nselect /* REPARTITION(dt) */ *\nfrom final", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.dbt.is_incremental"], "nodes": ["model.ethereum_source.stg_ethereum__traces"]}, "config": {"enabled": true, "alias": null, "schema": "opensea", "database": null, "tags": ["chain_ethereum", "level_parse", "proj_opensea"], "meta": {}, "materialized": "incremental", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "file_format": "parquet", "partition_by": ["dt"], "incremental_strategy": "insert_overwrite", "post-hook": [], "pre-hook": [{"sql": "create or replace function opensea_wyvernexchangev1_calculatefinalprice_calldecodeudf as \"io.iftech.sparkudf.hive.opensea_WyvernExchangeV1_calculateFinalPrice_CallDecodeUDF\" using jar \"s3a://ifcrypto/blockchain-dbt/jars/opensea_udf.jar\";", "transaction": true, "index": null}]}, "database": null, "schema": "ethereum_opensea", "fqn": ["ethereum_source", "codegen", "opensea", "WyvernExchangeV1_call_calculateFinalPrice"], "unique_id": "model.ethereum_source.WyvernExchangeV1_call_calculateFinalPrice", "package_name": "ethereum_source", "root_path": "/Users/songv/Code/jike/web3/dbt_ethereum_source", "path": "codegen/opensea/WyvernExchangeV1_call_calculateFinalPrice.sql", "original_file_path": "models/codegen/opensea/WyvernExchangeV1_call_calculateFinalPrice.sql", "name": "WyvernExchangeV1_call_calculateFinalPrice", "alias": "WyvernExchangeV1_call_calculateFinalPrice", "checksum": {"name": "sha256", "checksum": "8483e3f4e7d9836aab0a9759be0ca83b2d304861721a6cc18d7d90016dccc4c5"}, "tags": ["chain_ethereum", "level_parse", "proj_opensea"], "refs": [["stg_ethereum__traces"]], "sources": [], "description": "", "columns": {"side": {"name": "side", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "saleKind": {"name": "saleKind", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "basePrice": {"name": "basePrice", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "extra": {"name": "extra", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "listingTime": {"name": "listingTime", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "expirationTime": {"name": "expirationTime", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "output_0": {"name": "output_0", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "call_success": {"name": "call_success", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "call_block_number": {"name": "call_block_number", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "call_block_time": {"name": "call_block_time", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "call_trace_address": {"name": "call_trace_address", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "call_tx_hash": {"name": "call_tx_hash", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "contract_address": {"name": "contract_address", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "dt": {"name": "dt", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "ethereum_source://models/codegen/opensea/schema.yml", "compiled_path": "target/compiled/ethereum_source/models/codegen/opensea/WyvernExchangeV1_call_calculateFinalPrice.sql", "build_path": null, "deferred": false, "unrendered_config": {"schema": "opensea", "tags": ["chain_ethereum", "level_parse", "proj_opensea"], "materialized": "incremental", "incremental_strategy": "insert_overwrite", "partition_by": ["dt"], "file_format": "parquet", "pre-hook": [{"sql": "create or replace function opensea_wyvernexchangev1_calculatefinalprice_calldecodeudf as \"io.iftech.sparkudf.hive.opensea_WyvernExchangeV1_calculateFinalPrice_CallDecodeUDF\" using jar \"s3a://ifcrypto/blockchain-dbt/jars/opensea_udf.jar\";"}]}, "created_at": 1650535971.9574242, "compiled_sql": "\n\nwith base as (\n    select\n        status==1 as call_success,\n        block_number as call_block_number,\n        block_timestamp as call_block_time,\n        trace_address as call_trace_address,\n        transaction_hash as call_tx_hash,\n        to_address as contract_address,\n        dt,\n        opensea_wyvernexchangev1_calculatefinalprice_calldecodeudf(unhex_input, unhex_output, '{\"constant\": true, \"inputs\": [{\"name\": \"side\", \"type\": \"uint8\"}, {\"name\": \"saleKind\", \"type\": \"uint8\"}, {\"name\": \"basePrice\", \"type\": \"uint256\"}, {\"name\": \"extra\", \"type\": \"uint256\"}, {\"name\": \"listingTime\", \"type\": \"uint256\"}, {\"name\": \"expirationTime\", \"type\": \"uint256\"}], \"name\": \"calculateFinalPrice\", \"outputs\": [{\"name\": \"\", \"type\": \"uint256\"}], \"payable\": false, \"stateMutability\": \"view\", \"type\": \"function\"}', 'calculateFinalPrice') as data\n    from ethereum_stg_ethereum.stg_ethereum__traces\n    where to_address = lower(\"0x7Be8076f4EA4A4AD08075C2508e481d6C946D12b\")\n    and address_hash = abs(hash(lower(\"0x7Be8076f4EA4A4AD08075C2508e481d6C946D12b\"))) % 10\n    and selector = \"0x30783633\"\n    and selector_hash = abs(hash(\"0x30783633\")) % 10\n\n    \n),\n\nfinal as (\n    select\n        call_success,\n        call_block_number,\n        call_block_time,\n        call_trace_address,\n        call_tx_hash,\n        contract_address,\n        dt,\n        data.input.*,\n        data.output.*\n    from base\n)\n\nselect /* REPARTITION(dt) */ *\nfrom final", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "ethereum_opensea.WyvernExchangeV1_call_calculateFinalPrice"}, "model.ethereum_source.WyvernExchangeV1_call_hashOrder_": {"raw_sql": "{{\n    config(\n        materialized='incremental',\n        incremental_strategy='insert_overwrite',\n        partition_by=['dt'],\n        file_format='parquet',\n        pre_hook={\n            'sql': 'create or replace function opensea_wyvernexchangev1_hashorder__calldecodeudf as \"io.iftech.sparkudf.hive.opensea_WyvernExchangeV1_hashOrder__CallDecodeUDF\" using jar \"s3a://ifcrypto/blockchain-dbt/jars/opensea_udf.jar\";'\n        }\n    )\n}}\n\nwith base as (\n    select\n        status==1 as call_success,\n        block_number as call_block_number,\n        block_timestamp as call_block_time,\n        trace_address as call_trace_address,\n        transaction_hash as call_tx_hash,\n        to_address as contract_address,\n        dt,\n        opensea_wyvernexchangev1_hashorder__calldecodeudf(unhex_input, unhex_output, '{\"constant\": true, \"inputs\": [{\"name\": \"addrs\", \"type\": \"address[7]\"}, {\"name\": \"uints\", \"type\": \"uint256[9]\"}, {\"name\": \"feeMethod\", \"type\": \"uint8\"}, {\"name\": \"side\", \"type\": \"uint8\"}, {\"name\": \"saleKind\", \"type\": \"uint8\"}, {\"name\": \"howToCall\", \"type\": \"uint8\"}, {\"name\": \"calldata\", \"type\": \"bytes\"}, {\"name\": \"replacementPattern\", \"type\": \"bytes\"}, {\"name\": \"staticExtradata\", \"type\": \"bytes\"}], \"name\": \"hashOrder_\", \"outputs\": [{\"name\": \"\", \"type\": \"bytes32\"}], \"payable\": false, \"stateMutability\": \"pure\", \"type\": \"function\"}', 'hashOrder_') as data\n    from {{ ref('stg_ethereum__traces') }}\n    where to_address = lower(\"0x7Be8076f4EA4A4AD08075C2508e481d6C946D12b\")\n    and address_hash = abs(hash(lower(\"0x7Be8076f4EA4A4AD08075C2508e481d6C946D12b\"))) % 10\n    and selector = \"0x30783731\"\n    and selector_hash = abs(hash(\"0x30783731\")) % 10\n\n    {% if is_incremental() %}\n      and dt = var('dt')\n    {% endif %}\n),\n\nfinal as (\n    select\n        call_success,\n        call_block_number,\n        call_block_time,\n        call_trace_address,\n        call_tx_hash,\n        contract_address,\n        dt,\n        data.input.*,\n        data.output.*\n    from base\n)\n\nselect /* REPARTITION(dt) */ *\nfrom final", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.dbt.is_incremental"], "nodes": ["model.ethereum_source.stg_ethereum__traces"]}, "config": {"enabled": true, "alias": null, "schema": "opensea", "database": null, "tags": ["chain_ethereum", "level_parse", "proj_opensea"], "meta": {}, "materialized": "incremental", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "file_format": "parquet", "partition_by": ["dt"], "incremental_strategy": "insert_overwrite", "post-hook": [], "pre-hook": [{"sql": "create or replace function opensea_wyvernexchangev1_hashorder__calldecodeudf as \"io.iftech.sparkudf.hive.opensea_WyvernExchangeV1_hashOrder__CallDecodeUDF\" using jar \"s3a://ifcrypto/blockchain-dbt/jars/opensea_udf.jar\";", "transaction": true, "index": null}]}, "database": null, "schema": "ethereum_opensea", "fqn": ["ethereum_source", "codegen", "opensea", "WyvernExchangeV1_call_hashOrder_"], "unique_id": "model.ethereum_source.WyvernExchangeV1_call_hashOrder_", "package_name": "ethereum_source", "root_path": "/Users/songv/Code/jike/web3/dbt_ethereum_source", "path": "codegen/opensea/WyvernExchangeV1_call_hashOrder_.sql", "original_file_path": "models/codegen/opensea/WyvernExchangeV1_call_hashOrder_.sql", "name": "WyvernExchangeV1_call_hashOrder_", "alias": "WyvernExchangeV1_call_hashOrder_", "checksum": {"name": "sha256", "checksum": "f79c71dc0e5383a4e7179c9d1545f6c47798def904aa7a02f4f4118eeb5a095e"}, "tags": ["chain_ethereum", "level_parse", "proj_opensea"], "refs": [["stg_ethereum__traces"]], "sources": [], "description": "", "columns": {"addrs": {"name": "addrs", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "uints": {"name": "uints", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "feeMethod": {"name": "feeMethod", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "side": {"name": "side", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "saleKind": {"name": "saleKind", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "howToCall": {"name": "howToCall", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "calldata": {"name": "calldata", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "replacementPattern": {"name": "replacementPattern", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "staticExtradata": {"name": "staticExtradata", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "output_0": {"name": "output_0", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "call_success": {"name": "call_success", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "call_block_number": {"name": "call_block_number", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "call_block_time": {"name": "call_block_time", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "call_trace_address": {"name": "call_trace_address", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "call_tx_hash": {"name": "call_tx_hash", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "contract_address": {"name": "contract_address", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "dt": {"name": "dt", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "ethereum_source://models/codegen/opensea/schema.yml", "compiled_path": "target/compiled/ethereum_source/models/codegen/opensea/WyvernExchangeV1_call_hashOrder_.sql", "build_path": null, "deferred": false, "unrendered_config": {"schema": "opensea", "tags": ["chain_ethereum", "level_parse", "proj_opensea"], "materialized": "incremental", "incremental_strategy": "insert_overwrite", "partition_by": ["dt"], "file_format": "parquet", "pre-hook": [{"sql": "create or replace function opensea_wyvernexchangev1_hashorder__calldecodeudf as \"io.iftech.sparkudf.hive.opensea_WyvernExchangeV1_hashOrder__CallDecodeUDF\" using jar \"s3a://ifcrypto/blockchain-dbt/jars/opensea_udf.jar\";"}]}, "created_at": 1650535971.9634628, "compiled_sql": "\n\nwith base as (\n    select\n        status==1 as call_success,\n        block_number as call_block_number,\n        block_timestamp as call_block_time,\n        trace_address as call_trace_address,\n        transaction_hash as call_tx_hash,\n        to_address as contract_address,\n        dt,\n        opensea_wyvernexchangev1_hashorder__calldecodeudf(unhex_input, unhex_output, '{\"constant\": true, \"inputs\": [{\"name\": \"addrs\", \"type\": \"address[7]\"}, {\"name\": \"uints\", \"type\": \"uint256[9]\"}, {\"name\": \"feeMethod\", \"type\": \"uint8\"}, {\"name\": \"side\", \"type\": \"uint8\"}, {\"name\": \"saleKind\", \"type\": \"uint8\"}, {\"name\": \"howToCall\", \"type\": \"uint8\"}, {\"name\": \"calldata\", \"type\": \"bytes\"}, {\"name\": \"replacementPattern\", \"type\": \"bytes\"}, {\"name\": \"staticExtradata\", \"type\": \"bytes\"}], \"name\": \"hashOrder_\", \"outputs\": [{\"name\": \"\", \"type\": \"bytes32\"}], \"payable\": false, \"stateMutability\": \"pure\", \"type\": \"function\"}', 'hashOrder_') as data\n    from ethereum_stg_ethereum.stg_ethereum__traces\n    where to_address = lower(\"0x7Be8076f4EA4A4AD08075C2508e481d6C946D12b\")\n    and address_hash = abs(hash(lower(\"0x7Be8076f4EA4A4AD08075C2508e481d6C946D12b\"))) % 10\n    and selector = \"0x30783731\"\n    and selector_hash = abs(hash(\"0x30783731\")) % 10\n\n    \n),\n\nfinal as (\n    select\n        call_success,\n        call_block_number,\n        call_block_time,\n        call_trace_address,\n        call_tx_hash,\n        contract_address,\n        dt,\n        data.input.*,\n        data.output.*\n    from base\n)\n\nselect /* REPARTITION(dt) */ *\nfrom final", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "ethereum_opensea.WyvernExchangeV1_call_hashOrder_"}, "model.ethereum_source.WyvernExchangeV2_call_changeMinimumTakerProtocolFee": {"raw_sql": "{{\n    config(\n        materialized='incremental',\n        incremental_strategy='insert_overwrite',\n        partition_by=['dt'],\n        file_format='parquet',\n        pre_hook={\n            'sql': 'create or replace function opensea_wyvernexchangev2_changeminimumtakerprotocolfee_calldecodeudf as \"io.iftech.sparkudf.hive.opensea_WyvernExchangeV2_changeMinimumTakerProtocolFee_CallDecodeUDF\" using jar \"s3a://ifcrypto/blockchain-dbt/jars/opensea_udf.jar\";'\n        }\n    )\n}}\n\nwith base as (\n    select\n        status==1 as call_success,\n        block_number as call_block_number,\n        block_timestamp as call_block_time,\n        trace_address as call_trace_address,\n        transaction_hash as call_tx_hash,\n        to_address as contract_address,\n        dt,\n        opensea_wyvernexchangev2_changeminimumtakerprotocolfee_calldecodeudf(unhex_input, unhex_output, '{\"constant\": false, \"inputs\": [{\"name\": \"newMinimumTakerProtocolFee\", \"type\": \"uint256\"}], \"name\": \"changeMinimumTakerProtocolFee\", \"outputs\": [], \"payable\": false, \"stateMutability\": \"nonpayable\", \"type\": \"function\"}', 'changeMinimumTakerProtocolFee') as data\n    from {{ ref('stg_ethereum__traces') }}\n    where to_address = lower(\"0x7f268357A8c2552623316e2562D90e642bB538E5\")\n    and address_hash = abs(hash(lower(\"0x7f268357A8c2552623316e2562D90e642bB538E5\"))) % 10\n    and selector = \"0x30783161\"\n    and selector_hash = abs(hash(\"0x30783161\")) % 10\n\n    {% if is_incremental() %}\n      and dt = var('dt')\n    {% endif %}\n),\n\nfinal as (\n    select\n        call_success,\n        call_block_number,\n        call_block_time,\n        call_trace_address,\n        call_tx_hash,\n        contract_address,\n        dt,\n        data.input.*,\n        data.output.*\n    from base\n)\n\nselect /* REPARTITION(dt) */ *\nfrom final", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.dbt.is_incremental"], "nodes": ["model.ethereum_source.stg_ethereum__traces"]}, "config": {"enabled": true, "alias": null, "schema": "opensea", "database": null, "tags": ["chain_ethereum", "level_parse", "proj_opensea"], "meta": {}, "materialized": "incremental", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "file_format": "parquet", "partition_by": ["dt"], "incremental_strategy": "insert_overwrite", "post-hook": [], "pre-hook": [{"sql": "create or replace function opensea_wyvernexchangev2_changeminimumtakerprotocolfee_calldecodeudf as \"io.iftech.sparkudf.hive.opensea_WyvernExchangeV2_changeMinimumTakerProtocolFee_CallDecodeUDF\" using jar \"s3a://ifcrypto/blockchain-dbt/jars/opensea_udf.jar\";", "transaction": true, "index": null}]}, "database": null, "schema": "ethereum_opensea", "fqn": ["ethereum_source", "codegen", "opensea", "WyvernExchangeV2_call_changeMinimumTakerProtocolFee"], "unique_id": "model.ethereum_source.WyvernExchangeV2_call_changeMinimumTakerProtocolFee", "package_name": "ethereum_source", "root_path": "/Users/songv/Code/jike/web3/dbt_ethereum_source", "path": "codegen/opensea/WyvernExchangeV2_call_changeMinimumTakerProtocolFee.sql", "original_file_path": "models/codegen/opensea/WyvernExchangeV2_call_changeMinimumTakerProtocolFee.sql", "name": "WyvernExchangeV2_call_changeMinimumTakerProtocolFee", "alias": "WyvernExchangeV2_call_changeMinimumTakerProtocolFee", "checksum": {"name": "sha256", "checksum": "17cd0248df841b5a5f871cac48e0225fcae3bbcfd4179dbec3910b3af2873d56"}, "tags": ["chain_ethereum", "level_parse", "proj_opensea"], "refs": [["stg_ethereum__traces"]], "sources": [], "description": "", "columns": {"newMinimumTakerProtocolFee": {"name": "newMinimumTakerProtocolFee", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "call_success": {"name": "call_success", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "call_block_number": {"name": "call_block_number", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "call_block_time": {"name": "call_block_time", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "call_trace_address": {"name": "call_trace_address", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "call_tx_hash": {"name": "call_tx_hash", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "contract_address": {"name": "contract_address", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "dt": {"name": "dt", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "ethereum_source://models/codegen/opensea/schema.yml", "compiled_path": "target/compiled/ethereum_source/models/codegen/opensea/WyvernExchangeV2_call_changeMinimumTakerProtocolFee.sql", "build_path": null, "deferred": false, "unrendered_config": {"schema": "opensea", "tags": ["chain_ethereum", "level_parse", "proj_opensea"], "materialized": "incremental", "incremental_strategy": "insert_overwrite", "partition_by": ["dt"], "file_format": "parquet", "pre-hook": [{"sql": "create or replace function opensea_wyvernexchangev2_changeminimumtakerprotocolfee_calldecodeudf as \"io.iftech.sparkudf.hive.opensea_WyvernExchangeV2_changeMinimumTakerProtocolFee_CallDecodeUDF\" using jar \"s3a://ifcrypto/blockchain-dbt/jars/opensea_udf.jar\";"}]}, "created_at": 1650535972.022751, "compiled_sql": "\n\nwith base as (\n    select\n        status==1 as call_success,\n        block_number as call_block_number,\n        block_timestamp as call_block_time,\n        trace_address as call_trace_address,\n        transaction_hash as call_tx_hash,\n        to_address as contract_address,\n        dt,\n        opensea_wyvernexchangev2_changeminimumtakerprotocolfee_calldecodeudf(unhex_input, unhex_output, '{\"constant\": false, \"inputs\": [{\"name\": \"newMinimumTakerProtocolFee\", \"type\": \"uint256\"}], \"name\": \"changeMinimumTakerProtocolFee\", \"outputs\": [], \"payable\": false, \"stateMutability\": \"nonpayable\", \"type\": \"function\"}', 'changeMinimumTakerProtocolFee') as data\n    from ethereum_stg_ethereum.stg_ethereum__traces\n    where to_address = lower(\"0x7f268357A8c2552623316e2562D90e642bB538E5\")\n    and address_hash = abs(hash(lower(\"0x7f268357A8c2552623316e2562D90e642bB538E5\"))) % 10\n    and selector = \"0x30783161\"\n    and selector_hash = abs(hash(\"0x30783161\")) % 10\n\n    \n),\n\nfinal as (\n    select\n        call_success,\n        call_block_number,\n        call_block_time,\n        call_trace_address,\n        call_tx_hash,\n        contract_address,\n        dt,\n        data.input.*,\n        data.output.*\n    from base\n)\n\nselect /* REPARTITION(dt) */ *\nfrom final", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "ethereum_opensea.WyvernExchangeV2_call_changeMinimumTakerProtocolFee"}, "model.ethereum_source.OpenSeaENSResolver_call_authorisations": {"raw_sql": "{{\n    config(\n        materialized='incremental',\n        incremental_strategy='insert_overwrite',\n        partition_by=['dt'],\n        file_format='parquet',\n        pre_hook={\n            'sql': 'create or replace function opensea_openseaensresolver_authorisations_calldecodeudf as \"io.iftech.sparkudf.hive.opensea_OpenSeaENSResolver_authorisations_CallDecodeUDF\" using jar \"s3a://ifcrypto/blockchain-dbt/jars/opensea_udf.jar\";'\n        }\n    )\n}}\n\nwith base as (\n    select\n        status==1 as call_success,\n        block_number as call_block_number,\n        block_timestamp as call_block_time,\n        trace_address as call_trace_address,\n        transaction_hash as call_tx_hash,\n        to_address as contract_address,\n        dt,\n        opensea_openseaensresolver_authorisations_calldecodeudf(unhex_input, unhex_output, '{\"constant\": true, \"inputs\": [{\"name\": \"\", \"type\": \"bytes32\"}, {\"name\": \"\", \"type\": \"address\"}, {\"name\": \"\", \"type\": \"address\"}], \"name\": \"authorisations\", \"outputs\": [{\"name\": \"\", \"type\": \"bool\"}], \"payable\": false, \"stateMutability\": \"view\", \"type\": \"function\"}', 'authorisations') as data\n    from {{ ref('stg_ethereum__traces') }}\n    where to_address = lower(\"0x9c4e9cce4780062942a7fe34fa2fa7316c872956\")\n    and address_hash = abs(hash(lower(\"0x9c4e9cce4780062942a7fe34fa2fa7316c872956\"))) % 10\n    and selector = \"0x30786638\"\n    and selector_hash = abs(hash(\"0x30786638\")) % 10\n\n    {% if is_incremental() %}\n      and dt = var('dt')\n    {% endif %}\n),\n\nfinal as (\n    select\n        call_success,\n        call_block_number,\n        call_block_time,\n        call_trace_address,\n        call_tx_hash,\n        contract_address,\n        dt,\n        data.input.*,\n        data.output.*\n    from base\n)\n\nselect /* REPARTITION(dt) */ *\nfrom final", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.dbt.is_incremental"], "nodes": ["model.ethereum_source.stg_ethereum__traces"]}, "config": {"enabled": true, "alias": null, "schema": "opensea", "database": null, "tags": ["chain_ethereum", "level_parse", "proj_opensea"], "meta": {}, "materialized": "incremental", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "file_format": "parquet", "partition_by": ["dt"], "incremental_strategy": "insert_overwrite", "post-hook": [], "pre-hook": [{"sql": "create or replace function opensea_openseaensresolver_authorisations_calldecodeudf as \"io.iftech.sparkudf.hive.opensea_OpenSeaENSResolver_authorisations_CallDecodeUDF\" using jar \"s3a://ifcrypto/blockchain-dbt/jars/opensea_udf.jar\";", "transaction": true, "index": null}]}, "database": null, "schema": "ethereum_opensea", "fqn": ["ethereum_source", "codegen", "opensea", "OpenSeaENSResolver_call_authorisations"], "unique_id": "model.ethereum_source.OpenSeaENSResolver_call_authorisations", "package_name": "ethereum_source", "root_path": "/Users/songv/Code/jike/web3/dbt_ethereum_source", "path": "codegen/opensea/OpenSeaENSResolver_call_authorisations.sql", "original_file_path": "models/codegen/opensea/OpenSeaENSResolver_call_authorisations.sql", "name": "OpenSeaENSResolver_call_authorisations", "alias": "OpenSeaENSResolver_call_authorisations", "checksum": {"name": "sha256", "checksum": "7e9d5fea4a7f95db502bed02a0ebc996e2afa351a947c85f2264f62aa231d4d9"}, "tags": ["chain_ethereum", "level_parse", "proj_opensea"], "refs": [["stg_ethereum__traces"]], "sources": [], "description": "", "columns": {"_0": {"name": "_0", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "_1": {"name": "_1", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "_2": {"name": "_2", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "output_0": {"name": "output_0", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "call_success": {"name": "call_success", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "call_block_number": {"name": "call_block_number", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "call_block_time": {"name": "call_block_time", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "call_trace_address": {"name": "call_trace_address", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "call_tx_hash": {"name": "call_tx_hash", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "contract_address": {"name": "contract_address", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "dt": {"name": "dt", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "ethereum_source://models/codegen/opensea/schema.yml", "compiled_path": "target/compiled/ethereum_source/models/codegen/opensea/OpenSeaENSResolver_call_authorisations.sql", "build_path": null, "deferred": false, "unrendered_config": {"schema": "opensea", "tags": ["chain_ethereum", "level_parse", "proj_opensea"], "materialized": "incremental", "incremental_strategy": "insert_overwrite", "partition_by": ["dt"], "file_format": "parquet", "pre-hook": [{"sql": "create or replace function opensea_openseaensresolver_authorisations_calldecodeudf as \"io.iftech.sparkudf.hive.opensea_OpenSeaENSResolver_authorisations_CallDecodeUDF\" using jar \"s3a://ifcrypto/blockchain-dbt/jars/opensea_udf.jar\";"}]}, "created_at": 1650535972.157936, "compiled_sql": "\n\nwith base as (\n    select\n        status==1 as call_success,\n        block_number as call_block_number,\n        block_timestamp as call_block_time,\n        trace_address as call_trace_address,\n        transaction_hash as call_tx_hash,\n        to_address as contract_address,\n        dt,\n        opensea_openseaensresolver_authorisations_calldecodeudf(unhex_input, unhex_output, '{\"constant\": true, \"inputs\": [{\"name\": \"\", \"type\": \"bytes32\"}, {\"name\": \"\", \"type\": \"address\"}, {\"name\": \"\", \"type\": \"address\"}], \"name\": \"authorisations\", \"outputs\": [{\"name\": \"\", \"type\": \"bool\"}], \"payable\": false, \"stateMutability\": \"view\", \"type\": \"function\"}', 'authorisations') as data\n    from ethereum_stg_ethereum.stg_ethereum__traces\n    where to_address = lower(\"0x9c4e9cce4780062942a7fe34fa2fa7316c872956\")\n    and address_hash = abs(hash(lower(\"0x9c4e9cce4780062942a7fe34fa2fa7316c872956\"))) % 10\n    and selector = \"0x30786638\"\n    and selector_hash = abs(hash(\"0x30786638\")) % 10\n\n    \n),\n\nfinal as (\n    select\n        call_success,\n        call_block_number,\n        call_block_time,\n        call_trace_address,\n        call_tx_hash,\n        contract_address,\n        dt,\n        data.input.*,\n        data.output.*\n    from base\n)\n\nselect /* REPARTITION(dt) */ *\nfrom final", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "ethereum_opensea.OpenSeaENSResolver_call_authorisations"}, "model.ethereum_source.WyvernExchangeV1_call_cancelledOrFinalized": {"raw_sql": "{{\n    config(\n        materialized='incremental',\n        incremental_strategy='insert_overwrite',\n        partition_by=['dt'],\n        file_format='parquet',\n        pre_hook={\n            'sql': 'create or replace function opensea_wyvernexchangev1_cancelledorfinalized_calldecodeudf as \"io.iftech.sparkudf.hive.opensea_WyvernExchangeV1_cancelledOrFinalized_CallDecodeUDF\" using jar \"s3a://ifcrypto/blockchain-dbt/jars/opensea_udf.jar\";'\n        }\n    )\n}}\n\nwith base as (\n    select\n        status==1 as call_success,\n        block_number as call_block_number,\n        block_timestamp as call_block_time,\n        trace_address as call_trace_address,\n        transaction_hash as call_tx_hash,\n        to_address as contract_address,\n        dt,\n        opensea_wyvernexchangev1_cancelledorfinalized_calldecodeudf(unhex_input, unhex_output, '{\"constant\": true, \"inputs\": [{\"name\": \"\", \"type\": \"bytes32\"}], \"name\": \"cancelledOrFinalized\", \"outputs\": [{\"name\": \"\", \"type\": \"bool\"}], \"payable\": false, \"stateMutability\": \"view\", \"type\": \"function\"}', 'cancelledOrFinalized') as data\n    from {{ ref('stg_ethereum__traces') }}\n    where to_address = lower(\"0x7Be8076f4EA4A4AD08075C2508e481d6C946D12b\")\n    and address_hash = abs(hash(lower(\"0x7Be8076f4EA4A4AD08075C2508e481d6C946D12b\"))) % 10\n    and selector = \"0x30783830\"\n    and selector_hash = abs(hash(\"0x30783830\")) % 10\n\n    {% if is_incremental() %}\n      and dt = var('dt')\n    {% endif %}\n),\n\nfinal as (\n    select\n        call_success,\n        call_block_number,\n        call_block_time,\n        call_trace_address,\n        call_tx_hash,\n        contract_address,\n        dt,\n        data.input.*,\n        data.output.*\n    from base\n)\n\nselect /* REPARTITION(dt) */ *\nfrom final", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.dbt.is_incremental"], "nodes": ["model.ethereum_source.stg_ethereum__traces"]}, "config": {"enabled": true, "alias": null, "schema": "opensea", "database": null, "tags": ["chain_ethereum", "level_parse", "proj_opensea"], "meta": {}, "materialized": "incremental", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "file_format": "parquet", "partition_by": ["dt"], "incremental_strategy": "insert_overwrite", "post-hook": [], "pre-hook": [{"sql": "create or replace function opensea_wyvernexchangev1_cancelledorfinalized_calldecodeudf as \"io.iftech.sparkudf.hive.opensea_WyvernExchangeV1_cancelledOrFinalized_CallDecodeUDF\" using jar \"s3a://ifcrypto/blockchain-dbt/jars/opensea_udf.jar\";", "transaction": true, "index": null}]}, "database": null, "schema": "ethereum_opensea", "fqn": ["ethereum_source", "codegen", "opensea", "WyvernExchangeV1_call_cancelledOrFinalized"], "unique_id": "model.ethereum_source.WyvernExchangeV1_call_cancelledOrFinalized", "package_name": "ethereum_source", "root_path": "/Users/songv/Code/jike/web3/dbt_ethereum_source", "path": "codegen/opensea/WyvernExchangeV1_call_cancelledOrFinalized.sql", "original_file_path": "models/codegen/opensea/WyvernExchangeV1_call_cancelledOrFinalized.sql", "name": "WyvernExchangeV1_call_cancelledOrFinalized", "alias": "WyvernExchangeV1_call_cancelledOrFinalized", "checksum": {"name": "sha256", "checksum": "a02042c261872edb0e506b3640890c8a8762673bb5c633e01408d2e3cb313790"}, "tags": ["chain_ethereum", "level_parse", "proj_opensea"], "refs": [["stg_ethereum__traces"]], "sources": [], "description": "", "columns": {"_0": {"name": "_0", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "output_0": {"name": "output_0", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "call_success": {"name": "call_success", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "call_block_number": {"name": "call_block_number", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "call_block_time": {"name": "call_block_time", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "call_trace_address": {"name": "call_trace_address", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "call_tx_hash": {"name": "call_tx_hash", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "contract_address": {"name": "contract_address", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "dt": {"name": "dt", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "ethereum_source://models/codegen/opensea/schema.yml", "compiled_path": "target/compiled/ethereum_source/models/codegen/opensea/WyvernExchangeV1_call_cancelledOrFinalized.sql", "build_path": null, "deferred": false, "unrendered_config": {"schema": "opensea", "tags": ["chain_ethereum", "level_parse", "proj_opensea"], "materialized": "incremental", "incremental_strategy": "insert_overwrite", "partition_by": ["dt"], "file_format": "parquet", "pre-hook": [{"sql": "create or replace function opensea_wyvernexchangev1_cancelledorfinalized_calldecodeudf as \"io.iftech.sparkudf.hive.opensea_WyvernExchangeV1_cancelledOrFinalized_CallDecodeUDF\" using jar \"s3a://ifcrypto/blockchain-dbt/jars/opensea_udf.jar\";"}]}, "created_at": 1650535971.977639, "compiled_sql": "\n\nwith base as (\n    select\n        status==1 as call_success,\n        block_number as call_block_number,\n        block_timestamp as call_block_time,\n        trace_address as call_trace_address,\n        transaction_hash as call_tx_hash,\n        to_address as contract_address,\n        dt,\n        opensea_wyvernexchangev1_cancelledorfinalized_calldecodeudf(unhex_input, unhex_output, '{\"constant\": true, \"inputs\": [{\"name\": \"\", \"type\": \"bytes32\"}], \"name\": \"cancelledOrFinalized\", \"outputs\": [{\"name\": \"\", \"type\": \"bool\"}], \"payable\": false, \"stateMutability\": \"view\", \"type\": \"function\"}', 'cancelledOrFinalized') as data\n    from ethereum_stg_ethereum.stg_ethereum__traces\n    where to_address = lower(\"0x7Be8076f4EA4A4AD08075C2508e481d6C946D12b\")\n    and address_hash = abs(hash(lower(\"0x7Be8076f4EA4A4AD08075C2508e481d6C946D12b\"))) % 10\n    and selector = \"0x30783830\"\n    and selector_hash = abs(hash(\"0x30783830\")) % 10\n\n    \n),\n\nfinal as (\n    select\n        call_success,\n        call_block_number,\n        call_block_time,\n        call_trace_address,\n        call_tx_hash,\n        contract_address,\n        dt,\n        data.input.*,\n        data.output.*\n    from base\n)\n\nselect /* REPARTITION(dt) */ *\nfrom final", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "ethereum_opensea.WyvernExchangeV1_call_cancelledOrFinalized"}, "model.ethereum_source.WyvernExchangeV2_call_atomicMatch_": {"raw_sql": "{{\n    config(\n        materialized='incremental',\n        incremental_strategy='insert_overwrite',\n        partition_by=['dt'],\n        file_format='parquet',\n        pre_hook={\n            'sql': 'create or replace function opensea_wyvernexchangev2_atomicmatch__calldecodeudf as \"io.iftech.sparkudf.hive.opensea_WyvernExchangeV2_atomicMatch__CallDecodeUDF\" using jar \"s3a://ifcrypto/blockchain-dbt/jars/opensea_udf.jar\";'\n        }\n    )\n}}\n\nwith base as (\n    select\n        status==1 as call_success,\n        block_number as call_block_number,\n        block_timestamp as call_block_time,\n        trace_address as call_trace_address,\n        transaction_hash as call_tx_hash,\n        to_address as contract_address,\n        dt,\n        opensea_wyvernexchangev2_atomicmatch__calldecodeudf(unhex_input, unhex_output, '{\"constant\": false, \"inputs\": [{\"name\": \"addrs\", \"type\": \"address[14]\"}, {\"name\": \"uints\", \"type\": \"uint256[18]\"}, {\"name\": \"feeMethodsSidesKindsHowToCalls\", \"type\": \"uint8[8]\"}, {\"name\": \"calldataBuy\", \"type\": \"bytes\"}, {\"name\": \"calldataSell\", \"type\": \"bytes\"}, {\"name\": \"replacementPatternBuy\", \"type\": \"bytes\"}, {\"name\": \"replacementPatternSell\", \"type\": \"bytes\"}, {\"name\": \"staticExtradataBuy\", \"type\": \"bytes\"}, {\"name\": \"staticExtradataSell\", \"type\": \"bytes\"}, {\"name\": \"vs\", \"type\": \"uint8[2]\"}, {\"name\": \"rssMetadata\", \"type\": \"bytes32[5]\"}], \"name\": \"atomicMatch_\", \"outputs\": [], \"payable\": true, \"stateMutability\": \"payable\", \"type\": \"function\"}', 'atomicMatch_') as data\n    from {{ ref('stg_ethereum__traces') }}\n    where to_address = lower(\"0x7f268357A8c2552623316e2562D90e642bB538E5\")\n    and address_hash = abs(hash(lower(\"0x7f268357A8c2552623316e2562D90e642bB538E5\"))) % 10\n    and selector = \"0x30786162\"\n    and selector_hash = abs(hash(\"0x30786162\")) % 10\n\n    {% if is_incremental() %}\n      and dt = var('dt')\n    {% endif %}\n),\n\nfinal as (\n    select\n        call_success,\n        call_block_number,\n        call_block_time,\n        call_trace_address,\n        call_tx_hash,\n        contract_address,\n        dt,\n        data.input.*,\n        data.output.*\n    from base\n)\n\nselect /* REPARTITION(dt) */ *\nfrom final", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.dbt.is_incremental"], "nodes": ["model.ethereum_source.stg_ethereum__traces"]}, "config": {"enabled": true, "alias": null, "schema": "opensea", "database": null, "tags": ["chain_ethereum", "level_parse", "proj_opensea"], "meta": {}, "materialized": "incremental", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "file_format": "parquet", "partition_by": ["dt"], "incremental_strategy": "insert_overwrite", "post-hook": [], "pre-hook": [{"sql": "create or replace function opensea_wyvernexchangev2_atomicmatch__calldecodeudf as \"io.iftech.sparkudf.hive.opensea_WyvernExchangeV2_atomicMatch__CallDecodeUDF\" using jar \"s3a://ifcrypto/blockchain-dbt/jars/opensea_udf.jar\";", "transaction": true, "index": null}]}, "database": null, "schema": "ethereum_opensea", "fqn": ["ethereum_source", "codegen", "opensea", "WyvernExchangeV2_call_atomicMatch_"], "unique_id": "model.ethereum_source.WyvernExchangeV2_call_atomicMatch_", "package_name": "ethereum_source", "root_path": "/Users/songv/Code/jike/web3/dbt_ethereum_source", "path": "codegen/opensea/WyvernExchangeV2_call_atomicMatch_.sql", "original_file_path": "models/codegen/opensea/WyvernExchangeV2_call_atomicMatch_.sql", "name": "WyvernExchangeV2_call_atomicMatch_", "alias": "WyvernExchangeV2_call_atomicMatch_", "checksum": {"name": "sha256", "checksum": "b7e3abdfce72769c66d78bf189749ca6023d8d30a37c3c4b43b4bb107a8f696b"}, "tags": ["chain_ethereum", "level_parse", "proj_opensea"], "refs": [["stg_ethereum__traces"]], "sources": [], "description": "", "columns": {"addrs": {"name": "addrs", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "uints": {"name": "uints", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "feeMethodsSidesKindsHowToCalls": {"name": "feeMethodsSidesKindsHowToCalls", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "calldataBuy": {"name": "calldataBuy", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "calldataSell": {"name": "calldataSell", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "replacementPatternBuy": {"name": "replacementPatternBuy", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "replacementPatternSell": {"name": "replacementPatternSell", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "staticExtradataBuy": {"name": "staticExtradataBuy", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "staticExtradataSell": {"name": "staticExtradataSell", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "vs": {"name": "vs", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "rssMetadata": {"name": "rssMetadata", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "call_success": {"name": "call_success", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "call_block_number": {"name": "call_block_number", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "call_block_time": {"name": "call_block_time", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "call_trace_address": {"name": "call_trace_address", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "call_tx_hash": {"name": "call_tx_hash", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "contract_address": {"name": "contract_address", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "dt": {"name": "dt", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "ethereum_source://models/codegen/opensea/schema.yml", "compiled_path": "target/compiled/ethereum_source/models/codegen/opensea/WyvernExchangeV2_call_atomicMatch_.sql", "build_path": null, "deferred": false, "unrendered_config": {"schema": "opensea", "tags": ["chain_ethereum", "level_parse", "proj_opensea"], "materialized": "incremental", "incremental_strategy": "insert_overwrite", "partition_by": ["dt"], "file_format": "parquet", "pre-hook": [{"sql": "create or replace function opensea_wyvernexchangev2_atomicmatch__calldecodeudf as \"io.iftech.sparkudf.hive.opensea_WyvernExchangeV2_atomicMatch__CallDecodeUDF\" using jar \"s3a://ifcrypto/blockchain-dbt/jars/opensea_udf.jar\";"}]}, "created_at": 1650535972.0782669, "compiled_sql": "\n\nwith base as (\n    select\n        status==1 as call_success,\n        block_number as call_block_number,\n        block_timestamp as call_block_time,\n        trace_address as call_trace_address,\n        transaction_hash as call_tx_hash,\n        to_address as contract_address,\n        dt,\n        opensea_wyvernexchangev2_atomicmatch__calldecodeudf(unhex_input, unhex_output, '{\"constant\": false, \"inputs\": [{\"name\": \"addrs\", \"type\": \"address[14]\"}, {\"name\": \"uints\", \"type\": \"uint256[18]\"}, {\"name\": \"feeMethodsSidesKindsHowToCalls\", \"type\": \"uint8[8]\"}, {\"name\": \"calldataBuy\", \"type\": \"bytes\"}, {\"name\": \"calldataSell\", \"type\": \"bytes\"}, {\"name\": \"replacementPatternBuy\", \"type\": \"bytes\"}, {\"name\": \"replacementPatternSell\", \"type\": \"bytes\"}, {\"name\": \"staticExtradataBuy\", \"type\": \"bytes\"}, {\"name\": \"staticExtradataSell\", \"type\": \"bytes\"}, {\"name\": \"vs\", \"type\": \"uint8[2]\"}, {\"name\": \"rssMetadata\", \"type\": \"bytes32[5]\"}], \"name\": \"atomicMatch_\", \"outputs\": [], \"payable\": true, \"stateMutability\": \"payable\", \"type\": \"function\"}', 'atomicMatch_') as data\n    from ethereum_stg_ethereum.stg_ethereum__traces\n    where to_address = lower(\"0x7f268357A8c2552623316e2562D90e642bB538E5\")\n    and address_hash = abs(hash(lower(\"0x7f268357A8c2552623316e2562D90e642bB538E5\"))) % 10\n    and selector = \"0x30786162\"\n    and selector_hash = abs(hash(\"0x30786162\")) % 10\n\n    \n),\n\nfinal as (\n    select\n        call_success,\n        call_block_number,\n        call_block_time,\n        call_trace_address,\n        call_tx_hash,\n        contract_address,\n        dt,\n        data.input.*,\n        data.output.*\n    from base\n)\n\nselect /* REPARTITION(dt) */ *\nfrom final", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "ethereum_opensea.WyvernExchangeV2_call_atomicMatch_"}, "model.ethereum_source.WyvernExchangeV2_evt_OrderApprovedPartTwo": {"raw_sql": "{{\n    config(\n        materialized='incremental',\n        incremental_strategy='insert_overwrite',\n        partition_by=['dt'],\n        file_format='parquet',\n        pre_hook={\n            'sql': 'create or replace function opensea_wyvernexchangev2_orderapprovedparttwo_eventdecodeudf as \"io.iftech.sparkudf.hive.opensea_WyvernExchangeV2_OrderApprovedPartTwo_EventDecodeUDF\" using jar \"s3a://ifcrypto/blockchain-dbt/jars/opensea_udf.jar\";'\n        }\n    )\n}}\n\nwith base as (\n    select\n        block_number as evt_block_number,\n        block_timestamp as evt_block_time,\n        log_index as evt_index,\n        transaction_hash as evt_tx_hash,\n        address as contract_address,\n        dt,\n        opensea_wyvernexchangev2_orderapprovedparttwo_eventdecodeudf(unhex_data, topics_arr, '{\"anonymous\": false, \"inputs\": [{\"indexed\": true, \"name\": \"hash\", \"type\": \"bytes32\"}, {\"indexed\": false, \"name\": \"howToCall\", \"type\": \"uint8\"}, {\"indexed\": false, \"name\": \"calldata\", \"type\": \"bytes\"}, {\"indexed\": false, \"name\": \"replacementPattern\", \"type\": \"bytes\"}, {\"indexed\": false, \"name\": \"staticTarget\", \"type\": \"address\"}, {\"indexed\": false, \"name\": \"staticExtradata\", \"type\": \"bytes\"}, {\"indexed\": false, \"name\": \"paymentToken\", \"type\": \"address\"}, {\"indexed\": false, \"name\": \"basePrice\", \"type\": \"uint256\"}, {\"indexed\": false, \"name\": \"extra\", \"type\": \"uint256\"}, {\"indexed\": false, \"name\": \"listingTime\", \"type\": \"uint256\"}, {\"indexed\": false, \"name\": \"expirationTime\", \"type\": \"uint256\"}, {\"indexed\": false, \"name\": \"salt\", \"type\": \"uint256\"}, {\"indexed\": false, \"name\": \"orderbookInclusionDesired\", \"type\": \"bool\"}], \"name\": \"OrderApprovedPartTwo\", \"type\": \"event\"}', 'OrderApprovedPartTwo') as data\n    from {{ ref('stg_ethereum__logs') }}\n    where address = lower(\"0x7f268357A8c2552623316e2562D90e642bB538E5\")\n    and address_hash = abs(hash(lower(\"0x7f268357A8c2552623316e2562D90e642bB538E5\"))) % 10\n    and selector = \"0xe55393c778364e440d958b39ac1debd99dcfae3775a8a04d1e79124adf6a2d08\"\n    and selector_hash = abs(hash(\"0xe55393c778364e440d958b39ac1debd99dcfae3775a8a04d1e79124adf6a2d08\")) % 10\n\n    {% if is_incremental() %}\n      and dt = var('dt')\n    {% endif %}\n),\n\nfinal as (\n    select\n        evt_block_number,\n        evt_block_time,\n        evt_index,\n        evt_tx_hash,\n        contract_address,\n        dt,\n        data.input.*\n    from base\n)\n\nselect /* REPARTITION(dt) */ *\nfrom final", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.dbt.is_incremental"], "nodes": ["model.ethereum_source.stg_ethereum__logs"]}, "config": {"enabled": true, "alias": null, "schema": "opensea", "database": null, "tags": ["chain_ethereum", "level_parse", "proj_opensea"], "meta": {}, "materialized": "incremental", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "file_format": "parquet", "partition_by": ["dt"], "incremental_strategy": "insert_overwrite", "post-hook": [], "pre-hook": [{"sql": "create or replace function opensea_wyvernexchangev2_orderapprovedparttwo_eventdecodeudf as \"io.iftech.sparkudf.hive.opensea_WyvernExchangeV2_OrderApprovedPartTwo_EventDecodeUDF\" using jar \"s3a://ifcrypto/blockchain-dbt/jars/opensea_udf.jar\";", "transaction": true, "index": null}]}, "database": null, "schema": "ethereum_opensea", "fqn": ["ethereum_source", "codegen", "opensea", "WyvernExchangeV2_evt_OrderApprovedPartTwo"], "unique_id": "model.ethereum_source.WyvernExchangeV2_evt_OrderApprovedPartTwo", "package_name": "ethereum_source", "root_path": "/Users/songv/Code/jike/web3/dbt_ethereum_source", "path": "codegen/opensea/WyvernExchangeV2_evt_OrderApprovedPartTwo.sql", "original_file_path": "models/codegen/opensea/WyvernExchangeV2_evt_OrderApprovedPartTwo.sql", "name": "WyvernExchangeV2_evt_OrderApprovedPartTwo", "alias": "WyvernExchangeV2_evt_OrderApprovedPartTwo", "checksum": {"name": "sha256", "checksum": "dcf21b0962ffbddbe0f9c340512bddb23bc4603cd6cbc0799d913bbc5b5e7b0a"}, "tags": ["chain_ethereum", "level_parse", "proj_opensea"], "refs": [["stg_ethereum__logs"]], "sources": [], "description": "", "columns": {"hash": {"name": "hash", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "howToCall": {"name": "howToCall", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "calldata": {"name": "calldata", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "replacementPattern": {"name": "replacementPattern", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "staticTarget": {"name": "staticTarget", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "staticExtradata": {"name": "staticExtradata", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "paymentToken": {"name": "paymentToken", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "basePrice": {"name": "basePrice", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "extra": {"name": "extra", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "listingTime": {"name": "listingTime", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "expirationTime": {"name": "expirationTime", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "salt": {"name": "salt", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "orderbookInclusionDesired": {"name": "orderbookInclusionDesired", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "evt_block_number": {"name": "evt_block_number", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "evt_block_time": {"name": "evt_block_time", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "evt_index": {"name": "evt_index", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "evt_tx_hash": {"name": "evt_tx_hash", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "contract_address": {"name": "contract_address", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "dt": {"name": "dt", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "ethereum_source://models/codegen/opensea/schema.yml", "compiled_path": "target/compiled/ethereum_source/models/codegen/opensea/WyvernExchangeV2_evt_OrderApprovedPartTwo.sql", "build_path": null, "deferred": false, "unrendered_config": {"schema": "opensea", "tags": ["chain_ethereum", "level_parse", "proj_opensea"], "materialized": "incremental", "incremental_strategy": "insert_overwrite", "partition_by": ["dt"], "file_format": "parquet", "pre-hook": [{"sql": "create or replace function opensea_wyvernexchangev2_orderapprovedparttwo_eventdecodeudf as \"io.iftech.sparkudf.hive.opensea_WyvernExchangeV2_OrderApprovedPartTwo_EventDecodeUDF\" using jar \"s3a://ifcrypto/blockchain-dbt/jars/opensea_udf.jar\";"}]}, "created_at": 1650535972.0060742, "compiled_sql": "\n\nwith base as (\n    select\n        block_number as evt_block_number,\n        block_timestamp as evt_block_time,\n        log_index as evt_index,\n        transaction_hash as evt_tx_hash,\n        address as contract_address,\n        dt,\n        opensea_wyvernexchangev2_orderapprovedparttwo_eventdecodeudf(unhex_data, topics_arr, '{\"anonymous\": false, \"inputs\": [{\"indexed\": true, \"name\": \"hash\", \"type\": \"bytes32\"}, {\"indexed\": false, \"name\": \"howToCall\", \"type\": \"uint8\"}, {\"indexed\": false, \"name\": \"calldata\", \"type\": \"bytes\"}, {\"indexed\": false, \"name\": \"replacementPattern\", \"type\": \"bytes\"}, {\"indexed\": false, \"name\": \"staticTarget\", \"type\": \"address\"}, {\"indexed\": false, \"name\": \"staticExtradata\", \"type\": \"bytes\"}, {\"indexed\": false, \"name\": \"paymentToken\", \"type\": \"address\"}, {\"indexed\": false, \"name\": \"basePrice\", \"type\": \"uint256\"}, {\"indexed\": false, \"name\": \"extra\", \"type\": \"uint256\"}, {\"indexed\": false, \"name\": \"listingTime\", \"type\": \"uint256\"}, {\"indexed\": false, \"name\": \"expirationTime\", \"type\": \"uint256\"}, {\"indexed\": false, \"name\": \"salt\", \"type\": \"uint256\"}, {\"indexed\": false, \"name\": \"orderbookInclusionDesired\", \"type\": \"bool\"}], \"name\": \"OrderApprovedPartTwo\", \"type\": \"event\"}', 'OrderApprovedPartTwo') as data\n    from ethereum_stg_ethereum.stg_ethereum__logs\n    where address = lower(\"0x7f268357A8c2552623316e2562D90e642bB538E5\")\n    and address_hash = abs(hash(lower(\"0x7f268357A8c2552623316e2562D90e642bB538E5\"))) % 10\n    and selector = \"0xe55393c778364e440d958b39ac1debd99dcfae3775a8a04d1e79124adf6a2d08\"\n    and selector_hash = abs(hash(\"0xe55393c778364e440d958b39ac1debd99dcfae3775a8a04d1e79124adf6a2d08\")) % 10\n\n    \n),\n\nfinal as (\n    select\n        evt_block_number,\n        evt_block_time,\n        evt_index,\n        evt_tx_hash,\n        contract_address,\n        dt,\n        data.input.*\n    from base\n)\n\nselect /* REPARTITION(dt) */ *\nfrom final", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "ethereum_opensea.WyvernExchangeV2_evt_OrderApprovedPartTwo"}, "model.ethereum_source.WyvernExchangeV2_call_INVERSE_BASIS_POINT": {"raw_sql": "{{\n    config(\n        materialized='incremental',\n        incremental_strategy='insert_overwrite',\n        partition_by=['dt'],\n        file_format='parquet',\n        pre_hook={\n            'sql': 'create or replace function opensea_wyvernexchangev2_inverse_basis_point_calldecodeudf as \"io.iftech.sparkudf.hive.opensea_WyvernExchangeV2_INVERSE_BASIS_POINT_CallDecodeUDF\" using jar \"s3a://ifcrypto/blockchain-dbt/jars/opensea_udf.jar\";'\n        }\n    )\n}}\n\nwith base as (\n    select\n        status==1 as call_success,\n        block_number as call_block_number,\n        block_timestamp as call_block_time,\n        trace_address as call_trace_address,\n        transaction_hash as call_tx_hash,\n        to_address as contract_address,\n        dt,\n        opensea_wyvernexchangev2_inverse_basis_point_calldecodeudf(unhex_input, unhex_output, '{\"constant\": true, \"inputs\": [], \"name\": \"INVERSE_BASIS_POINT\", \"outputs\": [{\"name\": \"\", \"type\": \"uint256\"}], \"payable\": false, \"stateMutability\": \"view\", \"type\": \"function\"}', 'INVERSE_BASIS_POINT') as data\n    from {{ ref('stg_ethereum__traces') }}\n    where to_address = lower(\"0x7f268357A8c2552623316e2562D90e642bB538E5\")\n    and address_hash = abs(hash(lower(\"0x7f268357A8c2552623316e2562D90e642bB538E5\"))) % 10\n    and selector = \"0x30786361\"\n    and selector_hash = abs(hash(\"0x30786361\")) % 10\n\n    {% if is_incremental() %}\n      and dt = var('dt')\n    {% endif %}\n),\n\nfinal as (\n    select\n        call_success,\n        call_block_number,\n        call_block_time,\n        call_trace_address,\n        call_tx_hash,\n        contract_address,\n        dt,\n        data.input.*,\n        data.output.*\n    from base\n)\n\nselect /* REPARTITION(dt) */ *\nfrom final", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.dbt.is_incremental"], "nodes": ["model.ethereum_source.stg_ethereum__traces"]}, "config": {"enabled": true, "alias": null, "schema": "opensea", "database": null, "tags": ["chain_ethereum", "level_parse", "proj_opensea"], "meta": {}, "materialized": "incremental", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "file_format": "parquet", "partition_by": ["dt"], "incremental_strategy": "insert_overwrite", "post-hook": [], "pre-hook": [{"sql": "create or replace function opensea_wyvernexchangev2_inverse_basis_point_calldecodeudf as \"io.iftech.sparkudf.hive.opensea_WyvernExchangeV2_INVERSE_BASIS_POINT_CallDecodeUDF\" using jar \"s3a://ifcrypto/blockchain-dbt/jars/opensea_udf.jar\";", "transaction": true, "index": null}]}, "database": null, "schema": "ethereum_opensea", "fqn": ["ethereum_source", "codegen", "opensea", "WyvernExchangeV2_call_INVERSE_BASIS_POINT"], "unique_id": "model.ethereum_source.WyvernExchangeV2_call_INVERSE_BASIS_POINT", "package_name": "ethereum_source", "root_path": "/Users/songv/Code/jike/web3/dbt_ethereum_source", "path": "codegen/opensea/WyvernExchangeV2_call_INVERSE_BASIS_POINT.sql", "original_file_path": "models/codegen/opensea/WyvernExchangeV2_call_INVERSE_BASIS_POINT.sql", "name": "WyvernExchangeV2_call_INVERSE_BASIS_POINT", "alias": "WyvernExchangeV2_call_INVERSE_BASIS_POINT", "checksum": {"name": "sha256", "checksum": "a61a3be8589d0cf234582d9302d493f6ed7a7f9d4c56433eb24b9641f71a5885"}, "tags": ["chain_ethereum", "level_parse", "proj_opensea"], "refs": [["stg_ethereum__traces"]], "sources": [], "description": "", "columns": {"output_0": {"name": "output_0", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "call_success": {"name": "call_success", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "call_block_number": {"name": "call_block_number", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "call_block_time": {"name": "call_block_time", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "call_trace_address": {"name": "call_trace_address", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "call_tx_hash": {"name": "call_tx_hash", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "contract_address": {"name": "contract_address", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "dt": {"name": "dt", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "ethereum_source://models/codegen/opensea/schema.yml", "compiled_path": "target/compiled/ethereum_source/models/codegen/opensea/WyvernExchangeV2_call_INVERSE_BASIS_POINT.sql", "build_path": null, "deferred": false, "unrendered_config": {"schema": "opensea", "tags": ["chain_ethereum", "level_parse", "proj_opensea"], "materialized": "incremental", "incremental_strategy": "insert_overwrite", "partition_by": ["dt"], "file_format": "parquet", "pre-hook": [{"sql": "create or replace function opensea_wyvernexchangev2_inverse_basis_point_calldecodeudf as \"io.iftech.sparkudf.hive.opensea_WyvernExchangeV2_INVERSE_BASIS_POINT_CallDecodeUDF\" using jar \"s3a://ifcrypto/blockchain-dbt/jars/opensea_udf.jar\";"}]}, "created_at": 1650535972.0838861, "compiled_sql": "\n\nwith base as (\n    select\n        status==1 as call_success,\n        block_number as call_block_number,\n        block_timestamp as call_block_time,\n        trace_address as call_trace_address,\n        transaction_hash as call_tx_hash,\n        to_address as contract_address,\n        dt,\n        opensea_wyvernexchangev2_inverse_basis_point_calldecodeudf(unhex_input, unhex_output, '{\"constant\": true, \"inputs\": [], \"name\": \"INVERSE_BASIS_POINT\", \"outputs\": [{\"name\": \"\", \"type\": \"uint256\"}], \"payable\": false, \"stateMutability\": \"view\", \"type\": \"function\"}', 'INVERSE_BASIS_POINT') as data\n    from ethereum_stg_ethereum.stg_ethereum__traces\n    where to_address = lower(\"0x7f268357A8c2552623316e2562D90e642bB538E5\")\n    and address_hash = abs(hash(lower(\"0x7f268357A8c2552623316e2562D90e642bB538E5\"))) % 10\n    and selector = \"0x30786361\"\n    and selector_hash = abs(hash(\"0x30786361\")) % 10\n\n    \n),\n\nfinal as (\n    select\n        call_success,\n        call_block_number,\n        call_block_time,\n        call_trace_address,\n        call_tx_hash,\n        contract_address,\n        dt,\n        data.input.*,\n        data.output.*\n    from base\n)\n\nselect /* REPARTITION(dt) */ *\nfrom final", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "ethereum_opensea.WyvernExchangeV2_call_INVERSE_BASIS_POINT"}, "model.ethereum_source.WyvernExchangeV2_call_validateOrder_": {"raw_sql": "{{\n    config(\n        materialized='incremental',\n        incremental_strategy='insert_overwrite',\n        partition_by=['dt'],\n        file_format='parquet',\n        pre_hook={\n            'sql': 'create or replace function opensea_wyvernexchangev2_validateorder__calldecodeudf as \"io.iftech.sparkudf.hive.opensea_WyvernExchangeV2_validateOrder__CallDecodeUDF\" using jar \"s3a://ifcrypto/blockchain-dbt/jars/opensea_udf.jar\";'\n        }\n    )\n}}\n\nwith base as (\n    select\n        status==1 as call_success,\n        block_number as call_block_number,\n        block_timestamp as call_block_time,\n        trace_address as call_trace_address,\n        transaction_hash as call_tx_hash,\n        to_address as contract_address,\n        dt,\n        opensea_wyvernexchangev2_validateorder__calldecodeudf(unhex_input, unhex_output, '{\"constant\": true, \"inputs\": [{\"name\": \"addrs\", \"type\": \"address[7]\"}, {\"name\": \"uints\", \"type\": \"uint256[9]\"}, {\"name\": \"feeMethod\", \"type\": \"uint8\"}, {\"name\": \"side\", \"type\": \"uint8\"}, {\"name\": \"saleKind\", \"type\": \"uint8\"}, {\"name\": \"howToCall\", \"type\": \"uint8\"}, {\"name\": \"calldata\", \"type\": \"bytes\"}, {\"name\": \"replacementPattern\", \"type\": \"bytes\"}, {\"name\": \"staticExtradata\", \"type\": \"bytes\"}, {\"name\": \"v\", \"type\": \"uint8\"}, {\"name\": \"r\", \"type\": \"bytes32\"}, {\"name\": \"s\", \"type\": \"bytes32\"}], \"name\": \"validateOrder_\", \"outputs\": [{\"name\": \"\", \"type\": \"bool\"}], \"payable\": false, \"stateMutability\": \"view\", \"type\": \"function\"}', 'validateOrder_') as data\n    from {{ ref('stg_ethereum__traces') }}\n    where to_address = lower(\"0x7f268357A8c2552623316e2562D90e642bB538E5\")\n    and address_hash = abs(hash(lower(\"0x7f268357A8c2552623316e2562D90e642bB538E5\"))) % 10\n    and selector = \"0x30783630\"\n    and selector_hash = abs(hash(\"0x30783630\")) % 10\n\n    {% if is_incremental() %}\n      and dt = var('dt')\n    {% endif %}\n),\n\nfinal as (\n    select\n        call_success,\n        call_block_number,\n        call_block_time,\n        call_trace_address,\n        call_tx_hash,\n        contract_address,\n        dt,\n        data.input.*,\n        data.output.*\n    from base\n)\n\nselect /* REPARTITION(dt) */ *\nfrom final", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.dbt.is_incremental"], "nodes": ["model.ethereum_source.stg_ethereum__traces"]}, "config": {"enabled": true, "alias": null, "schema": "opensea", "database": null, "tags": ["chain_ethereum", "level_parse", "proj_opensea"], "meta": {}, "materialized": "incremental", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "file_format": "parquet", "partition_by": ["dt"], "incremental_strategy": "insert_overwrite", "post-hook": [], "pre-hook": [{"sql": "create or replace function opensea_wyvernexchangev2_validateorder__calldecodeudf as \"io.iftech.sparkudf.hive.opensea_WyvernExchangeV2_validateOrder__CallDecodeUDF\" using jar \"s3a://ifcrypto/blockchain-dbt/jars/opensea_udf.jar\";", "transaction": true, "index": null}]}, "database": null, "schema": "ethereum_opensea", "fqn": ["ethereum_source", "codegen", "opensea", "WyvernExchangeV2_call_validateOrder_"], "unique_id": "model.ethereum_source.WyvernExchangeV2_call_validateOrder_", "package_name": "ethereum_source", "root_path": "/Users/songv/Code/jike/web3/dbt_ethereum_source", "path": "codegen/opensea/WyvernExchangeV2_call_validateOrder_.sql", "original_file_path": "models/codegen/opensea/WyvernExchangeV2_call_validateOrder_.sql", "name": "WyvernExchangeV2_call_validateOrder_", "alias": "WyvernExchangeV2_call_validateOrder_", "checksum": {"name": "sha256", "checksum": "172c727ffc7815425b35bb631e195e0a24aefd9fceb43a726dba1e6494585989"}, "tags": ["chain_ethereum", "level_parse", "proj_opensea"], "refs": [["stg_ethereum__traces"]], "sources": [], "description": "", "columns": {"addrs": {"name": "addrs", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "uints": {"name": "uints", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "feeMethod": {"name": "feeMethod", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "side": {"name": "side", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "saleKind": {"name": "saleKind", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "howToCall": {"name": "howToCall", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "calldata": {"name": "calldata", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "replacementPattern": {"name": "replacementPattern", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "staticExtradata": {"name": "staticExtradata", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "v": {"name": "v", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "r": {"name": "r", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "s": {"name": "s", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "output_0": {"name": "output_0", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "call_success": {"name": "call_success", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "call_block_number": {"name": "call_block_number", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "call_block_time": {"name": "call_block_time", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "call_trace_address": {"name": "call_trace_address", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "call_tx_hash": {"name": "call_tx_hash", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "contract_address": {"name": "contract_address", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "dt": {"name": "dt", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "ethereum_source://models/codegen/opensea/schema.yml", "compiled_path": "target/compiled/ethereum_source/models/codegen/opensea/WyvernExchangeV2_call_validateOrder_.sql", "build_path": null, "deferred": false, "unrendered_config": {"schema": "opensea", "tags": ["chain_ethereum", "level_parse", "proj_opensea"], "materialized": "incremental", "incremental_strategy": "insert_overwrite", "partition_by": ["dt"], "file_format": "parquet", "pre-hook": [{"sql": "create or replace function opensea_wyvernexchangev2_validateorder__calldecodeudf as \"io.iftech.sparkudf.hive.opensea_WyvernExchangeV2_validateOrder__CallDecodeUDF\" using jar \"s3a://ifcrypto/blockchain-dbt/jars/opensea_udf.jar\";"}]}, "created_at": 1650535972.0417101, "compiled_sql": "\n\nwith base as (\n    select\n        status==1 as call_success,\n        block_number as call_block_number,\n        block_timestamp as call_block_time,\n        trace_address as call_trace_address,\n        transaction_hash as call_tx_hash,\n        to_address as contract_address,\n        dt,\n        opensea_wyvernexchangev2_validateorder__calldecodeudf(unhex_input, unhex_output, '{\"constant\": true, \"inputs\": [{\"name\": \"addrs\", \"type\": \"address[7]\"}, {\"name\": \"uints\", \"type\": \"uint256[9]\"}, {\"name\": \"feeMethod\", \"type\": \"uint8\"}, {\"name\": \"side\", \"type\": \"uint8\"}, {\"name\": \"saleKind\", \"type\": \"uint8\"}, {\"name\": \"howToCall\", \"type\": \"uint8\"}, {\"name\": \"calldata\", \"type\": \"bytes\"}, {\"name\": \"replacementPattern\", \"type\": \"bytes\"}, {\"name\": \"staticExtradata\", \"type\": \"bytes\"}, {\"name\": \"v\", \"type\": \"uint8\"}, {\"name\": \"r\", \"type\": \"bytes32\"}, {\"name\": \"s\", \"type\": \"bytes32\"}], \"name\": \"validateOrder_\", \"outputs\": [{\"name\": \"\", \"type\": \"bool\"}], \"payable\": false, \"stateMutability\": \"view\", \"type\": \"function\"}', 'validateOrder_') as data\n    from ethereum_stg_ethereum.stg_ethereum__traces\n    where to_address = lower(\"0x7f268357A8c2552623316e2562D90e642bB538E5\")\n    and address_hash = abs(hash(lower(\"0x7f268357A8c2552623316e2562D90e642bB538E5\"))) % 10\n    and selector = \"0x30783630\"\n    and selector_hash = abs(hash(\"0x30783630\")) % 10\n\n    \n),\n\nfinal as (\n    select\n        call_success,\n        call_block_number,\n        call_block_time,\n        call_trace_address,\n        call_tx_hash,\n        contract_address,\n        dt,\n        data.input.*,\n        data.output.*\n    from base\n)\n\nselect /* REPARTITION(dt) */ *\nfrom final", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "ethereum_opensea.WyvernExchangeV2_call_validateOrder_"}, "model.ethereum_source.WyvernExchangeV1_call_calculateCurrentPrice_": {"raw_sql": "{{\n    config(\n        materialized='incremental',\n        incremental_strategy='insert_overwrite',\n        partition_by=['dt'],\n        file_format='parquet',\n        pre_hook={\n            'sql': 'create or replace function opensea_wyvernexchangev1_calculatecurrentprice__calldecodeudf as \"io.iftech.sparkudf.hive.opensea_WyvernExchangeV1_calculateCurrentPrice__CallDecodeUDF\" using jar \"s3a://ifcrypto/blockchain-dbt/jars/opensea_udf.jar\";'\n        }\n    )\n}}\n\nwith base as (\n    select\n        status==1 as call_success,\n        block_number as call_block_number,\n        block_timestamp as call_block_time,\n        trace_address as call_trace_address,\n        transaction_hash as call_tx_hash,\n        to_address as contract_address,\n        dt,\n        opensea_wyvernexchangev1_calculatecurrentprice__calldecodeudf(unhex_input, unhex_output, '{\"constant\": true, \"inputs\": [{\"name\": \"addrs\", \"type\": \"address[7]\"}, {\"name\": \"uints\", \"type\": \"uint256[9]\"}, {\"name\": \"feeMethod\", \"type\": \"uint8\"}, {\"name\": \"side\", \"type\": \"uint8\"}, {\"name\": \"saleKind\", \"type\": \"uint8\"}, {\"name\": \"howToCall\", \"type\": \"uint8\"}, {\"name\": \"calldata\", \"type\": \"bytes\"}, {\"name\": \"replacementPattern\", \"type\": \"bytes\"}, {\"name\": \"staticExtradata\", \"type\": \"bytes\"}], \"name\": \"calculateCurrentPrice_\", \"outputs\": [{\"name\": \"\", \"type\": \"uint256\"}], \"payable\": false, \"stateMutability\": \"view\", \"type\": \"function\"}', 'calculateCurrentPrice_') as data\n    from {{ ref('stg_ethereum__traces') }}\n    where to_address = lower(\"0x7Be8076f4EA4A4AD08075C2508e481d6C946D12b\")\n    and address_hash = abs(hash(lower(\"0x7Be8076f4EA4A4AD08075C2508e481d6C946D12b\"))) % 10\n    and selector = \"0x30783366\"\n    and selector_hash = abs(hash(\"0x30783366\")) % 10\n\n    {% if is_incremental() %}\n      and dt = var('dt')\n    {% endif %}\n),\n\nfinal as (\n    select\n        call_success,\n        call_block_number,\n        call_block_time,\n        call_trace_address,\n        call_tx_hash,\n        contract_address,\n        dt,\n        data.input.*,\n        data.output.*\n    from base\n)\n\nselect /* REPARTITION(dt) */ *\nfrom final", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.dbt.is_incremental"], "nodes": ["model.ethereum_source.stg_ethereum__traces"]}, "config": {"enabled": true, "alias": null, "schema": "opensea", "database": null, "tags": ["chain_ethereum", "level_parse", "proj_opensea"], "meta": {}, "materialized": "incremental", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "file_format": "parquet", "partition_by": ["dt"], "incremental_strategy": "insert_overwrite", "post-hook": [], "pre-hook": [{"sql": "create or replace function opensea_wyvernexchangev1_calculatecurrentprice__calldecodeudf as \"io.iftech.sparkudf.hive.opensea_WyvernExchangeV1_calculateCurrentPrice__CallDecodeUDF\" using jar \"s3a://ifcrypto/blockchain-dbt/jars/opensea_udf.jar\";", "transaction": true, "index": null}]}, "database": null, "schema": "ethereum_opensea", "fqn": ["ethereum_source", "codegen", "opensea", "WyvernExchangeV1_call_calculateCurrentPrice_"], "unique_id": "model.ethereum_source.WyvernExchangeV1_call_calculateCurrentPrice_", "package_name": "ethereum_source", "root_path": "/Users/songv/Code/jike/web3/dbt_ethereum_source", "path": "codegen/opensea/WyvernExchangeV1_call_calculateCurrentPrice_.sql", "original_file_path": "models/codegen/opensea/WyvernExchangeV1_call_calculateCurrentPrice_.sql", "name": "WyvernExchangeV1_call_calculateCurrentPrice_", "alias": "WyvernExchangeV1_call_calculateCurrentPrice_", "checksum": {"name": "sha256", "checksum": "8fb78717e6f03a5b213600fbbc781203693b964903890c3379e90368a4deabc4"}, "tags": ["chain_ethereum", "level_parse", "proj_opensea"], "refs": [["stg_ethereum__traces"]], "sources": [], "description": "", "columns": {"addrs": {"name": "addrs", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "uints": {"name": "uints", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "feeMethod": {"name": "feeMethod", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "side": {"name": "side", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "saleKind": {"name": "saleKind", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "howToCall": {"name": "howToCall", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "calldata": {"name": "calldata", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "replacementPattern": {"name": "replacementPattern", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "staticExtradata": {"name": "staticExtradata", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "output_0": {"name": "output_0", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "call_success": {"name": "call_success", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "call_block_number": {"name": "call_block_number", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "call_block_time": {"name": "call_block_time", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "call_trace_address": {"name": "call_trace_address", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "call_tx_hash": {"name": "call_tx_hash", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "contract_address": {"name": "contract_address", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "dt": {"name": "dt", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "ethereum_source://models/codegen/opensea/schema.yml", "compiled_path": "target/compiled/ethereum_source/models/codegen/opensea/WyvernExchangeV1_call_calculateCurrentPrice_.sql", "build_path": null, "deferred": false, "unrendered_config": {"schema": "opensea", "tags": ["chain_ethereum", "level_parse", "proj_opensea"], "materialized": "incremental", "incremental_strategy": "insert_overwrite", "partition_by": ["dt"], "file_format": "parquet", "pre-hook": [{"sql": "create or replace function opensea_wyvernexchangev1_calculatecurrentprice__calldecodeudf as \"io.iftech.sparkudf.hive.opensea_WyvernExchangeV1_calculateCurrentPrice__CallDecodeUDF\" using jar \"s3a://ifcrypto/blockchain-dbt/jars/opensea_udf.jar\";"}]}, "created_at": 1650535971.9459, "compiled_sql": "\n\nwith base as (\n    select\n        status==1 as call_success,\n        block_number as call_block_number,\n        block_timestamp as call_block_time,\n        trace_address as call_trace_address,\n        transaction_hash as call_tx_hash,\n        to_address as contract_address,\n        dt,\n        opensea_wyvernexchangev1_calculatecurrentprice__calldecodeudf(unhex_input, unhex_output, '{\"constant\": true, \"inputs\": [{\"name\": \"addrs\", \"type\": \"address[7]\"}, {\"name\": \"uints\", \"type\": \"uint256[9]\"}, {\"name\": \"feeMethod\", \"type\": \"uint8\"}, {\"name\": \"side\", \"type\": \"uint8\"}, {\"name\": \"saleKind\", \"type\": \"uint8\"}, {\"name\": \"howToCall\", \"type\": \"uint8\"}, {\"name\": \"calldata\", \"type\": \"bytes\"}, {\"name\": \"replacementPattern\", \"type\": \"bytes\"}, {\"name\": \"staticExtradata\", \"type\": \"bytes\"}], \"name\": \"calculateCurrentPrice_\", \"outputs\": [{\"name\": \"\", \"type\": \"uint256\"}], \"payable\": false, \"stateMutability\": \"view\", \"type\": \"function\"}', 'calculateCurrentPrice_') as data\n    from ethereum_stg_ethereum.stg_ethereum__traces\n    where to_address = lower(\"0x7Be8076f4EA4A4AD08075C2508e481d6C946D12b\")\n    and address_hash = abs(hash(lower(\"0x7Be8076f4EA4A4AD08075C2508e481d6C946D12b\"))) % 10\n    and selector = \"0x30783366\"\n    and selector_hash = abs(hash(\"0x30783366\")) % 10\n\n    \n),\n\nfinal as (\n    select\n        call_success,\n        call_block_number,\n        call_block_time,\n        call_trace_address,\n        call_tx_hash,\n        contract_address,\n        dt,\n        data.input.*,\n        data.output.*\n    from base\n)\n\nselect /* REPARTITION(dt) */ *\nfrom final", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "ethereum_opensea.WyvernExchangeV1_call_calculateCurrentPrice_"}, "model.ethereum_source.WyvernExchangeV2_call_hashOrder_": {"raw_sql": "{{\n    config(\n        materialized='incremental',\n        incremental_strategy='insert_overwrite',\n        partition_by=['dt'],\n        file_format='parquet',\n        pre_hook={\n            'sql': 'create or replace function opensea_wyvernexchangev2_hashorder__calldecodeudf as \"io.iftech.sparkudf.hive.opensea_WyvernExchangeV2_hashOrder__CallDecodeUDF\" using jar \"s3a://ifcrypto/blockchain-dbt/jars/opensea_udf.jar\";'\n        }\n    )\n}}\n\nwith base as (\n    select\n        status==1 as call_success,\n        block_number as call_block_number,\n        block_timestamp as call_block_time,\n        trace_address as call_trace_address,\n        transaction_hash as call_tx_hash,\n        to_address as contract_address,\n        dt,\n        opensea_wyvernexchangev2_hashorder__calldecodeudf(unhex_input, unhex_output, '{\"constant\": true, \"inputs\": [{\"name\": \"addrs\", \"type\": \"address[7]\"}, {\"name\": \"uints\", \"type\": \"uint256[9]\"}, {\"name\": \"feeMethod\", \"type\": \"uint8\"}, {\"name\": \"side\", \"type\": \"uint8\"}, {\"name\": \"saleKind\", \"type\": \"uint8\"}, {\"name\": \"howToCall\", \"type\": \"uint8\"}, {\"name\": \"calldata\", \"type\": \"bytes\"}, {\"name\": \"replacementPattern\", \"type\": \"bytes\"}, {\"name\": \"staticExtradata\", \"type\": \"bytes\"}], \"name\": \"hashOrder_\", \"outputs\": [{\"name\": \"\", \"type\": \"bytes32\"}], \"payable\": false, \"stateMutability\": \"view\", \"type\": \"function\"}', 'hashOrder_') as data\n    from {{ ref('stg_ethereum__traces') }}\n    where to_address = lower(\"0x7f268357A8c2552623316e2562D90e642bB538E5\")\n    and address_hash = abs(hash(lower(\"0x7f268357A8c2552623316e2562D90e642bB538E5\"))) % 10\n    and selector = \"0x30783731\"\n    and selector_hash = abs(hash(\"0x30783731\")) % 10\n\n    {% if is_incremental() %}\n      and dt = var('dt')\n    {% endif %}\n),\n\nfinal as (\n    select\n        call_success,\n        call_block_number,\n        call_block_time,\n        call_trace_address,\n        call_tx_hash,\n        contract_address,\n        dt,\n        data.input.*,\n        data.output.*\n    from base\n)\n\nselect /* REPARTITION(dt) */ *\nfrom final", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.dbt.is_incremental"], "nodes": ["model.ethereum_source.stg_ethereum__traces"]}, "config": {"enabled": true, "alias": null, "schema": "opensea", "database": null, "tags": ["chain_ethereum", "level_parse", "proj_opensea"], "meta": {}, "materialized": "incremental", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "file_format": "parquet", "partition_by": ["dt"], "incremental_strategy": "insert_overwrite", "post-hook": [], "pre-hook": [{"sql": "create or replace function opensea_wyvernexchangev2_hashorder__calldecodeudf as \"io.iftech.sparkudf.hive.opensea_WyvernExchangeV2_hashOrder__CallDecodeUDF\" using jar \"s3a://ifcrypto/blockchain-dbt/jars/opensea_udf.jar\";", "transaction": true, "index": null}]}, "database": null, "schema": "ethereum_opensea", "fqn": ["ethereum_source", "codegen", "opensea", "WyvernExchangeV2_call_hashOrder_"], "unique_id": "model.ethereum_source.WyvernExchangeV2_call_hashOrder_", "package_name": "ethereum_source", "root_path": "/Users/songv/Code/jike/web3/dbt_ethereum_source", "path": "codegen/opensea/WyvernExchangeV2_call_hashOrder_.sql", "original_file_path": "models/codegen/opensea/WyvernExchangeV2_call_hashOrder_.sql", "name": "WyvernExchangeV2_call_hashOrder_", "alias": "WyvernExchangeV2_call_hashOrder_", "checksum": {"name": "sha256", "checksum": "ffaf85cee6567c5266c998fd911c4e6e34d9786714c45e8a1c6869cde9324e17"}, "tags": ["chain_ethereum", "level_parse", "proj_opensea"], "refs": [["stg_ethereum__traces"]], "sources": [], "description": "", "columns": {"addrs": {"name": "addrs", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "uints": {"name": "uints", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "feeMethod": {"name": "feeMethod", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "side": {"name": "side", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "saleKind": {"name": "saleKind", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "howToCall": {"name": "howToCall", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "calldata": {"name": "calldata", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "replacementPattern": {"name": "replacementPattern", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "staticExtradata": {"name": "staticExtradata", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "output_0": {"name": "output_0", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "call_success": {"name": "call_success", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "call_block_number": {"name": "call_block_number", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "call_block_time": {"name": "call_block_time", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "call_trace_address": {"name": "call_trace_address", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "call_tx_hash": {"name": "call_tx_hash", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "contract_address": {"name": "contract_address", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "dt": {"name": "dt", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "ethereum_source://models/codegen/opensea/schema.yml", "compiled_path": "target/compiled/ethereum_source/models/codegen/opensea/WyvernExchangeV2_call_hashOrder_.sql", "build_path": null, "deferred": false, "unrendered_config": {"schema": "opensea", "tags": ["chain_ethereum", "level_parse", "proj_opensea"], "materialized": "incremental", "incremental_strategy": "insert_overwrite", "partition_by": ["dt"], "file_format": "parquet", "pre-hook": [{"sql": "create or replace function opensea_wyvernexchangev2_hashorder__calldecodeudf as \"io.iftech.sparkudf.hive.opensea_WyvernExchangeV2_hashOrder__CallDecodeUDF\" using jar \"s3a://ifcrypto/blockchain-dbt/jars/opensea_udf.jar\";"}]}, "created_at": 1650535972.051681, "compiled_sql": "\n\nwith base as (\n    select\n        status==1 as call_success,\n        block_number as call_block_number,\n        block_timestamp as call_block_time,\n        trace_address as call_trace_address,\n        transaction_hash as call_tx_hash,\n        to_address as contract_address,\n        dt,\n        opensea_wyvernexchangev2_hashorder__calldecodeudf(unhex_input, unhex_output, '{\"constant\": true, \"inputs\": [{\"name\": \"addrs\", \"type\": \"address[7]\"}, {\"name\": \"uints\", \"type\": \"uint256[9]\"}, {\"name\": \"feeMethod\", \"type\": \"uint8\"}, {\"name\": \"side\", \"type\": \"uint8\"}, {\"name\": \"saleKind\", \"type\": \"uint8\"}, {\"name\": \"howToCall\", \"type\": \"uint8\"}, {\"name\": \"calldata\", \"type\": \"bytes\"}, {\"name\": \"replacementPattern\", \"type\": \"bytes\"}, {\"name\": \"staticExtradata\", \"type\": \"bytes\"}], \"name\": \"hashOrder_\", \"outputs\": [{\"name\": \"\", \"type\": \"bytes32\"}], \"payable\": false, \"stateMutability\": \"view\", \"type\": \"function\"}', 'hashOrder_') as data\n    from ethereum_stg_ethereum.stg_ethereum__traces\n    where to_address = lower(\"0x7f268357A8c2552623316e2562D90e642bB538E5\")\n    and address_hash = abs(hash(lower(\"0x7f268357A8c2552623316e2562D90e642bB538E5\"))) % 10\n    and selector = \"0x30783731\"\n    and selector_hash = abs(hash(\"0x30783731\")) % 10\n\n    \n),\n\nfinal as (\n    select\n        call_success,\n        call_block_number,\n        call_block_time,\n        call_trace_address,\n        call_tx_hash,\n        contract_address,\n        dt,\n        data.input.*,\n        data.output.*\n    from base\n)\n\nselect /* REPARTITION(dt) */ *\nfrom final", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "ethereum_opensea.WyvernExchangeV2_call_hashOrder_"}, "model.ethereum_source.OpenSeaENSResolver_call_renounceOwnership": {"raw_sql": "select /* REPARTITION(dt) */\n    status==1 as call_success,\n    block_number as call_block_number,\n    block_timestamp as call_block_time,\n    trace_address as call_trace_address,\n    transaction_hash as call_tx_hash,\n    to_address as contract_address,\n    dt\nfrom {{ ref('stg_ethereum__traces') }}\nwhere to_address = lower(\"0x9c4e9cce4780062942a7fe34fa2fa7316c872956\")\nand address_hash = abs(hash(lower(\"0x9c4e9cce4780062942a7fe34fa2fa7316c872956\"))) % 10\nand selector = \"0x30783731353031386136\"\nand selector_hash = abs(hash(\"0x30783731353031386136\")) % 10\n\n{% if is_incremental() %}\n  and dt = var('dt')\n{% endif %}", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.dbt.is_incremental"], "nodes": ["model.ethereum_source.stg_ethereum__traces"]}, "config": {"enabled": true, "alias": null, "schema": "opensea", "database": null, "tags": ["chain_ethereum", "level_parse", "proj_opensea"], "meta": {}, "materialized": "view", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "post-hook": [], "pre-hook": []}, "database": null, "schema": "ethereum_opensea", "fqn": ["ethereum_source", "codegen", "opensea", "OpenSeaENSResolver_call_renounceOwnership"], "unique_id": "model.ethereum_source.OpenSeaENSResolver_call_renounceOwnership", "package_name": "ethereum_source", "root_path": "/Users/songv/Code/jike/web3/dbt_ethereum_source", "path": "codegen/opensea/OpenSeaENSResolver_call_renounceOwnership.sql", "original_file_path": "models/codegen/opensea/OpenSeaENSResolver_call_renounceOwnership.sql", "name": "OpenSeaENSResolver_call_renounceOwnership", "alias": "OpenSeaENSResolver_call_renounceOwnership", "checksum": {"name": "sha256", "checksum": "4901be8f27504aa619ce878624b3fd737a13692d3c74711801d653ba20a777ac"}, "tags": ["chain_ethereum", "level_parse", "proj_opensea"], "refs": [["stg_ethereum__traces"]], "sources": [], "description": "", "columns": {"call_success": {"name": "call_success", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "call_block_number": {"name": "call_block_number", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "call_block_time": {"name": "call_block_time", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "call_trace_address": {"name": "call_trace_address", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "call_tx_hash": {"name": "call_tx_hash", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "contract_address": {"name": "contract_address", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "dt": {"name": "dt", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "ethereum_source://models/codegen/opensea/schema.yml", "compiled_path": "target/compiled/ethereum_source/models/codegen/opensea/OpenSeaENSResolver_call_renounceOwnership.sql", "build_path": null, "deferred": false, "unrendered_config": {"schema": "opensea", "tags": ["chain_ethereum", "level_parse", "proj_opensea"]}, "created_at": 1650535972.13999, "compiled_sql": "select /* REPARTITION(dt) */\n    status==1 as call_success,\n    block_number as call_block_number,\n    block_timestamp as call_block_time,\n    trace_address as call_trace_address,\n    transaction_hash as call_tx_hash,\n    to_address as contract_address,\n    dt\nfrom ethereum_stg_ethereum.stg_ethereum__traces\nwhere to_address = lower(\"0x9c4e9cce4780062942a7fe34fa2fa7316c872956\")\nand address_hash = abs(hash(lower(\"0x9c4e9cce4780062942a7fe34fa2fa7316c872956\"))) % 10\nand selector = \"0x30783731353031386136\"\nand selector_hash = abs(hash(\"0x30783731353031386136\")) % 10\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "ethereum_opensea.OpenSeaENSResolver_call_renounceOwnership"}, "model.ethereum_source.WyvernExchangeV1_call_changeMinimumTakerProtocolFee": {"raw_sql": "{{\n    config(\n        materialized='incremental',\n        incremental_strategy='insert_overwrite',\n        partition_by=['dt'],\n        file_format='parquet',\n        pre_hook={\n            'sql': 'create or replace function opensea_wyvernexchangev1_changeminimumtakerprotocolfee_calldecodeudf as \"io.iftech.sparkudf.hive.opensea_WyvernExchangeV1_changeMinimumTakerProtocolFee_CallDecodeUDF\" using jar \"s3a://ifcrypto/blockchain-dbt/jars/opensea_udf.jar\";'\n        }\n    )\n}}\n\nwith base as (\n    select\n        status==1 as call_success,\n        block_number as call_block_number,\n        block_timestamp as call_block_time,\n        trace_address as call_trace_address,\n        transaction_hash as call_tx_hash,\n        to_address as contract_address,\n        dt,\n        opensea_wyvernexchangev1_changeminimumtakerprotocolfee_calldecodeudf(unhex_input, unhex_output, '{\"constant\": false, \"inputs\": [{\"name\": \"newMinimumTakerProtocolFee\", \"type\": \"uint256\"}], \"name\": \"changeMinimumTakerProtocolFee\", \"outputs\": [], \"payable\": false, \"stateMutability\": \"nonpayable\", \"type\": \"function\"}', 'changeMinimumTakerProtocolFee') as data\n    from {{ ref('stg_ethereum__traces') }}\n    where to_address = lower(\"0x7Be8076f4EA4A4AD08075C2508e481d6C946D12b\")\n    and address_hash = abs(hash(lower(\"0x7Be8076f4EA4A4AD08075C2508e481d6C946D12b\"))) % 10\n    and selector = \"0x30783161\"\n    and selector_hash = abs(hash(\"0x30783161\")) % 10\n\n    {% if is_incremental() %}\n      and dt = var('dt')\n    {% endif %}\n),\n\nfinal as (\n    select\n        call_success,\n        call_block_number,\n        call_block_time,\n        call_trace_address,\n        call_tx_hash,\n        contract_address,\n        dt,\n        data.input.*,\n        data.output.*\n    from base\n)\n\nselect /* REPARTITION(dt) */ *\nfrom final", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.dbt.is_incremental"], "nodes": ["model.ethereum_source.stg_ethereum__traces"]}, "config": {"enabled": true, "alias": null, "schema": "opensea", "database": null, "tags": ["chain_ethereum", "level_parse", "proj_opensea"], "meta": {}, "materialized": "incremental", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "file_format": "parquet", "partition_by": ["dt"], "incremental_strategy": "insert_overwrite", "post-hook": [], "pre-hook": [{"sql": "create or replace function opensea_wyvernexchangev1_changeminimumtakerprotocolfee_calldecodeudf as \"io.iftech.sparkudf.hive.opensea_WyvernExchangeV1_changeMinimumTakerProtocolFee_CallDecodeUDF\" using jar \"s3a://ifcrypto/blockchain-dbt/jars/opensea_udf.jar\";", "transaction": true, "index": null}]}, "database": null, "schema": "ethereum_opensea", "fqn": ["ethereum_source", "codegen", "opensea", "WyvernExchangeV1_call_changeMinimumTakerProtocolFee"], "unique_id": "model.ethereum_source.WyvernExchangeV1_call_changeMinimumTakerProtocolFee", "package_name": "ethereum_source", "root_path": "/Users/songv/Code/jike/web3/dbt_ethereum_source", "path": "codegen/opensea/WyvernExchangeV1_call_changeMinimumTakerProtocolFee.sql", "original_file_path": "models/codegen/opensea/WyvernExchangeV1_call_changeMinimumTakerProtocolFee.sql", "name": "WyvernExchangeV1_call_changeMinimumTakerProtocolFee", "alias": "WyvernExchangeV1_call_changeMinimumTakerProtocolFee", "checksum": {"name": "sha256", "checksum": "38edba1ea028804e964287e19a414d7681020c48dac2afffc9162ab7b537bf49"}, "tags": ["chain_ethereum", "level_parse", "proj_opensea"], "refs": [["stg_ethereum__traces"]], "sources": [], "description": "", "columns": {"newMinimumTakerProtocolFee": {"name": "newMinimumTakerProtocolFee", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "call_success": {"name": "call_success", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "call_block_number": {"name": "call_block_number", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "call_block_time": {"name": "call_block_time", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "call_trace_address": {"name": "call_trace_address", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "call_tx_hash": {"name": "call_tx_hash", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "contract_address": {"name": "contract_address", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "dt": {"name": "dt", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "ethereum_source://models/codegen/opensea/schema.yml", "compiled_path": "target/compiled/ethereum_source/models/codegen/opensea/WyvernExchangeV1_call_changeMinimumTakerProtocolFee.sql", "build_path": null, "deferred": false, "unrendered_config": {"schema": "opensea", "tags": ["chain_ethereum", "level_parse", "proj_opensea"], "materialized": "incremental", "incremental_strategy": "insert_overwrite", "partition_by": ["dt"], "file_format": "parquet", "pre-hook": [{"sql": "create or replace function opensea_wyvernexchangev1_changeminimumtakerprotocolfee_calldecodeudf as \"io.iftech.sparkudf.hive.opensea_WyvernExchangeV1_changeMinimumTakerProtocolFee_CallDecodeUDF\" using jar \"s3a://ifcrypto/blockchain-dbt/jars/opensea_udf.jar\";"}]}, "created_at": 1650535971.933387, "compiled_sql": "\n\nwith base as (\n    select\n        status==1 as call_success,\n        block_number as call_block_number,\n        block_timestamp as call_block_time,\n        trace_address as call_trace_address,\n        transaction_hash as call_tx_hash,\n        to_address as contract_address,\n        dt,\n        opensea_wyvernexchangev1_changeminimumtakerprotocolfee_calldecodeudf(unhex_input, unhex_output, '{\"constant\": false, \"inputs\": [{\"name\": \"newMinimumTakerProtocolFee\", \"type\": \"uint256\"}], \"name\": \"changeMinimumTakerProtocolFee\", \"outputs\": [], \"payable\": false, \"stateMutability\": \"nonpayable\", \"type\": \"function\"}', 'changeMinimumTakerProtocolFee') as data\n    from ethereum_stg_ethereum.stg_ethereum__traces\n    where to_address = lower(\"0x7Be8076f4EA4A4AD08075C2508e481d6C946D12b\")\n    and address_hash = abs(hash(lower(\"0x7Be8076f4EA4A4AD08075C2508e481d6C946D12b\"))) % 10\n    and selector = \"0x30783161\"\n    and selector_hash = abs(hash(\"0x30783161\")) % 10\n\n    \n),\n\nfinal as (\n    select\n        call_success,\n        call_block_number,\n        call_block_time,\n        call_trace_address,\n        call_tx_hash,\n        contract_address,\n        dt,\n        data.input.*,\n        data.output.*\n    from base\n)\n\nselect /* REPARTITION(dt) */ *\nfrom final", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "ethereum_opensea.WyvernExchangeV1_call_changeMinimumTakerProtocolFee"}, "model.ethereum_source.stg_ethereum__token_transfers": {"raw_sql": "{{ config(enabled=var('using_token_transfers', True)) }}\n\nwith base as (\n  select * \n  from {{ var('token_transfers') }}\n),\n\nfinal as (\n    select *\n    from base\n)\n\nselect * \nfrom final", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["source.ethereum_source.ethereum.token_transfers"]}, "config": {"enabled": true, "alias": null, "schema": "stg_ethereum", "database": null, "tags": ["chain_ethereum", "level_standardize", "proj_global"], "meta": {}, "materialized": "view", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "post-hook": [], "pre-hook": []}, "database": null, "schema": "ethereum_stg_ethereum", "fqn": ["ethereum_source", "stg", "stg_ethereum__token_transfers"], "unique_id": "model.ethereum_source.stg_ethereum__token_transfers", "package_name": "ethereum_source", "root_path": "/Users/songv/Code/jike/web3/dbt_ethereum_source", "path": "stg/stg_ethereum__token_transfers.sql", "original_file_path": "models/stg/stg_ethereum__token_transfers.sql", "name": "stg_ethereum__token_transfers", "alias": "stg_ethereum__token_transfers", "checksum": {"name": "sha256", "checksum": "4c13f3c5c6a89165dd470d721d5875e45ac19b76dd9e8c62ae7956dfd5f2e256"}, "tags": ["chain_ethereum", "level_standardize", "proj_global"], "refs": [], "sources": [["ethereum", "token_transfers"]], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": "ethereum_source://models/stg/schema.yml", "compiled_path": "target/compiled/ethereum_source/models/stg/stg_ethereum__token_transfers.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "view", "schema": "stg_ethereum", "tags": ["chain_ethereum", "level_standardize", "proj_global"], "enabled": true}, "created_at": 1650535972.161365, "compiled_sql": "\n\nwith base as (\n  select * \n  from ethereum.token_transfers\n),\n\nfinal as (\n    select *\n    from base\n)\n\nselect * \nfrom final", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "ethereum_stg_ethereum.stg_ethereum__token_transfers"}, "model.ethereum_source.stg_ethereum__logs": {"raw_sql": "{{ config(enabled=var('using_logs', True)) }}\n\nwith base as (\n  select * \n  from {{ var('logs') }}\n),\n\nfinal as (\n    select *\n    from base\n)\n\nselect * \nfrom final", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["source.ethereum_source.ethereum.logs"]}, "config": {"enabled": true, "alias": null, "schema": "stg_ethereum", "database": null, "tags": ["chain_ethereum", "level_standardize", "proj_global"], "meta": {}, "materialized": "view", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "post-hook": [], "pre-hook": []}, "database": null, "schema": "ethereum_stg_ethereum", "fqn": ["ethereum_source", "stg", "stg_ethereum__logs"], "unique_id": "model.ethereum_source.stg_ethereum__logs", "package_name": "ethereum_source", "root_path": "/Users/songv/Code/jike/web3/dbt_ethereum_source", "path": "stg/stg_ethereum__logs.sql", "original_file_path": "models/stg/stg_ethereum__logs.sql", "name": "stg_ethereum__logs", "alias": "stg_ethereum__logs", "checksum": {"name": "sha256", "checksum": "c335411ae7def351bfb5c9ea851869dab9d1c2da32cbadea584243014e3f7fc0"}, "tags": ["chain_ethereum", "level_standardize", "proj_global"], "refs": [], "sources": [["ethereum", "logs"]], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": "ethereum_source://models/stg/schema.yml", "compiled_path": "target/compiled/ethereum_source/models/stg/stg_ethereum__logs.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "view", "schema": "stg_ethereum", "tags": ["chain_ethereum", "level_standardize", "proj_global"], "enabled": true}, "created_at": 1650535972.160921, "compiled_sql": "\n\nwith base as (\n  select * \n  from ethereum.logs\n),\n\nfinal as (\n    select *\n    from base\n)\n\nselect * \nfrom final", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "ethereum_stg_ethereum.stg_ethereum__logs"}, "model.ethereum_source.stg_ethereum__transactions": {"raw_sql": "with base as (\n  select * \n  from {{ var('transactions') }}\n),\n\nfinal as (\n    select *\n    from base\n)\n\nselect * \nfrom final", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["source.ethereum_source.ethereum.transactions"]}, "config": {"enabled": true, "alias": null, "schema": "stg_ethereum", "database": null, "tags": ["chain_ethereum", "level_standardize", "proj_global"], "meta": {}, "materialized": "view", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "post-hook": [], "pre-hook": []}, "database": null, "schema": "ethereum_stg_ethereum", "fqn": ["ethereum_source", "stg", "stg_ethereum__transactions"], "unique_id": "model.ethereum_source.stg_ethereum__transactions", "package_name": "ethereum_source", "root_path": "/Users/songv/Code/jike/web3/dbt_ethereum_source", "path": "stg/stg_ethereum__transactions.sql", "original_file_path": "models/stg/stg_ethereum__transactions.sql", "name": "stg_ethereum__transactions", "alias": "stg_ethereum__transactions", "checksum": {"name": "sha256", "checksum": "23886090df6fd27f32297532115f7ffa8ee3b1554b6f7076e71d8840127a131d"}, "tags": ["chain_ethereum", "level_standardize", "proj_global"], "refs": [], "sources": [["ethereum", "transactions"]], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": "ethereum_source://models/stg/schema.yml", "compiled_path": "target/compiled/ethereum_source/models/stg/stg_ethereum__transactions.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "view", "schema": "stg_ethereum", "tags": ["chain_ethereum", "level_standardize", "proj_global"]}, "created_at": 1650535972.160467, "compiled_sql": "with base as (\n  select * \n  from ethereum.transactions\n),\n\nfinal as (\n    select *\n    from base\n)\n\nselect * \nfrom final", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "ethereum_stg_ethereum.stg_ethereum__transactions"}, "model.ethereum_source.stg_ethereum__contracts": {"raw_sql": "with base as (\n  select * \n  from {{ var('contracts') }}\n),\n\nfinal as (\n    select *\n    from base\n)\n\nselect * \nfrom final", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["source.ethereum_source.ethereum.contracts"]}, "config": {"enabled": true, "alias": null, "schema": "stg_ethereum", "database": null, "tags": ["chain_ethereum", "level_standardize", "proj_global"], "meta": {}, "materialized": "view", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "post-hook": [], "pre-hook": []}, "database": null, "schema": "ethereum_stg_ethereum", "fqn": ["ethereum_source", "stg", "stg_ethereum__contracts"], "unique_id": "model.ethereum_source.stg_ethereum__contracts", "package_name": "ethereum_source", "root_path": "/Users/songv/Code/jike/web3/dbt_ethereum_source", "path": "stg/stg_ethereum__contracts.sql", "original_file_path": "models/stg/stg_ethereum__contracts.sql", "name": "stg_ethereum__contracts", "alias": "stg_ethereum__contracts", "checksum": {"name": "sha256", "checksum": "3c5669701d5474275c3a902952738efdcda80260b595211d944131dfa824da6a"}, "tags": ["chain_ethereum", "level_standardize", "proj_global"], "refs": [], "sources": [["ethereum", "contracts"]], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": "ethereum_source://models/stg/schema.yml", "compiled_path": "target/compiled/ethereum_source/models/stg/stg_ethereum__contracts.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "view", "schema": "stg_ethereum", "tags": ["chain_ethereum", "level_standardize", "proj_global"]}, "created_at": 1650535972.1615958, "compiled_sql": "with base as (\n  select * \n  from ethereum.contracts\n),\n\nfinal as (\n    select *\n    from base\n)\n\nselect * \nfrom final", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "ethereum_stg_ethereum.stg_ethereum__contracts"}, "model.ethereum_source.stg_ethereum__tokens": {"raw_sql": "with base as (\n  select * \n  from {{ var('contracts') }}\n),\n\nfinal as (\n    select *\n    from base\n)\n\nselect * \nfrom final", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["source.ethereum_source.ethereum.contracts"]}, "config": {"enabled": true, "alias": null, "schema": "stg_ethereum", "database": null, "tags": ["chain_ethereum", "level_standardize", "proj_global"], "meta": {}, "materialized": "view", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "post-hook": [], "pre-hook": []}, "database": null, "schema": "ethereum_stg_ethereum", "fqn": ["ethereum_source", "stg", "stg_ethereum__tokens"], "unique_id": "model.ethereum_source.stg_ethereum__tokens", "package_name": "ethereum_source", "root_path": "/Users/songv/Code/jike/web3/dbt_ethereum_source", "path": "stg/stg_ethereum__tokens.sql", "original_file_path": "models/stg/stg_ethereum__tokens.sql", "name": "stg_ethereum__tokens", "alias": "stg_ethereum__tokens", "checksum": {"name": "sha256", "checksum": "3c5669701d5474275c3a902952738efdcda80260b595211d944131dfa824da6a"}, "tags": ["chain_ethereum", "level_standardize", "proj_global"], "refs": [], "sources": [["ethereum", "contracts"]], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": "ethereum_source://models/stg/schema.yml", "compiled_path": "target/compiled/ethereum_source/models/stg/stg_ethereum__tokens.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "view", "schema": "stg_ethereum", "tags": ["chain_ethereum", "level_standardize", "proj_global"]}, "created_at": 1650535972.161813, "compiled_sql": "with base as (\n  select * \n  from ethereum.contracts\n),\n\nfinal as (\n    select *\n    from base\n)\n\nselect * \nfrom final", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "ethereum_stg_ethereum.stg_ethereum__tokens"}, "model.ethereum_source.stg_ethereum__traces": {"raw_sql": "{{ config(enabled=var('using_traces', True)) }}\n\nwith base as (\n  select * \n  from {{ var('traces') }}\n),\n\nfinal as (\n    select *\n    from base\n)\n\nselect * \nfrom final", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["source.ethereum_source.ethereum.traces"]}, "config": {"enabled": true, "alias": null, "schema": "stg_ethereum", "database": null, "tags": ["chain_ethereum", "level_standardize", "proj_global"], "meta": {}, "materialized": "view", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "post-hook": [], "pre-hook": []}, "database": null, "schema": "ethereum_stg_ethereum", "fqn": ["ethereum_source", "stg", "stg_ethereum__traces"], "unique_id": "model.ethereum_source.stg_ethereum__traces", "package_name": "ethereum_source", "root_path": "/Users/songv/Code/jike/web3/dbt_ethereum_source", "path": "stg/stg_ethereum__traces.sql", "original_file_path": "models/stg/stg_ethereum__traces.sql", "name": "stg_ethereum__traces", "alias": "stg_ethereum__traces", "checksum": {"name": "sha256", "checksum": "a916809bc0b979034fdcf232db0fe7e704af8bf13f8680fb033c447f43d61630"}, "tags": ["chain_ethereum", "level_standardize", "proj_global"], "refs": [], "sources": [["ethereum", "traces"]], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": "ethereum_source://models/stg/schema.yml", "compiled_path": "target/compiled/ethereum_source/models/stg/stg_ethereum__traces.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "view", "schema": "stg_ethereum", "tags": ["chain_ethereum", "level_standardize", "proj_global"], "enabled": true}, "created_at": 1650535972.161144, "compiled_sql": "\n\nwith base as (\n  select * \n  from ethereum.traces\n),\n\nfinal as (\n    select *\n    from base\n)\n\nselect * \nfrom final", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "ethereum_stg_ethereum.stg_ethereum__traces"}, "model.ethereum_source.stg_ethereum__blocks": {"raw_sql": "with base as (\n  select * \n  from {{ var('blocks') }}\n),\n\nfinal as (\n    select *\n    from base\n)\n\nselect * \nfrom final", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["source.ethereum_source.ethereum.blocks"]}, "config": {"enabled": true, "alias": null, "schema": "stg_ethereum", "database": null, "tags": ["chain_ethereum", "level_standardize", "proj_global"], "meta": {}, "materialized": "view", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "post-hook": [], "pre-hook": []}, "database": null, "schema": "ethereum_stg_ethereum", "fqn": ["ethereum_source", "stg", "stg_ethereum__blocks"], "unique_id": "model.ethereum_source.stg_ethereum__blocks", "package_name": "ethereum_source", "root_path": "/Users/songv/Code/jike/web3/dbt_ethereum_source", "path": "stg/stg_ethereum__blocks.sql", "original_file_path": "models/stg/stg_ethereum__blocks.sql", "name": "stg_ethereum__blocks", "alias": "stg_ethereum__blocks", "checksum": {"name": "sha256", "checksum": "bcb3533e8e44aa329607b188547a17f57d4298d9ec2d57ebafb2f84613cf2faf"}, "tags": ["chain_ethereum", "level_standardize", "proj_global"], "refs": [], "sources": [["ethereum", "blocks"]], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": "ethereum_source://models/stg/schema.yml", "compiled_path": "target/compiled/ethereum_source/models/stg/stg_ethereum__blocks.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "view", "schema": "stg_ethereum", "tags": ["chain_ethereum", "level_standardize", "proj_global"]}, "created_at": 1650535972.160702, "compiled_sql": "with base as (\n  select * \n  from ethereum.blocks\n),\n\nfinal as (\n    select *\n    from base\n)\n\nselect * \nfrom final", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "ethereum_stg_ethereum.stg_ethereum__blocks"}}, "sources": {"source.ethereum_source.ethereum.transactions": {"fqn": ["ethereum_source", "ethereum", "transactions"], "database": null, "schema": "ethereum", "unique_id": "source.ethereum_source.ethereum.transactions", "package_name": "ethereum_source", "root_path": "/Users/songv/Code/jike/web3/dbt_ethereum_source", "path": "models/src_ethereum.yml", "original_file_path": "models/src_ethereum.yml", "name": "transactions", "source_name": "ethereum", "source_description": "", "loader": "", "identifier": "transactions", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "ethereum.transactions", "created_at": 1650535972.162268}, "source.ethereum_source.ethereum.blocks": {"fqn": ["ethereum_source", "ethereum", "blocks"], "database": null, "schema": "ethereum", "unique_id": "source.ethereum_source.ethereum.blocks", "package_name": "ethereum_source", "root_path": "/Users/songv/Code/jike/web3/dbt_ethereum_source", "path": "models/src_ethereum.yml", "original_file_path": "models/src_ethereum.yml", "name": "blocks", "source_name": "ethereum", "source_description": "", "loader": "", "identifier": "blocks", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "ethereum.blocks", "created_at": 1650535972.1623821}, "source.ethereum_source.ethereum.logs": {"fqn": ["ethereum_source", "ethereum", "logs"], "database": null, "schema": "ethereum", "unique_id": "source.ethereum_source.ethereum.logs", "package_name": "ethereum_source", "root_path": "/Users/songv/Code/jike/web3/dbt_ethereum_source", "path": "models/src_ethereum.yml", "original_file_path": "models/src_ethereum.yml", "name": "logs", "source_name": "ethereum", "source_description": "", "loader": "", "identifier": "logs", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "ethereum.logs", "created_at": 1650535972.162455}, "source.ethereum_source.ethereum.traces": {"fqn": ["ethereum_source", "ethereum", "traces"], "database": null, "schema": "ethereum", "unique_id": "source.ethereum_source.ethereum.traces", "package_name": "ethereum_source", "root_path": "/Users/songv/Code/jike/web3/dbt_ethereum_source", "path": "models/src_ethereum.yml", "original_file_path": "models/src_ethereum.yml", "name": "traces", "source_name": "ethereum", "source_description": "", "loader": "", "identifier": "traces", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "ethereum.traces", "created_at": 1650535972.162517}, "source.ethereum_source.ethereum.token_transfers": {"fqn": ["ethereum_source", "ethereum", "token_transfers"], "database": null, "schema": "ethereum", "unique_id": "source.ethereum_source.ethereum.token_transfers", "package_name": "ethereum_source", "root_path": "/Users/songv/Code/jike/web3/dbt_ethereum_source", "path": "models/src_ethereum.yml", "original_file_path": "models/src_ethereum.yml", "name": "token_transfers", "source_name": "ethereum", "source_description": "", "loader": "", "identifier": "token_transfers", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "ethereum.token_transfers", "created_at": 1650535972.16258}, "source.ethereum_source.ethereum.contracts": {"fqn": ["ethereum_source", "ethereum", "contracts"], "database": null, "schema": "ethereum", "unique_id": "source.ethereum_source.ethereum.contracts", "package_name": "ethereum_source", "root_path": "/Users/songv/Code/jike/web3/dbt_ethereum_source", "path": "models/src_ethereum.yml", "original_file_path": "models/src_ethereum.yml", "name": "contracts", "source_name": "ethereum", "source_description": "", "loader": "", "identifier": "contracts", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "ethereum.contracts", "created_at": 1650535972.162642}, "source.ethereum_source.ethereum.tokens": {"fqn": ["ethereum_source", "ethereum", "tokens"], "database": null, "schema": "ethereum", "unique_id": "source.ethereum_source.ethereum.tokens", "package_name": "ethereum_source", "root_path": "/Users/songv/Code/jike/web3/dbt_ethereum_source", "path": "models/src_ethereum.yml", "original_file_path": "models/src_ethereum.yml", "name": "tokens", "source_name": "ethereum", "source_description": "", "loader": "", "identifier": "tokens", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "ethereum.tokens", "created_at": 1650535972.1627011}, "source.ethereum_source.ethereum.receipts": {"fqn": ["ethereum_source", "ethereum", "receipts"], "database": null, "schema": "ethereum", "unique_id": "source.ethereum_source.ethereum.receipts", "package_name": "ethereum_source", "root_path": "/Users/songv/Code/jike/web3/dbt_ethereum_source", "path": "models/src_ethereum.yml", "original_file_path": "models/src_ethereum.yml", "name": "receipts", "source_name": "ethereum", "source_description": "", "loader": "", "identifier": "receipts", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "ethereum.receipts", "created_at": 1650535972.162761}}, "macros": {"macro.dbt_spark.file_format_clause": {"unique_id": "macro.dbt_spark.file_format_clause", "package_name": "dbt_spark", "root_path": "/opt/homebrew/lib/python3.9/site-packages/dbt/include/spark", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "file_format_clause", "macro_sql": "{% macro file_format_clause() %}\n  {%- set file_format = config.get('file_format', validator=validation.any[basestring]) -%}\n  {%- if file_format is not none %}\n    using {{ file_format }}\n  {%- endif %}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1650535969.7074811}, "macro.dbt_spark.location_clause": {"unique_id": "macro.dbt_spark.location_clause", "package_name": "dbt_spark", "root_path": "/opt/homebrew/lib/python3.9/site-packages/dbt/include/spark", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "location_clause", "macro_sql": "{% macro location_clause() %}\n  {%- set location_root = config.get('location_root', validator=validation.any[basestring]) -%}\n  {%- set identifier = model['alias'] -%}\n  {%- if location_root is not none %}\n    location '{{ location_root }}/{{ identifier }}'\n  {%- endif %}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1650535969.707992}, "macro.dbt_spark.options_clause": {"unique_id": "macro.dbt_spark.options_clause", "package_name": "dbt_spark", "root_path": "/opt/homebrew/lib/python3.9/site-packages/dbt/include/spark", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "options_clause", "macro_sql": "{% macro options_clause() -%}\n  {%- set options = config.get('options') -%}\n  {%- if config.get('file_format') == 'hudi' -%}\n    {%- set unique_key = config.get('unique_key') -%}\n    {%- if unique_key is not none and options is none -%}\n      {%- set options = {'primaryKey': config.get('unique_key')} -%}\n    {%- elif unique_key is not none and options is not none and 'primaryKey' not in options -%}\n      {%- set _ = options.update({'primaryKey': config.get('unique_key')}) -%}\n    {%- elif options is not none and 'primaryKey' in options and options['primaryKey'] != unique_key -%}\n      {{ exceptions.raise_compiler_error(\"unique_key and options('primaryKey') should be the same column(s).\") }}\n    {%- endif %}\n  {%- endif %}\n\n  {%- if options is not none %}\n    options (\n      {%- for option in options -%}\n      {{ option }} \"{{ options[option] }}\" {% if not loop.last %}, {% endif %}\n      {%- endfor %}\n    )\n  {%- endif %}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1650535969.7095098}, "macro.dbt_spark.comment_clause": {"unique_id": "macro.dbt_spark.comment_clause", "package_name": "dbt_spark", "root_path": "/opt/homebrew/lib/python3.9/site-packages/dbt/include/spark", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "comment_clause", "macro_sql": "{% macro comment_clause() %}\n  {%- set raw_persist_docs = config.get('persist_docs', {}) -%}\n\n  {%- if raw_persist_docs is mapping -%}\n    {%- set raw_relation = raw_persist_docs.get('relation', false) -%}\n      {%- if raw_relation -%}\n      comment '{{ model.description | replace(\"'\", \"\\\\'\") }}'\n      {% endif %}\n  {%- elif raw_persist_docs -%}\n    {{ exceptions.raise_compiler_error(\"Invalid value provided for 'persist_docs'. Expected dict but got value: \" ~ raw_persist_docs) }}\n  {% endif %}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1650535969.7102752}, "macro.dbt_spark.partition_cols": {"unique_id": "macro.dbt_spark.partition_cols", "package_name": "dbt_spark", "root_path": "/opt/homebrew/lib/python3.9/site-packages/dbt/include/spark", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "partition_cols", "macro_sql": "{% macro partition_cols(label, required=false) %}\n  {%- set cols = config.get('partition_by', validator=validation.any[list, basestring]) -%}\n  {%- if cols is not none %}\n    {%- if cols is string -%}\n      {%- set cols = [cols] -%}\n    {%- endif -%}\n    {{ label }} (\n    {%- for item in cols -%}\n      {{ item }}\n      {%- if not loop.last -%},{%- endif -%}\n    {%- endfor -%}\n    )\n  {%- endif %}\n{%- endmacro -%}\n\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1650535969.71102}, "macro.dbt_spark.clustered_cols": {"unique_id": "macro.dbt_spark.clustered_cols", "package_name": "dbt_spark", "root_path": "/opt/homebrew/lib/python3.9/site-packages/dbt/include/spark", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "clustered_cols", "macro_sql": "{% macro clustered_cols(label, required=false) %}\n  {%- set cols = config.get('clustered_by', validator=validation.any[list, basestring]) -%}\n  {%- set buckets = config.get('buckets', validator=validation.any[int]) -%}\n  {%- if (cols is not none) and (buckets is not none) %}\n    {%- if cols is string -%}\n      {%- set cols = [cols] -%}\n    {%- endif -%}\n    {{ label }} (\n    {%- for item in cols -%}\n      {{ item }}\n      {%- if not loop.last -%},{%- endif -%}\n    {%- endfor -%}\n    ) into {{ buckets }} buckets\n  {%- endif %}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1650535969.711991}, "macro.dbt_spark.fetch_tbl_properties": {"unique_id": "macro.dbt_spark.fetch_tbl_properties", "package_name": "dbt_spark", "root_path": "/opt/homebrew/lib/python3.9/site-packages/dbt/include/spark", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "fetch_tbl_properties", "macro_sql": "{% macro fetch_tbl_properties(relation) -%}\n  {% call statement('list_properties', fetch_result=True) -%}\n    SHOW TBLPROPERTIES {{ relation }}\n  {% endcall %}\n  {% do return(load_result('list_properties').table) %}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1650535969.712374}, "macro.dbt_spark.create_temporary_view": {"unique_id": "macro.dbt_spark.create_temporary_view", "package_name": "dbt_spark", "root_path": "/opt/homebrew/lib/python3.9/site-packages/dbt/include/spark", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "create_temporary_view", "macro_sql": "{% macro create_temporary_view(relation, sql) -%}\n  create temporary view {{ relation.include(schema=false) }} as\n    {{ sql }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1650535969.712607}, "macro.dbt_spark.spark__create_table_as": {"unique_id": "macro.dbt_spark.spark__create_table_as", "package_name": "dbt_spark", "root_path": "/opt/homebrew/lib/python3.9/site-packages/dbt/include/spark", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "spark__create_table_as", "macro_sql": "{% macro spark__create_table_as(temporary, relation, sql) -%}\n  {% if temporary -%}\n    {{ create_temporary_view(relation, sql) }}\n  {%- else -%}\n    {% if config.get('file_format', validator=validation.any[basestring]) == 'delta' %}\n      create or replace table {{ relation }}\n    {% else %}\n      create table {{ relation }}\n    {% endif %}\n    {{ file_format_clause() }}\n    {{ options_clause() }}\n    {{ partition_cols(label=\"partitioned by\") }}\n    {{ clustered_cols(label=\"clustered by\") }}\n    {{ location_clause() }}\n    {{ comment_clause() }}\n    as\n      {{ sql }}\n  {%- endif %}\n{%- endmacro -%}\n\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_spark.create_temporary_view", "macro.dbt_spark.file_format_clause", "macro.dbt_spark.options_clause", "macro.dbt_spark.partition_cols", "macro.dbt_spark.clustered_cols", "macro.dbt_spark.location_clause", "macro.dbt_spark.comment_clause"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1650535969.713442}, "macro.dbt_spark.spark__create_view_as": {"unique_id": "macro.dbt_spark.spark__create_view_as", "package_name": "dbt_spark", "root_path": "/opt/homebrew/lib/python3.9/site-packages/dbt/include/spark", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "spark__create_view_as", "macro_sql": "{% macro spark__create_view_as(relation, sql) -%}\n  create or replace view {{ relation }}\n  {{ comment_clause() }}\n  as\n    {{ sql }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_spark.comment_clause"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1650535969.7136672}, "macro.dbt_spark.spark__create_schema": {"unique_id": "macro.dbt_spark.spark__create_schema", "package_name": "dbt_spark", "root_path": "/opt/homebrew/lib/python3.9/site-packages/dbt/include/spark", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "spark__create_schema", "macro_sql": "{% macro spark__create_schema(relation) -%}\n  {%- call statement('create_schema') -%}\n    create schema if not exists {{relation}}\n  {% endcall %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1650535969.7138822}, "macro.dbt_spark.spark__drop_schema": {"unique_id": "macro.dbt_spark.spark__drop_schema", "package_name": "dbt_spark", "root_path": "/opt/homebrew/lib/python3.9/site-packages/dbt/include/spark", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "spark__drop_schema", "macro_sql": "{% macro spark__drop_schema(relation) -%}\n  {%- call statement('drop_schema') -%}\n    drop schema if exists {{ relation }} cascade\n  {%- endcall -%}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1650535969.714092}, "macro.dbt_spark.spark__get_columns_in_relation": {"unique_id": "macro.dbt_spark.spark__get_columns_in_relation", "package_name": "dbt_spark", "root_path": "/opt/homebrew/lib/python3.9/site-packages/dbt/include/spark", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "spark__get_columns_in_relation", "macro_sql": "{% macro spark__get_columns_in_relation(relation) -%}\n  {% call statement('get_columns_in_relation', fetch_result=True) %}\n      describe extended {{ relation.include(schema=(schema is not none)) }}\n  {% endcall %}\n  {% do return(load_result('get_columns_in_relation').table) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1650535969.71453}, "macro.dbt_spark.spark__list_relations_without_caching": {"unique_id": "macro.dbt_spark.spark__list_relations_without_caching", "package_name": "dbt_spark", "root_path": "/opt/homebrew/lib/python3.9/site-packages/dbt/include/spark", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "spark__list_relations_without_caching", "macro_sql": "{% macro spark__list_relations_without_caching(relation) %}\n  {% call statement('list_relations_without_caching', fetch_result=True) -%}\n    show table extended in {{ relation }} like '*'\n  {% endcall %}\n\n  {% do return(load_result('list_relations_without_caching').table) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1650535969.7149}, "macro.dbt_spark.spark__list_schemas": {"unique_id": "macro.dbt_spark.spark__list_schemas", "package_name": "dbt_spark", "root_path": "/opt/homebrew/lib/python3.9/site-packages/dbt/include/spark", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "spark__list_schemas", "macro_sql": "{% macro spark__list_schemas(database) -%}\n  {% call statement('list_schemas', fetch_result=True, auto_begin=False) %}\n    show databases\n  {% endcall %}\n  {{ return(load_result('list_schemas').table) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1650535969.715242}, "macro.dbt_spark.spark__current_timestamp": {"unique_id": "macro.dbt_spark.spark__current_timestamp", "package_name": "dbt_spark", "root_path": "/opt/homebrew/lib/python3.9/site-packages/dbt/include/spark", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "spark__current_timestamp", "macro_sql": "{% macro spark__current_timestamp() -%}\n  current_timestamp()\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1650535969.715341}, "macro.dbt_spark.spark__rename_relation": {"unique_id": "macro.dbt_spark.spark__rename_relation", "package_name": "dbt_spark", "root_path": "/opt/homebrew/lib/python3.9/site-packages/dbt/include/spark", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "spark__rename_relation", "macro_sql": "{% macro spark__rename_relation(from_relation, to_relation) -%}\n  {% call statement('rename_relation') -%}\n    {% if not from_relation.type %}\n      {% do exceptions.raise_database_error(\"Cannot rename a relation with a blank type: \" ~ from_relation.identifier) %}\n    {% elif from_relation.type in ('table') %}\n        alter table {{ from_relation }} rename to {{ to_relation }}\n    {% elif from_relation.type == 'view' %}\n        alter view {{ from_relation }} rename to {{ to_relation }}\n    {% else %}\n      {% do exceptions.raise_database_error(\"Unknown type '\" ~ from_relation.type ~ \"' for relation: \" ~ from_relation.identifier) %}\n    {% endif %}\n  {%- endcall %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1650535969.716128}, "macro.dbt_spark.spark__drop_relation": {"unique_id": "macro.dbt_spark.spark__drop_relation", "package_name": "dbt_spark", "root_path": "/opt/homebrew/lib/python3.9/site-packages/dbt/include/spark", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "spark__drop_relation", "macro_sql": "{% macro spark__drop_relation(relation) -%}\n  {% call statement('drop_relation', auto_begin=False) -%}\n    drop {{ relation.type }} if exists {{ relation }}\n  {%- endcall %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1650535969.716416}, "macro.dbt_spark.spark__generate_database_name": {"unique_id": "macro.dbt_spark.spark__generate_database_name", "package_name": "dbt_spark", "root_path": "/opt/homebrew/lib/python3.9/site-packages/dbt/include/spark", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "spark__generate_database_name", "macro_sql": "{% macro spark__generate_database_name(custom_database_name=none, node=none) -%}\n  {% do return(None) %}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1650535969.716618}, "macro.dbt_spark.spark__persist_docs": {"unique_id": "macro.dbt_spark.spark__persist_docs", "package_name": "dbt_spark", "root_path": "/opt/homebrew/lib/python3.9/site-packages/dbt/include/spark", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "spark__persist_docs", "macro_sql": "{% macro spark__persist_docs(relation, model, for_relation, for_columns) -%}\n  {% if for_columns and config.persist_column_docs() and model.columns %}\n    {% do alter_column_comment(relation, model.columns) %}\n  {% endif %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.alter_column_comment"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1650535969.7169862}, "macro.dbt_spark.spark__alter_column_comment": {"unique_id": "macro.dbt_spark.spark__alter_column_comment", "package_name": "dbt_spark", "root_path": "/opt/homebrew/lib/python3.9/site-packages/dbt/include/spark", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "spark__alter_column_comment", "macro_sql": "{% macro spark__alter_column_comment(relation, column_dict) %}\n  {% if config.get('file_format', validator=validation.any[basestring]) in ['delta', 'hudi'] %}\n    {% for column_name in column_dict %}\n      {% set comment = column_dict[column_name]['description'] %}\n      {% set escaped_comment = comment | replace('\\'', '\\\\\\'') %}\n      {% set comment_query %}\n        alter table {{ relation }} change column \n            {{ adapter.quote(column_name) if column_dict[column_name]['quote'] else column_name }}\n            comment '{{ escaped_comment }}';\n      {% endset %}\n      {% do run_query(comment_query) %}\n    {% endfor %}\n  {% endif %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1650535969.7179651}, "macro.dbt_spark.spark__make_temp_relation": {"unique_id": "macro.dbt_spark.spark__make_temp_relation", "package_name": "dbt_spark", "root_path": "/opt/homebrew/lib/python3.9/site-packages/dbt/include/spark", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "spark__make_temp_relation", "macro_sql": "{% macro spark__make_temp_relation(base_relation, suffix) %}\n    {% set tmp_identifier = base_relation.identifier ~ suffix %}\n    {% set tmp_relation = base_relation.incorporate(path = {\n        \"identifier\": tmp_identifier,\n        \"schema\": None\n    }) -%}\n\n    {% do return(tmp_relation) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1650535969.7185018}, "macro.dbt_spark.spark__alter_column_type": {"unique_id": "macro.dbt_spark.spark__alter_column_type", "package_name": "dbt_spark", "root_path": "/opt/homebrew/lib/python3.9/site-packages/dbt/include/spark", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "spark__alter_column_type", "macro_sql": "{% macro spark__alter_column_type(relation, column_name, new_column_type) -%}\n  {% call statement('alter_column_type') %}\n    alter table {{ relation }} alter column {{ column_name }} type {{ new_column_type }};\n  {% endcall %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1650535969.718797}, "macro.dbt_spark.spark__alter_relation_add_remove_columns": {"unique_id": "macro.dbt_spark.spark__alter_relation_add_remove_columns", "package_name": "dbt_spark", "root_path": "/opt/homebrew/lib/python3.9/site-packages/dbt/include/spark", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "spark__alter_relation_add_remove_columns", "macro_sql": "{% macro spark__alter_relation_add_remove_columns(relation, add_columns, remove_columns) %}\n  \n  {% if remove_columns %}\n    {% set platform_name = 'Delta Lake' if relation.is_delta else 'Apache Spark' %}\n    {{ exceptions.raise_compiler_error(platform_name + ' does not support dropping columns from tables') }}\n  {% endif %}\n  \n  {% if add_columns is none %}\n    {% set add_columns = [] %}\n  {% endif %}\n  \n  {% set sql -%}\n     \n     alter {{ relation.type }} {{ relation }}\n       \n       {% if add_columns %} add columns {% endif %}\n            {% for column in add_columns %}\n               {{ column.name }} {{ column.data_type }}{{ ',' if not loop.last }}\n            {% endfor %}\n  \n  {%- endset -%}\n\n  {% do run_query(sql) %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1650535969.719776}, "macro.dbt_spark.spark__get_binding_char": {"unique_id": "macro.dbt_spark.spark__get_binding_char", "package_name": "dbt_spark", "root_path": "/opt/homebrew/lib/python3.9/site-packages/dbt/include/spark", "path": "macros/materializations/seed.sql", "original_file_path": "macros/materializations/seed.sql", "name": "spark__get_binding_char", "macro_sql": "{% macro spark__get_binding_char() %}\n  {{ return('?' if target.method == 'odbc' else '%s') }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1650535969.732099}, "macro.dbt_spark.spark__reset_csv_table": {"unique_id": "macro.dbt_spark.spark__reset_csv_table", "package_name": "dbt_spark", "root_path": "/opt/homebrew/lib/python3.9/site-packages/dbt/include/spark", "path": "macros/materializations/seed.sql", "original_file_path": "macros/materializations/seed.sql", "name": "spark__reset_csv_table", "macro_sql": "{% macro spark__reset_csv_table(model, full_refresh, old_relation, agate_table) %}\n    {% if old_relation %}\n        {{ adapter.drop_relation(old_relation) }}\n    {% endif %}\n    {% set sql = create_csv_table(model, agate_table) %}\n    {{ return(sql) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.create_csv_table"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1650535969.7325282}, "macro.dbt_spark.spark__load_csv_rows": {"unique_id": "macro.dbt_spark.spark__load_csv_rows", "package_name": "dbt_spark", "root_path": "/opt/homebrew/lib/python3.9/site-packages/dbt/include/spark", "path": "macros/materializations/seed.sql", "original_file_path": "macros/materializations/seed.sql", "name": "spark__load_csv_rows", "macro_sql": "{% macro spark__load_csv_rows(model, agate_table) %}\n\n  {% set batch_size = get_batch_size() %}\n  {% set column_override = model['config'].get('column_types', {}) %}\n\n  {% set statements = [] %}\n\n  {% for chunk in agate_table.rows | batch(batch_size) %}\n      {% set bindings = [] %}\n\n      {% for row in chunk %}\n          {% do bindings.extend(row) %}\n      {% endfor %}\n\n      {% set sql %}\n          insert into {{ this.render() }} values\n          {% for row in chunk -%}\n              ({%- for col_name in agate_table.column_names -%}\n                  {%- set inferred_type = adapter.convert_type(agate_table, loop.index0) -%}\n                  {%- set type = column_override.get(col_name, inferred_type) -%}\n                    cast({{ get_binding_char() }} as {{type}})\n                  {%- if not loop.last%},{%- endif %}\n              {%- endfor -%})\n              {%- if not loop.last%},{%- endif %}\n          {%- endfor %}\n      {% endset %}\n\n      {% do adapter.add_query(sql, bindings=bindings, abridge_sql_log=True) %}\n\n      {% if loop.index0 == 0 %}\n          {% do statements.append(sql) %}\n      {% endif %}\n  {% endfor %}\n\n  {# Return SQL so we can render it out into the compiled files #}\n  {{ return(statements[0]) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.get_batch_size", "macro.dbt.get_binding_char"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1650535969.734345}, "macro.dbt_spark.spark__create_csv_table": {"unique_id": "macro.dbt_spark.spark__create_csv_table", "package_name": "dbt_spark", "root_path": "/opt/homebrew/lib/python3.9/site-packages/dbt/include/spark", "path": "macros/materializations/seed.sql", "original_file_path": "macros/materializations/seed.sql", "name": "spark__create_csv_table", "macro_sql": "{% macro spark__create_csv_table(model, agate_table) %}\n  {%- set column_override = model['config'].get('column_types', {}) -%}\n  {%- set quote_seed_column = model['config'].get('quote_columns', None) -%}\n\n  {% set sql %}\n    create table {{ this.render() }} (\n        {%- for col_name in agate_table.column_names -%}\n            {%- set inferred_type = adapter.convert_type(agate_table, loop.index0) -%}\n            {%- set type = column_override.get(col_name, inferred_type) -%}\n            {%- set column_name = (col_name | string) -%}\n            {{ adapter.quote_seed_column(column_name, quote_seed_column) }} {{ type }} {%- if not loop.last -%}, {%- endif -%}\n        {%- endfor -%}\n    )\n    {{ file_format_clause() }}\n    {{ partition_cols(label=\"partitioned by\") }}\n    {{ clustered_cols(label=\"clustered by\") }}\n    {{ location_clause() }}\n    {{ comment_clause() }}\n  {% endset %}\n\n  {% call statement('_') -%}\n    {{ sql }}\n  {%- endcall %}\n\n  {{ return(sql) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_spark.file_format_clause", "macro.dbt_spark.partition_cols", "macro.dbt_spark.clustered_cols", "macro.dbt_spark.location_clause", "macro.dbt_spark.comment_clause", "macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1650535969.7357922}, "macro.dbt_spark.materialization_view_spark": {"unique_id": "macro.dbt_spark.materialization_view_spark", "package_name": "dbt_spark", "root_path": "/opt/homebrew/lib/python3.9/site-packages/dbt/include/spark", "path": "macros/materializations/view.sql", "original_file_path": "macros/materializations/view.sql", "name": "materialization_view_spark", "macro_sql": "{% materialization view, adapter='spark' -%}\n    {{ return(create_or_replace_view()) }}\n{%- endmaterialization %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.create_or_replace_view"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1650535969.748319}, "macro.dbt_spark.materialization_table_spark": {"unique_id": "macro.dbt_spark.materialization_table_spark", "package_name": "dbt_spark", "root_path": "/opt/homebrew/lib/python3.9/site-packages/dbt/include/spark", "path": "macros/materializations/table.sql", "original_file_path": "macros/materializations/table.sql", "name": "materialization_table_spark", "macro_sql": "{% materialization table, adapter = 'spark' %}\n\n  {%- set identifier = model['alias'] -%}\n\n  {%- set old_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) -%}\n  {%- set target_relation = api.Relation.create(identifier=identifier,\n                                                schema=schema,\n                                                database=database,\n                                                type='table') -%}\n\n  {{ run_hooks(pre_hooks) }}\n\n  -- setup: if the target relation already exists, drop it\n  -- in case if the existing and future table is delta, we want to do a\n  -- create or replace table instead of dropping, so we don't have the table unavailable\n  {% if old_relation and not (old_relation.is_delta and config.get('file_format', validator=validation.any[basestring]) == 'delta') -%}\n    {{ adapter.drop_relation(old_relation) }}\n  {%- endif %}\n\n  -- build model\n  {% call statement('main') -%}\n    {{ create_table_as(False, target_relation, sql) }}\n  {%- endcall %}\n  \n  {% do persist_docs(target_relation, model) %}\n\n  {{ run_hooks(post_hooks) }}\n\n  {{ return({'relations': [target_relation]})}}\n\n{% endmaterialization %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.run_hooks", "macro.dbt.statement", "macro.dbt.create_table_as", "macro.dbt.persist_docs"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1650535969.7501829}, "macro.dbt_spark.spark__snapshot_hash_arguments": {"unique_id": "macro.dbt_spark.spark__snapshot_hash_arguments", "package_name": "dbt_spark", "root_path": "/opt/homebrew/lib/python3.9/site-packages/dbt/include/spark", "path": "macros/materializations/snapshot.sql", "original_file_path": "macros/materializations/snapshot.sql", "name": "spark__snapshot_hash_arguments", "macro_sql": "{% macro spark__snapshot_hash_arguments(args) -%}\n    md5({%- for arg in args -%}\n        coalesce(cast({{ arg }} as string ), '')\n        {% if not loop.last %} || '|' || {% endif %}\n    {%- endfor -%})\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1650535969.7598941}, "macro.dbt_spark.spark__snapshot_string_as_time": {"unique_id": "macro.dbt_spark.spark__snapshot_string_as_time", "package_name": "dbt_spark", "root_path": "/opt/homebrew/lib/python3.9/site-packages/dbt/include/spark", "path": "macros/materializations/snapshot.sql", "original_file_path": "macros/materializations/snapshot.sql", "name": "spark__snapshot_string_as_time", "macro_sql": "{% macro spark__snapshot_string_as_time(timestamp) -%}\n    {%- set result = \"to_timestamp('\" ~ timestamp ~ \"')\" -%}\n    {{ return(result) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1650535969.760139}, "macro.dbt_spark.spark__snapshot_merge_sql": {"unique_id": "macro.dbt_spark.spark__snapshot_merge_sql", "package_name": "dbt_spark", "root_path": "/opt/homebrew/lib/python3.9/site-packages/dbt/include/spark", "path": "macros/materializations/snapshot.sql", "original_file_path": "macros/materializations/snapshot.sql", "name": "spark__snapshot_merge_sql", "macro_sql": "{% macro spark__snapshot_merge_sql(target, source, insert_cols) -%}\n\n    merge into {{ target }} as DBT_INTERNAL_DEST\n    using {{ source }} as DBT_INTERNAL_SOURCE\n    on DBT_INTERNAL_SOURCE.dbt_scd_id = DBT_INTERNAL_DEST.dbt_scd_id\n    when matched\n     and DBT_INTERNAL_DEST.dbt_valid_to is null\n     and DBT_INTERNAL_SOURCE.dbt_change_type in ('update', 'delete')\n        then update\n        set dbt_valid_to = DBT_INTERNAL_SOURCE.dbt_valid_to\n\n    when not matched\n     and DBT_INTERNAL_SOURCE.dbt_change_type = 'insert'\n        then insert *\n    ;\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1650535969.760355}, "macro.dbt_spark.spark_build_snapshot_staging_table": {"unique_id": "macro.dbt_spark.spark_build_snapshot_staging_table", "package_name": "dbt_spark", "root_path": "/opt/homebrew/lib/python3.9/site-packages/dbt/include/spark", "path": "macros/materializations/snapshot.sql", "original_file_path": "macros/materializations/snapshot.sql", "name": "spark_build_snapshot_staging_table", "macro_sql": "{% macro spark_build_snapshot_staging_table(strategy, sql, target_relation) %}\n    {% set tmp_identifier = target_relation.identifier ~ '__dbt_tmp' %}\n                                \n    {%- set tmp_relation = api.Relation.create(identifier=tmp_identifier,\n                                                  schema=target_relation.schema,\n                                                  database=none,\n                                                  type='view') -%}\n\n    {% set select = snapshot_staging_table(strategy, sql, target_relation) %}\n\n    {# needs to be a non-temp view so that its columns can be ascertained via `describe` #}\n    {% call statement('build_snapshot_staging_relation') %}\n        {{ create_view_as(tmp_relation, select) }}\n    {% endcall %}\n\n    {% do return(tmp_relation) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.snapshot_staging_table", "macro.dbt.statement", "macro.dbt.create_view_as"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1650535969.761128}, "macro.dbt_spark.spark__post_snapshot": {"unique_id": "macro.dbt_spark.spark__post_snapshot", "package_name": "dbt_spark", "root_path": "/opt/homebrew/lib/python3.9/site-packages/dbt/include/spark", "path": "macros/materializations/snapshot.sql", "original_file_path": "macros/materializations/snapshot.sql", "name": "spark__post_snapshot", "macro_sql": "{% macro spark__post_snapshot(staging_relation) %}\n    {% do adapter.drop_relation(staging_relation) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1650535969.761323}, "macro.dbt_spark.spark__create_columns": {"unique_id": "macro.dbt_spark.spark__create_columns", "package_name": "dbt_spark", "root_path": "/opt/homebrew/lib/python3.9/site-packages/dbt/include/spark", "path": "macros/materializations/snapshot.sql", "original_file_path": "macros/materializations/snapshot.sql", "name": "spark__create_columns", "macro_sql": "{% macro spark__create_columns(relation, columns) %}\n    {% if columns|length > 0 %}\n    {% call statement() %}\n      alter table {{ relation }} add columns (\n        {% for column in columns %}\n          `{{ column.name }}` {{ column.data_type }} {{- ',' if not loop.last -}}\n        {% endfor %}\n      );\n    {% endcall %}\n    {% endif %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1650535969.7618701}, "macro.dbt_spark.materialization_snapshot_spark": {"unique_id": "macro.dbt_spark.materialization_snapshot_spark", "package_name": "dbt_spark", "root_path": "/opt/homebrew/lib/python3.9/site-packages/dbt/include/spark", "path": "macros/materializations/snapshot.sql", "original_file_path": "macros/materializations/snapshot.sql", "name": "materialization_snapshot_spark", "macro_sql": "{% materialization snapshot, adapter='spark' %}\n  {%- set config = model['config'] -%}\n\n  {%- set target_table = model.get('alias', model.get('name')) -%}\n\n  {%- set strategy_name = config.get('strategy') -%}\n  {%- set unique_key = config.get('unique_key') %}\n  {%- set file_format = config.get('file_format', 'parquet') -%}\n\n  {% set target_relation_exists, target_relation = get_or_create_relation(\n          database=none,\n          schema=model.schema,\n          identifier=target_table,\n          type='table') -%}\n\n  {%- if file_format not in ['delta', 'hudi'] -%}\n    {% set invalid_format_msg -%}\n      Invalid file format: {{ file_format }}\n      Snapshot functionality requires file_format be set to 'delta' or 'hudi'\n    {%- endset %}\n    {% do exceptions.raise_compiler_error(invalid_format_msg) %}\n  {% endif %}\n\n  {%- if target_relation_exists -%}\n    {%- if not target_relation.is_delta and not target_relation.is_hudi -%}\n      {% set invalid_format_msg -%}\n        The existing table {{ model.schema }}.{{ target_table }} is in another format than 'delta' or 'hudi'\n      {%- endset %}\n      {% do exceptions.raise_compiler_error(invalid_format_msg) %}\n    {% endif %}\n  {% endif %}\n\n  {% if not adapter.check_schema_exists(model.database, model.schema) %}\n    {% do create_schema(model.database, model.schema) %}\n  {% endif %}\n\n  {%- if not target_relation.is_table -%}\n    {% do exceptions.relation_wrong_type(target_relation, 'table') %}\n  {%- endif -%}\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  {% set strategy_macro = strategy_dispatch(strategy_name) %}\n  {% set strategy = strategy_macro(model, \"snapshotted_data\", \"source_data\", config, target_relation_exists) %}\n\n  {% if not target_relation_exists %}\n\n      {% set build_sql = build_snapshot_table(strategy, model['compiled_sql']) %}\n      {% set final_sql = create_table_as(False, target_relation, build_sql) %}\n\n  {% else %}\n\n      {{ adapter.valid_snapshot_target(target_relation) }}\n\n      {% set staging_table = spark_build_snapshot_staging_table(strategy, sql, target_relation) %}\n\n      -- this may no-op if the database does not require column expansion\n      {% do adapter.expand_target_column_types(from_relation=staging_table,\n                                               to_relation=target_relation) %}\n\n      {% set missing_columns = adapter.get_missing_columns(staging_table, target_relation)\n                                   | rejectattr('name', 'equalto', 'dbt_change_type')\n                                   | rejectattr('name', 'equalto', 'DBT_CHANGE_TYPE')\n                                   | rejectattr('name', 'equalto', 'dbt_unique_key')\n                                   | rejectattr('name', 'equalto', 'DBT_UNIQUE_KEY')\n                                   | list %}\n\n      {% do create_columns(target_relation, missing_columns) %}\n\n      {% set source_columns = adapter.get_columns_in_relation(staging_table)\n                                   | rejectattr('name', 'equalto', 'dbt_change_type')\n                                   | rejectattr('name', 'equalto', 'DBT_CHANGE_TYPE')\n                                   | rejectattr('name', 'equalto', 'dbt_unique_key')\n                                   | rejectattr('name', 'equalto', 'DBT_UNIQUE_KEY')\n                                   | list %}\n\n      {% set quoted_source_columns = [] %}\n      {% for column in source_columns %}\n        {% do quoted_source_columns.append(adapter.quote(column.name)) %}\n      {% endfor %}\n\n      {% set final_sql = snapshot_merge_sql(\n            target = target_relation,\n            source = staging_table,\n            insert_cols = quoted_source_columns\n         )\n      %}\n\n  {% endif %}\n\n  {% call statement('main') %}\n      {{ final_sql }}\n  {% endcall %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  {{ adapter.commit() }}\n\n  {% if staging_table is defined %}\n      {% do post_snapshot(staging_table) %}\n  {% endif %}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{% endmaterialization %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.get_or_create_relation", "macro.dbt.create_schema", "macro.dbt.run_hooks", "macro.dbt.strategy_dispatch", "macro.dbt.build_snapshot_table", "macro.dbt.create_table_as", "macro.dbt_spark.spark_build_snapshot_staging_table", "macro.dbt.create_columns", "macro.dbt.snapshot_merge_sql", "macro.dbt.statement", "macro.dbt.persist_docs", "macro.dbt.post_snapshot"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1650535969.766724}, "macro.dbt_spark.dbt_spark_validate_get_file_format": {"unique_id": "macro.dbt_spark.dbt_spark_validate_get_file_format", "package_name": "dbt_spark", "root_path": "/opt/homebrew/lib/python3.9/site-packages/dbt/include/spark", "path": "macros/materializations/incremental/validate.sql", "original_file_path": "macros/materializations/incremental/validate.sql", "name": "dbt_spark_validate_get_file_format", "macro_sql": "{% macro dbt_spark_validate_get_file_format(raw_file_format) %}\n  {#-- Validate the file format #}\n\n  {% set accepted_formats = ['text', 'csv', 'json', 'jdbc', 'parquet', 'orc', 'hive', 'delta', 'libsvm', 'hudi'] %}\n\n  {% set invalid_file_format_msg -%}\n    Invalid file format provided: {{ raw_file_format }}\n    Expected one of: {{ accepted_formats | join(', ') }}\n  {%- endset %}\n\n  {% if raw_file_format not in accepted_formats %}\n    {% do exceptions.raise_compiler_error(invalid_file_format_msg) %}\n  {% endif %}\n\n  {% do return(raw_file_format) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1650535969.7697642}, "macro.dbt_spark.dbt_spark_validate_get_incremental_strategy": {"unique_id": "macro.dbt_spark.dbt_spark_validate_get_incremental_strategy", "package_name": "dbt_spark", "root_path": "/opt/homebrew/lib/python3.9/site-packages/dbt/include/spark", "path": "macros/materializations/incremental/validate.sql", "original_file_path": "macros/materializations/incremental/validate.sql", "name": "dbt_spark_validate_get_incremental_strategy", "macro_sql": "{% macro dbt_spark_validate_get_incremental_strategy(raw_strategy, file_format) %}\n  {#-- Validate the incremental strategy #}\n\n  {% set invalid_strategy_msg -%}\n    Invalid incremental strategy provided: {{ raw_strategy }}\n    Expected one of: 'append', 'merge', 'insert_overwrite'\n  {%- endset %}\n\n  {% set invalid_merge_msg -%}\n    Invalid incremental strategy provided: {{ raw_strategy }}\n    You can only choose this strategy when file_format is set to 'delta' or 'hudi'\n  {%- endset %}\n  \n  {% set invalid_insert_overwrite_delta_msg -%}\n    Invalid incremental strategy provided: {{ raw_strategy }}\n    You cannot use this strategy when file_format is set to 'delta'\n    Use the 'append' or 'merge' strategy instead\n  {%- endset %}\n  \n  {% set invalid_insert_overwrite_endpoint_msg -%}\n    Invalid incremental strategy provided: {{ raw_strategy }}\n    You cannot use this strategy when connecting via endpoint\n    Use the 'append' or 'merge' strategy instead\n  {%- endset %}\n\n  {% if raw_strategy not in ['append', 'merge', 'insert_overwrite'] %}\n    {% do exceptions.raise_compiler_error(invalid_strategy_msg) %}\n  {%-else %}\n    {% if raw_strategy == 'merge' and file_format not in ['delta', 'hudi'] %}\n      {% do exceptions.raise_compiler_error(invalid_merge_msg) %}\n    {% endif %}\n    {% if raw_strategy == 'insert_overwrite' and file_format == 'delta' %}\n      {% do exceptions.raise_compiler_error(invalid_insert_overwrite_delta_msg) %}\n    {% endif %}\n    {% if raw_strategy == 'insert_overwrite' and target.endpoint %}\n      {% do exceptions.raise_compiler_error(invalid_insert_overwrite_endpoint_msg) %}\n    {% endif %}\n  {% endif %}\n\n  {% do return(raw_strategy) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1650535969.771177}, "macro.dbt_spark.get_insert_overwrite_sql": {"unique_id": "macro.dbt_spark.get_insert_overwrite_sql", "package_name": "dbt_spark", "root_path": "/opt/homebrew/lib/python3.9/site-packages/dbt/include/spark", "path": "macros/materializations/incremental/strategies.sql", "original_file_path": "macros/materializations/incremental/strategies.sql", "name": "get_insert_overwrite_sql", "macro_sql": "{% macro get_insert_overwrite_sql(source_relation, target_relation) %}\n    \n    {%- set dest_columns = adapter.get_columns_in_relation(target_relation) -%}\n    {%- set dest_cols_csv = dest_columns | map(attribute='quoted') | join(', ') -%}\n    insert overwrite table {{ target_relation }}\n    {{ partition_cols(label=\"partition\") }}\n    select {{dest_cols_csv}} from {{ source_relation.include(database=false, schema=false) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_spark.partition_cols"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1650535969.7887099}, "macro.dbt_spark.get_insert_into_sql": {"unique_id": "macro.dbt_spark.get_insert_into_sql", "package_name": "dbt_spark", "root_path": "/opt/homebrew/lib/python3.9/site-packages/dbt/include/spark", "path": "macros/materializations/incremental/strategies.sql", "original_file_path": "macros/materializations/incremental/strategies.sql", "name": "get_insert_into_sql", "macro_sql": "{% macro get_insert_into_sql(source_relation, target_relation) %}\n\n    {%- set dest_columns = adapter.get_columns_in_relation(target_relation) -%}\n    {%- set dest_cols_csv = dest_columns | map(attribute='quoted') | join(', ') -%}\n    insert into table {{ target_relation }}\n    select {{dest_cols_csv}} from {{ source_relation.include(database=false, schema=false) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1650535969.789241}, "macro.dbt_spark.spark__get_merge_sql": {"unique_id": "macro.dbt_spark.spark__get_merge_sql", "package_name": "dbt_spark", "root_path": "/opt/homebrew/lib/python3.9/site-packages/dbt/include/spark", "path": "macros/materializations/incremental/strategies.sql", "original_file_path": "macros/materializations/incremental/strategies.sql", "name": "spark__get_merge_sql", "macro_sql": "{% macro spark__get_merge_sql(target, source, unique_key, dest_columns, predicates=none) %}\n  {# skip dest_columns, use merge_update_columns config if provided, otherwise use \"*\" #}\n  {%- set update_columns = config.get(\"merge_update_columns\") -%}\n  \n  {% set merge_condition %}\n    {% if unique_key %}\n        on DBT_INTERNAL_SOURCE.{{ unique_key }} = DBT_INTERNAL_DEST.{{ unique_key }}\n    {% else %}\n        on false\n    {% endif %}\n  {% endset %}\n  \n    merge into {{ target }} as DBT_INTERNAL_DEST\n      using {{ source.include(schema=false) }} as DBT_INTERNAL_SOURCE\n      \n      {{ merge_condition }}\n      \n      when matched then update set\n        {% if update_columns -%}{%- for column_name in update_columns %}\n            {{ column_name }} = DBT_INTERNAL_SOURCE.{{ column_name }}\n            {%- if not loop.last %}, {%- endif %}\n        {%- endfor %}\n        {%- else %} * {% endif %}\n    \n      when not matched then insert *\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1650535969.79015}, "macro.dbt_spark.dbt_spark_get_incremental_sql": {"unique_id": "macro.dbt_spark.dbt_spark_get_incremental_sql", "package_name": "dbt_spark", "root_path": "/opt/homebrew/lib/python3.9/site-packages/dbt/include/spark", "path": "macros/materializations/incremental/strategies.sql", "original_file_path": "macros/materializations/incremental/strategies.sql", "name": "dbt_spark_get_incremental_sql", "macro_sql": "{% macro dbt_spark_get_incremental_sql(strategy, source, target, unique_key) %}\n  {%- if strategy == 'append' -%}\n    {#-- insert new records into existing table, without updating or overwriting #}\n    {{ get_insert_into_sql(source, target) }}\n  {%- elif strategy == 'insert_overwrite' -%}\n    {#-- insert statements don't like CTEs, so support them via a temp view #}\n    {{ get_insert_overwrite_sql(source, target) }}\n  {%- elif strategy == 'merge' -%}\n  {#-- merge all columns with databricks delta - schema changes are handled for us #}\n    {{ get_merge_sql(target, source, unique_key, dest_columns=none, predicates=none) }}\n  {%- else -%}\n    {% set no_sql_for_strategy_msg -%}\n      No known SQL for the incremental strategy provided: {{ strategy }}\n    {%- endset %}\n    {%- do exceptions.raise_compiler_error(no_sql_for_strategy_msg) -%}\n  {%- endif -%}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_spark.get_insert_into_sql", "macro.dbt_spark.get_insert_overwrite_sql", "macro.dbt.get_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1650535969.790951}, "macro.dbt_spark.materialization_incremental_spark": {"unique_id": "macro.dbt_spark.materialization_incremental_spark", "package_name": "dbt_spark", "root_path": "/opt/homebrew/lib/python3.9/site-packages/dbt/include/spark", "path": "macros/materializations/incremental/incremental.sql", "original_file_path": "macros/materializations/incremental/incremental.sql", "name": "materialization_incremental_spark", "macro_sql": "{% materialization incremental, adapter='spark' -%}\n  \n  {#-- Validate early so we don't run SQL if the file_format + strategy combo is invalid --#}\n  {%- set raw_file_format = config.get('file_format', default='parquet') -%}\n  {%- set raw_strategy = config.get('incremental_strategy', default='append') -%}\n  \n  {%- set file_format = dbt_spark_validate_get_file_format(raw_file_format) -%}\n  {%- set strategy = dbt_spark_validate_get_incremental_strategy(raw_strategy, file_format) -%}\n  \n  {%- set unique_key = config.get('unique_key', none) -%}\n  {%- set partition_by = config.get('partition_by', none) -%}\n\n  {%- set full_refresh_mode = (should_full_refresh()) -%}\n  \n  {% set on_schema_change = incremental_validate_on_schema_change(config.get('on_schema_change'), default='ignore') %}\n\n  {% set target_relation = this %}\n  {% set existing_relation = load_relation(this) %}\n  {% set tmp_relation = make_temp_relation(this) %}\n\n  {% if strategy == 'insert_overwrite' and partition_by %}\n    {% call statement() %}\n      set spark.sql.sources.partitionOverwriteMode = DYNAMIC\n    {% endcall %}\n  {% endif %}\n\n  {{ run_hooks(pre_hooks) }}\n\n  {% if existing_relation is none %}\n    {% set build_sql = create_table_as(False, target_relation, sql) %}\n  {% elif existing_relation.is_view or full_refresh_mode %}\n    {% do adapter.drop_relation(existing_relation) %}\n    {% set build_sql = create_table_as(False, target_relation, sql) %}\n  {% else %}\n    {% do run_query(create_table_as(True, tmp_relation, sql)) %}\n    {% do process_schema_changes(on_schema_change, tmp_relation, existing_relation) %}\n    {% set build_sql = dbt_spark_get_incremental_sql(strategy, tmp_relation, target_relation, unique_key) %}\n  {% endif %}\n\n  {%- call statement('main') -%}\n    {{ build_sql }}\n  {%- endcall -%}\n\n  {% do persist_docs(target_relation, model) %}\n  \n  {{ run_hooks(post_hooks) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{%- endmaterialization %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_spark.dbt_spark_validate_get_file_format", "macro.dbt_spark.dbt_spark_validate_get_incremental_strategy", "macro.dbt.should_full_refresh", "macro.dbt.incremental_validate_on_schema_change", "macro.dbt.load_relation", "macro.dbt.make_temp_relation", "macro.dbt.statement", "macro.dbt.run_hooks", "macro.dbt.create_table_as", "macro.dbt.run_query", "macro.dbt.process_schema_changes", "macro.dbt_spark.dbt_spark_get_incremental_sql", "macro.dbt.persist_docs"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1650535969.810664}, "macro.dbt.run_hooks": {"unique_id": "macro.dbt.run_hooks", "package_name": "dbt", "root_path": "/opt/homebrew/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/hooks.sql", "original_file_path": "macros/materializations/hooks.sql", "name": "run_hooks", "macro_sql": "{% macro run_hooks(hooks, inside_transaction=True) %}\n  {% for hook in hooks | selectattr('transaction', 'equalto', inside_transaction)  %}\n    {% if not inside_transaction and loop.first %}\n      {% call statement(auto_begin=inside_transaction) %}\n        commit;\n      {% endcall %}\n    {% endif %}\n    {% set rendered = render(hook.get('sql')) | trim %}\n    {% if (rendered | length) > 0 %}\n      {% call statement(auto_begin=inside_transaction) %}\n        {{ rendered }}\n      {% endcall %}\n    {% endif %}\n  {% endfor %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1650535969.82757}, "macro.dbt.make_hook_config": {"unique_id": "macro.dbt.make_hook_config", "package_name": "dbt", "root_path": "/opt/homebrew/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/hooks.sql", "original_file_path": "macros/materializations/hooks.sql", "name": "make_hook_config", "macro_sql": "{% macro make_hook_config(sql, inside_transaction) %}\n    {{ tojson({\"sql\": sql, \"transaction\": inside_transaction}) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1650535969.827837}, "macro.dbt.before_begin": {"unique_id": "macro.dbt.before_begin", "package_name": "dbt", "root_path": "/opt/homebrew/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/hooks.sql", "original_file_path": "macros/materializations/hooks.sql", "name": "before_begin", "macro_sql": "{% macro before_begin(sql) %}\n    {{ make_hook_config(sql, inside_transaction=False) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.make_hook_config"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1650535969.828025}, "macro.dbt.in_transaction": {"unique_id": "macro.dbt.in_transaction", "package_name": "dbt", "root_path": "/opt/homebrew/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/hooks.sql", "original_file_path": "macros/materializations/hooks.sql", "name": "in_transaction", "macro_sql": "{% macro in_transaction(sql) %}\n    {{ make_hook_config(sql, inside_transaction=True) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.make_hook_config"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1650535969.8282099}, "macro.dbt.after_commit": {"unique_id": "macro.dbt.after_commit", "package_name": "dbt", "root_path": "/opt/homebrew/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/hooks.sql", "original_file_path": "macros/materializations/hooks.sql", "name": "after_commit", "macro_sql": "{% macro after_commit(sql) %}\n    {{ make_hook_config(sql, inside_transaction=False) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.make_hook_config"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1650535969.828395}, "macro.dbt.set_sql_header": {"unique_id": "macro.dbt.set_sql_header", "package_name": "dbt", "root_path": "/opt/homebrew/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/configs.sql", "original_file_path": "macros/materializations/configs.sql", "name": "set_sql_header", "macro_sql": "{% macro set_sql_header(config) -%}\n  {{ config.set('sql_header', caller()) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1650535969.8455749}, "macro.dbt.should_full_refresh": {"unique_id": "macro.dbt.should_full_refresh", "package_name": "dbt", "root_path": "/opt/homebrew/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/configs.sql", "original_file_path": "macros/materializations/configs.sql", "name": "should_full_refresh", "macro_sql": "{% macro should_full_refresh() %}\n  {% set config_full_refresh = config.get('full_refresh') %}\n  {% if config_full_refresh is none %}\n    {% set config_full_refresh = flags.FULL_REFRESH %}\n  {% endif %}\n  {% do return(config_full_refresh) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1650535969.845979}, "macro.dbt.should_store_failures": {"unique_id": "macro.dbt.should_store_failures", "package_name": "dbt", "root_path": "/opt/homebrew/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/configs.sql", "original_file_path": "macros/materializations/configs.sql", "name": "should_store_failures", "macro_sql": "{% macro should_store_failures() %}\n  {% set config_store_failures = config.get('store_failures') %}\n  {% if config_store_failures is none %}\n    {% set config_store_failures = flags.STORE_FAILURES %}\n  {% endif %}\n  {% do return(config_store_failures) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1650535969.846385}, "macro.dbt.snapshot_merge_sql": {"unique_id": "macro.dbt.snapshot_merge_sql", "package_name": "dbt", "root_path": "/opt/homebrew/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshots/snapshot_merge.sql", "original_file_path": "macros/materializations/snapshots/snapshot_merge.sql", "name": "snapshot_merge_sql", "macro_sql": "{% macro snapshot_merge_sql(target, source, insert_cols) -%}\n  {{ adapter.dispatch('snapshot_merge_sql', 'dbt')(target, source, insert_cols) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_spark.spark__snapshot_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1650535969.864767}, "macro.dbt.default__snapshot_merge_sql": {"unique_id": "macro.dbt.default__snapshot_merge_sql", "package_name": "dbt", "root_path": "/opt/homebrew/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshots/snapshot_merge.sql", "original_file_path": "macros/materializations/snapshots/snapshot_merge.sql", "name": "default__snapshot_merge_sql", "macro_sql": "{% macro default__snapshot_merge_sql(target, source, insert_cols) -%}\n    {%- set insert_cols_csv = insert_cols | join(', ') -%}\n\n    merge into {{ target }} as DBT_INTERNAL_DEST\n    using {{ source }} as DBT_INTERNAL_SOURCE\n    on DBT_INTERNAL_SOURCE.dbt_scd_id = DBT_INTERNAL_DEST.dbt_scd_id\n\n    when matched\n     and DBT_INTERNAL_DEST.dbt_valid_to is null\n     and DBT_INTERNAL_SOURCE.dbt_change_type in ('update', 'delete')\n        then update\n        set dbt_valid_to = DBT_INTERNAL_SOURCE.dbt_valid_to\n\n    when not matched\n     and DBT_INTERNAL_SOURCE.dbt_change_type = 'insert'\n        then insert ({{ insert_cols_csv }})\n        values ({{ insert_cols_csv }})\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1650535969.865171}, "macro.dbt.strategy_dispatch": {"unique_id": "macro.dbt.strategy_dispatch", "package_name": "dbt", "root_path": "/opt/homebrew/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "name": "strategy_dispatch", "macro_sql": "{% macro strategy_dispatch(name) -%}\n{% set original_name = name %}\n  {% if '.' in name %}\n    {% set package_name, name = name.split(\".\", 1) %}\n  {% else %}\n    {% set package_name = none %}\n  {% endif %}\n\n  {% if package_name is none %}\n    {% set package_context = context %}\n  {% elif package_name in context %}\n    {% set package_context = context[package_name] %}\n  {% else %}\n    {% set error_msg %}\n        Could not find package '{{package_name}}', called with '{{original_name}}'\n    {% endset %}\n    {{ exceptions.raise_compiler_error(error_msg | trim) }}\n  {% endif %}\n\n  {%- set search_name = 'snapshot_' ~ name ~ '_strategy' -%}\n\n  {% if search_name not in package_context %}\n    {% set error_msg %}\n        The specified strategy macro '{{name}}' was not found in package '{{ package_name }}'\n    {% endset %}\n    {{ exceptions.raise_compiler_error(error_msg | trim) }}\n  {% endif %}\n  {{ return(package_context[search_name]) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1650535969.869882}, "macro.dbt.snapshot_hash_arguments": {"unique_id": "macro.dbt.snapshot_hash_arguments", "package_name": "dbt", "root_path": "/opt/homebrew/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "name": "snapshot_hash_arguments", "macro_sql": "{% macro snapshot_hash_arguments(args) -%}\n  {{ adapter.dispatch('snapshot_hash_arguments', 'dbt')(args) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_spark.spark__snapshot_hash_arguments"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1650535969.8701062}, "macro.dbt.default__snapshot_hash_arguments": {"unique_id": "macro.dbt.default__snapshot_hash_arguments", "package_name": "dbt", "root_path": "/opt/homebrew/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "name": "default__snapshot_hash_arguments", "macro_sql": "{% macro default__snapshot_hash_arguments(args) -%}\n    md5({%- for arg in args -%}\n        coalesce(cast({{ arg }} as varchar ), '')\n        {% if not loop.last %} || '|' || {% endif %}\n    {%- endfor -%})\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1650535969.870398}, "macro.dbt.snapshot_get_time": {"unique_id": "macro.dbt.snapshot_get_time", "package_name": "dbt", "root_path": "/opt/homebrew/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "name": "snapshot_get_time", "macro_sql": "{% macro snapshot_get_time() -%}\n  {{ adapter.dispatch('snapshot_get_time', 'dbt')() }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__snapshot_get_time"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1650535969.870589}, "macro.dbt.default__snapshot_get_time": {"unique_id": "macro.dbt.default__snapshot_get_time", "package_name": "dbt", "root_path": "/opt/homebrew/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "name": "default__snapshot_get_time", "macro_sql": "{% macro default__snapshot_get_time() -%}\n  {{ current_timestamp() }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.current_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1650535969.8707168}, "macro.dbt.snapshot_timestamp_strategy": {"unique_id": "macro.dbt.snapshot_timestamp_strategy", "package_name": "dbt", "root_path": "/opt/homebrew/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "name": "snapshot_timestamp_strategy", "macro_sql": "{% macro snapshot_timestamp_strategy(node, snapshotted_rel, current_rel, config, target_exists) %}\n    {% set primary_key = config['unique_key'] %}\n    {% set updated_at = config['updated_at'] %}\n    {% set invalidate_hard_deletes = config.get('invalidate_hard_deletes', false) %}\n\n    {#/*\n        The snapshot relation might not have an {{ updated_at }} value if the\n        snapshot strategy is changed from `check` to `timestamp`. We\n        should use a dbt-created column for the comparison in the snapshot\n        table instead of assuming that the user-supplied {{ updated_at }}\n        will be present in the historical data.\n\n        See https://github.com/dbt-labs/dbt-core/issues/2350\n    */ #}\n    {% set row_changed_expr -%}\n        ({{ snapshotted_rel }}.dbt_valid_from < {{ current_rel }}.{{ updated_at }})\n    {%- endset %}\n\n    {% set scd_id_expr = snapshot_hash_arguments([primary_key, updated_at]) %}\n\n    {% do return({\n        \"unique_key\": primary_key,\n        \"updated_at\": updated_at,\n        \"row_changed\": row_changed_expr,\n        \"scd_id\": scd_id_expr,\n        \"invalidate_hard_deletes\": invalidate_hard_deletes\n    }) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.snapshot_hash_arguments"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1650535969.871674}, "macro.dbt.snapshot_string_as_time": {"unique_id": "macro.dbt.snapshot_string_as_time", "package_name": "dbt", "root_path": "/opt/homebrew/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "name": "snapshot_string_as_time", "macro_sql": "{% macro snapshot_string_as_time(timestamp) -%}\n    {{ adapter.dispatch('snapshot_string_as_time', 'dbt')(timestamp) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_spark.spark__snapshot_string_as_time"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1650535969.871891}, "macro.dbt.default__snapshot_string_as_time": {"unique_id": "macro.dbt.default__snapshot_string_as_time", "package_name": "dbt", "root_path": "/opt/homebrew/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "name": "default__snapshot_string_as_time", "macro_sql": "{% macro default__snapshot_string_as_time(timestamp) %}\n    {% do exceptions.raise_not_implemented(\n        'snapshot_string_as_time macro not implemented for adapter '+adapter.type()\n    ) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1650535969.872118}, "macro.dbt.snapshot_check_all_get_existing_columns": {"unique_id": "macro.dbt.snapshot_check_all_get_existing_columns", "package_name": "dbt", "root_path": "/opt/homebrew/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "name": "snapshot_check_all_get_existing_columns", "macro_sql": "{% macro snapshot_check_all_get_existing_columns(node, target_exists) -%}\n    {%- set query_columns = get_columns_in_query(node['compiled_sql']) -%}\n    {%- if not target_exists -%}\n        {# no table yet -> return whatever the query does #}\n        {{ return([false, query_columns]) }}\n    {%- endif -%}\n    {# handle any schema changes #}\n    {%- set target_table = node.get('alias', node.get('name')) -%}\n    {%- set target_relation = adapter.get_relation(database=node.database, schema=node.schema, identifier=target_table) -%}\n    {%- set existing_cols = get_columns_in_query('select * from ' ~ target_relation) -%}\n    {%- set ns = namespace() -%} {# handle for-loop scoping with a namespace #}\n    {%- set ns.column_added = false -%}\n\n    {%- set intersection = [] -%}\n    {%- for col in query_columns -%}\n        {%- if col in existing_cols -%}\n            {%- do intersection.append(col) -%}\n        {%- else -%}\n            {% set ns.column_added = true %}\n        {%- endif -%}\n    {%- endfor -%}\n    {{ return([ns.column_added, intersection]) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.get_columns_in_query"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1650535969.87343}, "macro.dbt.snapshot_check_strategy": {"unique_id": "macro.dbt.snapshot_check_strategy", "package_name": "dbt", "root_path": "/opt/homebrew/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "name": "snapshot_check_strategy", "macro_sql": "{% macro snapshot_check_strategy(node, snapshotted_rel, current_rel, config, target_exists) %}\n    {% set check_cols_config = config['check_cols'] %}\n    {% set primary_key = config['unique_key'] %}\n    {% set invalidate_hard_deletes = config.get('invalidate_hard_deletes', false) %}\n    \n    {% set select_current_time -%}\n        select {{ snapshot_get_time() }} as snapshot_start\n    {%- endset %}\n\n    {#-- don't access the column by name, to avoid dealing with casing issues on snowflake #}\n    {%- set now = run_query(select_current_time)[0][0] -%}\n    {% if now is none or now is undefined -%}\n        {%- do exceptions.raise_compiler_error('Could not get a snapshot start time from the database') -%}\n    {%- endif %}\n    {% set updated_at = config.get('updated_at', snapshot_string_as_time(now)) %}\n\n    {% set column_added = false %}\n\n    {% if check_cols_config == 'all' %}\n        {% set column_added, check_cols = snapshot_check_all_get_existing_columns(node, target_exists) %}\n    {% elif check_cols_config is iterable and (check_cols_config | length) > 0 %}\n        {% set check_cols = check_cols_config %}\n    {% else %}\n        {% do exceptions.raise_compiler_error(\"Invalid value for 'check_cols': \" ~ check_cols_config) %}\n    {% endif %}\n\n    {%- set row_changed_expr -%}\n    (\n    {%- if column_added -%}\n        TRUE\n    {%- else -%}\n    {%- for col in check_cols -%}\n        {{ snapshotted_rel }}.{{ col }} != {{ current_rel }}.{{ col }}\n        or\n        (\n            (({{ snapshotted_rel }}.{{ col }} is null) and not ({{ current_rel }}.{{ col }} is null))\n            or\n            ((not {{ snapshotted_rel }}.{{ col }} is null) and ({{ current_rel }}.{{ col }} is null))\n        )\n        {%- if not loop.last %} or {% endif -%}\n    {%- endfor -%}\n    {%- endif -%}\n    )\n    {%- endset %}\n\n    {% set scd_id_expr = snapshot_hash_arguments([primary_key, updated_at]) %}\n\n    {% do return({\n        \"unique_key\": primary_key,\n        \"updated_at\": updated_at,\n        \"row_changed\": row_changed_expr,\n        \"scd_id\": scd_id_expr,\n        \"invalidate_hard_deletes\": invalidate_hard_deletes\n    }) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.snapshot_get_time", "macro.dbt.run_query", "macro.dbt.snapshot_string_as_time", "macro.dbt.snapshot_check_all_get_existing_columns", "macro.dbt.snapshot_hash_arguments"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1650535969.875985}, "macro.dbt.create_columns": {"unique_id": "macro.dbt.create_columns", "package_name": "dbt", "root_path": "/opt/homebrew/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "name": "create_columns", "macro_sql": "{% macro create_columns(relation, columns) %}\n  {{ adapter.dispatch('create_columns', 'dbt')(relation, columns) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_spark.spark__create_columns"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1650535969.887381}, "macro.dbt.default__create_columns": {"unique_id": "macro.dbt.default__create_columns", "package_name": "dbt", "root_path": "/opt/homebrew/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "name": "default__create_columns", "macro_sql": "{% macro default__create_columns(relation, columns) %}\n  {% for column in columns %}\n    {% call statement() %}\n      alter table {{ relation }} add column \"{{ column.name }}\" {{ column.data_type }};\n    {% endcall %}\n  {% endfor %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1650535969.887792}, "macro.dbt.post_snapshot": {"unique_id": "macro.dbt.post_snapshot", "package_name": "dbt", "root_path": "/opt/homebrew/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "name": "post_snapshot", "macro_sql": "{% macro post_snapshot(staging_relation) %}\n  {{ adapter.dispatch('post_snapshot', 'dbt')(staging_relation) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_spark.spark__post_snapshot"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1650535969.888035}, "macro.dbt.default__post_snapshot": {"unique_id": "macro.dbt.default__post_snapshot", "package_name": "dbt", "root_path": "/opt/homebrew/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "name": "default__post_snapshot", "macro_sql": "{% macro default__post_snapshot(staging_relation) %}\n    {# no-op #}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1650535969.8881521}, "macro.dbt.snapshot_staging_table": {"unique_id": "macro.dbt.snapshot_staging_table", "package_name": "dbt", "root_path": "/opt/homebrew/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "name": "snapshot_staging_table", "macro_sql": "{% macro snapshot_staging_table(strategy, source_sql, target_relation) -%}\n  {{ adapter.dispatch('snapshot_staging_table', 'dbt')(strategy, source_sql, target_relation) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__snapshot_staging_table"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1650535969.888431}, "macro.dbt.default__snapshot_staging_table": {"unique_id": "macro.dbt.default__snapshot_staging_table", "package_name": "dbt", "root_path": "/opt/homebrew/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "name": "default__snapshot_staging_table", "macro_sql": "{% macro default__snapshot_staging_table(strategy, source_sql, target_relation) -%}\n\n    with snapshot_query as (\n\n        {{ source_sql }}\n\n    ),\n\n    snapshotted_data as (\n\n        select *,\n            {{ strategy.unique_key }} as dbt_unique_key\n\n        from {{ target_relation }}\n        where dbt_valid_to is null\n\n    ),\n\n    insertions_source_data as (\n\n        select\n            *,\n            {{ strategy.unique_key }} as dbt_unique_key,\n            {{ strategy.updated_at }} as dbt_updated_at,\n            {{ strategy.updated_at }} as dbt_valid_from,\n            nullif({{ strategy.updated_at }}, {{ strategy.updated_at }}) as dbt_valid_to,\n            {{ strategy.scd_id }} as dbt_scd_id\n\n        from snapshot_query\n    ),\n\n    updates_source_data as (\n\n        select\n            *,\n            {{ strategy.unique_key }} as dbt_unique_key,\n            {{ strategy.updated_at }} as dbt_updated_at,\n            {{ strategy.updated_at }} as dbt_valid_from,\n            {{ strategy.updated_at }} as dbt_valid_to\n\n        from snapshot_query\n    ),\n\n    {%- if strategy.invalidate_hard_deletes %}\n\n    deletes_source_data as (\n\n        select \n            *,\n            {{ strategy.unique_key }} as dbt_unique_key\n        from snapshot_query\n    ),\n    {% endif %}\n\n    insertions as (\n\n        select\n            'insert' as dbt_change_type,\n            source_data.*\n\n        from insertions_source_data as source_data\n        left outer join snapshotted_data on snapshotted_data.dbt_unique_key = source_data.dbt_unique_key\n        where snapshotted_data.dbt_unique_key is null\n           or (\n                snapshotted_data.dbt_unique_key is not null\n            and (\n                {{ strategy.row_changed }}\n            )\n        )\n\n    ),\n\n    updates as (\n\n        select\n            'update' as dbt_change_type,\n            source_data.*,\n            snapshotted_data.dbt_scd_id\n\n        from updates_source_data as source_data\n        join snapshotted_data on snapshotted_data.dbt_unique_key = source_data.dbt_unique_key\n        where (\n            {{ strategy.row_changed }}\n        )\n    )\n\n    {%- if strategy.invalidate_hard_deletes -%}\n    ,\n\n    deletes as (\n    \n        select\n            'delete' as dbt_change_type,\n            source_data.*,\n            {{ snapshot_get_time() }} as dbt_valid_from,\n            {{ snapshot_get_time() }} as dbt_updated_at,\n            {{ snapshot_get_time() }} as dbt_valid_to,\n            snapshotted_data.dbt_scd_id\n    \n        from snapshotted_data\n        left join deletes_source_data as source_data on snapshotted_data.dbt_unique_key = source_data.dbt_unique_key\n        where source_data.dbt_unique_key is null\n    )\n    {%- endif %}\n\n    select * from insertions\n    union all\n    select * from updates\n    {%- if strategy.invalidate_hard_deletes %}\n    union all\n    select * from deletes\n    {%- endif %}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.snapshot_get_time"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1650535969.8896158}, "macro.dbt.build_snapshot_table": {"unique_id": "macro.dbt.build_snapshot_table", "package_name": "dbt", "root_path": "/opt/homebrew/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "name": "build_snapshot_table", "macro_sql": "{% macro build_snapshot_table(strategy, sql) -%}\n  {{ adapter.dispatch('build_snapshot_table', 'dbt')(strategy, sql) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__build_snapshot_table"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1650535969.8898728}, "macro.dbt.default__build_snapshot_table": {"unique_id": "macro.dbt.default__build_snapshot_table", "package_name": "dbt", "root_path": "/opt/homebrew/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "name": "default__build_snapshot_table", "macro_sql": "{% macro default__build_snapshot_table(strategy, sql) %}\n\n    select *,\n        {{ strategy.scd_id }} as dbt_scd_id,\n        {{ strategy.updated_at }} as dbt_updated_at,\n        {{ strategy.updated_at }} as dbt_valid_from,\n        nullif({{ strategy.updated_at }}, {{ strategy.updated_at }}) as dbt_valid_to\n    from (\n        {{ sql }}\n    ) sbq\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1650535969.890214}, "macro.dbt.build_snapshot_staging_table": {"unique_id": "macro.dbt.build_snapshot_staging_table", "package_name": "dbt", "root_path": "/opt/homebrew/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "name": "build_snapshot_staging_table", "macro_sql": "{% macro build_snapshot_staging_table(strategy, sql, target_relation) %}\n    {% set tmp_relation = make_temp_relation(target_relation) %}\n\n    {% set select = snapshot_staging_table(strategy, sql, target_relation) %}\n\n    {% call statement('build_snapshot_staging_relation') %}\n        {{ create_table_as(True, tmp_relation, select) }}\n    {% endcall %}\n\n    {% do return(tmp_relation) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.make_temp_relation", "macro.dbt.snapshot_staging_table", "macro.dbt.statement", "macro.dbt.create_table_as"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1650535969.890801}, "macro.dbt.materialization_snapshot_default": {"unique_id": "macro.dbt.materialization_snapshot_default", "package_name": "dbt", "root_path": "/opt/homebrew/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshots/snapshot.sql", "original_file_path": "macros/materializations/snapshots/snapshot.sql", "name": "materialization_snapshot_default", "macro_sql": "{% materialization snapshot, default %}\n  {%- set config = model['config'] -%}\n\n  {%- set target_table = model.get('alias', model.get('name')) -%}\n\n  {%- set strategy_name = config.get('strategy') -%}\n  {%- set unique_key = config.get('unique_key') %}\n\n  {% if not adapter.check_schema_exists(model.database, model.schema) %}\n    {% do create_schema(model.database, model.schema) %}\n  {% endif %}\n\n  {% set target_relation_exists, target_relation = get_or_create_relation(\n          database=model.database,\n          schema=model.schema,\n          identifier=target_table,\n          type='table') -%}\n\n  {%- if not target_relation.is_table -%}\n    {% do exceptions.relation_wrong_type(target_relation, 'table') %}\n  {%- endif -%}\n\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  {% set strategy_macro = strategy_dispatch(strategy_name) %}\n  {% set strategy = strategy_macro(model, \"snapshotted_data\", \"source_data\", config, target_relation_exists) %}\n\n  {% if not target_relation_exists %}\n\n      {% set build_sql = build_snapshot_table(strategy, model['compiled_sql']) %}\n      {% set final_sql = create_table_as(False, target_relation, build_sql) %}\n\n  {% else %}\n\n      {{ adapter.valid_snapshot_target(target_relation) }}\n\n      {% set staging_table = build_snapshot_staging_table(strategy, sql, target_relation) %}\n\n      -- this may no-op if the database does not require column expansion\n      {% do adapter.expand_target_column_types(from_relation=staging_table,\n                                               to_relation=target_relation) %}\n\n      {% set missing_columns = adapter.get_missing_columns(staging_table, target_relation)\n                                   | rejectattr('name', 'equalto', 'dbt_change_type')\n                                   | rejectattr('name', 'equalto', 'DBT_CHANGE_TYPE')\n                                   | rejectattr('name', 'equalto', 'dbt_unique_key')\n                                   | rejectattr('name', 'equalto', 'DBT_UNIQUE_KEY')\n                                   | list %}\n\n      {% do create_columns(target_relation, missing_columns) %}\n\n      {% set source_columns = adapter.get_columns_in_relation(staging_table)\n                                   | rejectattr('name', 'equalto', 'dbt_change_type')\n                                   | rejectattr('name', 'equalto', 'DBT_CHANGE_TYPE')\n                                   | rejectattr('name', 'equalto', 'dbt_unique_key')\n                                   | rejectattr('name', 'equalto', 'DBT_UNIQUE_KEY')\n                                   | list %}\n\n      {% set quoted_source_columns = [] %}\n      {% for column in source_columns %}\n        {% do quoted_source_columns.append(adapter.quote(column.name)) %}\n      {% endfor %}\n\n      {% set final_sql = snapshot_merge_sql(\n            target = target_relation,\n            source = staging_table,\n            insert_cols = quoted_source_columns\n         )\n      %}\n\n  {% endif %}\n\n  {% call statement('main') %}\n      {{ final_sql }}\n  {% endcall %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  {% if not target_relation_exists %}\n    {% do create_indexes(target_relation) %}\n  {% endif %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  {{ adapter.commit() }}\n\n  {% if staging_table is defined %}\n      {% do post_snapshot(staging_table) %}\n  {% endif %}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{% endmaterialization %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.create_schema", "macro.dbt.get_or_create_relation", "macro.dbt.run_hooks", "macro.dbt.strategy_dispatch", "macro.dbt.build_snapshot_table", "macro.dbt.create_table_as", "macro.dbt.build_snapshot_staging_table", "macro.dbt.create_columns", "macro.dbt.snapshot_merge_sql", "macro.dbt.statement", "macro.dbt.persist_docs", "macro.dbt.create_indexes", "macro.dbt.post_snapshot"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1650535969.909726}, "macro.dbt.materialization_test_default": {"unique_id": "macro.dbt.materialization_test_default", "package_name": "dbt", "root_path": "/opt/homebrew/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/tests/test.sql", "original_file_path": "macros/materializations/tests/test.sql", "name": "materialization_test_default", "macro_sql": "{%- materialization test, default -%}\n\n  {% set relations = [] %}\n\n  {% if should_store_failures() %}\n\n    {% set identifier = model['alias'] %}\n    {% set old_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) %}\n    {% set target_relation = api.Relation.create(\n        identifier=identifier, schema=schema, database=database, type='table') -%} %}\n    \n    {% if old_relation %}\n        {% do adapter.drop_relation(old_relation) %}\n    {% endif %}\n    \n    {% call statement(auto_begin=True) %}\n        {{ create_table_as(False, target_relation, sql) }}\n    {% endcall %}\n    \n    {% do relations.append(target_relation) %}\n  \n    {% set main_sql %}\n        select *\n        from {{ target_relation }}\n    {% endset %}\n    \n    {{ adapter.commit() }}\n  \n  {% else %}\n\n      {% set main_sql = sql %}\n  \n  {% endif %}\n\n  {% set limit = config.get('limit') %}\n  {% set fail_calc = config.get('fail_calc') %}\n  {% set warn_if = config.get('warn_if') %}\n  {% set error_if = config.get('error_if') %}\n\n  {% call statement('main', fetch_result=True) -%}\n\n    {{ get_test_sql(main_sql, fail_calc, warn_if, error_if, limit)}}\n\n  {%- endcall %}\n  \n  {{ return({'relations': relations}) }}\n\n{%- endmaterialization -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.should_store_failures", "macro.dbt.statement", "macro.dbt.create_table_as", "macro.dbt.get_test_sql"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1650535969.923821}, "macro.dbt.get_test_sql": {"unique_id": "macro.dbt.get_test_sql", "package_name": "dbt", "root_path": "/opt/homebrew/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/tests/helpers.sql", "original_file_path": "macros/materializations/tests/helpers.sql", "name": "get_test_sql", "macro_sql": "{% macro get_test_sql(main_sql, fail_calc, warn_if, error_if, limit) -%}\n  {{ adapter.dispatch('get_test_sql', 'dbt')(main_sql, fail_calc, warn_if, error_if, limit) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__get_test_sql"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1650535969.940819}, "macro.dbt.default__get_test_sql": {"unique_id": "macro.dbt.default__get_test_sql", "package_name": "dbt", "root_path": "/opt/homebrew/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/tests/helpers.sql", "original_file_path": "macros/materializations/tests/helpers.sql", "name": "default__get_test_sql", "macro_sql": "{% macro default__get_test_sql(main_sql, fail_calc, warn_if, error_if, limit) -%}\n    select\n      {{ fail_calc }} as failures,\n      {{ fail_calc }} {{ warn_if }} as should_warn,\n      {{ fail_calc }} {{ error_if }} as should_error\n    from (\n      {{ main_sql }}\n      {{ \"limit \" ~ limit if limit != none }}\n    ) dbt_internal_test\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1650535969.9412348}, "macro.dbt.get_where_subquery": {"unique_id": "macro.dbt.get_where_subquery", "package_name": "dbt", "root_path": "/opt/homebrew/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/tests/where_subquery.sql", "original_file_path": "macros/materializations/tests/where_subquery.sql", "name": "get_where_subquery", "macro_sql": "{% macro get_where_subquery(relation) -%}\n    {% do return(adapter.dispatch('get_where_subquery', 'dbt')(relation)) %}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__get_where_subquery"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1650535969.941807}, "macro.dbt.default__get_where_subquery": {"unique_id": "macro.dbt.default__get_where_subquery", "package_name": "dbt", "root_path": "/opt/homebrew/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/tests/where_subquery.sql", "original_file_path": "macros/materializations/tests/where_subquery.sql", "name": "default__get_where_subquery", "macro_sql": "{% macro default__get_where_subquery(relation) -%}\n    {% set where = config.get('where', '') %}\n    {% if where %}\n        {%- set filtered -%}\n            (select * from {{ relation }} where {{ where }}) dbt_subquery\n        {%- endset -%}\n        {% do return(filtered) %}\n    {%- else -%}\n        {% do return(relation) %}\n    {%- endif -%}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1650535969.942315}, "macro.dbt.get_quoted_csv": {"unique_id": "macro.dbt.get_quoted_csv", "package_name": "dbt", "root_path": "/opt/homebrew/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/models/incremental/column_helpers.sql", "original_file_path": "macros/materializations/models/incremental/column_helpers.sql", "name": "get_quoted_csv", "macro_sql": "{% macro get_quoted_csv(column_names) %}\n    \n    {% set quoted = [] %}\n    {% for col in column_names -%}\n        {%- do quoted.append(adapter.quote(col)) -%}\n    {%- endfor %}\n\n    {%- set dest_cols_csv = quoted | join(', ') -%}\n    {{ return(dest_cols_csv) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1650535969.9434261}, "macro.dbt.diff_columns": {"unique_id": "macro.dbt.diff_columns", "package_name": "dbt", "root_path": "/opt/homebrew/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/models/incremental/column_helpers.sql", "original_file_path": "macros/materializations/models/incremental/column_helpers.sql", "name": "diff_columns", "macro_sql": "{% macro diff_columns(source_columns, target_columns) %}\n\n  {% set result = [] %}\n  {% set source_names = source_columns | map(attribute = 'column') | list %}\n  {% set target_names = target_columns | map(attribute = 'column') | list %}\n   \n   {# --check whether the name attribute exists in the target - this does not perform a data type check #}\n   {% for sc in source_columns %}\n     {% if sc.name not in target_names %}\n        {{ result.append(sc) }}\n     {% endif %}\n   {% endfor %}\n  \n  {{ return(result) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1650535969.944163}, "macro.dbt.diff_column_data_types": {"unique_id": "macro.dbt.diff_column_data_types", "package_name": "dbt", "root_path": "/opt/homebrew/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/models/incremental/column_helpers.sql", "original_file_path": "macros/materializations/models/incremental/column_helpers.sql", "name": "diff_column_data_types", "macro_sql": "{% macro diff_column_data_types(source_columns, target_columns) %}\n  \n  {% set result = [] %}\n  {% for sc in source_columns %}\n    {% set tc = target_columns | selectattr(\"name\", \"equalto\", sc.name) | list | first %}\n    {% if tc %}\n      {% if sc.data_type != tc.data_type %}\n        {{ result.append( { 'column_name': tc.name, 'new_type': sc.data_type } ) }} \n      {% endif %}\n    {% endif %}\n  {% endfor %}\n\n  {{ return(result) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1650535969.944982}, "macro.dbt.get_merge_sql": {"unique_id": "macro.dbt.get_merge_sql", "package_name": "dbt", "root_path": "/opt/homebrew/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/models/incremental/merge.sql", "original_file_path": "macros/materializations/models/incremental/merge.sql", "name": "get_merge_sql", "macro_sql": "{% macro get_merge_sql(target, source, unique_key, dest_columns, predicates=none) -%}\n  {{ adapter.dispatch('get_merge_sql', 'dbt')(target, source, unique_key, dest_columns, predicates) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_spark.spark__get_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1650535969.948489}, "macro.dbt.default__get_merge_sql": {"unique_id": "macro.dbt.default__get_merge_sql", "package_name": "dbt", "root_path": "/opt/homebrew/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/models/incremental/merge.sql", "original_file_path": "macros/materializations/models/incremental/merge.sql", "name": "default__get_merge_sql", "macro_sql": "{% macro default__get_merge_sql(target, source, unique_key, dest_columns, predicates) -%}\n    {%- set predicates = [] if predicates is none else [] + predicates -%}\n    {%- set dest_cols_csv = get_quoted_csv(dest_columns | map(attribute=\"name\")) -%}\n    {%- set update_columns = config.get('merge_update_columns', default = dest_columns | map(attribute=\"quoted\") | list) -%}\n    {%- set sql_header = config.get('sql_header', none) -%}\n\n    {% if unique_key %}\n        {% set unique_key_match %}\n            DBT_INTERNAL_SOURCE.{{ unique_key }} = DBT_INTERNAL_DEST.{{ unique_key }}\n        {% endset %}\n        {% do predicates.append(unique_key_match) %}\n    {% else %}\n        {% do predicates.append('FALSE') %}\n    {% endif %}\n\n    {{ sql_header if sql_header is not none }}\n\n    merge into {{ target }} as DBT_INTERNAL_DEST\n        using {{ source }} as DBT_INTERNAL_SOURCE\n        on {{ predicates | join(' and ') }}\n\n    {% if unique_key %}\n    when matched then update set\n        {% for column_name in update_columns -%}\n            {{ column_name }} = DBT_INTERNAL_SOURCE.{{ column_name }}\n            {%- if not loop.last %}, {%- endif %}\n        {%- endfor %}\n    {% endif %}\n\n    when not matched then insert\n        ({{ dest_cols_csv }})\n    values\n        ({{ dest_cols_csv }})\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.get_quoted_csv"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1650535969.950028}, "macro.dbt.get_delete_insert_merge_sql": {"unique_id": "macro.dbt.get_delete_insert_merge_sql", "package_name": "dbt", "root_path": "/opt/homebrew/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/models/incremental/merge.sql", "original_file_path": "macros/materializations/models/incremental/merge.sql", "name": "get_delete_insert_merge_sql", "macro_sql": "{% macro get_delete_insert_merge_sql(target, source, unique_key, dest_columns) -%}\n  {{ adapter.dispatch('get_delete_insert_merge_sql', 'dbt')(target, source, unique_key, dest_columns) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__get_delete_insert_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1650535969.950345}, "macro.dbt.default__get_delete_insert_merge_sql": {"unique_id": "macro.dbt.default__get_delete_insert_merge_sql", "package_name": "dbt", "root_path": "/opt/homebrew/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/models/incremental/merge.sql", "original_file_path": "macros/materializations/models/incremental/merge.sql", "name": "default__get_delete_insert_merge_sql", "macro_sql": "{% macro default__get_delete_insert_merge_sql(target, source, unique_key, dest_columns) -%}\n\n    {%- set dest_cols_csv = get_quoted_csv(dest_columns | map(attribute=\"name\")) -%}\n\n    {% if unique_key is not none %}\n    delete from {{ target }}\n    where ({{ unique_key }}) in (\n        select ({{ unique_key }})\n        from {{ source }}\n    );\n    {% endif %}\n\n    insert into {{ target }} ({{ dest_cols_csv }})\n    (\n        select {{ dest_cols_csv }}\n        from {{ source }}\n    )\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.get_quoted_csv"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1650535969.950906}, "macro.dbt.get_insert_overwrite_merge_sql": {"unique_id": "macro.dbt.get_insert_overwrite_merge_sql", "package_name": "dbt", "root_path": "/opt/homebrew/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/models/incremental/merge.sql", "original_file_path": "macros/materializations/models/incremental/merge.sql", "name": "get_insert_overwrite_merge_sql", "macro_sql": "{% macro get_insert_overwrite_merge_sql(target, source, dest_columns, predicates, include_sql_header=false) -%}\n  {{ adapter.dispatch('get_insert_overwrite_merge_sql', 'dbt')(target, source, dest_columns, predicates, include_sql_header) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__get_insert_overwrite_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1650535969.951259}, "macro.dbt.default__get_insert_overwrite_merge_sql": {"unique_id": "macro.dbt.default__get_insert_overwrite_merge_sql", "package_name": "dbt", "root_path": "/opt/homebrew/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/models/incremental/merge.sql", "original_file_path": "macros/materializations/models/incremental/merge.sql", "name": "default__get_insert_overwrite_merge_sql", "macro_sql": "{% macro default__get_insert_overwrite_merge_sql(target, source, dest_columns, predicates, include_sql_header) -%}\n    {%- set predicates = [] if predicates is none else [] + predicates -%}\n    {%- set dest_cols_csv = get_quoted_csv(dest_columns | map(attribute=\"name\")) -%}\n    {%- set sql_header = config.get('sql_header', none) -%}\n\n    {{ sql_header if sql_header is not none and include_sql_header }}\n\n    merge into {{ target }} as DBT_INTERNAL_DEST\n        using {{ source }} as DBT_INTERNAL_SOURCE\n        on FALSE\n\n    when not matched by source\n        {% if predicates %} and {{ predicates | join(' and ') }} {% endif %}\n        then delete\n\n    when not matched then insert\n        ({{ dest_cols_csv }})\n    values\n        ({{ dest_cols_csv }})\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.get_quoted_csv"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1650535969.9521012}, "macro.dbt.is_incremental": {"unique_id": "macro.dbt.is_incremental", "package_name": "dbt", "root_path": "/opt/homebrew/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/models/incremental/is_incremental.sql", "original_file_path": "macros/materializations/models/incremental/is_incremental.sql", "name": "is_incremental", "macro_sql": "{% macro is_incremental() %}\n    {#-- do not run introspective queries in parsing #}\n    {% if not execute %}\n        {{ return(False) }}\n    {% else %}\n        {% set relation = adapter.get_relation(this.database, this.schema, this.table) %}\n        {{ return(relation is not none\n                  and relation.type == 'table'\n                  and model.config.materialized == 'incremental'\n                  and not should_full_refresh()) }}\n    {% endif %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.should_full_refresh"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1650535969.953016}, "macro.dbt.materialization_incremental_default": {"unique_id": "macro.dbt.materialization_incremental_default", "package_name": "dbt", "root_path": "/opt/homebrew/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/models/incremental/incremental.sql", "original_file_path": "macros/materializations/models/incremental/incremental.sql", "name": "materialization_incremental_default", "macro_sql": "{% materialization incremental, default -%}\n\n  {% set unique_key = config.get('unique_key') %}\n\n  {% set target_relation = this.incorporate(type='table') %}\n  {% set existing_relation = load_relation(this) %}\n  {% set tmp_relation = make_temp_relation(target_relation) %}\n  {%- set full_refresh_mode = (should_full_refresh()) -%}\n\n  {% set on_schema_change = incremental_validate_on_schema_change(config.get('on_schema_change'), default='ignore') %}\n\n  {% set tmp_identifier = model['name'] + '__dbt_tmp' %}\n  {% set backup_identifier = model['name'] + \"__dbt_backup\" %}\n\n  -- the intermediate_ and backup_ relations should not already exist in the database; get_relation\n  -- will return None in that case. Otherwise, we get a relation that we can drop\n  -- later, before we try to use this name for the current operation. This has to happen before\n  -- BEGIN, in a separate transaction\n  {% set preexisting_intermediate_relation = adapter.get_relation(identifier=tmp_identifier, \n                                                                  schema=schema,\n                                                                  database=database) %}                                               \n  {% set preexisting_backup_relation = adapter.get_relation(identifier=backup_identifier,\n                                                            schema=schema,\n                                                            database=database) %}\n  {{ drop_relation_if_exists(preexisting_intermediate_relation) }}\n  {{ drop_relation_if_exists(preexisting_backup_relation) }}\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  -- `BEGIN` happens here:\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  {% set to_drop = [] %}\n\n  {# -- first check whether we want to full refresh for source view or config reasons #}\n  {% set trigger_full_refresh = (full_refresh_mode or existing_relation.is_view) %}\n\n  {% if existing_relation is none %}\n      {% set build_sql = create_table_as(False, target_relation, sql) %}\n{% elif trigger_full_refresh %}\n      {#-- Make sure the backup doesn't exist so we don't encounter issues with the rename below #}\n      {% set tmp_identifier = model['name'] + '__dbt_tmp' %}\n      {% set backup_identifier = model['name'] + '__dbt_backup' %}\n      {% set intermediate_relation = existing_relation.incorporate(path={\"identifier\": tmp_identifier}) %}\n      {% set backup_relation = existing_relation.incorporate(path={\"identifier\": backup_identifier}) %}\n\n      {% set build_sql = create_table_as(False, intermediate_relation, sql) %}\n      {% set need_swap = true %}\n      {% do to_drop.append(backup_relation) %}\n  {% else %}\n    {% do run_query(create_table_as(True, tmp_relation, sql)) %}\n    {% do adapter.expand_target_column_types(\n             from_relation=tmp_relation,\n             to_relation=target_relation) %}\n    {#-- Process schema changes. Returns dict of changes if successful. Use source columns for upserting/merging --#}\n    {% set dest_columns = process_schema_changes(on_schema_change, tmp_relation, existing_relation) %}\n    {% if not dest_columns %}\n      {% set dest_columns = adapter.get_columns_in_relation(existing_relation) %}\n    {% endif %}\n    {% set build_sql = get_delete_insert_merge_sql(target_relation, tmp_relation, unique_key, dest_columns) %}\n  \n  {% endif %}\n\n  {% call statement(\"main\") %}\n      {{ build_sql }}\n  {% endcall %}\n\n  {% if need_swap %} \n      {% do adapter.rename_relation(target_relation, backup_relation) %} \n      {% do adapter.rename_relation(intermediate_relation, target_relation) %} \n  {% endif %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  {% if existing_relation is none or existing_relation.is_view or should_full_refresh() %}\n    {% do create_indexes(target_relation) %}\n  {% endif %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  -- `COMMIT` happens here\n  {% do adapter.commit() %}\n\n  {% for rel in to_drop %}\n      {% do adapter.drop_relation(rel) %}\n  {% endfor %}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{%- endmaterialization %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.load_relation", "macro.dbt.make_temp_relation", "macro.dbt.should_full_refresh", "macro.dbt.incremental_validate_on_schema_change", "macro.dbt.drop_relation_if_exists", "macro.dbt.run_hooks", "macro.dbt.create_table_as", "macro.dbt.run_query", "macro.dbt.process_schema_changes", "macro.dbt.get_delete_insert_merge_sql", "macro.dbt.statement", "macro.dbt.persist_docs", "macro.dbt.create_indexes"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1650535969.959415}, "macro.dbt.incremental_validate_on_schema_change": {"unique_id": "macro.dbt.incremental_validate_on_schema_change", "package_name": "dbt", "root_path": "/opt/homebrew/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/models/incremental/on_schema_change.sql", "original_file_path": "macros/materializations/models/incremental/on_schema_change.sql", "name": "incremental_validate_on_schema_change", "macro_sql": "{% macro incremental_validate_on_schema_change(on_schema_change, default='ignore') %}\n   \n   {% if on_schema_change not in ['sync_all_columns', 'append_new_columns', 'fail', 'ignore'] %}\n     \n     {% set log_message = 'Invalid value for on_schema_change (%s) specified. Setting default value of %s.' % (on_schema_change, default) %}\n     {% do log(log_message) %}\n     \n     {{ return(default) }}\n\n   {% else %}\n\n     {{ return(on_schema_change) }}\n   \n   {% endif %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1650535969.9653819}, "macro.dbt.check_for_schema_changes": {"unique_id": "macro.dbt.check_for_schema_changes", "package_name": "dbt", "root_path": "/opt/homebrew/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/models/incremental/on_schema_change.sql", "original_file_path": "macros/materializations/models/incremental/on_schema_change.sql", "name": "check_for_schema_changes", "macro_sql": "{% macro check_for_schema_changes(source_relation, target_relation) %}\n  \n  {% set schema_changed = False %}\n  \n  {%- set source_columns = adapter.get_columns_in_relation(source_relation) -%}\n  {%- set target_columns = adapter.get_columns_in_relation(target_relation) -%}\n  {%- set source_not_in_target = diff_columns(source_columns, target_columns) -%}\n  {%- set target_not_in_source = diff_columns(target_columns, source_columns) -%}\n\n  {% set new_target_types = diff_column_data_types(source_columns, target_columns) %}\n\n  {% if source_not_in_target != [] %}\n    {% set schema_changed = True %}\n  {% elif target_not_in_source != [] or new_target_types != [] %}\n    {% set schema_changed = True %}\n  {% elif new_target_types != [] %}\n    {% set schema_changed = True %}\n  {% endif %}\n  \n  {% set changes_dict = {\n    'schema_changed': schema_changed,\n    'source_not_in_target': source_not_in_target,\n    'target_not_in_source': target_not_in_source,\n    'source_columns': source_columns,\n    'target_columns': target_columns,\n    'new_target_types': new_target_types\n  } %}\n\n  {% set msg %}\n    In {{ target_relation }}:\n        Schema changed: {{ schema_changed }}\n        Source columns not in target: {{ source_not_in_target }}\n        Target columns not in source: {{ target_not_in_source }}\n        New column types: {{ new_target_types }}\n  {% endset %}\n  \n  {% do log(msg) %}\n\n  {{ return(changes_dict) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.diff_columns", "macro.dbt.diff_column_data_types"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1650535969.96702}, "macro.dbt.sync_column_schemas": {"unique_id": "macro.dbt.sync_column_schemas", "package_name": "dbt", "root_path": "/opt/homebrew/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/models/incremental/on_schema_change.sql", "original_file_path": "macros/materializations/models/incremental/on_schema_change.sql", "name": "sync_column_schemas", "macro_sql": "{% macro sync_column_schemas(on_schema_change, target_relation, schema_changes_dict) %}\n  \n  {%- set add_to_target_arr = schema_changes_dict['source_not_in_target'] -%}\n\n  {%- if on_schema_change == 'append_new_columns'-%}\n     {%- if add_to_target_arr | length > 0 -%}\n       {%- do alter_relation_add_remove_columns(target_relation, add_to_target_arr, none) -%}\n     {%- endif -%}\n  \n  {% elif on_schema_change == 'sync_all_columns' %}\n     {%- set remove_from_target_arr = schema_changes_dict['target_not_in_source'] -%}\n     {%- set new_target_types = schema_changes_dict['new_target_types'] -%}\n  \n     {% if add_to_target_arr | length > 0 or remove_from_target_arr | length > 0 %} \n       {%- do alter_relation_add_remove_columns(target_relation, add_to_target_arr, remove_from_target_arr) -%}\n     {% endif %}\n\n     {% if new_target_types != [] %}\n       {% for ntt in new_target_types %}\n         {% set column_name = ntt['column_name'] %}\n         {% set new_type = ntt['new_type'] %}\n         {% do alter_column_type(target_relation, column_name, new_type) %}\n       {% endfor %}\n     {% endif %}\n  \n  {% endif %}\n\n  {% set schema_change_message %}\n    In {{ target_relation }}:\n        Schema change approach: {{ on_schema_change }}\n        Columns added: {{ add_to_target_arr }}\n        Columns removed: {{ remove_from_target_arr }}\n        Data types changed: {{ new_target_types }}\n  {% endset %}\n  \n  {% do log(schema_change_message) %}\n  \n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.alter_relation_add_remove_columns", "macro.dbt.alter_column_type"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1650535969.968626}, "macro.dbt.process_schema_changes": {"unique_id": "macro.dbt.process_schema_changes", "package_name": "dbt", "root_path": "/opt/homebrew/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/models/incremental/on_schema_change.sql", "original_file_path": "macros/materializations/models/incremental/on_schema_change.sql", "name": "process_schema_changes", "macro_sql": "{% macro process_schema_changes(on_schema_change, source_relation, target_relation) %}\n    \n    {% if on_schema_change == 'ignore' %}\n\n     {{ return({}) }}\n\n    {% else %}\n    \n      {% set schema_changes_dict = check_for_schema_changes(source_relation, target_relation) %}\n      \n      {% if schema_changes_dict['schema_changed'] %}\n    \n        {% if on_schema_change == 'fail' %}\n        \n          {% set fail_msg %}\n              The source and target schemas on this incremental model are out of sync!\n              They can be reconciled in several ways: \n                - set the `on_schema_change` config to either append_new_columns or sync_all_columns, depending on your situation.\n                - Re-run the incremental model with `full_refresh: True` to update the target schema.\n                - update the schema manually and re-run the process.\n          {% endset %}\n          \n          {% do exceptions.raise_compiler_error(fail_msg) %}\n        \n        {# -- unless we ignore, run the sync operation per the config #}\n        {% else %}\n          \n          {% do sync_column_schemas(on_schema_change, target_relation, schema_changes_dict) %}\n        \n        {% endif %}\n      \n      {% endif %}\n\n      {{ return(schema_changes_dict['source_columns']) }}\n    \n    {% endif %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.check_for_schema_changes", "macro.dbt.sync_column_schemas"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1650535969.969589}, "macro.dbt.materialization_table_default": {"unique_id": "macro.dbt.materialization_table_default", "package_name": "dbt", "root_path": "/opt/homebrew/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/models/table/table.sql", "original_file_path": "macros/materializations/models/table/table.sql", "name": "materialization_table_default", "macro_sql": "{% materialization table, default %}\n  {%- set identifier = model['alias'] -%}\n  {%- set tmp_identifier = model['name'] + '__dbt_tmp' -%}\n  {%- set backup_identifier = model['name'] + '__dbt_backup' -%}\n\n  {%- set old_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) -%}\n  {%- set target_relation = api.Relation.create(identifier=identifier,\n                                                schema=schema,\n                                                database=database,\n                                                type='table') -%}\n  {%- set intermediate_relation = api.Relation.create(identifier=tmp_identifier,\n                                                      schema=schema,\n                                                      database=database,\n                                                      type='table') -%}\n  -- the intermediate_relation should not already exist in the database; get_relation\n  -- will return None in that case. Otherwise, we get a relation that we can drop\n  -- later, before we try to use this name for the current operation\n  {%- set preexisting_intermediate_relation = adapter.get_relation(identifier=tmp_identifier, \n                                                                   schema=schema,\n                                                                   database=database) -%}\n  /*\n      See ../view/view.sql for more information about this relation.\n  */\n  {%- set backup_relation_type = 'table' if old_relation is none else old_relation.type -%}\n  {%- set backup_relation = api.Relation.create(identifier=backup_identifier,\n                                                schema=schema,\n                                                database=database,\n                                                type=backup_relation_type) -%}\n  -- as above, the backup_relation should not already exist\n  {%- set preexisting_backup_relation = adapter.get_relation(identifier=backup_identifier,\n                                                             schema=schema,\n                                                             database=database) -%}\n\n\n  -- drop the temp relations if they exist already in the database\n  {{ drop_relation_if_exists(preexisting_intermediate_relation) }}\n  {{ drop_relation_if_exists(preexisting_backup_relation) }}\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  -- `BEGIN` happens here:\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  -- build model\n  {% call statement('main') -%}\n    {{ get_create_table_as_sql(False, intermediate_relation, sql) }}\n  {%- endcall %}\n\n  -- cleanup\n  {% if old_relation is not none %}\n      {{ adapter.rename_relation(old_relation, backup_relation) }}\n  {% endif %}\n\n  {{ adapter.rename_relation(intermediate_relation, target_relation) }}\n\n  {% do create_indexes(target_relation) %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  {% do persist_docs(target_relation, model) %}\n\n  -- `COMMIT` happens here\n  {{ adapter.commit() }}\n\n  -- finally, drop the existing/backup relation after the commit\n  {{ drop_relation_if_exists(backup_relation) }}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n{% endmaterialization %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.drop_relation_if_exists", "macro.dbt.run_hooks", "macro.dbt.statement", "macro.dbt.get_create_table_as_sql", "macro.dbt.create_indexes", "macro.dbt.persist_docs"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1650535969.9745228}, "macro.dbt.get_create_table_as_sql": {"unique_id": "macro.dbt.get_create_table_as_sql", "package_name": "dbt", "root_path": "/opt/homebrew/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/models/table/create_table_as.sql", "original_file_path": "macros/materializations/models/table/create_table_as.sql", "name": "get_create_table_as_sql", "macro_sql": "{% macro get_create_table_as_sql(temporary, relation, sql) -%}\n  {{ adapter.dispatch('get_create_table_as_sql', 'dbt')(temporary, relation, sql) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__get_create_table_as_sql"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1650535969.975219}, "macro.dbt.default__get_create_table_as_sql": {"unique_id": "macro.dbt.default__get_create_table_as_sql", "package_name": "dbt", "root_path": "/opt/homebrew/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/models/table/create_table_as.sql", "original_file_path": "macros/materializations/models/table/create_table_as.sql", "name": "default__get_create_table_as_sql", "macro_sql": "{% macro default__get_create_table_as_sql(temporary, relation, sql) -%}\n  {{ return(create_table_as(temporary, relation, sql)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.create_table_as"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1650535969.975466}, "macro.dbt.create_table_as": {"unique_id": "macro.dbt.create_table_as", "package_name": "dbt", "root_path": "/opt/homebrew/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/models/table/create_table_as.sql", "original_file_path": "macros/materializations/models/table/create_table_as.sql", "name": "create_table_as", "macro_sql": "{% macro create_table_as(temporary, relation, sql) -%}\n  {{ adapter.dispatch('create_table_as', 'dbt')(temporary, relation, sql) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_spark.spark__create_table_as"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1650535969.97574}, "macro.dbt.default__create_table_as": {"unique_id": "macro.dbt.default__create_table_as", "package_name": "dbt", "root_path": "/opt/homebrew/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/models/table/create_table_as.sql", "original_file_path": "macros/materializations/models/table/create_table_as.sql", "name": "default__create_table_as", "macro_sql": "{% macro default__create_table_as(temporary, relation, sql) -%}\n  {%- set sql_header = config.get('sql_header', none) -%}\n  \n  {{ sql_header if sql_header is not none }}\n  \n  create {% if temporary: -%}temporary{%- endif %} table\n    {{ relation.include(database=(not temporary), schema=(not temporary)) }}\n  as (\n    {{ sql }}\n  );\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1650535969.9762921}, "macro.dbt.materialization_view_default": {"unique_id": "macro.dbt.materialization_view_default", "package_name": "dbt", "root_path": "/opt/homebrew/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/models/view/view.sql", "original_file_path": "macros/materializations/models/view/view.sql", "name": "materialization_view_default", "macro_sql": "{%- materialization view, default -%}\n\n  {%- set identifier = model['alias'] -%}\n  {%- set tmp_identifier = model['name'] + '__dbt_tmp' -%}\n  {%- set backup_identifier = model['name'] + '__dbt_backup' -%}\n\n  {%- set old_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) -%}\n  {%- set target_relation = api.Relation.create(identifier=identifier, schema=schema, database=database,\n                                                type='view') -%}\n  {%- set intermediate_relation = api.Relation.create(identifier=tmp_identifier,\n                                                      schema=schema, database=database, type='view') -%}\n  -- the intermediate_relation should not already exist in the database; get_relation\n  -- will return None in that case. Otherwise, we get a relation that we can drop\n  -- later, before we try to use this name for the current operation\n  {%- set preexisting_intermediate_relation = adapter.get_relation(identifier=tmp_identifier, \n                                                                   schema=schema,\n                                                                   database=database) -%}\n  /*\n     This relation (probably) doesn't exist yet. If it does exist, it's a leftover from\n     a previous run, and we're going to try to drop it immediately. At the end of this\n     materialization, we're going to rename the \"old_relation\" to this identifier,\n     and then we're going to drop it. In order to make sure we run the correct one of:\n       - drop view ...\n       - drop table ...\n\n     We need to set the type of this relation to be the type of the old_relation, if it exists,\n     or else \"view\" as a sane default if it does not. Note that if the old_relation does not\n     exist, then there is nothing to move out of the way and subsequentally drop. In that case,\n     this relation will be effectively unused.\n  */\n  {%- set backup_relation_type = 'view' if old_relation is none else old_relation.type -%}\n  {%- set backup_relation = api.Relation.create(identifier=backup_identifier,\n                                                schema=schema, database=database,\n                                                type=backup_relation_type) -%}\n  -- as above, the backup_relation should not already exist\n  {%- set preexisting_backup_relation = adapter.get_relation(identifier=backup_identifier,\n                                                             schema=schema,\n                                                             database=database) -%}\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  -- drop the temp relations if they exist already in the database\n  {{ drop_relation_if_exists(preexisting_intermediate_relation) }}\n  {{ drop_relation_if_exists(preexisting_backup_relation) }}\n\n  -- `BEGIN` happens here:\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  -- build model\n  {% call statement('main') -%}\n    {{ create_view_as(intermediate_relation, sql) }}\n  {%- endcall %}\n\n  -- cleanup\n  -- move the existing view out of the way\n  {% if old_relation is not none %}\n    {{ adapter.rename_relation(old_relation, backup_relation) }}\n  {% endif %}\n  {{ adapter.rename_relation(intermediate_relation, target_relation) }}\n\n  {% do persist_docs(target_relation, model) %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  {{ adapter.commit() }}\n\n  {{ drop_relation_if_exists(backup_relation) }}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{%- endmaterialization -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.run_hooks", "macro.dbt.drop_relation_if_exists", "macro.dbt.statement", "macro.dbt.create_view_as", "macro.dbt.persist_docs"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1650535969.980986}, "macro.dbt.handle_existing_table": {"unique_id": "macro.dbt.handle_existing_table", "package_name": "dbt", "root_path": "/opt/homebrew/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/models/view/helpers.sql", "original_file_path": "macros/materializations/models/view/helpers.sql", "name": "handle_existing_table", "macro_sql": "{% macro handle_existing_table(full_refresh, old_relation) %}\n    {{ adapter.dispatch('handle_existing_table', 'dbt')(full_refresh, old_relation) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__handle_existing_table"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1650535969.981492}, "macro.dbt.default__handle_existing_table": {"unique_id": "macro.dbt.default__handle_existing_table", "package_name": "dbt", "root_path": "/opt/homebrew/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/models/view/helpers.sql", "original_file_path": "macros/materializations/models/view/helpers.sql", "name": "default__handle_existing_table", "macro_sql": "{% macro default__handle_existing_table(full_refresh, old_relation) %}\n    {{ log(\"Dropping relation \" ~ old_relation ~ \" because it is of type \" ~ old_relation.type) }}\n    {{ adapter.drop_relation(old_relation) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1650535969.981788}, "macro.dbt.create_or_replace_view": {"unique_id": "macro.dbt.create_or_replace_view", "package_name": "dbt", "root_path": "/opt/homebrew/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/models/view/create_or_replace_view.sql", "original_file_path": "macros/materializations/models/view/create_or_replace_view.sql", "name": "create_or_replace_view", "macro_sql": "{% macro create_or_replace_view() %}\n  {%- set identifier = model['alias'] -%}\n\n  {%- set old_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) -%}\n\n  {%- set exists_as_view = (old_relation is not none and old_relation.is_view) -%}\n\n  {%- set target_relation = api.Relation.create(\n      identifier=identifier, schema=schema, database=database,\n      type='view') -%}\n\n  {{ run_hooks(pre_hooks) }}\n\n  -- If there's a table with the same name and we weren't told to full refresh,\n  -- that's an error. If we were told to full refresh, drop it. This behavior differs\n  -- for Snowflake and BigQuery, so multiple dispatch is used.\n  {%- if old_relation is not none and old_relation.is_table -%}\n    {{ handle_existing_table(should_full_refresh(), old_relation) }}\n  {%- endif -%}\n\n  -- build model\n  {% call statement('main') -%}\n    {{ get_create_view_as_sql(target_relation, sql) }}\n  {%- endcall %}\n\n  {{ run_hooks(post_hooks) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.run_hooks", "macro.dbt.handle_existing_table", "macro.dbt.should_full_refresh", "macro.dbt.statement", "macro.dbt.get_create_view_as_sql"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1650535969.983451}, "macro.dbt.get_create_view_as_sql": {"unique_id": "macro.dbt.get_create_view_as_sql", "package_name": "dbt", "root_path": "/opt/homebrew/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/models/view/create_view_as.sql", "original_file_path": "macros/materializations/models/view/create_view_as.sql", "name": "get_create_view_as_sql", "macro_sql": "{% macro get_create_view_as_sql(relation, sql) -%}\n  {{ adapter.dispatch('get_create_view_as_sql', 'dbt')(relation, sql) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__get_create_view_as_sql"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1650535969.984013}, "macro.dbt.default__get_create_view_as_sql": {"unique_id": "macro.dbt.default__get_create_view_as_sql", "package_name": "dbt", "root_path": "/opt/homebrew/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/models/view/create_view_as.sql", "original_file_path": "macros/materializations/models/view/create_view_as.sql", "name": "default__get_create_view_as_sql", "macro_sql": "{% macro default__get_create_view_as_sql(relation, sql) -%}\n  {{ return(create_view_as(relation, sql)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.create_view_as"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1650535969.984235}, "macro.dbt.create_view_as": {"unique_id": "macro.dbt.create_view_as", "package_name": "dbt", "root_path": "/opt/homebrew/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/models/view/create_view_as.sql", "original_file_path": "macros/materializations/models/view/create_view_as.sql", "name": "create_view_as", "macro_sql": "{% macro create_view_as(relation, sql) -%}\n  {{ adapter.dispatch('create_view_as', 'dbt')(relation, sql) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_spark.spark__create_view_as"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1650535969.984478}, "macro.dbt.default__create_view_as": {"unique_id": "macro.dbt.default__create_view_as", "package_name": "dbt", "root_path": "/opt/homebrew/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/models/view/create_view_as.sql", "original_file_path": "macros/materializations/models/view/create_view_as.sql", "name": "default__create_view_as", "macro_sql": "{% macro default__create_view_as(relation, sql) -%}\n  {%- set sql_header = config.get('sql_header', none) -%}\n\n  {{ sql_header if sql_header is not none }}\n  create view {{ relation }} as (\n    {{ sql }}\n  );\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1650535969.984826}, "macro.dbt.materialization_seed_default": {"unique_id": "macro.dbt.materialization_seed_default", "package_name": "dbt", "root_path": "/opt/homebrew/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/seeds/seed.sql", "original_file_path": "macros/materializations/seeds/seed.sql", "name": "materialization_seed_default", "macro_sql": "{% materialization seed, default %}\n\n  {%- set identifier = model['alias'] -%}\n  {%- set full_refresh_mode = (should_full_refresh()) -%}\n\n  {%- set old_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) -%}\n\n  {%- set exists_as_table = (old_relation is not none and old_relation.is_table) -%}\n  {%- set exists_as_view = (old_relation is not none and old_relation.is_view) -%}\n\n  {%- set agate_table = load_agate_table() -%}\n  {%- do store_result('agate_table', response='OK', agate_table=agate_table) -%}\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  -- `BEGIN` happens here:\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  -- build model\n  {% set create_table_sql = \"\" %}\n  {% if exists_as_view %}\n    {{ exceptions.raise_compiler_error(\"Cannot seed to '{}', it is a view\".format(old_relation)) }}\n  {% elif exists_as_table %}\n    {% set create_table_sql = reset_csv_table(model, full_refresh_mode, old_relation, agate_table) %}\n  {% else %}\n    {% set create_table_sql = create_csv_table(model, agate_table) %}\n  {% endif %}\n\n  {% set code = 'CREATE' if full_refresh_mode else 'INSERT' %}\n  {% set rows_affected = (agate_table.rows | length) %}\n  {% set sql = load_csv_rows(model, agate_table) %}\n\n  {% call noop_statement('main', code ~ ' ' ~ rows_affected, code, rows_affected) %}\n    {{ create_table_sql }};\n    -- dbt seed --\n    {{ sql }}\n  {% endcall %}\n\n  {% set target_relation = this.incorporate(type='table') %}\n  {% do persist_docs(target_relation, model) %}\n\n  {% if full_refresh_mode or not exists_as_table %}\n    {% do create_indexes(target_relation) %}\n  {% endif %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  -- `COMMIT` happens here\n  {{ adapter.commit() }}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{% endmaterialization %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.should_full_refresh", "macro.dbt.run_hooks", "macro.dbt.reset_csv_table", "macro.dbt.create_csv_table", "macro.dbt.load_csv_rows", "macro.dbt.noop_statement", "macro.dbt.persist_docs", "macro.dbt.create_indexes"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1650535969.988551}, "macro.dbt.create_csv_table": {"unique_id": "macro.dbt.create_csv_table", "package_name": "dbt", "root_path": "/opt/homebrew/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "name": "create_csv_table", "macro_sql": "{% macro create_csv_table(model, agate_table) -%}\n  {{ adapter.dispatch('create_csv_table', 'dbt')(model, agate_table) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_spark.spark__create_csv_table"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1650535969.993551}, "macro.dbt.default__create_csv_table": {"unique_id": "macro.dbt.default__create_csv_table", "package_name": "dbt", "root_path": "/opt/homebrew/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "name": "default__create_csv_table", "macro_sql": "{% macro default__create_csv_table(model, agate_table) %}\n  {%- set column_override = model['config'].get('column_types', {}) -%}\n  {%- set quote_seed_column = model['config'].get('quote_columns', None) -%}\n\n  {% set sql %}\n    create table {{ this.render() }} (\n        {%- for col_name in agate_table.column_names -%}\n            {%- set inferred_type = adapter.convert_type(agate_table, loop.index0) -%}\n            {%- set type = column_override.get(col_name, inferred_type) -%}\n            {%- set column_name = (col_name | string) -%}\n            {{ adapter.quote_seed_column(column_name, quote_seed_column) }} {{ type }} {%- if not loop.last -%}, {%- endif -%}\n        {%- endfor -%}\n    )\n  {% endset %}\n\n  {% call statement('_') -%}\n    {{ sql }}\n  {%- endcall %}\n\n  {{ return(sql) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1650535969.994754}, "macro.dbt.reset_csv_table": {"unique_id": "macro.dbt.reset_csv_table", "package_name": "dbt", "root_path": "/opt/homebrew/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "name": "reset_csv_table", "macro_sql": "{% macro reset_csv_table(model, full_refresh, old_relation, agate_table) -%}\n  {{ adapter.dispatch('reset_csv_table', 'dbt')(model, full_refresh, old_relation, agate_table) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_spark.spark__reset_csv_table"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1650535969.9950662}, "macro.dbt.default__reset_csv_table": {"unique_id": "macro.dbt.default__reset_csv_table", "package_name": "dbt", "root_path": "/opt/homebrew/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "name": "default__reset_csv_table", "macro_sql": "{% macro default__reset_csv_table(model, full_refresh, old_relation, agate_table) %}\n    {% set sql = \"\" %}\n    {% if full_refresh %}\n        {{ adapter.drop_relation(old_relation) }}\n        {% set sql = create_csv_table(model, agate_table) %}\n    {% else %}\n        {{ adapter.truncate_relation(old_relation) }}\n        {% set sql = \"truncate table \" ~ old_relation %}\n    {% endif %}\n\n    {{ return(sql) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.create_csv_table"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1650535969.9957051}, "macro.dbt.get_binding_char": {"unique_id": "macro.dbt.get_binding_char", "package_name": "dbt", "root_path": "/opt/homebrew/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "name": "get_binding_char", "macro_sql": "{% macro get_binding_char() -%}\n  {{ adapter.dispatch('get_binding_char', 'dbt')() }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_spark.spark__get_binding_char"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1650535969.99591}, "macro.dbt.default__get_binding_char": {"unique_id": "macro.dbt.default__get_binding_char", "package_name": "dbt", "root_path": "/opt/homebrew/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "name": "default__get_binding_char", "macro_sql": "{% macro default__get_binding_char() %}\n  {{ return('%s') }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1650535969.9960709}, "macro.dbt.get_batch_size": {"unique_id": "macro.dbt.get_batch_size", "package_name": "dbt", "root_path": "/opt/homebrew/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "name": "get_batch_size", "macro_sql": "{% macro get_batch_size() -%}\n  {{ return(adapter.dispatch('get_batch_size', 'dbt')()) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__get_batch_size"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1650535969.996296}, "macro.dbt.default__get_batch_size": {"unique_id": "macro.dbt.default__get_batch_size", "package_name": "dbt", "root_path": "/opt/homebrew/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "name": "default__get_batch_size", "macro_sql": "{% macro default__get_batch_size() %}\n  {{ return(10000) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1650535969.9964569}, "macro.dbt.get_seed_column_quoted_csv": {"unique_id": "macro.dbt.get_seed_column_quoted_csv", "package_name": "dbt", "root_path": "/opt/homebrew/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "name": "get_seed_column_quoted_csv", "macro_sql": "{% macro get_seed_column_quoted_csv(model, column_names) %}\n  {%- set quote_seed_column = model['config'].get('quote_columns', None) -%}\n    {% set quoted = [] %}\n    {% for col in column_names -%}\n        {%- do quoted.append(adapter.quote_seed_column(col, quote_seed_column)) -%}\n    {%- endfor %}\n\n    {%- set dest_cols_csv = quoted | join(', ') -%}\n    {{ return(dest_cols_csv) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1650535969.997109}, "macro.dbt.load_csv_rows": {"unique_id": "macro.dbt.load_csv_rows", "package_name": "dbt", "root_path": "/opt/homebrew/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "name": "load_csv_rows", "macro_sql": "{% macro load_csv_rows(model, agate_table) -%}\n  {{ adapter.dispatch('load_csv_rows', 'dbt')(model, agate_table) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_spark.spark__load_csv_rows"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1650535969.997638}, "macro.dbt.default__load_csv_rows": {"unique_id": "macro.dbt.default__load_csv_rows", "package_name": "dbt", "root_path": "/opt/homebrew/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "name": "default__load_csv_rows", "macro_sql": "{% macro default__load_csv_rows(model, agate_table) %}\n\n  {% set batch_size = get_batch_size() %}\n\n  {% set cols_sql = get_seed_column_quoted_csv(model, agate_table.column_names) %}\n  {% set bindings = [] %}\n\n  {% set statements = [] %}\n\n  {% for chunk in agate_table.rows | batch(batch_size) %}\n      {% set bindings = [] %}\n\n      {% for row in chunk %}\n          {% do bindings.extend(row) %}\n      {% endfor %}\n\n      {% set sql %}\n          insert into {{ this.render() }} ({{ cols_sql }}) values\n          {% for row in chunk -%}\n              ({%- for column in agate_table.column_names -%}\n                  {{ get_binding_char() }}\n                  {%- if not loop.last%},{%- endif %}\n              {%- endfor -%})\n              {%- if not loop.last%},{%- endif %}\n          {%- endfor %}\n      {% endset %}\n\n      {% do adapter.add_query(sql, bindings=bindings, abridge_sql_log=True) %}\n\n      {% if loop.index0 == 0 %}\n          {% do statements.append(sql) %}\n      {% endif %}\n  {% endfor %}\n\n  {# Return SQL so we can render it out into the compiled files #}\n  {{ return(statements[0]) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.get_batch_size", "macro.dbt.get_seed_column_quoted_csv", "macro.dbt.get_binding_char"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1650535969.999274}, "macro.dbt.generate_alias_name": {"unique_id": "macro.dbt.generate_alias_name", "package_name": "dbt", "root_path": "/opt/homebrew/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/get_custom_name/get_custom_alias.sql", "original_file_path": "macros/get_custom_name/get_custom_alias.sql", "name": "generate_alias_name", "macro_sql": "{% macro generate_alias_name(custom_alias_name=none, node=none) -%}\n    {% do return(adapter.dispatch('generate_alias_name', 'dbt')(custom_alias_name, node)) %}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__generate_alias_name"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1650535969.9999108}, "macro.dbt.default__generate_alias_name": {"unique_id": "macro.dbt.default__generate_alias_name", "package_name": "dbt", "root_path": "/opt/homebrew/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/get_custom_name/get_custom_alias.sql", "original_file_path": "macros/get_custom_name/get_custom_alias.sql", "name": "default__generate_alias_name", "macro_sql": "{% macro default__generate_alias_name(custom_alias_name=none, node=none) -%}\n\n    {%- if custom_alias_name is none -%}\n\n        {{ node.name }}\n\n    {%- else -%}\n\n        {{ custom_alias_name | trim }}\n\n    {%- endif -%}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1650535970.0002172}, "macro.dbt.generate_schema_name": {"unique_id": "macro.dbt.generate_schema_name", "package_name": "dbt", "root_path": "/opt/homebrew/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/get_custom_name/get_custom_schema.sql", "original_file_path": "macros/get_custom_name/get_custom_schema.sql", "name": "generate_schema_name", "macro_sql": "{% macro generate_schema_name(custom_schema_name=none, node=none) -%}\n    {{ return(adapter.dispatch('generate_schema_name', 'dbt')(custom_schema_name, node)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__generate_schema_name"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1650535970.000968}, "macro.dbt.default__generate_schema_name": {"unique_id": "macro.dbt.default__generate_schema_name", "package_name": "dbt", "root_path": "/opt/homebrew/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/get_custom_name/get_custom_schema.sql", "original_file_path": "macros/get_custom_name/get_custom_schema.sql", "name": "default__generate_schema_name", "macro_sql": "{% macro default__generate_schema_name(custom_schema_name, node) -%}\n\n    {%- set default_schema = target.schema -%}\n    {%- if custom_schema_name is none -%}\n\n        {{ default_schema }}\n\n    {%- else -%}\n\n        {{ default_schema }}_{{ custom_schema_name | trim }}\n\n    {%- endif -%}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1650535970.001321}, "macro.dbt.generate_schema_name_for_env": {"unique_id": "macro.dbt.generate_schema_name_for_env", "package_name": "dbt", "root_path": "/opt/homebrew/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/get_custom_name/get_custom_schema.sql", "original_file_path": "macros/get_custom_name/get_custom_schema.sql", "name": "generate_schema_name_for_env", "macro_sql": "{% macro generate_schema_name_for_env(custom_schema_name, node) -%}\n\n    {%- set default_schema = target.schema -%}\n    {%- if target.name == 'prod' and custom_schema_name is not none -%}\n\n        {{ custom_schema_name | trim }}\n\n    {%- else -%}\n\n        {{ default_schema }}\n\n    {%- endif -%}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1650535970.001699}, "macro.dbt.generate_database_name": {"unique_id": "macro.dbt.generate_database_name", "package_name": "dbt", "root_path": "/opt/homebrew/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/get_custom_name/get_custom_database.sql", "original_file_path": "macros/get_custom_name/get_custom_database.sql", "name": "generate_database_name", "macro_sql": "{% macro generate_database_name(custom_database_name=none, node=none) -%}\n    {% do return(adapter.dispatch('generate_database_name', 'dbt')(custom_database_name, node)) %}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_spark.spark__generate_database_name"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1650535970.002433}, "macro.dbt.default__generate_database_name": {"unique_id": "macro.dbt.default__generate_database_name", "package_name": "dbt", "root_path": "/opt/homebrew/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/get_custom_name/get_custom_database.sql", "original_file_path": "macros/get_custom_name/get_custom_database.sql", "name": "default__generate_database_name", "macro_sql": "{% macro default__generate_database_name(custom_database_name=none, node=none) -%}\n    {%- set default_database = target.database -%}\n    {%- if custom_database_name is none -%}\n\n        {{ default_database }}\n\n    {%- else -%}\n\n        {{ custom_database_name }}\n\n    {%- endif -%}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1650535970.0028338}, "macro.dbt.default__test_relationships": {"unique_id": "macro.dbt.default__test_relationships", "package_name": "dbt", "root_path": "/opt/homebrew/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/generic_test_sql/relationships.sql", "original_file_path": "macros/generic_test_sql/relationships.sql", "name": "default__test_relationships", "macro_sql": "{% macro default__test_relationships(model, column_name, to, field) %}\n\nwith child as (\n    select {{ column_name }} as from_field\n    from {{ model }}\n    where {{ column_name }} is not null\n),\n\nparent as (\n    select {{ field }} as to_field\n    from {{ to }}\n)\n\nselect\n    from_field\n\nfrom child\nleft join parent\n    on child.from_field = parent.to_field\n\nwhere parent.to_field is null\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1650535970.003545}, "macro.dbt.default__test_not_null": {"unique_id": "macro.dbt.default__test_not_null", "package_name": "dbt", "root_path": "/opt/homebrew/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/generic_test_sql/not_null.sql", "original_file_path": "macros/generic_test_sql/not_null.sql", "name": "default__test_not_null", "macro_sql": "{% macro default__test_not_null(model, column_name) %}\n\nselect *\nfrom {{ model }}\nwhere {{ column_name }} is null\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1650535970.003912}, "macro.dbt.default__test_unique": {"unique_id": "macro.dbt.default__test_unique", "package_name": "dbt", "root_path": "/opt/homebrew/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/generic_test_sql/unique.sql", "original_file_path": "macros/generic_test_sql/unique.sql", "name": "default__test_unique", "macro_sql": "{% macro default__test_unique(model, column_name) %}\n\nselect\n    {{ column_name }} as unique_field,\n    count(*) as n_records\n\nfrom {{ model }}\nwhere {{ column_name }} is not null\ngroup by {{ column_name }}\nhaving count(*) > 1\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1650535970.0043478}, "macro.dbt.default__test_accepted_values": {"unique_id": "macro.dbt.default__test_accepted_values", "package_name": "dbt", "root_path": "/opt/homebrew/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/generic_test_sql/accepted_values.sql", "original_file_path": "macros/generic_test_sql/accepted_values.sql", "name": "default__test_accepted_values", "macro_sql": "{% macro default__test_accepted_values(model, column_name, values, quote=True) %}\n\nwith all_values as (\n\n    select\n        {{ column_name }} as value_field,\n        count(*) as n_records\n\n    from {{ model }}\n    group by {{ column_name }}\n\n)\n\nselect *\nfrom all_values\nwhere value_field not in (\n    {% for value in values -%}\n        {% if quote -%}\n        '{{ value }}'\n        {%- else -%}\n        {{ value }}\n        {%- endif -%}\n        {%- if not loop.last -%},{%- endif %}\n    {%- endfor %}\n)\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1650535970.0051992}, "macro.dbt.statement": {"unique_id": "macro.dbt.statement", "package_name": "dbt", "root_path": "/opt/homebrew/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/etc/statement.sql", "original_file_path": "macros/etc/statement.sql", "name": "statement", "macro_sql": "{% macro statement(name=None, fetch_result=False, auto_begin=True) -%}\n  {%- if execute: -%}\n    {%- set sql = caller() -%}\n\n    {%- if name == 'main' -%}\n      {{ log('Writing runtime SQL for node \"{}\"'.format(model['unique_id'])) }}\n      {{ write(sql) }}\n    {%- endif -%}\n\n    {%- set res, table = adapter.execute(sql, auto_begin=auto_begin, fetch=fetch_result) -%}\n    {%- if name is not none -%}\n      {{ store_result(name, response=res, agate_table=table) }}\n    {%- endif -%}\n\n  {%- endif -%}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1650535970.006722}, "macro.dbt.noop_statement": {"unique_id": "macro.dbt.noop_statement", "package_name": "dbt", "root_path": "/opt/homebrew/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/etc/statement.sql", "original_file_path": "macros/etc/statement.sql", "name": "noop_statement", "macro_sql": "{% macro noop_statement(name=None, message=None, code=None, rows_affected=None, res=None) -%}\n  {%- set sql = caller() -%}\n\n  {%- if name == 'main' -%}\n    {{ log('Writing runtime SQL for node \"{}\"'.format(model['unique_id'])) }}\n    {{ write(sql) }}\n  {%- endif -%}\n\n  {%- if name is not none -%}\n    {{ store_raw_result(name, message=message, code=code, rows_affected=rows_affected, agate_table=res) }}\n  {%- endif -%}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1650535970.007508}, "macro.dbt.run_query": {"unique_id": "macro.dbt.run_query", "package_name": "dbt", "root_path": "/opt/homebrew/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/etc/statement.sql", "original_file_path": "macros/etc/statement.sql", "name": "run_query", "macro_sql": "{% macro run_query(sql) %}\n  {% call statement(\"run_query_statement\", fetch_result=true, auto_begin=false) %}\n    {{ sql }}\n  {% endcall %}\n\n  {% do return(load_result(\"run_query_statement\").table) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1650535970.007908}, "macro.dbt.convert_datetime": {"unique_id": "macro.dbt.convert_datetime", "package_name": "dbt", "root_path": "/opt/homebrew/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/etc/datetime.sql", "original_file_path": "macros/etc/datetime.sql", "name": "convert_datetime", "macro_sql": "{% macro convert_datetime(date_str, date_fmt) %}\n\n  {% set error_msg -%}\n      The provided partition date '{{ date_str }}' does not match the expected format '{{ date_fmt }}'\n  {%- endset %}\n\n  {% set res = try_or_compiler_error(error_msg, modules.datetime.datetime.strptime, date_str.strip(), date_fmt) %}\n  {{ return(res) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1650535970.010161}, "macro.dbt.dates_in_range": {"unique_id": "macro.dbt.dates_in_range", "package_name": "dbt", "root_path": "/opt/homebrew/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/etc/datetime.sql", "original_file_path": "macros/etc/datetime.sql", "name": "dates_in_range", "macro_sql": "{% macro dates_in_range(start_date_str, end_date_str=none, in_fmt=\"%Y%m%d\", out_fmt=\"%Y%m%d\") %}\n    {% set end_date_str = start_date_str if end_date_str is none else end_date_str %}\n\n    {% set start_date = convert_datetime(start_date_str, in_fmt) %}\n    {% set end_date = convert_datetime(end_date_str, in_fmt) %}\n\n    {% set day_count = (end_date - start_date).days %}\n    {% if day_count < 0 %}\n        {% set msg -%}\n            Partiton start date is after the end date ({{ start_date }}, {{ end_date }})\n        {%- endset %}\n\n        {{ exceptions.raise_compiler_error(msg, model) }}\n    {% endif %}\n\n    {% set date_list = [] %}\n    {% for i in range(0, day_count + 1) %}\n        {% set the_date = (modules.datetime.timedelta(days=i) + start_date) %}\n        {% if not out_fmt %}\n            {% set _ = date_list.append(the_date) %}\n        {% else %}\n            {% set _ = date_list.append(the_date.strftime(out_fmt)) %}\n        {% endif %}\n    {% endfor %}\n\n    {{ return(date_list) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.convert_datetime"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1650535970.0118752}, "macro.dbt.partition_range": {"unique_id": "macro.dbt.partition_range", "package_name": "dbt", "root_path": "/opt/homebrew/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/etc/datetime.sql", "original_file_path": "macros/etc/datetime.sql", "name": "partition_range", "macro_sql": "{% macro partition_range(raw_partition_date, date_fmt='%Y%m%d') %}\n    {% set partition_range = (raw_partition_date | string).split(\",\") %}\n\n    {% if (partition_range | length) == 1 %}\n      {% set start_date = partition_range[0] %}\n      {% set end_date = none %}\n    {% elif (partition_range | length) == 2 %}\n      {% set start_date = partition_range[0] %}\n      {% set end_date = partition_range[1] %}\n    {% else %}\n      {{ exceptions.raise_compiler_error(\"Invalid partition time. Expected format: {Start Date}[,{End Date}]. Got: \" ~ raw_partition_date) }}\n    {% endif %}\n\n    {{ return(dates_in_range(start_date, end_date, in_fmt=date_fmt)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.dates_in_range"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1650535970.013099}, "macro.dbt.py_current_timestring": {"unique_id": "macro.dbt.py_current_timestring", "package_name": "dbt", "root_path": "/opt/homebrew/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/etc/datetime.sql", "original_file_path": "macros/etc/datetime.sql", "name": "py_current_timestring", "macro_sql": "{% macro py_current_timestring() %}\n    {% set dt = modules.datetime.datetime.now() %}\n    {% do return(dt.strftime(\"%Y%m%d%H%M%S%f\")) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1650535970.013477}, "macro.dbt.create_schema": {"unique_id": "macro.dbt.create_schema", "package_name": "dbt", "root_path": "/opt/homebrew/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/schema.sql", "original_file_path": "macros/adapters/schema.sql", "name": "create_schema", "macro_sql": "{% macro create_schema(relation) -%}\n  {{ adapter.dispatch('create_schema', 'dbt')(relation) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_spark.spark__create_schema"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1650535970.014186}, "macro.dbt.default__create_schema": {"unique_id": "macro.dbt.default__create_schema", "package_name": "dbt", "root_path": "/opt/homebrew/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/schema.sql", "original_file_path": "macros/adapters/schema.sql", "name": "default__create_schema", "macro_sql": "{% macro default__create_schema(relation) -%}\n  {%- call statement('create_schema') -%}\n    create schema if not exists {{ relation.without_identifier() }}\n  {% endcall %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1650535970.014441}, "macro.dbt.drop_schema": {"unique_id": "macro.dbt.drop_schema", "package_name": "dbt", "root_path": "/opt/homebrew/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/schema.sql", "original_file_path": "macros/adapters/schema.sql", "name": "drop_schema", "macro_sql": "{% macro drop_schema(relation) -%}\n  {{ adapter.dispatch('drop_schema', 'dbt')(relation) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_spark.spark__drop_schema"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1650535970.014665}, "macro.dbt.default__drop_schema": {"unique_id": "macro.dbt.default__drop_schema", "package_name": "dbt", "root_path": "/opt/homebrew/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/schema.sql", "original_file_path": "macros/adapters/schema.sql", "name": "default__drop_schema", "macro_sql": "{% macro default__drop_schema(relation) -%}\n  {%- call statement('drop_schema') -%}\n    drop schema if exists {{ relation.without_identifier() }} cascade\n  {% endcall %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1650535970.0149162}, "macro.dbt.get_create_index_sql": {"unique_id": "macro.dbt.get_create_index_sql", "package_name": "dbt", "root_path": "/opt/homebrew/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/indexes.sql", "original_file_path": "macros/adapters/indexes.sql", "name": "get_create_index_sql", "macro_sql": "{% macro get_create_index_sql(relation, index_dict) -%}\n  {{ return(adapter.dispatch('get_create_index_sql', 'dbt')(relation, index_dict)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__get_create_index_sql"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1650535970.01562}, "macro.dbt.default__get_create_index_sql": {"unique_id": "macro.dbt.default__get_create_index_sql", "package_name": "dbt", "root_path": "/opt/homebrew/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/indexes.sql", "original_file_path": "macros/adapters/indexes.sql", "name": "default__get_create_index_sql", "macro_sql": "{% macro default__get_create_index_sql(relation, index_dict) -%}\n  {% do return(None) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1650535970.015808}, "macro.dbt.create_indexes": {"unique_id": "macro.dbt.create_indexes", "package_name": "dbt", "root_path": "/opt/homebrew/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/indexes.sql", "original_file_path": "macros/adapters/indexes.sql", "name": "create_indexes", "macro_sql": "{% macro create_indexes(relation) -%}\n  {{ adapter.dispatch('create_indexes', 'dbt')(relation) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__create_indexes"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1650535970.016029}, "macro.dbt.default__create_indexes": {"unique_id": "macro.dbt.default__create_indexes", "package_name": "dbt", "root_path": "/opt/homebrew/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/indexes.sql", "original_file_path": "macros/adapters/indexes.sql", "name": "default__create_indexes", "macro_sql": "{% macro default__create_indexes(relation) -%}\n  {%- set _indexes = config.get('indexes', default=[]) -%}\n\n  {% for _index_dict in _indexes %}\n    {% set create_index_sql = get_create_index_sql(relation, _index_dict) %}\n    {% if create_index_sql %}\n      {% do run_query(create_index_sql) %}\n    {% endif %}\n  {% endfor %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.get_create_index_sql", "macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1650535970.016581}, "macro.dbt.make_temp_relation": {"unique_id": "macro.dbt.make_temp_relation", "package_name": "dbt", "root_path": "/opt/homebrew/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "name": "make_temp_relation", "macro_sql": "{% macro make_temp_relation(base_relation, suffix='__dbt_tmp') %}\n  {{ return(adapter.dispatch('make_temp_relation', 'dbt')(base_relation, suffix))}}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_spark.spark__make_temp_relation"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1650535970.0186439}, "macro.dbt.default__make_temp_relation": {"unique_id": "macro.dbt.default__make_temp_relation", "package_name": "dbt", "root_path": "/opt/homebrew/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "name": "default__make_temp_relation", "macro_sql": "{% macro default__make_temp_relation(base_relation, suffix) %}\n    {% set tmp_identifier = base_relation.identifier ~ suffix %}\n    {% set tmp_relation = base_relation.incorporate(\n                                path={\"identifier\": tmp_identifier}) -%}\n\n    {% do return(tmp_relation) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1650535970.0190651}, "macro.dbt.drop_relation": {"unique_id": "macro.dbt.drop_relation", "package_name": "dbt", "root_path": "/opt/homebrew/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "name": "drop_relation", "macro_sql": "{% macro drop_relation(relation) -%}\n  {{ return(adapter.dispatch('drop_relation', 'dbt')(relation)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_spark.spark__drop_relation"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1650535970.019316}, "macro.dbt.default__drop_relation": {"unique_id": "macro.dbt.default__drop_relation", "package_name": "dbt", "root_path": "/opt/homebrew/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "name": "default__drop_relation", "macro_sql": "{% macro default__drop_relation(relation) -%}\n  {% call statement('drop_relation', auto_begin=False) -%}\n    drop {{ relation.type }} if exists {{ relation }} cascade\n  {%- endcall %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1650535970.019598}, "macro.dbt.truncate_relation": {"unique_id": "macro.dbt.truncate_relation", "package_name": "dbt", "root_path": "/opt/homebrew/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "name": "truncate_relation", "macro_sql": "{% macro truncate_relation(relation) -%}\n  {{ return(adapter.dispatch('truncate_relation', 'dbt')(relation)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__truncate_relation"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1650535970.019845}, "macro.dbt.default__truncate_relation": {"unique_id": "macro.dbt.default__truncate_relation", "package_name": "dbt", "root_path": "/opt/homebrew/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "name": "default__truncate_relation", "macro_sql": "{% macro default__truncate_relation(relation) -%}\n  {% call statement('truncate_relation') -%}\n    truncate table {{ relation }}\n  {%- endcall %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1650535970.020055}, "macro.dbt.rename_relation": {"unique_id": "macro.dbt.rename_relation", "package_name": "dbt", "root_path": "/opt/homebrew/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "name": "rename_relation", "macro_sql": "{% macro rename_relation(from_relation, to_relation) -%}\n  {{ return(adapter.dispatch('rename_relation', 'dbt')(from_relation, to_relation)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_spark.spark__rename_relation"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1650535970.020329}, "macro.dbt.default__rename_relation": {"unique_id": "macro.dbt.default__rename_relation", "package_name": "dbt", "root_path": "/opt/homebrew/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "name": "default__rename_relation", "macro_sql": "{% macro default__rename_relation(from_relation, to_relation) -%}\n  {% set target_name = adapter.quote_as_configured(to_relation.identifier, 'identifier') %}\n  {% call statement('rename_relation') -%}\n    alter table {{ from_relation }} rename to {{ target_name }}\n  {%- endcall %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1650535970.020712}, "macro.dbt.get_or_create_relation": {"unique_id": "macro.dbt.get_or_create_relation", "package_name": "dbt", "root_path": "/opt/homebrew/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "name": "get_or_create_relation", "macro_sql": "{% macro get_or_create_relation(database, schema, identifier, type) -%}\n  {{ return(adapter.dispatch('get_or_create_relation', 'dbt')(database, schema, identifier, type)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__get_or_create_relation"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1650535970.021045}, "macro.dbt.default__get_or_create_relation": {"unique_id": "macro.dbt.default__get_or_create_relation", "package_name": "dbt", "root_path": "/opt/homebrew/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "name": "default__get_or_create_relation", "macro_sql": "{% macro default__get_or_create_relation(database, schema, identifier, type) %}\n  {%- set target_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) %}\n\n  {% if target_relation %}\n    {% do return([true, target_relation]) %}\n  {% endif %}\n\n  {%- set new_relation = api.Relation.create(\n      database=database,\n      schema=schema,\n      identifier=identifier,\n      type=type\n  ) -%}\n  {% do return([false, new_relation]) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1650535970.021892}, "macro.dbt.load_relation": {"unique_id": "macro.dbt.load_relation", "package_name": "dbt", "root_path": "/opt/homebrew/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "name": "load_relation", "macro_sql": "{% macro load_relation(relation) %}\n  {% do return(adapter.get_relation(\n    database=relation.database,\n    schema=relation.schema,\n    identifier=relation.identifier\n  )) -%}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1650535970.022204}, "macro.dbt.drop_relation_if_exists": {"unique_id": "macro.dbt.drop_relation_if_exists", "package_name": "dbt", "root_path": "/opt/homebrew/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "name": "drop_relation_if_exists", "macro_sql": "{% macro drop_relation_if_exists(relation) %}\n  {% if relation is not none %}\n    {{ adapter.drop_relation(relation) }}\n  {% endif %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1650535970.022472}, "macro.dbt.current_timestamp": {"unique_id": "macro.dbt.current_timestamp", "package_name": "dbt", "root_path": "/opt/homebrew/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/freshness.sql", "original_file_path": "macros/adapters/freshness.sql", "name": "current_timestamp", "macro_sql": "{% macro current_timestamp() -%}\n  {{ adapter.dispatch('current_timestamp', 'dbt')() }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_spark.spark__current_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1650535970.023156}, "macro.dbt.default__current_timestamp": {"unique_id": "macro.dbt.default__current_timestamp", "package_name": "dbt", "root_path": "/opt/homebrew/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/freshness.sql", "original_file_path": "macros/adapters/freshness.sql", "name": "default__current_timestamp", "macro_sql": "{% macro default__current_timestamp() -%}\n  {{ exceptions.raise_not_implemented(\n    'current_timestamp macro not implemented for adapter '+adapter.type()) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1650535970.023351}, "macro.dbt.collect_freshness": {"unique_id": "macro.dbt.collect_freshness", "package_name": "dbt", "root_path": "/opt/homebrew/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/freshness.sql", "original_file_path": "macros/adapters/freshness.sql", "name": "collect_freshness", "macro_sql": "{% macro collect_freshness(source, loaded_at_field, filter) %}\n  {{ return(adapter.dispatch('collect_freshness', 'dbt')(source, loaded_at_field, filter))}}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__collect_freshness"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1650535970.023655}, "macro.dbt.default__collect_freshness": {"unique_id": "macro.dbt.default__collect_freshness", "package_name": "dbt", "root_path": "/opt/homebrew/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/freshness.sql", "original_file_path": "macros/adapters/freshness.sql", "name": "default__collect_freshness", "macro_sql": "{% macro default__collect_freshness(source, loaded_at_field, filter) %}\n  {% call statement('collect_freshness', fetch_result=True, auto_begin=False) -%}\n    select\n      max({{ loaded_at_field }}) as max_loaded_at,\n      {{ current_timestamp() }} as snapshotted_at\n    from {{ source }}\n    {% if filter %}\n    where {{ filter }}\n    {% endif %}\n  {% endcall %}\n  {{ return(load_result('collect_freshness').table) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt_utils.current_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1650535970.024211}, "macro.dbt.alter_column_comment": {"unique_id": "macro.dbt.alter_column_comment", "package_name": "dbt", "root_path": "/opt/homebrew/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/persist_docs.sql", "original_file_path": "macros/adapters/persist_docs.sql", "name": "alter_column_comment", "macro_sql": "{% macro alter_column_comment(relation, column_dict) -%}\n  {{ return(adapter.dispatch('alter_column_comment', 'dbt')(relation, column_dict)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_spark.spark__alter_column_comment"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1650535970.025127}, "macro.dbt.default__alter_column_comment": {"unique_id": "macro.dbt.default__alter_column_comment", "package_name": "dbt", "root_path": "/opt/homebrew/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/persist_docs.sql", "original_file_path": "macros/adapters/persist_docs.sql", "name": "default__alter_column_comment", "macro_sql": "{% macro default__alter_column_comment(relation, column_dict) -%}\n  {{ exceptions.raise_not_implemented(\n    'alter_column_comment macro not implemented for adapter '+adapter.type()) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1650535970.025357}, "macro.dbt.alter_relation_comment": {"unique_id": "macro.dbt.alter_relation_comment", "package_name": "dbt", "root_path": "/opt/homebrew/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/persist_docs.sql", "original_file_path": "macros/adapters/persist_docs.sql", "name": "alter_relation_comment", "macro_sql": "{% macro alter_relation_comment(relation, relation_comment) -%}\n  {{ return(adapter.dispatch('alter_relation_comment', 'dbt')(relation, relation_comment)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__alter_relation_comment"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1650535970.025632}, "macro.dbt.default__alter_relation_comment": {"unique_id": "macro.dbt.default__alter_relation_comment", "package_name": "dbt", "root_path": "/opt/homebrew/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/persist_docs.sql", "original_file_path": "macros/adapters/persist_docs.sql", "name": "default__alter_relation_comment", "macro_sql": "{% macro default__alter_relation_comment(relation, relation_comment) -%}\n  {{ exceptions.raise_not_implemented(\n    'alter_relation_comment macro not implemented for adapter '+adapter.type()) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1650535970.025855}, "macro.dbt.persist_docs": {"unique_id": "macro.dbt.persist_docs", "package_name": "dbt", "root_path": "/opt/homebrew/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/persist_docs.sql", "original_file_path": "macros/adapters/persist_docs.sql", "name": "persist_docs", "macro_sql": "{% macro persist_docs(relation, model, for_relation=true, for_columns=true) -%}\n  {{ return(adapter.dispatch('persist_docs', 'dbt')(relation, model, for_relation, for_columns)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_spark.spark__persist_docs"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1650535970.026216}, "macro.dbt.default__persist_docs": {"unique_id": "macro.dbt.default__persist_docs", "package_name": "dbt", "root_path": "/opt/homebrew/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/persist_docs.sql", "original_file_path": "macros/adapters/persist_docs.sql", "name": "default__persist_docs", "macro_sql": "{% macro default__persist_docs(relation, model, for_relation, for_columns) -%}\n  {% if for_relation and config.persist_relation_docs() and model.description %}\n    {% do run_query(alter_relation_comment(relation, model.description)) %}\n  {% endif %}\n\n  {% if for_columns and config.persist_column_docs() and model.columns %}\n    {% do run_query(alter_column_comment(relation, model.columns)) %}\n  {% endif %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.run_query", "macro.dbt.alter_relation_comment", "macro.dbt.alter_column_comment"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1650535970.02687}, "macro.dbt.get_catalog": {"unique_id": "macro.dbt.get_catalog", "package_name": "dbt", "root_path": "/opt/homebrew/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "name": "get_catalog", "macro_sql": "{% macro get_catalog(information_schema, schemas) -%}\n  {{ return(adapter.dispatch('get_catalog', 'dbt')(information_schema, schemas)) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__get_catalog"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1650535970.0287511}, "macro.dbt.default__get_catalog": {"unique_id": "macro.dbt.default__get_catalog", "package_name": "dbt", "root_path": "/opt/homebrew/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "name": "default__get_catalog", "macro_sql": "{% macro default__get_catalog(information_schema, schemas) -%}\n\n  {% set typename = adapter.type() %}\n  {% set msg -%}\n    get_catalog not implemented for {{ typename }}\n  {%- endset %}\n\n  {{ exceptions.raise_compiler_error(msg) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1650535970.029106}, "macro.dbt.information_schema_name": {"unique_id": "macro.dbt.information_schema_name", "package_name": "dbt", "root_path": "/opt/homebrew/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "name": "information_schema_name", "macro_sql": "{% macro information_schema_name(database) %}\n  {{ return(adapter.dispatch('information_schema_name', 'dbt')(database)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__information_schema_name"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1650535970.029352}, "macro.dbt.default__information_schema_name": {"unique_id": "macro.dbt.default__information_schema_name", "package_name": "dbt", "root_path": "/opt/homebrew/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "name": "default__information_schema_name", "macro_sql": "{% macro default__information_schema_name(database) -%}\n  {%- if database -%}\n    {{ database }}.INFORMATION_SCHEMA\n  {%- else -%}\n    INFORMATION_SCHEMA\n  {%- endif -%}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1650535970.029554}, "macro.dbt.list_schemas": {"unique_id": "macro.dbt.list_schemas", "package_name": "dbt", "root_path": "/opt/homebrew/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "name": "list_schemas", "macro_sql": "{% macro list_schemas(database) -%}\n  {{ return(adapter.dispatch('list_schemas', 'dbt')(database)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_spark.spark__list_schemas"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1650535970.029797}, "macro.dbt.default__list_schemas": {"unique_id": "macro.dbt.default__list_schemas", "package_name": "dbt", "root_path": "/opt/homebrew/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "name": "default__list_schemas", "macro_sql": "{% macro default__list_schemas(database) -%}\n  {% set sql %}\n    select distinct schema_name\n    from {{ information_schema_name(database) }}.SCHEMATA\n    where catalog_name ilike '{{ database }}'\n  {% endset %}\n  {{ return(run_query(sql)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.information_schema_name", "macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1650535970.030129}, "macro.dbt.check_schema_exists": {"unique_id": "macro.dbt.check_schema_exists", "package_name": "dbt", "root_path": "/opt/homebrew/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "name": "check_schema_exists", "macro_sql": "{% macro check_schema_exists(information_schema, schema) -%}\n  {{ return(adapter.dispatch('check_schema_exists', 'dbt')(information_schema, schema)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__check_schema_exists"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1650535970.03041}, "macro.dbt.default__check_schema_exists": {"unique_id": "macro.dbt.default__check_schema_exists", "package_name": "dbt", "root_path": "/opt/homebrew/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "name": "default__check_schema_exists", "macro_sql": "{% macro default__check_schema_exists(information_schema, schema) -%}\n  {% set sql -%}\n        select count(*)\n        from {{ information_schema.replace(information_schema_view='SCHEMATA') }}\n        where catalog_name='{{ information_schema.database }}'\n          and schema_name='{{ schema }}'\n  {%- endset %}\n  {{ return(run_query(sql)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.replace", "macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1650535970.030904}, "macro.dbt.list_relations_without_caching": {"unique_id": "macro.dbt.list_relations_without_caching", "package_name": "dbt", "root_path": "/opt/homebrew/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "name": "list_relations_without_caching", "macro_sql": "{% macro list_relations_without_caching(schema_relation) %}\n  {{ return(adapter.dispatch('list_relations_without_caching', 'dbt')(schema_relation)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_spark.spark__list_relations_without_caching"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1650535970.031152}, "macro.dbt.default__list_relations_without_caching": {"unique_id": "macro.dbt.default__list_relations_without_caching", "package_name": "dbt", "root_path": "/opt/homebrew/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "name": "default__list_relations_without_caching", "macro_sql": "{% macro default__list_relations_without_caching(schema_relation) %}\n  {{ exceptions.raise_not_implemented(\n    'list_relations_without_caching macro not implemented for adapter '+adapter.type()) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1650535970.031363}, "macro.dbt.get_columns_in_relation": {"unique_id": "macro.dbt.get_columns_in_relation", "package_name": "dbt", "root_path": "/opt/homebrew/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "name": "get_columns_in_relation", "macro_sql": "{% macro get_columns_in_relation(relation) -%}\n  {{ return(adapter.dispatch('get_columns_in_relation', 'dbt')(relation)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_spark.spark__get_columns_in_relation"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1650535970.0336041}, "macro.dbt.default__get_columns_in_relation": {"unique_id": "macro.dbt.default__get_columns_in_relation", "package_name": "dbt", "root_path": "/opt/homebrew/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "name": "default__get_columns_in_relation", "macro_sql": "{% macro default__get_columns_in_relation(relation) -%}\n  {{ exceptions.raise_not_implemented(\n    'get_columns_in_relation macro not implemented for adapter '+adapter.type()) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1650535970.0338209}, "macro.dbt.sql_convert_columns_in_relation": {"unique_id": "macro.dbt.sql_convert_columns_in_relation", "package_name": "dbt", "root_path": "/opt/homebrew/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "name": "sql_convert_columns_in_relation", "macro_sql": "{% macro sql_convert_columns_in_relation(table) -%}\n  {% set columns = [] %}\n  {% for row in table %}\n    {% do columns.append(api.Column(*row)) %}\n  {% endfor %}\n  {{ return(columns) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1650535970.03424}, "macro.dbt.get_columns_in_query": {"unique_id": "macro.dbt.get_columns_in_query", "package_name": "dbt", "root_path": "/opt/homebrew/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "name": "get_columns_in_query", "macro_sql": "{% macro get_columns_in_query(select_sql) -%}\n  {{ return(adapter.dispatch('get_columns_in_query', 'dbt')(select_sql)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__get_columns_in_query"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1650535970.0344892}, "macro.dbt.default__get_columns_in_query": {"unique_id": "macro.dbt.default__get_columns_in_query", "package_name": "dbt", "root_path": "/opt/homebrew/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "name": "default__get_columns_in_query", "macro_sql": "{% macro default__get_columns_in_query(select_sql) %}\n    {% call statement('get_columns_in_query', fetch_result=True, auto_begin=False) -%}\n        select * from (\n            {{ select_sql }}\n        ) as __dbt_sbq\n        where false\n        limit 0\n    {% endcall %}\n\n    {{ return(load_result('get_columns_in_query').table.columns | map(attribute='name') | list) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1650535970.034944}, "macro.dbt.alter_column_type": {"unique_id": "macro.dbt.alter_column_type", "package_name": "dbt", "root_path": "/opt/homebrew/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "name": "alter_column_type", "macro_sql": "{% macro alter_column_type(relation, column_name, new_column_type) -%}\n  {{ return(adapter.dispatch('alter_column_type', 'dbt')(relation, column_name, new_column_type)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_spark.spark__alter_column_type"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1650535970.035253}, "macro.dbt.default__alter_column_type": {"unique_id": "macro.dbt.default__alter_column_type", "package_name": "dbt", "root_path": "/opt/homebrew/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "name": "default__alter_column_type", "macro_sql": "{% macro default__alter_column_type(relation, column_name, new_column_type) -%}\n  {#\n    1. Create a new column (w/ temp name and correct type)\n    2. Copy data over to it\n    3. Drop the existing column (cascade!)\n    4. Rename the new column to existing column\n  #}\n  {%- set tmp_column = column_name + \"__dbt_alter\" -%}\n\n  {% call statement('alter_column_type') %}\n    alter table {{ relation }} add column {{ adapter.quote(tmp_column) }} {{ new_column_type }};\n    update {{ relation }} set {{ adapter.quote(tmp_column) }} = {{ adapter.quote(column_name) }};\n    alter table {{ relation }} drop column {{ adapter.quote(column_name) }} cascade;\n    alter table {{ relation }} rename column {{ adapter.quote(tmp_column) }} to {{ adapter.quote(column_name) }}\n  {% endcall %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1650535970.0360472}, "macro.dbt.alter_relation_add_remove_columns": {"unique_id": "macro.dbt.alter_relation_add_remove_columns", "package_name": "dbt", "root_path": "/opt/homebrew/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "name": "alter_relation_add_remove_columns", "macro_sql": "{% macro alter_relation_add_remove_columns(relation, add_columns = none, remove_columns = none) -%}\n  {{ return(adapter.dispatch('alter_relation_add_remove_columns', 'dbt')(relation, add_columns, remove_columns)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_spark.spark__alter_relation_add_remove_columns"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1650535970.036385}, "macro.dbt.default__alter_relation_add_remove_columns": {"unique_id": "macro.dbt.default__alter_relation_add_remove_columns", "package_name": "dbt", "root_path": "/opt/homebrew/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "name": "default__alter_relation_add_remove_columns", "macro_sql": "{% macro default__alter_relation_add_remove_columns(relation, add_columns, remove_columns) %}\n  \n  {% if add_columns is none %}\n    {% set add_columns = [] %}\n  {% endif %}\n  {% if remove_columns is none %}\n    {% set remove_columns = [] %}\n  {% endif %}\n  \n  {% set sql -%}\n     \n     alter {{ relation.type }} {{ relation }}\n       \n            {% for column in add_columns %}\n               add column {{ column.name }} {{ column.data_type }}{{ ',' if not loop.last }}\n            {% endfor %}{{ ',' if add_columns and remove_columns }}\n            \n            {% for column in remove_columns %}\n                drop column {{ column.name }}{{ ',' if not loop.last }}\n            {% endfor %}\n  \n  {%- endset -%}\n\n  {% do run_query(sql) %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1650535970.037427}, "macro.dbt.test_unique": {"unique_id": "macro.dbt.test_unique", "package_name": "dbt", "root_path": "/opt/homebrew/lib/python3.9/site-packages/dbt/include/global_project", "path": "tests/generic/builtin.sql", "original_file_path": "tests/generic/builtin.sql", "name": "test_unique", "macro_sql": "{% test unique(model, column_name) %}\n    {% set macro = adapter.dispatch('test_unique', 'dbt') %}\n    {{ macro(model, column_name) }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__test_unique"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1650535970.038211}, "macro.dbt.test_not_null": {"unique_id": "macro.dbt.test_not_null", "package_name": "dbt", "root_path": "/opt/homebrew/lib/python3.9/site-packages/dbt/include/global_project", "path": "tests/generic/builtin.sql", "original_file_path": "tests/generic/builtin.sql", "name": "test_not_null", "macro_sql": "{% test not_null(model, column_name) %}\n    {% set macro = adapter.dispatch('test_not_null', 'dbt') %}\n    {{ macro(model, column_name) }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__test_not_null"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1650535970.038526}, "macro.dbt.test_accepted_values": {"unique_id": "macro.dbt.test_accepted_values", "package_name": "dbt", "root_path": "/opt/homebrew/lib/python3.9/site-packages/dbt/include/global_project", "path": "tests/generic/builtin.sql", "original_file_path": "tests/generic/builtin.sql", "name": "test_accepted_values", "macro_sql": "{% test accepted_values(model, column_name, values, quote=True) %}\n    {% set macro = adapter.dispatch('test_accepted_values', 'dbt') %}\n    {{ macro(model, column_name, values, quote) }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__test_accepted_values"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1650535970.038913}, "macro.dbt.test_relationships": {"unique_id": "macro.dbt.test_relationships", "package_name": "dbt", "root_path": "/opt/homebrew/lib/python3.9/site-packages/dbt/include/global_project", "path": "tests/generic/builtin.sql", "original_file_path": "tests/generic/builtin.sql", "name": "test_relationships", "macro_sql": "{% test relationships(model, column_name, to, field) %}\n    {% set macro = adapter.dispatch('test_relationships', 'dbt') %}\n    {{ macro(model, column_name, to, field) }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__test_relationships"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1650535970.039285}, "macro.dbt_utils.except": {"unique_id": "macro.dbt_utils.except", "package_name": "dbt_utils", "root_path": "/Users/songv/Code/jike/web3/dbt_ethereum_source/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/except.sql", "original_file_path": "macros/cross_db_utils/except.sql", "name": "except", "macro_sql": "{% macro except() %}\n  {{ return(adapter.dispatch('except', 'dbt_utils')()) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__except"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1650535970.039724}, "macro.dbt_utils.default__except": {"unique_id": "macro.dbt_utils.default__except", "package_name": "dbt_utils", "root_path": "/Users/songv/Code/jike/web3/dbt_ethereum_source/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/except.sql", "original_file_path": "macros/cross_db_utils/except.sql", "name": "default__except", "macro_sql": "{% macro default__except() %}\n\n    except\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1650535970.039822}, "macro.dbt_utils.bigquery__except": {"unique_id": "macro.dbt_utils.bigquery__except", "package_name": "dbt_utils", "root_path": "/Users/songv/Code/jike/web3/dbt_ethereum_source/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/except.sql", "original_file_path": "macros/cross_db_utils/except.sql", "name": "bigquery__except", "macro_sql": "{% macro bigquery__except() %}\n\n    except distinct\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1650535970.039912}, "macro.dbt_utils.replace": {"unique_id": "macro.dbt_utils.replace", "package_name": "dbt_utils", "root_path": "/Users/songv/Code/jike/web3/dbt_ethereum_source/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/replace.sql", "original_file_path": "macros/cross_db_utils/replace.sql", "name": "replace", "macro_sql": "{% macro replace(field, old_chars, new_chars) -%}\n    {{ return(adapter.dispatch('replace', 'dbt_utils') (field, old_chars, new_chars)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__replace"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1650535970.040437}, "macro.dbt_utils.default__replace": {"unique_id": "macro.dbt_utils.default__replace", "package_name": "dbt_utils", "root_path": "/Users/songv/Code/jike/web3/dbt_ethereum_source/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/replace.sql", "original_file_path": "macros/cross_db_utils/replace.sql", "name": "default__replace", "macro_sql": "{% macro default__replace(field, old_chars, new_chars) %}\n\n    replace(\n        {{ field }},\n        {{ old_chars }},\n        {{ new_chars }}\n    )\n    \n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1650535970.0406559}, "macro.dbt_utils.concat": {"unique_id": "macro.dbt_utils.concat", "package_name": "dbt_utils", "root_path": "/Users/songv/Code/jike/web3/dbt_ethereum_source/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/concat.sql", "original_file_path": "macros/cross_db_utils/concat.sql", "name": "concat", "macro_sql": "{% macro concat(fields) -%}\n  {{ return(adapter.dispatch('concat', 'dbt_utils')(fields)) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__concat"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1650535970.041093}, "macro.dbt_utils.default__concat": {"unique_id": "macro.dbt_utils.default__concat", "package_name": "dbt_utils", "root_path": "/Users/songv/Code/jike/web3/dbt_ethereum_source/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/concat.sql", "original_file_path": "macros/cross_db_utils/concat.sql", "name": "default__concat", "macro_sql": "{% macro default__concat(fields) -%}\n    {{ fields|join(' || ') }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1650535970.041367}, "macro.dbt_utils.type_string": {"unique_id": "macro.dbt_utils.type_string", "package_name": "dbt_utils", "root_path": "/Users/songv/Code/jike/web3/dbt_ethereum_source/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/datatypes.sql", "original_file_path": "macros/cross_db_utils/datatypes.sql", "name": "type_string", "macro_sql": "\n\n{%- macro type_string() -%}\n  {{ return(adapter.dispatch('type_string', 'dbt_utils')()) }}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__type_string"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1650535970.042339}, "macro.dbt_utils.default__type_string": {"unique_id": "macro.dbt_utils.default__type_string", "package_name": "dbt_utils", "root_path": "/Users/songv/Code/jike/web3/dbt_ethereum_source/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/datatypes.sql", "original_file_path": "macros/cross_db_utils/datatypes.sql", "name": "default__type_string", "macro_sql": "{% macro default__type_string() %}\n    string\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1650535970.0424378}, "macro.dbt_utils.redshift__type_string": {"unique_id": "macro.dbt_utils.redshift__type_string", "package_name": "dbt_utils", "root_path": "/Users/songv/Code/jike/web3/dbt_ethereum_source/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/datatypes.sql", "original_file_path": "macros/cross_db_utils/datatypes.sql", "name": "redshift__type_string", "macro_sql": "\n\n{%- macro redshift__type_string() -%}\n    varchar\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1650535970.0425332}, "macro.dbt_utils.postgres__type_string": {"unique_id": "macro.dbt_utils.postgres__type_string", "package_name": "dbt_utils", "root_path": "/Users/songv/Code/jike/web3/dbt_ethereum_source/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/datatypes.sql", "original_file_path": "macros/cross_db_utils/datatypes.sql", "name": "postgres__type_string", "macro_sql": "{% macro postgres__type_string() %}\n    varchar\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1650535970.042624}, "macro.dbt_utils.snowflake__type_string": {"unique_id": "macro.dbt_utils.snowflake__type_string", "package_name": "dbt_utils", "root_path": "/Users/songv/Code/jike/web3/dbt_ethereum_source/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/datatypes.sql", "original_file_path": "macros/cross_db_utils/datatypes.sql", "name": "snowflake__type_string", "macro_sql": "{% macro snowflake__type_string() %}\n    varchar\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1650535970.0427132}, "macro.dbt_utils.type_timestamp": {"unique_id": "macro.dbt_utils.type_timestamp", "package_name": "dbt_utils", "root_path": "/Users/songv/Code/jike/web3/dbt_ethereum_source/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/datatypes.sql", "original_file_path": "macros/cross_db_utils/datatypes.sql", "name": "type_timestamp", "macro_sql": "\n\n{%- macro type_timestamp() -%}\n  {{ return(adapter.dispatch('type_timestamp', 'dbt_utils')()) }}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__type_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1650535970.042929}, "macro.dbt_utils.default__type_timestamp": {"unique_id": "macro.dbt_utils.default__type_timestamp", "package_name": "dbt_utils", "root_path": "/Users/songv/Code/jike/web3/dbt_ethereum_source/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/datatypes.sql", "original_file_path": "macros/cross_db_utils/datatypes.sql", "name": "default__type_timestamp", "macro_sql": "{% macro default__type_timestamp() %}\n    timestamp\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1650535970.043026}, "macro.dbt_utils.postgres__type_timestamp": {"unique_id": "macro.dbt_utils.postgres__type_timestamp", "package_name": "dbt_utils", "root_path": "/Users/songv/Code/jike/web3/dbt_ethereum_source/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/datatypes.sql", "original_file_path": "macros/cross_db_utils/datatypes.sql", "name": "postgres__type_timestamp", "macro_sql": "{% macro postgres__type_timestamp() %}\n    timestamp without time zone\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1650535970.0431192}, "macro.dbt_utils.snowflake__type_timestamp": {"unique_id": "macro.dbt_utils.snowflake__type_timestamp", "package_name": "dbt_utils", "root_path": "/Users/songv/Code/jike/web3/dbt_ethereum_source/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/datatypes.sql", "original_file_path": "macros/cross_db_utils/datatypes.sql", "name": "snowflake__type_timestamp", "macro_sql": "{% macro snowflake__type_timestamp() %}\n    timestamp_ntz\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1650535970.043209}, "macro.dbt_utils.type_float": {"unique_id": "macro.dbt_utils.type_float", "package_name": "dbt_utils", "root_path": "/Users/songv/Code/jike/web3/dbt_ethereum_source/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/datatypes.sql", "original_file_path": "macros/cross_db_utils/datatypes.sql", "name": "type_float", "macro_sql": "\n\n{%- macro type_float() -%}\n  {{ return(adapter.dispatch('type_float', 'dbt_utils')()) }}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__type_float"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1650535970.043426}, "macro.dbt_utils.default__type_float": {"unique_id": "macro.dbt_utils.default__type_float", "package_name": "dbt_utils", "root_path": "/Users/songv/Code/jike/web3/dbt_ethereum_source/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/datatypes.sql", "original_file_path": "macros/cross_db_utils/datatypes.sql", "name": "default__type_float", "macro_sql": "{% macro default__type_float() %}\n    float\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1650535970.043523}, "macro.dbt_utils.bigquery__type_float": {"unique_id": "macro.dbt_utils.bigquery__type_float", "package_name": "dbt_utils", "root_path": "/Users/songv/Code/jike/web3/dbt_ethereum_source/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/datatypes.sql", "original_file_path": "macros/cross_db_utils/datatypes.sql", "name": "bigquery__type_float", "macro_sql": "{% macro bigquery__type_float() %}\n    float64\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1650535970.043616}, "macro.dbt_utils.type_numeric": {"unique_id": "macro.dbt_utils.type_numeric", "package_name": "dbt_utils", "root_path": "/Users/songv/Code/jike/web3/dbt_ethereum_source/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/datatypes.sql", "original_file_path": "macros/cross_db_utils/datatypes.sql", "name": "type_numeric", "macro_sql": "\n\n{%- macro type_numeric() -%}\n  {{ return(adapter.dispatch('type_numeric', 'dbt_utils')()) }}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__type_numeric"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1650535970.043828}, "macro.dbt_utils.default__type_numeric": {"unique_id": "macro.dbt_utils.default__type_numeric", "package_name": "dbt_utils", "root_path": "/Users/songv/Code/jike/web3/dbt_ethereum_source/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/datatypes.sql", "original_file_path": "macros/cross_db_utils/datatypes.sql", "name": "default__type_numeric", "macro_sql": "{% macro default__type_numeric() %}\n    numeric(28, 6)\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1650535970.043922}, "macro.dbt_utils.bigquery__type_numeric": {"unique_id": "macro.dbt_utils.bigquery__type_numeric", "package_name": "dbt_utils", "root_path": "/Users/songv/Code/jike/web3/dbt_ethereum_source/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/datatypes.sql", "original_file_path": "macros/cross_db_utils/datatypes.sql", "name": "bigquery__type_numeric", "macro_sql": "{% macro bigquery__type_numeric() %}\n    numeric\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1650535970.044013}, "macro.dbt_utils.type_bigint": {"unique_id": "macro.dbt_utils.type_bigint", "package_name": "dbt_utils", "root_path": "/Users/songv/Code/jike/web3/dbt_ethereum_source/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/datatypes.sql", "original_file_path": "macros/cross_db_utils/datatypes.sql", "name": "type_bigint", "macro_sql": "\n\n{%- macro type_bigint() -%}\n  {{ return(adapter.dispatch('type_bigint', 'dbt_utils')()) }}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__type_bigint"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1650535970.04422}, "macro.dbt_utils.default__type_bigint": {"unique_id": "macro.dbt_utils.default__type_bigint", "package_name": "dbt_utils", "root_path": "/Users/songv/Code/jike/web3/dbt_ethereum_source/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/datatypes.sql", "original_file_path": "macros/cross_db_utils/datatypes.sql", "name": "default__type_bigint", "macro_sql": "{% macro default__type_bigint() %}\n    bigint\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1650535970.044319}, "macro.dbt_utils.bigquery__type_bigint": {"unique_id": "macro.dbt_utils.bigquery__type_bigint", "package_name": "dbt_utils", "root_path": "/Users/songv/Code/jike/web3/dbt_ethereum_source/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/datatypes.sql", "original_file_path": "macros/cross_db_utils/datatypes.sql", "name": "bigquery__type_bigint", "macro_sql": "{% macro bigquery__type_bigint() %}\n    int64\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1650535970.044406}, "macro.dbt_utils.type_int": {"unique_id": "macro.dbt_utils.type_int", "package_name": "dbt_utils", "root_path": "/Users/songv/Code/jike/web3/dbt_ethereum_source/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/datatypes.sql", "original_file_path": "macros/cross_db_utils/datatypes.sql", "name": "type_int", "macro_sql": "\n\n{%- macro type_int() -%}\n  {{ return(adapter.dispatch('type_int', 'dbt_utils')()) }}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__type_int"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1650535970.0446908}, "macro.dbt_utils.default__type_int": {"unique_id": "macro.dbt_utils.default__type_int", "package_name": "dbt_utils", "root_path": "/Users/songv/Code/jike/web3/dbt_ethereum_source/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/datatypes.sql", "original_file_path": "macros/cross_db_utils/datatypes.sql", "name": "default__type_int", "macro_sql": "{% macro default__type_int() %}\n    int\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1650535970.044787}, "macro.dbt_utils.bigquery__type_int": {"unique_id": "macro.dbt_utils.bigquery__type_int", "package_name": "dbt_utils", "root_path": "/Users/songv/Code/jike/web3/dbt_ethereum_source/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/datatypes.sql", "original_file_path": "macros/cross_db_utils/datatypes.sql", "name": "bigquery__type_int", "macro_sql": "{% macro bigquery__type_int() %}\n    int64\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1650535970.044874}, "macro.dbt_utils._is_relation": {"unique_id": "macro.dbt_utils._is_relation", "package_name": "dbt_utils", "root_path": "/Users/songv/Code/jike/web3/dbt_ethereum_source/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/_is_relation.sql", "original_file_path": "macros/cross_db_utils/_is_relation.sql", "name": "_is_relation", "macro_sql": "{% macro _is_relation(obj, macro) %}\n    {%- if not (obj is mapping and obj.get('metadata', {}).get('type', '').endswith('Relation')) -%}\n        {%- do exceptions.raise_compiler_error(\"Macro \" ~ macro ~ \" expected a Relation but received the value: \" ~ obj) -%}\n    {%- endif -%}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1650535970.045653}, "macro.dbt_utils.length": {"unique_id": "macro.dbt_utils.length", "package_name": "dbt_utils", "root_path": "/Users/songv/Code/jike/web3/dbt_ethereum_source/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/length.sql", "original_file_path": "macros/cross_db_utils/length.sql", "name": "length", "macro_sql": "{% macro length(expression) -%}\n    {{ return(adapter.dispatch('length', 'dbt_utils') (expression)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__length"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1650535970.046143}, "macro.dbt_utils.default__length": {"unique_id": "macro.dbt_utils.default__length", "package_name": "dbt_utils", "root_path": "/Users/songv/Code/jike/web3/dbt_ethereum_source/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/length.sql", "original_file_path": "macros/cross_db_utils/length.sql", "name": "default__length", "macro_sql": "{% macro default__length(expression) %}\n    \n    length(\n        {{ expression }}\n    )\n    \n{%- endmacro -%}\n\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1650535970.046284}, "macro.dbt_utils.redshift__length": {"unique_id": "macro.dbt_utils.redshift__length", "package_name": "dbt_utils", "root_path": "/Users/songv/Code/jike/web3/dbt_ethereum_source/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/length.sql", "original_file_path": "macros/cross_db_utils/length.sql", "name": "redshift__length", "macro_sql": "{% macro redshift__length(expression) %}\n\n    len(\n        {{ expression }}\n    )\n    \n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1650535970.046415}, "macro.dbt_utils.dateadd": {"unique_id": "macro.dbt_utils.dateadd", "package_name": "dbt_utils", "root_path": "/Users/songv/Code/jike/web3/dbt_ethereum_source/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/dateadd.sql", "original_file_path": "macros/cross_db_utils/dateadd.sql", "name": "dateadd", "macro_sql": "{% macro dateadd(datepart, interval, from_date_or_timestamp) %}\n  {{ return(adapter.dispatch('dateadd', 'dbt_utils')(datepart, interval, from_date_or_timestamp)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__dateadd"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1650535970.047198}, "macro.dbt_utils.default__dateadd": {"unique_id": "macro.dbt_utils.default__dateadd", "package_name": "dbt_utils", "root_path": "/Users/songv/Code/jike/web3/dbt_ethereum_source/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/dateadd.sql", "original_file_path": "macros/cross_db_utils/dateadd.sql", "name": "default__dateadd", "macro_sql": "{% macro default__dateadd(datepart, interval, from_date_or_timestamp) %}\n\n    dateadd(\n        {{ datepart }},\n        {{ interval }},\n        {{ from_date_or_timestamp }}\n        )\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1650535970.0474198}, "macro.dbt_utils.bigquery__dateadd": {"unique_id": "macro.dbt_utils.bigquery__dateadd", "package_name": "dbt_utils", "root_path": "/Users/songv/Code/jike/web3/dbt_ethereum_source/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/dateadd.sql", "original_file_path": "macros/cross_db_utils/dateadd.sql", "name": "bigquery__dateadd", "macro_sql": "{% macro bigquery__dateadd(datepart, interval, from_date_or_timestamp) %}\n\n        datetime_add(\n            cast( {{ from_date_or_timestamp }} as datetime),\n        interval {{ interval }} {{ datepart }}\n        )\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1650535970.047632}, "macro.dbt_utils.postgres__dateadd": {"unique_id": "macro.dbt_utils.postgres__dateadd", "package_name": "dbt_utils", "root_path": "/Users/songv/Code/jike/web3/dbt_ethereum_source/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/dateadd.sql", "original_file_path": "macros/cross_db_utils/dateadd.sql", "name": "postgres__dateadd", "macro_sql": "{% macro postgres__dateadd(datepart, interval, from_date_or_timestamp) %}\n\n    {{ from_date_or_timestamp }} + ((interval '1 {{ datepart }}') * ({{ interval }}))\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1650535970.0478468}, "macro.dbt_utils.redshift__dateadd": {"unique_id": "macro.dbt_utils.redshift__dateadd", "package_name": "dbt_utils", "root_path": "/Users/songv/Code/jike/web3/dbt_ethereum_source/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/dateadd.sql", "original_file_path": "macros/cross_db_utils/dateadd.sql", "name": "redshift__dateadd", "macro_sql": "{% macro redshift__dateadd(datepart, interval, from_date_or_timestamp) %}\n\n    {{ return(dbt_utils.default__dateadd(datepart, interval, from_date_or_timestamp)) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__dateadd"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1650535970.0481029}, "macro.dbt_utils.intersect": {"unique_id": "macro.dbt_utils.intersect", "package_name": "dbt_utils", "root_path": "/Users/songv/Code/jike/web3/dbt_ethereum_source/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/intersect.sql", "original_file_path": "macros/cross_db_utils/intersect.sql", "name": "intersect", "macro_sql": "{% macro intersect() %}\n  {{ return(adapter.dispatch('intersect', 'dbt_utils')()) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__intersect"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1650535970.048518}, "macro.dbt_utils.default__intersect": {"unique_id": "macro.dbt_utils.default__intersect", "package_name": "dbt_utils", "root_path": "/Users/songv/Code/jike/web3/dbt_ethereum_source/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/intersect.sql", "original_file_path": "macros/cross_db_utils/intersect.sql", "name": "default__intersect", "macro_sql": "{% macro default__intersect() %}\n\n    intersect\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1650535970.048616}, "macro.dbt_utils.bigquery__intersect": {"unique_id": "macro.dbt_utils.bigquery__intersect", "package_name": "dbt_utils", "root_path": "/Users/songv/Code/jike/web3/dbt_ethereum_source/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/intersect.sql", "original_file_path": "macros/cross_db_utils/intersect.sql", "name": "bigquery__intersect", "macro_sql": "{% macro bigquery__intersect() %}\n\n    intersect distinct\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1650535970.0487092}, "macro.dbt_utils.escape_single_quotes": {"unique_id": "macro.dbt_utils.escape_single_quotes", "package_name": "dbt_utils", "root_path": "/Users/songv/Code/jike/web3/dbt_ethereum_source/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/escape_single_quotes.sql", "original_file_path": "macros/cross_db_utils/escape_single_quotes.sql", "name": "escape_single_quotes", "macro_sql": "{% macro escape_single_quotes(expression) %}\n      {{ return(adapter.dispatch('escape_single_quotes', 'dbt_utils') (expression)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__escape_single_quotes"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1650535970.0492249}, "macro.dbt_utils.default__escape_single_quotes": {"unique_id": "macro.dbt_utils.default__escape_single_quotes", "package_name": "dbt_utils", "root_path": "/Users/songv/Code/jike/web3/dbt_ethereum_source/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/escape_single_quotes.sql", "original_file_path": "macros/cross_db_utils/escape_single_quotes.sql", "name": "default__escape_single_quotes", "macro_sql": "{% macro default__escape_single_quotes(expression) -%}\n{{ expression | replace(\"'\",\"''\") }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1650535970.049409}, "macro.dbt_utils.snowflake__escape_single_quotes": {"unique_id": "macro.dbt_utils.snowflake__escape_single_quotes", "package_name": "dbt_utils", "root_path": "/Users/songv/Code/jike/web3/dbt_ethereum_source/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/escape_single_quotes.sql", "original_file_path": "macros/cross_db_utils/escape_single_quotes.sql", "name": "snowflake__escape_single_quotes", "macro_sql": "{% macro snowflake__escape_single_quotes(expression) -%}\n{{ expression | replace(\"'\", \"\\\\'\") }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1650535970.049587}, "macro.dbt_utils.bigquery__escape_single_quotes": {"unique_id": "macro.dbt_utils.bigquery__escape_single_quotes", "package_name": "dbt_utils", "root_path": "/Users/songv/Code/jike/web3/dbt_ethereum_source/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/escape_single_quotes.sql", "original_file_path": "macros/cross_db_utils/escape_single_quotes.sql", "name": "bigquery__escape_single_quotes", "macro_sql": "{% macro bigquery__escape_single_quotes(expression) -%}\n{{ expression | replace(\"'\", \"\\\\'\") }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1650535970.049763}, "macro.dbt_utils.right": {"unique_id": "macro.dbt_utils.right", "package_name": "dbt_utils", "root_path": "/Users/songv/Code/jike/web3/dbt_ethereum_source/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/right.sql", "original_file_path": "macros/cross_db_utils/right.sql", "name": "right", "macro_sql": "{% macro right(string_text, length_expression) -%}\n    {{ return(adapter.dispatch('right', 'dbt_utils') (string_text, length_expression)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__right"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1650535970.050525}, "macro.dbt_utils.default__right": {"unique_id": "macro.dbt_utils.default__right", "package_name": "dbt_utils", "root_path": "/Users/songv/Code/jike/web3/dbt_ethereum_source/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/right.sql", "original_file_path": "macros/cross_db_utils/right.sql", "name": "default__right", "macro_sql": "{% macro default__right(string_text, length_expression) %}\n\n    right(\n        {{ string_text }},\n        {{ length_expression }}\n    )\n    \n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1650535970.0507038}, "macro.dbt_utils.bigquery__right": {"unique_id": "macro.dbt_utils.bigquery__right", "package_name": "dbt_utils", "root_path": "/Users/songv/Code/jike/web3/dbt_ethereum_source/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/right.sql", "original_file_path": "macros/cross_db_utils/right.sql", "name": "bigquery__right", "macro_sql": "{% macro bigquery__right(string_text, length_expression) %}\n\n    case when {{ length_expression }} = 0 \n        then ''\n    else \n        substr(\n            {{ string_text }},\n            -1 * ({{ length_expression }})\n        )\n    end\n\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1650535970.050912}, "macro.dbt_utils.snowflake__right": {"unique_id": "macro.dbt_utils.snowflake__right", "package_name": "dbt_utils", "root_path": "/Users/songv/Code/jike/web3/dbt_ethereum_source/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/right.sql", "original_file_path": "macros/cross_db_utils/right.sql", "name": "snowflake__right", "macro_sql": "{% macro snowflake__right(string_text, length_expression) %}\n\n    case when {{ length_expression }} = 0 \n        then ''\n    else \n        right(\n            {{ string_text }},\n            {{ length_expression }}\n        )\n    end\n\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1650535970.0512052}, "macro.dbt_utils.listagg": {"unique_id": "macro.dbt_utils.listagg", "package_name": "dbt_utils", "root_path": "/Users/songv/Code/jike/web3/dbt_ethereum_source/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/listagg.sql", "original_file_path": "macros/cross_db_utils/listagg.sql", "name": "listagg", "macro_sql": "{% macro listagg(measure, delimiter_text=\"','\", order_by_clause=none, limit_num=none) -%}\n    {{ return(adapter.dispatch('listagg', 'dbt_utils') (measure, delimiter_text, order_by_clause, limit_num)) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__listagg"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1650535970.054046}, "macro.dbt_utils.default__listagg": {"unique_id": "macro.dbt_utils.default__listagg", "package_name": "dbt_utils", "root_path": "/Users/songv/Code/jike/web3/dbt_ethereum_source/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/listagg.sql", "original_file_path": "macros/cross_db_utils/listagg.sql", "name": "default__listagg", "macro_sql": "{% macro default__listagg(measure, delimiter_text, order_by_clause, limit_num) -%}\n\n    {% if limit_num -%}\n    array_to_string(\n        array_slice(\n            array_agg(\n                {{ measure }}\n            ){% if order_by_clause -%}\n            within group ({{ order_by_clause }})\n            {%- endif %}\n            ,0\n            ,{{ limit_num }}\n        ),\n        {{ delimiter_text }}\n        )\n    {%- else %}\n    listagg(\n        {{ measure }},\n        {{ delimiter_text }}\n        )\n        {% if order_by_clause -%}\n        within group ({{ order_by_clause }})\n        {%- endif %}\n    {%- endif %}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1650535970.0545988}, "macro.dbt_utils.bigquery__listagg": {"unique_id": "macro.dbt_utils.bigquery__listagg", "package_name": "dbt_utils", "root_path": "/Users/songv/Code/jike/web3/dbt_ethereum_source/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/listagg.sql", "original_file_path": "macros/cross_db_utils/listagg.sql", "name": "bigquery__listagg", "macro_sql": "{% macro bigquery__listagg(measure, delimiter_text, order_by_clause, limit_num) -%}\n\n    string_agg(\n        {{ measure }},\n        {{ delimiter_text }}\n        {% if order_by_clause -%}\n        {{ order_by_clause }}\n        {%- endif %}\n        {% if limit_num -%}\n        limit {{ limit_num }}\n        {%- endif %}\n        )\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1650535970.054973}, "macro.dbt_utils.postgres__listagg": {"unique_id": "macro.dbt_utils.postgres__listagg", "package_name": "dbt_utils", "root_path": "/Users/songv/Code/jike/web3/dbt_ethereum_source/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/listagg.sql", "original_file_path": "macros/cross_db_utils/listagg.sql", "name": "postgres__listagg", "macro_sql": "{% macro postgres__listagg(measure, delimiter_text, order_by_clause, limit_num) -%}\n    \n    {% if limit_num -%}\n    array_to_string(\n        (array_agg(\n            {{ measure }}\n            {% if order_by_clause -%}\n            {{ order_by_clause }}\n            {%- endif %}\n        ))[1:{{ limit_num }}],\n        {{ delimiter_text }}\n        )\n    {%- else %}\n    string_agg(\n        {{ measure }},\n        {{ delimiter_text }}\n        {% if order_by_clause -%}\n        {{ order_by_clause }}\n        {%- endif %}\n        )\n    {%- endif %}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1650535970.055499}, "macro.dbt_utils.redshift__listagg": {"unique_id": "macro.dbt_utils.redshift__listagg", "package_name": "dbt_utils", "root_path": "/Users/songv/Code/jike/web3/dbt_ethereum_source/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/listagg.sql", "original_file_path": "macros/cross_db_utils/listagg.sql", "name": "redshift__listagg", "macro_sql": "{% macro redshift__listagg(measure, delimiter_text, order_by_clause, limit_num) -%}\n\n    {% if limit_num -%}\n    {% set ns = namespace() %}\n    {% set ns.delimiter_text_regex = delimiter_text|trim(\"'\") %}\n    {% set special_chars %}\\,^,$,.,|,?,*,+,(,),[,],{,}{% endset %}  \n    {%- for char in special_chars.split(',') -%}\n        {% set escape_char %}\\\\{{ char }}{% endset %}\n        {% set ns.delimiter_text_regex = ns.delimiter_text_regex|replace(char,escape_char) %}\n    {%- endfor -%}\n\n    {% set regex %}'([^{{ ns.delimiter_text_regex }}]+{{ ns.delimiter_text_regex }}){1,{{ limit_num - 1}}}[^{{ ns.delimiter_text_regex }}]+'{% endset %}\n    regexp_substr(\n        listagg(\n            {{ measure }},\n            {{ delimiter_text }}\n            )\n            {% if order_by_clause -%}\n            within group ({{ order_by_clause }})\n            {%- endif %}\n        ,{{ regex }}\n        )\n    {%- else %}\n    listagg(\n        {{ measure }},\n        {{ delimiter_text }}\n        )\n        {% if order_by_clause -%}\n        within group ({{ order_by_clause }})\n        {%- endif %}\n    {%- endif %}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1650535970.0569332}, "macro.dbt_utils.datediff": {"unique_id": "macro.dbt_utils.datediff", "package_name": "dbt_utils", "root_path": "/Users/songv/Code/jike/web3/dbt_ethereum_source/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/datediff.sql", "original_file_path": "macros/cross_db_utils/datediff.sql", "name": "datediff", "macro_sql": "{% macro datediff(first_date, second_date, datepart) %}\n  {{ return(adapter.dispatch('datediff', 'dbt_utils')(first_date, second_date, datepart)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__datediff"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1650535970.060361}, "macro.dbt_utils.default__datediff": {"unique_id": "macro.dbt_utils.default__datediff", "package_name": "dbt_utils", "root_path": "/Users/songv/Code/jike/web3/dbt_ethereum_source/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/datediff.sql", "original_file_path": "macros/cross_db_utils/datediff.sql", "name": "default__datediff", "macro_sql": "{% macro default__datediff(first_date, second_date, datepart) -%}\n\n    datediff(\n        {{ datepart }},\n        {{ first_date }},\n        {{ second_date }}\n        )\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1650535970.060596}, "macro.dbt_utils.bigquery__datediff": {"unique_id": "macro.dbt_utils.bigquery__datediff", "package_name": "dbt_utils", "root_path": "/Users/songv/Code/jike/web3/dbt_ethereum_source/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/datediff.sql", "original_file_path": "macros/cross_db_utils/datediff.sql", "name": "bigquery__datediff", "macro_sql": "{% macro bigquery__datediff(first_date, second_date, datepart) -%}\n\n    datetime_diff(\n        cast({{second_date}} as datetime),\n        cast({{first_date}} as datetime),\n        {{datepart}}\n    )\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1650535970.060815}, "macro.dbt_utils.postgres__datediff": {"unique_id": "macro.dbt_utils.postgres__datediff", "package_name": "dbt_utils", "root_path": "/Users/songv/Code/jike/web3/dbt_ethereum_source/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/datediff.sql", "original_file_path": "macros/cross_db_utils/datediff.sql", "name": "postgres__datediff", "macro_sql": "{% macro postgres__datediff(first_date, second_date, datepart) -%}\n\n    {% if datepart == 'year' %}\n        (date_part('year', ({{second_date}})::date) - date_part('year', ({{first_date}})::date))\n    {% elif datepart == 'quarter' %}\n        ({{ dbt_utils.datediff(first_date, second_date, 'year') }} * 4 + date_part('quarter', ({{second_date}})::date) - date_part('quarter', ({{first_date}})::date))\n    {% elif datepart == 'month' %}\n        ({{ dbt_utils.datediff(first_date, second_date, 'year') }} * 12 + date_part('month', ({{second_date}})::date) - date_part('month', ({{first_date}})::date))\n    {% elif datepart == 'day' %}\n        (({{second_date}})::date - ({{first_date}})::date)\n    {% elif datepart == 'week' %}\n        ({{ dbt_utils.datediff(first_date, second_date, 'day') }} / 7 + case\n            when date_part('dow', ({{first_date}})::timestamp) <= date_part('dow', ({{second_date}})::timestamp) then\n                case when {{first_date}} <= {{second_date}} then 0 else -1 end\n            else\n                case when {{first_date}} <= {{second_date}} then 1 else 0 end\n        end)\n    {% elif datepart == 'hour' %}\n        ({{ dbt_utils.datediff(first_date, second_date, 'day') }} * 24 + date_part('hour', ({{second_date}})::timestamp) - date_part('hour', ({{first_date}})::timestamp))\n    {% elif datepart == 'minute' %}\n        ({{ dbt_utils.datediff(first_date, second_date, 'hour') }} * 60 + date_part('minute', ({{second_date}})::timestamp) - date_part('minute', ({{first_date}})::timestamp))\n    {% elif datepart == 'second' %}\n        ({{ dbt_utils.datediff(first_date, second_date, 'minute') }} * 60 + floor(date_part('second', ({{second_date}})::timestamp)) - floor(date_part('second', ({{first_date}})::timestamp)))\n    {% elif datepart == 'millisecond' %}\n        ({{ dbt_utils.datediff(first_date, second_date, 'minute') }} * 60000 + floor(date_part('millisecond', ({{second_date}})::timestamp)) - floor(date_part('millisecond', ({{first_date}})::timestamp)))\n    {% elif datepart == 'microsecond' %}\n        ({{ dbt_utils.datediff(first_date, second_date, 'minute') }} * 60000000 + floor(date_part('microsecond', ({{second_date}})::timestamp)) - floor(date_part('microsecond', ({{first_date}})::timestamp)))\n    {% else %}\n        {{ exceptions.raise_compiler_error(\"Unsupported datepart for macro datediff in postgres: {!r}\".format(datepart)) }}\n    {% endif %}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.datediff"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1650535970.063185}, "macro.dbt_utils.redshift__datediff": {"unique_id": "macro.dbt_utils.redshift__datediff", "package_name": "dbt_utils", "root_path": "/Users/songv/Code/jike/web3/dbt_ethereum_source/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/datediff.sql", "original_file_path": "macros/cross_db_utils/datediff.sql", "name": "redshift__datediff", "macro_sql": "{% macro redshift__datediff(first_date, second_date, datepart) -%}\n\n    {{ return(dbt_utils.default__datediff(first_date, second_date, datepart)) }}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__datediff"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1650535970.063464}, "macro.dbt_utils.safe_cast": {"unique_id": "macro.dbt_utils.safe_cast", "package_name": "dbt_utils", "root_path": "/Users/songv/Code/jike/web3/dbt_ethereum_source/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/safe_cast.sql", "original_file_path": "macros/cross_db_utils/safe_cast.sql", "name": "safe_cast", "macro_sql": "{% macro safe_cast(field, type) %}\n  {{ return(adapter.dispatch('safe_cast', 'dbt_utils') (field, type)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__safe_cast"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1650535970.064066}, "macro.dbt_utils.default__safe_cast": {"unique_id": "macro.dbt_utils.default__safe_cast", "package_name": "dbt_utils", "root_path": "/Users/songv/Code/jike/web3/dbt_ethereum_source/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/safe_cast.sql", "original_file_path": "macros/cross_db_utils/safe_cast.sql", "name": "default__safe_cast", "macro_sql": "{% macro default__safe_cast(field, type) %}\n    {# most databases don't support this function yet\n    so we just need to use cast #}\n    cast({{field}} as {{type}})\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1650535970.0642529}, "macro.dbt_utils.snowflake__safe_cast": {"unique_id": "macro.dbt_utils.snowflake__safe_cast", "package_name": "dbt_utils", "root_path": "/Users/songv/Code/jike/web3/dbt_ethereum_source/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/safe_cast.sql", "original_file_path": "macros/cross_db_utils/safe_cast.sql", "name": "snowflake__safe_cast", "macro_sql": "{% macro snowflake__safe_cast(field, type) %}\n    try_cast({{field}} as {{type}})\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1650535970.0644212}, "macro.dbt_utils.bigquery__safe_cast": {"unique_id": "macro.dbt_utils.bigquery__safe_cast", "package_name": "dbt_utils", "root_path": "/Users/songv/Code/jike/web3/dbt_ethereum_source/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/safe_cast.sql", "original_file_path": "macros/cross_db_utils/safe_cast.sql", "name": "bigquery__safe_cast", "macro_sql": "{% macro bigquery__safe_cast(field, type) %}\n    safe_cast({{field}} as {{type}})\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1650535970.06459}, "macro.dbt_utils.hash": {"unique_id": "macro.dbt_utils.hash", "package_name": "dbt_utils", "root_path": "/Users/songv/Code/jike/web3/dbt_ethereum_source/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/hash.sql", "original_file_path": "macros/cross_db_utils/hash.sql", "name": "hash", "macro_sql": "{% macro hash(field) -%}\n  {{ return(adapter.dispatch('hash', 'dbt_utils') (field)) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__hash"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1650535970.065072}, "macro.dbt_utils.default__hash": {"unique_id": "macro.dbt_utils.default__hash", "package_name": "dbt_utils", "root_path": "/Users/songv/Code/jike/web3/dbt_ethereum_source/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/hash.sql", "original_file_path": "macros/cross_db_utils/hash.sql", "name": "default__hash", "macro_sql": "{% macro default__hash(field) -%}\n    md5(cast({{field}} as {{dbt_utils.type_string()}}))\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.type_string"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1650535970.065254}, "macro.dbt_utils.bigquery__hash": {"unique_id": "macro.dbt_utils.bigquery__hash", "package_name": "dbt_utils", "root_path": "/Users/songv/Code/jike/web3/dbt_ethereum_source/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/hash.sql", "original_file_path": "macros/cross_db_utils/hash.sql", "name": "bigquery__hash", "macro_sql": "{% macro bigquery__hash(field) -%}\n    to_hex({{dbt_utils.default__hash(field)}})\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__hash"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1650535970.065432}, "macro.dbt_utils.cast_bool_to_text": {"unique_id": "macro.dbt_utils.cast_bool_to_text", "package_name": "dbt_utils", "root_path": "/Users/songv/Code/jike/web3/dbt_ethereum_source/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/cast_bool_to_text.sql", "original_file_path": "macros/cross_db_utils/cast_bool_to_text.sql", "name": "cast_bool_to_text", "macro_sql": "{% macro cast_bool_to_text(field) %}\n  {{ adapter.dispatch('cast_bool_to_text', 'dbt_utils') (field) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__cast_bool_to_text"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1650535970.065944}, "macro.dbt_utils.default__cast_bool_to_text": {"unique_id": "macro.dbt_utils.default__cast_bool_to_text", "package_name": "dbt_utils", "root_path": "/Users/songv/Code/jike/web3/dbt_ethereum_source/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/cast_bool_to_text.sql", "original_file_path": "macros/cross_db_utils/cast_bool_to_text.sql", "name": "default__cast_bool_to_text", "macro_sql": "{% macro default__cast_bool_to_text(field) %}\n    cast({{ field }} as {{ dbt_utils.type_string() }})\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.type_string"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1650535970.066129}, "macro.dbt_utils.redshift__cast_bool_to_text": {"unique_id": "macro.dbt_utils.redshift__cast_bool_to_text", "package_name": "dbt_utils", "root_path": "/Users/songv/Code/jike/web3/dbt_ethereum_source/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/cast_bool_to_text.sql", "original_file_path": "macros/cross_db_utils/cast_bool_to_text.sql", "name": "redshift__cast_bool_to_text", "macro_sql": "{% macro redshift__cast_bool_to_text(field) %}\n    case\n        when {{ field }} is true then 'true'\n        when {{ field }} is false then 'false'\n    end::text\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1650535970.066293}, "macro.dbt_utils.identifier": {"unique_id": "macro.dbt_utils.identifier", "package_name": "dbt_utils", "root_path": "/Users/songv/Code/jike/web3/dbt_ethereum_source/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/identifier.sql", "original_file_path": "macros/cross_db_utils/identifier.sql", "name": "identifier", "macro_sql": "{% macro identifier(value) %}\t\n  {%- set error_message = '\n    Warning: the `identifier` macro is no longer supported and will be deprecated in a future release of dbt-utils. \\\n    Use `adapter.quote` instead. The {}.{} model triggered this warning. \\\n    '.format(model.package_name, model.name) -%}\n  {%- do exceptions.warn(error_message) -%}\n  {{ return(adapter.dispatch('identifier', 'dbt_utils') (value)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__identifier"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1650535970.067137}, "macro.dbt_utils.default__identifier": {"unique_id": "macro.dbt_utils.default__identifier", "package_name": "dbt_utils", "root_path": "/Users/songv/Code/jike/web3/dbt_ethereum_source/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/identifier.sql", "original_file_path": "macros/cross_db_utils/identifier.sql", "name": "default__identifier", "macro_sql": "{% macro default__identifier(value) -%}\t\n    \"{{ value }}\"\t\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1650535970.067323}, "macro.dbt_utils.bigquery__identifier": {"unique_id": "macro.dbt_utils.bigquery__identifier", "package_name": "dbt_utils", "root_path": "/Users/songv/Code/jike/web3/dbt_ethereum_source/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/identifier.sql", "original_file_path": "macros/cross_db_utils/identifier.sql", "name": "bigquery__identifier", "macro_sql": "{% macro bigquery__identifier(value) -%}\t\n    `{{ value }}`\t\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1650535970.0674639}, "macro.dbt_utils.any_value": {"unique_id": "macro.dbt_utils.any_value", "package_name": "dbt_utils", "root_path": "/Users/songv/Code/jike/web3/dbt_ethereum_source/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/any_value.sql", "original_file_path": "macros/cross_db_utils/any_value.sql", "name": "any_value", "macro_sql": "{% macro any_value(expression) -%}\n    {{ return(adapter.dispatch('any_value', 'dbt_utils') (expression)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__any_value"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1650535970.068071}, "macro.dbt_utils.default__any_value": {"unique_id": "macro.dbt_utils.default__any_value", "package_name": "dbt_utils", "root_path": "/Users/songv/Code/jike/web3/dbt_ethereum_source/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/any_value.sql", "original_file_path": "macros/cross_db_utils/any_value.sql", "name": "default__any_value", "macro_sql": "{% macro default__any_value(expression) -%}\n    \n    any_value({{ expression }})\n    \n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1650535970.068212}, "macro.dbt_utils.postgres__any_value": {"unique_id": "macro.dbt_utils.postgres__any_value", "package_name": "dbt_utils", "root_path": "/Users/songv/Code/jike/web3/dbt_ethereum_source/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/any_value.sql", "original_file_path": "macros/cross_db_utils/any_value.sql", "name": "postgres__any_value", "macro_sql": "{% macro postgres__any_value(expression) -%}\n    {#- /*Postgres doesn't support any_value, so we're using min() to get the same result*/ -#}\n    min({{ expression }})\n    \n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1650535970.068352}, "macro.dbt_utils.position": {"unique_id": "macro.dbt_utils.position", "package_name": "dbt_utils", "root_path": "/Users/songv/Code/jike/web3/dbt_ethereum_source/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/position.sql", "original_file_path": "macros/cross_db_utils/position.sql", "name": "position", "macro_sql": "{% macro position(substring_text, string_text) -%}\n    {{ return(adapter.dispatch('position', 'dbt_utils') (substring_text, string_text)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__position"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1650535970.068949}, "macro.dbt_utils.default__position": {"unique_id": "macro.dbt_utils.default__position", "package_name": "dbt_utils", "root_path": "/Users/songv/Code/jike/web3/dbt_ethereum_source/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/position.sql", "original_file_path": "macros/cross_db_utils/position.sql", "name": "default__position", "macro_sql": "{% macro default__position(substring_text, string_text) %}\n\n    position(\n        {{ substring_text }} in {{ string_text }}\n    )\n    \n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1650535970.069132}, "macro.dbt_utils.bigquery__position": {"unique_id": "macro.dbt_utils.bigquery__position", "package_name": "dbt_utils", "root_path": "/Users/songv/Code/jike/web3/dbt_ethereum_source/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/position.sql", "original_file_path": "macros/cross_db_utils/position.sql", "name": "bigquery__position", "macro_sql": "{% macro bigquery__position(substring_text, string_text) %}\n\n    strpos(\n        {{ string_text }},\n        {{ substring_text }}\n        \n    )\n    \n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1650535970.0693069}, "macro.dbt_utils.string_literal": {"unique_id": "macro.dbt_utils.string_literal", "package_name": "dbt_utils", "root_path": "/Users/songv/Code/jike/web3/dbt_ethereum_source/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/literal.sql", "original_file_path": "macros/cross_db_utils/literal.sql", "name": "string_literal", "macro_sql": "{%- macro string_literal(value) -%}\n  {{ return(adapter.dispatch('string_literal', 'dbt_utils') (value)) }}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__string_literal"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1650535970.069847}, "macro.dbt_utils.default__string_literal": {"unique_id": "macro.dbt_utils.default__string_literal", "package_name": "dbt_utils", "root_path": "/Users/songv/Code/jike/web3/dbt_ethereum_source/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/literal.sql", "original_file_path": "macros/cross_db_utils/literal.sql", "name": "default__string_literal", "macro_sql": "{% macro default__string_literal(value) -%}\n    '{{ value }}'\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1650535970.0699892}, "macro.dbt_utils.current_timestamp": {"unique_id": "macro.dbt_utils.current_timestamp", "package_name": "dbt_utils", "root_path": "/Users/songv/Code/jike/web3/dbt_ethereum_source/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/current_timestamp.sql", "original_file_path": "macros/cross_db_utils/current_timestamp.sql", "name": "current_timestamp", "macro_sql": "{% macro current_timestamp() -%}\n  {{ return(adapter.dispatch('current_timestamp', 'dbt_utils')()) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__current_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1650535970.070771}, "macro.dbt_utils.default__current_timestamp": {"unique_id": "macro.dbt_utils.default__current_timestamp", "package_name": "dbt_utils", "root_path": "/Users/songv/Code/jike/web3/dbt_ethereum_source/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/current_timestamp.sql", "original_file_path": "macros/cross_db_utils/current_timestamp.sql", "name": "default__current_timestamp", "macro_sql": "{% macro default__current_timestamp() %}\n    current_timestamp::{{dbt_utils.type_timestamp()}}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.type_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1650535970.0709188}, "macro.dbt_utils.redshift__current_timestamp": {"unique_id": "macro.dbt_utils.redshift__current_timestamp", "package_name": "dbt_utils", "root_path": "/Users/songv/Code/jike/web3/dbt_ethereum_source/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/current_timestamp.sql", "original_file_path": "macros/cross_db_utils/current_timestamp.sql", "name": "redshift__current_timestamp", "macro_sql": "{% macro redshift__current_timestamp() %}\n    getdate()\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1650535970.0710158}, "macro.dbt_utils.bigquery__current_timestamp": {"unique_id": "macro.dbt_utils.bigquery__current_timestamp", "package_name": "dbt_utils", "root_path": "/Users/songv/Code/jike/web3/dbt_ethereum_source/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/current_timestamp.sql", "original_file_path": "macros/cross_db_utils/current_timestamp.sql", "name": "bigquery__current_timestamp", "macro_sql": "{% macro bigquery__current_timestamp() %}\n    current_timestamp\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1650535970.0711071}, "macro.dbt_utils.current_timestamp_in_utc": {"unique_id": "macro.dbt_utils.current_timestamp_in_utc", "package_name": "dbt_utils", "root_path": "/Users/songv/Code/jike/web3/dbt_ethereum_source/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/current_timestamp.sql", "original_file_path": "macros/cross_db_utils/current_timestamp.sql", "name": "current_timestamp_in_utc", "macro_sql": "{% macro current_timestamp_in_utc() -%}\n  {{ return(adapter.dispatch('current_timestamp_in_utc', 'dbt_utils')()) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__current_timestamp_in_utc"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1650535970.071315}, "macro.dbt_utils.default__current_timestamp_in_utc": {"unique_id": "macro.dbt_utils.default__current_timestamp_in_utc", "package_name": "dbt_utils", "root_path": "/Users/songv/Code/jike/web3/dbt_ethereum_source/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/current_timestamp.sql", "original_file_path": "macros/cross_db_utils/current_timestamp.sql", "name": "default__current_timestamp_in_utc", "macro_sql": "{% macro default__current_timestamp_in_utc() %}\n    {{dbt_utils.current_timestamp()}}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.current_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1650535970.071459}, "macro.dbt_utils.snowflake__current_timestamp_in_utc": {"unique_id": "macro.dbt_utils.snowflake__current_timestamp_in_utc", "package_name": "dbt_utils", "root_path": "/Users/songv/Code/jike/web3/dbt_ethereum_source/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/current_timestamp.sql", "original_file_path": "macros/cross_db_utils/current_timestamp.sql", "name": "snowflake__current_timestamp_in_utc", "macro_sql": "{% macro snowflake__current_timestamp_in_utc() %}\n    convert_timezone('UTC', {{dbt_utils.current_timestamp()}})::{{dbt_utils.type_timestamp()}}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.current_timestamp", "macro.dbt_utils.type_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1650535970.071649}, "macro.dbt_utils.postgres__current_timestamp_in_utc": {"unique_id": "macro.dbt_utils.postgres__current_timestamp_in_utc", "package_name": "dbt_utils", "root_path": "/Users/songv/Code/jike/web3/dbt_ethereum_source/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/current_timestamp.sql", "original_file_path": "macros/cross_db_utils/current_timestamp.sql", "name": "postgres__current_timestamp_in_utc", "macro_sql": "{% macro postgres__current_timestamp_in_utc() %}\n    (current_timestamp at time zone 'utc')::{{dbt_utils.type_timestamp()}}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.type_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1650535970.0718012}, "macro.dbt_utils.redshift__current_timestamp_in_utc": {"unique_id": "macro.dbt_utils.redshift__current_timestamp_in_utc", "package_name": "dbt_utils", "root_path": "/Users/songv/Code/jike/web3/dbt_ethereum_source/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/current_timestamp.sql", "original_file_path": "macros/cross_db_utils/current_timestamp.sql", "name": "redshift__current_timestamp_in_utc", "macro_sql": "{% macro redshift__current_timestamp_in_utc() %}\n    {{ return(dbt_utils.default__current_timestamp_in_utc()) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__current_timestamp_in_utc"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1650535970.07197}, "macro.dbt_utils.width_bucket": {"unique_id": "macro.dbt_utils.width_bucket", "package_name": "dbt_utils", "root_path": "/Users/songv/Code/jike/web3/dbt_ethereum_source/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/width_bucket.sql", "original_file_path": "macros/cross_db_utils/width_bucket.sql", "name": "width_bucket", "macro_sql": "{% macro width_bucket(expr, min_value, max_value, num_buckets) %}\n  {{ return(adapter.dispatch('width_bucket', 'dbt_utils') (expr, min_value, max_value, num_buckets)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__width_bucket"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1650535970.073824}, "macro.dbt_utils.default__width_bucket": {"unique_id": "macro.dbt_utils.default__width_bucket", "package_name": "dbt_utils", "root_path": "/Users/songv/Code/jike/web3/dbt_ethereum_source/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/width_bucket.sql", "original_file_path": "macros/cross_db_utils/width_bucket.sql", "name": "default__width_bucket", "macro_sql": "{% macro default__width_bucket(expr, min_value, max_value, num_buckets) -%}\n\n    {% set bin_size -%}\n    (( {{ max_value }} - {{ min_value }} ) / {{ num_buckets }} )\n    {%- endset %}\n    (\n        -- to break ties when the amount is eaxtly at the bucket egde\n        case\n            when\n                mod(\n                    {{ dbt_utils.safe_cast(expr, dbt_utils.type_numeric() ) }},\n                    {{ dbt_utils.safe_cast(bin_size, dbt_utils.type_numeric() ) }}\n                ) = 0\n            then 1\n            else 0\n        end\n    ) +\n      -- Anything over max_value goes the N+1 bucket\n    least(\n        ceil(\n            ({{ expr }} - {{ min_value }})/{{ bin_size }}\n        ),\n        {{ num_buckets }} + 1\n    )\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.safe_cast", "macro.dbt_utils.type_numeric"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1650535970.0744488}, "macro.dbt_utils.redshift__width_bucket": {"unique_id": "macro.dbt_utils.redshift__width_bucket", "package_name": "dbt_utils", "root_path": "/Users/songv/Code/jike/web3/dbt_ethereum_source/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/width_bucket.sql", "original_file_path": "macros/cross_db_utils/width_bucket.sql", "name": "redshift__width_bucket", "macro_sql": "{% macro redshift__width_bucket(expr, min_value, max_value, num_buckets) -%}\n\n    {% set bin_size -%}\n    (( {{ max_value }} - {{ min_value }} ) / {{ num_buckets }} )\n    {%- endset %}\n    (\n        -- to break ties when the amount is exactly at the bucket edge\n        case\n            when\n                {{ dbt_utils.safe_cast(expr, dbt_utils.type_numeric() ) }} %\n                {{ dbt_utils.safe_cast(bin_size, dbt_utils.type_numeric() ) }}\n                 = 0\n            then 1\n            else 0\n        end\n    ) +\n      -- Anything over max_value goes the N+1 bucket\n    least(\n        ceil(\n            ({{ expr }} - {{ min_value }})/{{ bin_size }}\n        ),\n        {{ num_buckets }} + 1\n    )\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.safe_cast", "macro.dbt_utils.type_numeric"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1650535970.0750668}, "macro.dbt_utils.snowflake__width_bucket": {"unique_id": "macro.dbt_utils.snowflake__width_bucket", "package_name": "dbt_utils", "root_path": "/Users/songv/Code/jike/web3/dbt_ethereum_source/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/width_bucket.sql", "original_file_path": "macros/cross_db_utils/width_bucket.sql", "name": "snowflake__width_bucket", "macro_sql": "{% macro snowflake__width_bucket(expr, min_value, max_value, num_buckets) %}\n    width_bucket({{ expr }}, {{ min_value }}, {{ max_value }}, {{ num_buckets }} )\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1650535970.0753238}, "macro.dbt_utils.bool_or": {"unique_id": "macro.dbt_utils.bool_or", "package_name": "dbt_utils", "root_path": "/Users/songv/Code/jike/web3/dbt_ethereum_source/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/bool_or.sql", "original_file_path": "macros/cross_db_utils/bool_or.sql", "name": "bool_or", "macro_sql": "{% macro bool_or(expression) -%}\n    {{ return(adapter.dispatch('bool_or', 'dbt_utils') (expression)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__bool_or"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1650535970.075847}, "macro.dbt_utils.default__bool_or": {"unique_id": "macro.dbt_utils.default__bool_or", "package_name": "dbt_utils", "root_path": "/Users/songv/Code/jike/web3/dbt_ethereum_source/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/bool_or.sql", "original_file_path": "macros/cross_db_utils/bool_or.sql", "name": "default__bool_or", "macro_sql": "{% macro default__bool_or(expression) -%}\n    \n    bool_or({{ expression }})\n    \n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1650535970.075982}, "macro.dbt_utils.snowflake__bool_or": {"unique_id": "macro.dbt_utils.snowflake__bool_or", "package_name": "dbt_utils", "root_path": "/Users/songv/Code/jike/web3/dbt_ethereum_source/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/bool_or.sql", "original_file_path": "macros/cross_db_utils/bool_or.sql", "name": "snowflake__bool_or", "macro_sql": "{% macro snowflake__bool_or(expression) -%}\n    \n    boolor_agg({{ expression }})\n    \n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1650535970.076111}, "macro.dbt_utils.bigquery__bool_or": {"unique_id": "macro.dbt_utils.bigquery__bool_or", "package_name": "dbt_utils", "root_path": "/Users/songv/Code/jike/web3/dbt_ethereum_source/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/bool_or.sql", "original_file_path": "macros/cross_db_utils/bool_or.sql", "name": "bigquery__bool_or", "macro_sql": "{% macro bigquery__bool_or(expression) -%}\n    \n    logical_or({{ expression }})\n    \n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1650535970.076243}, "macro.dbt_utils.last_day": {"unique_id": "macro.dbt_utils.last_day", "package_name": "dbt_utils", "root_path": "/Users/songv/Code/jike/web3/dbt_ethereum_source/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/last_day.sql", "original_file_path": "macros/cross_db_utils/last_day.sql", "name": "last_day", "macro_sql": "{% macro last_day(date, datepart) %}\n  {{ return(adapter.dispatch('last_day', 'dbt_utils') (date, datepart)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__last_day"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1650535970.077037}, "macro.dbt_utils.default_last_day": {"unique_id": "macro.dbt_utils.default_last_day", "package_name": "dbt_utils", "root_path": "/Users/songv/Code/jike/web3/dbt_ethereum_source/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/last_day.sql", "original_file_path": "macros/cross_db_utils/last_day.sql", "name": "default_last_day", "macro_sql": "\n\n\n{%- macro default_last_day(date, datepart) -%}\n    cast(\n        {{dbt_utils.dateadd('day', '-1',\n        dbt_utils.dateadd(datepart, '1', dbt_utils.date_trunc(datepart, date))\n        )}}\n        as date)\n{%- endmacro -%}\n\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.dateadd", "macro.dbt_utils.date_trunc"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1650535970.077479}, "macro.dbt_utils.default__last_day": {"unique_id": "macro.dbt_utils.default__last_day", "package_name": "dbt_utils", "root_path": "/Users/songv/Code/jike/web3/dbt_ethereum_source/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/last_day.sql", "original_file_path": "macros/cross_db_utils/last_day.sql", "name": "default__last_day", "macro_sql": "{% macro default__last_day(date, datepart) -%}\n    {{dbt_utils.default_last_day(date, datepart)}}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default_last_day"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1650535970.077678}, "macro.dbt_utils.postgres__last_day": {"unique_id": "macro.dbt_utils.postgres__last_day", "package_name": "dbt_utils", "root_path": "/Users/songv/Code/jike/web3/dbt_ethereum_source/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/last_day.sql", "original_file_path": "macros/cross_db_utils/last_day.sql", "name": "postgres__last_day", "macro_sql": "{% macro postgres__last_day(date, datepart) -%}\n\n    {%- if datepart == 'quarter' -%}\n    -- postgres dateadd does not support quarter interval.\n    cast(\n        {{dbt_utils.dateadd('day', '-1',\n        dbt_utils.dateadd('month', '3', dbt_utils.date_trunc(datepart, date))\n        )}}\n        as date)\n    {%- else -%}\n    {{dbt_utils.default_last_day(date, datepart)}}\n    {%- endif -%}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.dateadd", "macro.dbt_utils.date_trunc", "macro.dbt_utils.default_last_day"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1650535970.078208}, "macro.dbt_utils.redshift__last_day": {"unique_id": "macro.dbt_utils.redshift__last_day", "package_name": "dbt_utils", "root_path": "/Users/songv/Code/jike/web3/dbt_ethereum_source/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/last_day.sql", "original_file_path": "macros/cross_db_utils/last_day.sql", "name": "redshift__last_day", "macro_sql": "{% macro redshift__last_day(date, datepart) %}\n\n    {{ return(dbt_utils.default__last_day(date, datepart)) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__last_day"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1650535970.0784519}, "macro.dbt_utils.split_part": {"unique_id": "macro.dbt_utils.split_part", "package_name": "dbt_utils", "root_path": "/Users/songv/Code/jike/web3/dbt_ethereum_source/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/split_part.sql", "original_file_path": "macros/cross_db_utils/split_part.sql", "name": "split_part", "macro_sql": "{% macro split_part(string_text, delimiter_text, part_number) %}\n  {{ return(adapter.dispatch('split_part', 'dbt_utils') (string_text, delimiter_text, part_number)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__split_part"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1650535970.079087}, "macro.dbt_utils.default__split_part": {"unique_id": "macro.dbt_utils.default__split_part", "package_name": "dbt_utils", "root_path": "/Users/songv/Code/jike/web3/dbt_ethereum_source/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/split_part.sql", "original_file_path": "macros/cross_db_utils/split_part.sql", "name": "default__split_part", "macro_sql": "{% macro default__split_part(string_text, delimiter_text, part_number) %}\n\n    split_part(\n        {{ string_text }},\n        {{ delimiter_text }},\n        {{ part_number }}\n        )\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1650535970.079303}, "macro.dbt_utils.bigquery__split_part": {"unique_id": "macro.dbt_utils.bigquery__split_part", "package_name": "dbt_utils", "root_path": "/Users/songv/Code/jike/web3/dbt_ethereum_source/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/split_part.sql", "original_file_path": "macros/cross_db_utils/split_part.sql", "name": "bigquery__split_part", "macro_sql": "{% macro bigquery__split_part(string_text, delimiter_text, part_number) %}\n\n    split(\n        {{ string_text }},\n        {{ delimiter_text }}\n        )[safe_offset({{ part_number - 1 }})]\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1650535970.079543}, "macro.dbt_utils.date_trunc": {"unique_id": "macro.dbt_utils.date_trunc", "package_name": "dbt_utils", "root_path": "/Users/songv/Code/jike/web3/dbt_ethereum_source/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/date_trunc.sql", "original_file_path": "macros/cross_db_utils/date_trunc.sql", "name": "date_trunc", "macro_sql": "{% macro date_trunc(datepart, date) -%}\n  {{ return(adapter.dispatch('date_trunc', 'dbt_utils') (datepart, date)) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__date_trunc"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1650535970.0800588}, "macro.dbt_utils.default__date_trunc": {"unique_id": "macro.dbt_utils.default__date_trunc", "package_name": "dbt_utils", "root_path": "/Users/songv/Code/jike/web3/dbt_ethereum_source/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/date_trunc.sql", "original_file_path": "macros/cross_db_utils/date_trunc.sql", "name": "default__date_trunc", "macro_sql": "{% macro default__date_trunc(datepart, date) -%}\n    date_trunc('{{datepart}}', {{date}})\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1650535970.0802271}, "macro.dbt_utils.bigquery__date_trunc": {"unique_id": "macro.dbt_utils.bigquery__date_trunc", "package_name": "dbt_utils", "root_path": "/Users/songv/Code/jike/web3/dbt_ethereum_source/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/date_trunc.sql", "original_file_path": "macros/cross_db_utils/date_trunc.sql", "name": "bigquery__date_trunc", "macro_sql": "{% macro bigquery__date_trunc(datepart, date) -%}\n    timestamp_trunc(\n        cast({{date}} as timestamp),\n        {{datepart}}\n    )\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1650535970.080398}, "macro.dbt_utils._is_ephemeral": {"unique_id": "macro.dbt_utils._is_ephemeral", "package_name": "dbt_utils", "root_path": "/Users/songv/Code/jike/web3/dbt_ethereum_source/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/_is_ephemeral.sql", "original_file_path": "macros/cross_db_utils/_is_ephemeral.sql", "name": "_is_ephemeral", "macro_sql": "{% macro _is_ephemeral(obj, macro) %}\n    {%- if obj.is_cte -%}\n        {% set ephemeral_prefix = api.Relation.add_ephemeral_prefix('') %}\n        {% if obj.name.startswith(ephemeral_prefix) %}\n            {% set model_name = obj.name[(ephemeral_prefix|length):] %}\n        {% else %}\n            {% set model_name = obj.name %}\n        {%- endif -%}\n        {% set error_message %}\nThe `{{ macro }}` macro cannot be used with ephemeral models, as it relies on the information schema.\n\n`{{ model_name }}` is an ephemeral model. Consider making it a view or table instead.\n        {% endset %}\n        {%- do exceptions.raise_compiler_error(error_message) -%}\n    {%- endif -%}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1650535970.081572}, "macro.dbt_utils.get_period_boundaries": {"unique_id": "macro.dbt_utils.get_period_boundaries", "package_name": "dbt_utils", "root_path": "/Users/songv/Code/jike/web3/dbt_ethereum_source/dbt_packages/dbt_utils", "path": "macros/materializations/insert_by_period_materialization.sql", "original_file_path": "macros/materializations/insert_by_period_materialization.sql", "name": "get_period_boundaries", "macro_sql": "{% macro get_period_boundaries(target_schema, target_table, timestamp_field, start_date, stop_date, period) -%}\n    {{ return(adapter.dispatch('get_period_boundaries', 'dbt_utils')(target_schema, target_table, timestamp_field, start_date, stop_date, period)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__get_period_boundaries"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1650535970.088752}, "macro.dbt_utils.default__get_period_boundaries": {"unique_id": "macro.dbt_utils.default__get_period_boundaries", "package_name": "dbt_utils", "root_path": "/Users/songv/Code/jike/web3/dbt_ethereum_source/dbt_packages/dbt_utils", "path": "macros/materializations/insert_by_period_materialization.sql", "original_file_path": "macros/materializations/insert_by_period_materialization.sql", "name": "default__get_period_boundaries", "macro_sql": "{% macro default__get_period_boundaries(target_schema, target_table, timestamp_field, start_date, stop_date, period) -%}\n\n  {% call statement('period_boundaries', fetch_result=True) -%}\n    with data as (\n      select\n          coalesce(max(\"{{timestamp_field}}\"), '{{start_date}}')::timestamp as start_timestamp,\n          coalesce(\n            {{dbt_utils.dateadd('millisecond',\n                                -1,\n                                \"nullif('\" ~ stop_date ~ \"','')::timestamp\")}},\n            {{dbt_utils.current_timestamp()}}\n          ) as stop_timestamp\n      from \"{{target_schema}}\".\"{{target_table}}\"\n    )\n\n    select\n      start_timestamp,\n      stop_timestamp,\n      {{dbt_utils.datediff('start_timestamp',\n                           'stop_timestamp',\n                           period)}}  + 1 as num_periods\n    from data\n  {%- endcall %}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt_utils.dateadd", "macro.dbt_utils.current_timestamp", "macro.dbt_utils.datediff"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1650535970.0894442}, "macro.dbt_utils.get_period_sql": {"unique_id": "macro.dbt_utils.get_period_sql", "package_name": "dbt_utils", "root_path": "/Users/songv/Code/jike/web3/dbt_ethereum_source/dbt_packages/dbt_utils", "path": "macros/materializations/insert_by_period_materialization.sql", "original_file_path": "macros/materializations/insert_by_period_materialization.sql", "name": "get_period_sql", "macro_sql": "{% macro get_period_sql(target_cols_csv, sql, timestamp_field, period, start_timestamp, stop_timestamp, offset) -%}\n    {{ return(adapter.dispatch('get_period_sql', 'dbt_utils')(target_cols_csv, sql, timestamp_field, period, start_timestamp, stop_timestamp, offset)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__get_period_sql"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1650535970.0898728}, "macro.dbt_utils.default__get_period_sql": {"unique_id": "macro.dbt_utils.default__get_period_sql", "package_name": "dbt_utils", "root_path": "/Users/songv/Code/jike/web3/dbt_ethereum_source/dbt_packages/dbt_utils", "path": "macros/materializations/insert_by_period_materialization.sql", "original_file_path": "macros/materializations/insert_by_period_materialization.sql", "name": "default__get_period_sql", "macro_sql": "{% macro default__get_period_sql(target_cols_csv, sql, timestamp_field, period, start_timestamp, stop_timestamp, offset) -%}\n\n  {%- set period_filter -%}\n    (\"{{timestamp_field}}\" >  '{{start_timestamp}}'::timestamp + interval '{{offset}} {{period}}' and\n     \"{{timestamp_field}}\" <= '{{start_timestamp}}'::timestamp + interval '{{offset}} {{period}}' + interval '1 {{period}}' and\n     \"{{timestamp_field}}\" <  '{{stop_timestamp}}'::timestamp)\n  {%- endset -%}\n\n  {%- set filtered_sql = sql | replace(\"__PERIOD_FILTER__\", period_filter) -%}\n\n  select\n    {{target_cols_csv}}\n  from (\n    {{filtered_sql}}\n  )\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1650535970.090533}, "macro.dbt_utils.materialization_insert_by_period_default": {"unique_id": "macro.dbt_utils.materialization_insert_by_period_default", "package_name": "dbt_utils", "root_path": "/Users/songv/Code/jike/web3/dbt_ethereum_source/dbt_packages/dbt_utils", "path": "macros/materializations/insert_by_period_materialization.sql", "original_file_path": "macros/materializations/insert_by_period_materialization.sql", "name": "materialization_insert_by_period_default", "macro_sql": "{% materialization insert_by_period, default -%}\n  {%- set timestamp_field = config.require('timestamp_field') -%}\n  {%- set start_date = config.require('start_date') -%}\n  {%- set stop_date = config.get('stop_date') or '' -%}\n  {%- set period = config.get('period') or 'week' -%}\n\n  {%- if sql.find('__PERIOD_FILTER__') == -1 -%}\n    {%- set error_message -%}\n      Model '{{ model.unique_id }}' does not include the required string '__PERIOD_FILTER__' in its sql\n    {%- endset -%}\n    {{ exceptions.raise_compiler_error(error_message) }}\n  {%- endif -%}\n\n  {%- set identifier = model['name'] -%}\n\n  {%- set old_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) -%}\n  {%- set target_relation = api.Relation.create(identifier=identifier, schema=schema, type='table') -%}\n\n  {%- set non_destructive_mode = (flags.NON_DESTRUCTIVE == True) -%}\n  {%- set full_refresh_mode = (flags.FULL_REFRESH == True) -%}\n\n  {%- set exists_as_table = (old_relation is not none and old_relation.is_table) -%}\n  {%- set exists_not_as_table = (old_relation is not none and not old_relation.is_table) -%}\n\n  {%- set should_truncate = (non_destructive_mode and full_refresh_mode and exists_as_table) -%}\n  {%- set should_drop = (not should_truncate and (full_refresh_mode or exists_not_as_table)) -%}\n  {%- set force_create = (flags.FULL_REFRESH and not flags.NON_DESTRUCTIVE) -%}\n\n  -- setup\n  {% if old_relation is none -%}\n    -- noop\n  {%- elif should_truncate -%}\n    {{adapter.truncate_relation(old_relation)}}\n  {%- elif should_drop -%}\n    {{adapter.drop_relation(old_relation)}}\n    {%- set old_relation = none -%}\n  {%- endif %}\n\n  {{run_hooks(pre_hooks, inside_transaction=False)}}\n\n  -- `begin` happens here, so `commit` after it to finish the transaction\n  {{run_hooks(pre_hooks, inside_transaction=True)}}\n  {% call statement() -%}\n    begin; -- make extra sure we've closed out the transaction\n    commit;\n  {%- endcall %}\n\n  -- build model\n  {% if force_create or old_relation is none -%}\n    {# Create an empty target table -#}\n    {% call statement('main') -%}\n      {%- set empty_sql = sql | replace(\"__PERIOD_FILTER__\", 'false') -%}\n      {{create_table_as(False, target_relation, empty_sql)}}\n    {%- endcall %}\n  {%- endif %}\n\n  {% set _ = dbt_utils.get_period_boundaries(schema,\n                                              identifier,\n                                              timestamp_field,\n                                              start_date,\n                                              stop_date,\n                                              period) %}\n  {%- set start_timestamp = load_result('period_boundaries')['data'][0][0] | string -%}\n  {%- set stop_timestamp = load_result('period_boundaries')['data'][0][1] | string -%}\n  {%- set num_periods = load_result('period_boundaries')['data'][0][2] | int -%}\n\n  {% set target_columns = adapter.get_columns_in_relation(target_relation) %}\n  {%- set target_cols_csv = target_columns | map(attribute='quoted') | join(', ') -%}\n  {%- set loop_vars = {'sum_rows_inserted': 0} -%}\n\n  -- commit each period as a separate transaction\n  {% for i in range(num_periods) -%}\n    {%- set msg = \"Running for \" ~ period ~ \" \" ~ (i + 1) ~ \" of \" ~ (num_periods) -%}\n    {{ dbt_utils.log_info(msg) }}\n\n    {%- set tmp_identifier = model['name'] ~ '__dbt_incremental_period' ~ i ~ '_tmp' -%}\n    {%- set tmp_relation = api.Relation.create(identifier=tmp_identifier,\n                                               schema=schema, type='table') -%}\n    {% call statement() -%}\n      {% set tmp_table_sql = dbt_utils.get_period_sql(target_cols_csv,\n                                                       sql,\n                                                       timestamp_field,\n                                                       period,\n                                                       start_timestamp,\n                                                       stop_timestamp,\n                                                       i) %}\n      {{dbt.create_table_as(True, tmp_relation, tmp_table_sql)}}\n    {%- endcall %}\n\n    {{adapter.expand_target_column_types(from_relation=tmp_relation,\n                                         to_relation=target_relation)}}\n    {%- set name = 'main-' ~ i -%}\n    {% call statement(name, fetch_result=True) -%}\n      insert into {{target_relation}} ({{target_cols_csv}})\n      (\n          select\n              {{target_cols_csv}}\n          from {{tmp_relation.include(schema=False)}}\n      );\n    {%- endcall %}\n    {% set result = load_result('main-' ~ i) %}\n    {% if 'response' in result.keys() %} {# added in v0.19.0 #}\n        {% set rows_inserted = result['response']['rows_affected'] %}\n    {% else %} {# older versions #}\n        {% set rows_inserted = result['status'].split(\" \")[2] | int %}\n    {% endif %}\n    \n    {%- set sum_rows_inserted = loop_vars['sum_rows_inserted'] + rows_inserted -%}\n    {%- if loop_vars.update({'sum_rows_inserted': sum_rows_inserted}) %} {% endif -%}\n\n    {%- set msg = \"Ran for \" ~ period ~ \" \" ~ (i + 1) ~ \" of \" ~ (num_periods) ~ \"; \" ~ rows_inserted ~ \" records inserted\" -%}\n    {{ dbt_utils.log_info(msg) }}\n\n  {%- endfor %}\n\n  {% call statement() -%}\n    begin;\n  {%- endcall %}\n\n  {{run_hooks(post_hooks, inside_transaction=True)}}\n\n  {% call statement() -%}\n    commit;\n  {%- endcall %}\n\n  {{run_hooks(post_hooks, inside_transaction=False)}}\n\n  {%- set status_string = \"INSERT \" ~ loop_vars['sum_rows_inserted'] -%}\n\n  {% call noop_statement('main', status_string) -%}\n    -- no-op\n  {%- endcall %}\n\n  -- Return the relations created in this materialization\n  {{ return({'relations': [target_relation]}) }}  \n\n{%- endmaterialization %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.run_hooks", "macro.dbt.statement", "macro.dbt.create_table_as", "macro.dbt_utils.get_period_boundaries", "macro.dbt_utils.log_info", "macro.dbt_utils.get_period_sql", "macro.dbt.noop_statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1650535970.0973911}, "macro.dbt_utils.get_url_host": {"unique_id": "macro.dbt_utils.get_url_host", "package_name": "dbt_utils", "root_path": "/Users/songv/Code/jike/web3/dbt_ethereum_source/dbt_packages/dbt_utils", "path": "macros/web/get_url_host.sql", "original_file_path": "macros/web/get_url_host.sql", "name": "get_url_host", "macro_sql": "{% macro get_url_host(field) -%}\n    {{ return(adapter.dispatch('get_url_host', 'dbt_utils')(field)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__get_url_host"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1650535970.098017}, "macro.dbt_utils.default__get_url_host": {"unique_id": "macro.dbt_utils.default__get_url_host", "package_name": "dbt_utils", "root_path": "/Users/songv/Code/jike/web3/dbt_ethereum_source/dbt_packages/dbt_utils", "path": "macros/web/get_url_host.sql", "original_file_path": "macros/web/get_url_host.sql", "name": "default__get_url_host", "macro_sql": "{% macro default__get_url_host(field) -%}\n\n{%- set parsed =\n    dbt_utils.split_part(\n        dbt_utils.split_part(\n            dbt_utils.replace(\n                dbt_utils.replace(\n                    dbt_utils.replace(field, \"'android-app://'\", \"''\"\n                    ), \"'http://'\", \"''\"\n                ), \"'https://'\", \"''\"\n            ), \"'/'\", 1\n        ), \"'?'\", 1\n    )\n\n-%}\n\n\n    {{ dbt_utils.safe_cast(\n        parsed,\n        dbt_utils.type_string()\n        )}}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.split_part", "macro.dbt_utils.replace", "macro.dbt_utils.safe_cast", "macro.dbt_utils.type_string"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1650535970.098654}, "macro.dbt_utils.get_url_path": {"unique_id": "macro.dbt_utils.get_url_path", "package_name": "dbt_utils", "root_path": "/Users/songv/Code/jike/web3/dbt_ethereum_source/dbt_packages/dbt_utils", "path": "macros/web/get_url_path.sql", "original_file_path": "macros/web/get_url_path.sql", "name": "get_url_path", "macro_sql": "{% macro get_url_path(field) -%}\n    {{ return(adapter.dispatch('get_url_path', 'dbt_utils')(field)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__get_url_path"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1650535970.099356}, "macro.dbt_utils.default__get_url_path": {"unique_id": "macro.dbt_utils.default__get_url_path", "package_name": "dbt_utils", "root_path": "/Users/songv/Code/jike/web3/dbt_ethereum_source/dbt_packages/dbt_utils", "path": "macros/web/get_url_path.sql", "original_file_path": "macros/web/get_url_path.sql", "name": "default__get_url_path", "macro_sql": "{% macro default__get_url_path(field) -%}\n\n    {%- set stripped_url = \n        dbt_utils.replace(\n            dbt_utils.replace(field, \"'http://'\", \"''\"), \"'https://'\", \"''\")\n    -%}\n\n    {%- set first_slash_pos -%}\n        coalesce(\n            nullif({{dbt_utils.position(\"'/'\", stripped_url)}}, 0),\n            {{dbt_utils.position(\"'?'\", stripped_url)}} - 1\n            )\n    {%- endset -%}\n\n    {%- set parsed_path =\n        dbt_utils.split_part(\n            dbt_utils.right(\n                stripped_url, \n                dbt_utils.length(stripped_url) ~ \"-\" ~ first_slash_pos\n                ), \n            \"'?'\", 1\n            )\n    -%}\n\n    {{ dbt_utils.safe_cast(\n        parsed_path,\n        dbt_utils.type_string()\n    )}}\n    \n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.replace", "macro.dbt_utils.position", "macro.dbt_utils.split_part", "macro.dbt_utils.right", "macro.dbt_utils.length", "macro.dbt_utils.safe_cast", "macro.dbt_utils.type_string"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1650535970.100231}, "macro.dbt_utils.get_url_parameter": {"unique_id": "macro.dbt_utils.get_url_parameter", "package_name": "dbt_utils", "root_path": "/Users/songv/Code/jike/web3/dbt_ethereum_source/dbt_packages/dbt_utils", "path": "macros/web/get_url_parameter.sql", "original_file_path": "macros/web/get_url_parameter.sql", "name": "get_url_parameter", "macro_sql": "{% macro get_url_parameter(field, url_parameter) -%}\n    {{ return(adapter.dispatch('get_url_parameter', 'dbt_utils')(field, url_parameter)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__get_url_parameter"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1650535970.1007411}, "macro.dbt_utils.default__get_url_parameter": {"unique_id": "macro.dbt_utils.default__get_url_parameter", "package_name": "dbt_utils", "root_path": "/Users/songv/Code/jike/web3/dbt_ethereum_source/dbt_packages/dbt_utils", "path": "macros/web/get_url_parameter.sql", "original_file_path": "macros/web/get_url_parameter.sql", "name": "default__get_url_parameter", "macro_sql": "{% macro default__get_url_parameter(field, url_parameter) -%}\n\n{%- set formatted_url_parameter = \"'\" + url_parameter + \"='\" -%}\n\n{%- set split = dbt_utils.split_part(dbt_utils.split_part(field, formatted_url_parameter, 2), \"'&'\", 1) -%}\n\nnullif({{ split }},'')\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.split_part"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1650535970.101172}, "macro.dbt_utils.test_fewer_rows_than": {"unique_id": "macro.dbt_utils.test_fewer_rows_than", "package_name": "dbt_utils", "root_path": "/Users/songv/Code/jike/web3/dbt_ethereum_source/dbt_packages/dbt_utils", "path": "macros/generic_tests/fewer_rows_than.sql", "original_file_path": "macros/generic_tests/fewer_rows_than.sql", "name": "test_fewer_rows_than", "macro_sql": "{% test fewer_rows_than(model, compare_model) %}\n  {{ return(adapter.dispatch('test_fewer_rows_than', 'dbt_utils')(model, compare_model)) }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__test_fewer_rows_than"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1650535970.101951}, "macro.dbt_utils.default__test_fewer_rows_than": {"unique_id": "macro.dbt_utils.default__test_fewer_rows_than", "package_name": "dbt_utils", "root_path": "/Users/songv/Code/jike/web3/dbt_ethereum_source/dbt_packages/dbt_utils", "path": "macros/generic_tests/fewer_rows_than.sql", "original_file_path": "macros/generic_tests/fewer_rows_than.sql", "name": "default__test_fewer_rows_than", "macro_sql": "{% macro default__test_fewer_rows_than(model, compare_model) %}\n\n{{ config(fail_calc = 'coalesce(row_count_delta, 0)') }}\n\nwith a as (\n\n    select count(*) as count_our_model from {{ model }}\n\n),\nb as (\n\n    select count(*) as count_comparison_model from {{ compare_model }}\n\n),\ncounts as (\n\n    select\n        count_our_model,\n        count_comparison_model\n    from a\n    cross join b\n\n),\nfinal as (\n\n    select *,\n        case\n            -- fail the test if we have more rows than the reference model and return the row count delta\n            when count_our_model > count_comparison_model then (count_our_model - count_comparison_model)\n            -- fail the test if they are the same number\n            when count_our_model = count_comparison_model then 1\n            -- pass the test if the delta is positive (i.e. return the number 0)\n            else 0\n    end as row_count_delta\n    from counts\n\n)\n\nselect * from final\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1650535970.1022651}, "macro.dbt_utils.test_equal_rowcount": {"unique_id": "macro.dbt_utils.test_equal_rowcount", "package_name": "dbt_utils", "root_path": "/Users/songv/Code/jike/web3/dbt_ethereum_source/dbt_packages/dbt_utils", "path": "macros/generic_tests/equal_rowcount.sql", "original_file_path": "macros/generic_tests/equal_rowcount.sql", "name": "test_equal_rowcount", "macro_sql": "{% test equal_rowcount(model, compare_model) %}\n  {{ return(adapter.dispatch('test_equal_rowcount', 'dbt_utils')(model, compare_model)) }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__test_equal_rowcount"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1650535970.102865}, "macro.dbt_utils.default__test_equal_rowcount": {"unique_id": "macro.dbt_utils.default__test_equal_rowcount", "package_name": "dbt_utils", "root_path": "/Users/songv/Code/jike/web3/dbt_ethereum_source/dbt_packages/dbt_utils", "path": "macros/generic_tests/equal_rowcount.sql", "original_file_path": "macros/generic_tests/equal_rowcount.sql", "name": "default__test_equal_rowcount", "macro_sql": "{% macro default__test_equal_rowcount(model, compare_model) %}\n\n{#-- Needs to be set at parse time, before we return '' below --#}\n{{ config(fail_calc = 'coalesce(diff_count, 0)') }}\n\n{#-- Prevent querying of db in parsing mode. This works because this macro does not create any new refs. #}\n{%- if not execute -%}\n    {{ return('') }}\n{% endif %}\n\nwith a as (\n\n    select count(*) as count_a from {{ model }}\n\n),\nb as (\n\n    select count(*) as count_b from {{ compare_model }}\n\n),\nfinal as (\n\n    select\n        count_a,\n        count_b,\n        abs(count_a - count_b) as diff_count\n    from a\n    cross join b\n\n)\n\nselect * from final\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1650535970.1032698}, "macro.dbt_utils.test_relationships_where": {"unique_id": "macro.dbt_utils.test_relationships_where", "package_name": "dbt_utils", "root_path": "/Users/songv/Code/jike/web3/dbt_ethereum_source/dbt_packages/dbt_utils", "path": "macros/generic_tests/relationships_where.sql", "original_file_path": "macros/generic_tests/relationships_where.sql", "name": "test_relationships_where", "macro_sql": "{% test relationships_where(model, column_name, to, field, from_condition=\"1=1\", to_condition=\"1=1\") %}\n  {{ return(adapter.dispatch('test_relationships_where', 'dbt_utils')(model, column_name, to, field, from_condition, to_condition)) }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__test_relationships_where"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1650535970.104196}, "macro.dbt_utils.default__test_relationships_where": {"unique_id": "macro.dbt_utils.default__test_relationships_where", "package_name": "dbt_utils", "root_path": "/Users/songv/Code/jike/web3/dbt_ethereum_source/dbt_packages/dbt_utils", "path": "macros/generic_tests/relationships_where.sql", "original_file_path": "macros/generic_tests/relationships_where.sql", "name": "default__test_relationships_where", "macro_sql": "{% macro default__test_relationships_where(model, column_name, to, field, from_condition=\"1=1\", to_condition=\"1=1\") %}\n\n{# T-SQL has no boolean data type so we use 1=1 which returns TRUE #}\n{# ref https://stackoverflow.com/a/7170753/3842610 #}\n\nwith left_table as (\n\n  select\n    {{column_name}} as id\n\n  from {{model}}\n\n  where {{column_name}} is not null\n    and {{from_condition}}\n\n),\n\nright_table as (\n\n  select\n    {{field}} as id\n\n  from {{to}}\n\n  where {{field}} is not null\n    and {{to_condition}}\n\n),\n\nexceptions as (\n\n  select\n    left_table.id,\n    right_table.id as right_id\n\n  from left_table\n\n  left join right_table\n         on left_table.id = right_table.id\n\n  where right_table.id is null\n\n)\n\nselect * from exceptions\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1650535970.104647}, "macro.dbt_utils.test_recency": {"unique_id": "macro.dbt_utils.test_recency", "package_name": "dbt_utils", "root_path": "/Users/songv/Code/jike/web3/dbt_ethereum_source/dbt_packages/dbt_utils", "path": "macros/generic_tests/recency.sql", "original_file_path": "macros/generic_tests/recency.sql", "name": "test_recency", "macro_sql": "{% test recency(model, field, datepart, interval) %}\n  {{ return(adapter.dispatch('test_recency', 'dbt_utils')(model, field, datepart, interval)) }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__test_recency"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1650535970.1052601}, "macro.dbt_utils.default__test_recency": {"unique_id": "macro.dbt_utils.default__test_recency", "package_name": "dbt_utils", "root_path": "/Users/songv/Code/jike/web3/dbt_ethereum_source/dbt_packages/dbt_utils", "path": "macros/generic_tests/recency.sql", "original_file_path": "macros/generic_tests/recency.sql", "name": "default__test_recency", "macro_sql": "{% macro default__test_recency(model, field, datepart, interval) %}\n\n{% set threshold = dbt_utils.dateadd(datepart, interval * -1, dbt_utils.current_timestamp()) %}\n\nwith recency as (\n\n    select max({{field}}) as most_recent\n    from {{ model }}\n\n)\n\nselect\n\n    most_recent,\n    {{ threshold }} as threshold\n\nfrom recency\nwhere most_recent < {{ threshold }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.dateadd", "macro.dbt_utils.current_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1650535970.1057112}, "macro.dbt_utils.test_not_constant": {"unique_id": "macro.dbt_utils.test_not_constant", "package_name": "dbt_utils", "root_path": "/Users/songv/Code/jike/web3/dbt_ethereum_source/dbt_packages/dbt_utils", "path": "macros/generic_tests/not_constant.sql", "original_file_path": "macros/generic_tests/not_constant.sql", "name": "test_not_constant", "macro_sql": "{% test not_constant(model, column_name) %}\n  {{ return(adapter.dispatch('test_not_constant', 'dbt_utils')(model, column_name)) }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__test_not_constant"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1650535970.106226}, "macro.dbt_utils.default__test_not_constant": {"unique_id": "macro.dbt_utils.default__test_not_constant", "package_name": "dbt_utils", "root_path": "/Users/songv/Code/jike/web3/dbt_ethereum_source/dbt_packages/dbt_utils", "path": "macros/generic_tests/not_constant.sql", "original_file_path": "macros/generic_tests/not_constant.sql", "name": "default__test_not_constant", "macro_sql": "{% macro default__test_not_constant(model, column_name) %}\n\n\nselect\n    {# In TSQL, subquery aggregate columns need aliases #}\n    {# thus: a filler col name, 'filler_column' #}\n    count(distinct {{ column_name }}) as filler_column\n\nfrom {{ model }}\n\nhaving count(distinct {{ column_name }}) = 1\n\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1650535970.1064599}, "macro.dbt_utils.test_accepted_range": {"unique_id": "macro.dbt_utils.test_accepted_range", "package_name": "dbt_utils", "root_path": "/Users/songv/Code/jike/web3/dbt_ethereum_source/dbt_packages/dbt_utils", "path": "macros/generic_tests/accepted_range.sql", "original_file_path": "macros/generic_tests/accepted_range.sql", "name": "test_accepted_range", "macro_sql": "{% test accepted_range(model, column_name, min_value=none, max_value=none, inclusive=true) %}\n  {{ return(adapter.dispatch('test_accepted_range', 'dbt_utils')(model, column_name, min_value, max_value, inclusive)) }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__test_accepted_range"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1650535970.1073248}, "macro.dbt_utils.default__test_accepted_range": {"unique_id": "macro.dbt_utils.default__test_accepted_range", "package_name": "dbt_utils", "root_path": "/Users/songv/Code/jike/web3/dbt_ethereum_source/dbt_packages/dbt_utils", "path": "macros/generic_tests/accepted_range.sql", "original_file_path": "macros/generic_tests/accepted_range.sql", "name": "default__test_accepted_range", "macro_sql": "{% macro default__test_accepted_range(model, column_name, min_value=none, max_value=none, inclusive=true) %}\n\nwith meet_condition as(\n  select *\n  from {{ model }}\n),\n\nvalidation_errors as (\n  select *\n  from meet_condition\n  where\n    -- never true, defaults to an empty result set. Exists to ensure any combo of the `or` clauses below succeeds\n    1 = 2\n\n  {%- if min_value is not none %}\n    -- records with a value >= min_value are permitted. The `not` flips this to find records that don't meet the rule.\n    or not {{ column_name }} > {{- \"=\" if inclusive }} {{ min_value }}\n  {%- endif %}\n\n  {%- if max_value is not none %}\n    -- records with a value <= max_value are permitted. The `not` flips this to find records that don't meet the rule.\n    or not {{ column_name }} < {{- \"=\" if inclusive }} {{ max_value }}\n  {%- endif %}\n)\n\nselect *\nfrom validation_errors\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1650535970.1082618}, "macro.dbt_utils.test_not_accepted_values": {"unique_id": "macro.dbt_utils.test_not_accepted_values", "package_name": "dbt_utils", "root_path": "/Users/songv/Code/jike/web3/dbt_ethereum_source/dbt_packages/dbt_utils", "path": "macros/generic_tests/not_accepted_values.sql", "original_file_path": "macros/generic_tests/not_accepted_values.sql", "name": "test_not_accepted_values", "macro_sql": "{% test not_accepted_values(model, column_name, values, quote=True) %}\n  {{ return(adapter.dispatch('test_not_accepted_values', 'dbt_utils')(model, column_name, values, quote)) }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__test_not_accepted_values"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1650535970.10905}, "macro.dbt_utils.default__test_not_accepted_values": {"unique_id": "macro.dbt_utils.default__test_not_accepted_values", "package_name": "dbt_utils", "root_path": "/Users/songv/Code/jike/web3/dbt_ethereum_source/dbt_packages/dbt_utils", "path": "macros/generic_tests/not_accepted_values.sql", "original_file_path": "macros/generic_tests/not_accepted_values.sql", "name": "default__test_not_accepted_values", "macro_sql": "{% macro default__test_not_accepted_values(model, column_name, values, quote=True) %}\nwith all_values as (\n\n    select distinct\n        {{ column_name }} as value_field\n\n    from {{ model }}\n\n),\n\nvalidation_errors as (\n\n    select\n        value_field\n\n    from all_values\n    where value_field in (\n        {% for value in values -%}\n            {% if quote -%}\n            '{{ value }}'\n            {%- else -%}\n            {{ value }}\n            {%- endif -%}\n            {%- if not loop.last -%},{%- endif %}\n        {%- endfor %}\n        )\n\n)\n\nselect *\nfrom validation_errors\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1650535970.1095612}, "macro.dbt_utils.test_unique_where": {"unique_id": "macro.dbt_utils.test_unique_where", "package_name": "dbt_utils", "root_path": "/Users/songv/Code/jike/web3/dbt_ethereum_source/dbt_packages/dbt_utils", "path": "macros/generic_tests/test_unique_where.sql", "original_file_path": "macros/generic_tests/test_unique_where.sql", "name": "test_unique_where", "macro_sql": "{% test unique_where(model, column_name) %}\r\n  {%- set deprecation_warning = '\r\n    Warning: `dbt_utils.unique_where` is no longer supported.\r\n    Starting in dbt v0.20.0, the built-in `unique` test supports a `where` config.\r\n    ' -%}\r\n  {%- do exceptions.warn(deprecation_warning) -%}\r\n  {{ return(adapter.dispatch('test_unique_where', 'dbt_utils')(model, column_name)) }}\r\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__test_unique_where"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1650535970.110206}, "macro.dbt_utils.default__test_unique_where": {"unique_id": "macro.dbt_utils.default__test_unique_where", "package_name": "dbt_utils", "root_path": "/Users/songv/Code/jike/web3/dbt_ethereum_source/dbt_packages/dbt_utils", "path": "macros/generic_tests/test_unique_where.sql", "original_file_path": "macros/generic_tests/test_unique_where.sql", "name": "default__test_unique_where", "macro_sql": "{% macro default__test_unique_where(model, column_name) %}\r\n  {{ return(test_unique(model, column_name)) }}\r\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.test_unique"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1650535970.110434}, "macro.dbt_utils.test_at_least_one": {"unique_id": "macro.dbt_utils.test_at_least_one", "package_name": "dbt_utils", "root_path": "/Users/songv/Code/jike/web3/dbt_ethereum_source/dbt_packages/dbt_utils", "path": "macros/generic_tests/at_least_one.sql", "original_file_path": "macros/generic_tests/at_least_one.sql", "name": "test_at_least_one", "macro_sql": "{% test at_least_one(model, column_name) %}\n  {{ return(adapter.dispatch('test_at_least_one', 'dbt_utils')(model, column_name)) }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__test_at_least_one"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1650535970.110971}, "macro.dbt_utils.default__test_at_least_one": {"unique_id": "macro.dbt_utils.default__test_at_least_one", "package_name": "dbt_utils", "root_path": "/Users/songv/Code/jike/web3/dbt_ethereum_source/dbt_packages/dbt_utils", "path": "macros/generic_tests/at_least_one.sql", "original_file_path": "macros/generic_tests/at_least_one.sql", "name": "default__test_at_least_one", "macro_sql": "{% macro default__test_at_least_one(model, column_name) %}\n\nselect *\nfrom (\n    select\n        {# In TSQL, subquery aggregate columns need aliases #}\n        {# thus: a filler col name, 'filler_column' #}\n      count({{ column_name }}) as filler_column\n\n    from {{ model }}\n\n    having count({{ column_name }}) = 0\n\n) validation_errors\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1650535970.111221}, "macro.dbt_utils.test_unique_combination_of_columns": {"unique_id": "macro.dbt_utils.test_unique_combination_of_columns", "package_name": "dbt_utils", "root_path": "/Users/songv/Code/jike/web3/dbt_ethereum_source/dbt_packages/dbt_utils", "path": "macros/generic_tests/unique_combination_of_columns.sql", "original_file_path": "macros/generic_tests/unique_combination_of_columns.sql", "name": "test_unique_combination_of_columns", "macro_sql": "{% test unique_combination_of_columns(model, combination_of_columns, quote_columns=false) %}\n  {{ return(adapter.dispatch('test_unique_combination_of_columns', 'dbt_utils')(model, combination_of_columns, quote_columns)) }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__test_unique_combination_of_columns"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1650535970.129482}, "macro.dbt_utils.default__test_unique_combination_of_columns": {"unique_id": "macro.dbt_utils.default__test_unique_combination_of_columns", "package_name": "dbt_utils", "root_path": "/Users/songv/Code/jike/web3/dbt_ethereum_source/dbt_packages/dbt_utils", "path": "macros/generic_tests/unique_combination_of_columns.sql", "original_file_path": "macros/generic_tests/unique_combination_of_columns.sql", "name": "default__test_unique_combination_of_columns", "macro_sql": "{% macro default__test_unique_combination_of_columns(model, combination_of_columns, quote_columns=false) %}\n\n{% if not quote_columns %}\n    {%- set column_list=combination_of_columns %}\n{% elif quote_columns %}\n    {%- set column_list=[] %}\n        {% for column in combination_of_columns -%}\n            {% set column_list = column_list.append( adapter.quote(column) ) %}\n        {%- endfor %}\n{% else %}\n    {{ exceptions.raise_compiler_error(\n        \"`quote_columns` argument for unique_combination_of_columns test must be one of [True, False] Got: '\" ~ quote ~\"'.'\"\n    ) }}\n{% endif %}\n\n{%- set columns_csv=column_list | join(', ') %}\n\n\nwith validation_errors as (\n\n    select\n        {{ columns_csv }}\n    from {{ model }}\n    group by {{ columns_csv }}\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1650535970.130359}, "macro.dbt_utils.test_cardinality_equality": {"unique_id": "macro.dbt_utils.test_cardinality_equality", "package_name": "dbt_utils", "root_path": "/Users/songv/Code/jike/web3/dbt_ethereum_source/dbt_packages/dbt_utils", "path": "macros/generic_tests/cardinality_equality.sql", "original_file_path": "macros/generic_tests/cardinality_equality.sql", "name": "test_cardinality_equality", "macro_sql": "{% test cardinality_equality(model, column_name, to, field) %}\n    {{ return(adapter.dispatch('test_cardinality_equality', 'dbt_utils')(model, column_name, to, field)) }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__test_cardinality_equality"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1650535970.1482959}, "macro.dbt_utils.default__test_cardinality_equality": {"unique_id": "macro.dbt_utils.default__test_cardinality_equality", "package_name": "dbt_utils", "root_path": "/Users/songv/Code/jike/web3/dbt_ethereum_source/dbt_packages/dbt_utils", "path": "macros/generic_tests/cardinality_equality.sql", "original_file_path": "macros/generic_tests/cardinality_equality.sql", "name": "default__test_cardinality_equality", "macro_sql": "{% macro default__test_cardinality_equality(model, column_name, to, field) %}\n\n{# T-SQL does not let you use numbers as aliases for columns #}\n{# Thus, no \"GROUP BY 1\" #}\n\nwith table_a as (\nselect\n  {{ column_name }},\n  count(*) as num_rows\nfrom {{ model }}\ngroup by {{ column_name }}\n),\n\ntable_b as (\nselect\n  {{ field }},\n  count(*) as num_rows\nfrom {{ to }}\ngroup by {{ field }}\n),\n\nexcept_a as (\n  select *\n  from table_a\n  {{ dbt_utils.except() }}\n  select *\n  from table_b\n),\n\nexcept_b as (\n  select *\n  from table_b\n  {{ dbt_utils.except() }}\n  select *\n  from table_a\n),\n\nunioned as (\n  select *\n  from except_a\n  union all\n  select *\n  from except_b\n)\n\nselect *\nfrom unioned\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.except"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1650535970.1487732}, "macro.dbt_utils.test_expression_is_true": {"unique_id": "macro.dbt_utils.test_expression_is_true", "package_name": "dbt_utils", "root_path": "/Users/songv/Code/jike/web3/dbt_ethereum_source/dbt_packages/dbt_utils", "path": "macros/generic_tests/expression_is_true.sql", "original_file_path": "macros/generic_tests/expression_is_true.sql", "name": "test_expression_is_true", "macro_sql": "{% test expression_is_true(model, expression, column_name=None, condition='1=1') %}\n{# T-SQL has no boolean data type so we use 1=1 which returns TRUE #}\n{# ref https://stackoverflow.com/a/7170753/3842610 #}\n  {{ return(adapter.dispatch('test_expression_is_true', 'dbt_utils')(model, expression, column_name, condition)) }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__test_expression_is_true"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1650535970.1495721}, "macro.dbt_utils.default__test_expression_is_true": {"unique_id": "macro.dbt_utils.default__test_expression_is_true", "package_name": "dbt_utils", "root_path": "/Users/songv/Code/jike/web3/dbt_ethereum_source/dbt_packages/dbt_utils", "path": "macros/generic_tests/expression_is_true.sql", "original_file_path": "macros/generic_tests/expression_is_true.sql", "name": "default__test_expression_is_true", "macro_sql": "{% macro default__test_expression_is_true(model, expression, column_name, condition) %}\n\nwith meet_condition as (\n    select * from {{ model }} where {{ condition }}\n)\n\nselect\n    *\nfrom meet_condition\n{% if column_name is none %}\nwhere not({{ expression }})\n{%- else %}\nwhere not({{ column_name }} {{ expression }})\n{%- endif %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1650535970.149972}, "macro.dbt_utils.test_not_null_proportion": {"unique_id": "macro.dbt_utils.test_not_null_proportion", "package_name": "dbt_utils", "root_path": "/Users/songv/Code/jike/web3/dbt_ethereum_source/dbt_packages/dbt_utils", "path": "macros/generic_tests/not_null_proportion.sql", "original_file_path": "macros/generic_tests/not_null_proportion.sql", "name": "test_not_null_proportion", "macro_sql": "{% macro test_not_null_proportion(model) %}\n  {{ return(adapter.dispatch('test_not_null_proportion', 'dbt_utils')(model, **kwargs)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__test_not_null_proportion"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1650535970.166083}, "macro.dbt_utils.default__test_not_null_proportion": {"unique_id": "macro.dbt_utils.default__test_not_null_proportion", "package_name": "dbt_utils", "root_path": "/Users/songv/Code/jike/web3/dbt_ethereum_source/dbt_packages/dbt_utils", "path": "macros/generic_tests/not_null_proportion.sql", "original_file_path": "macros/generic_tests/not_null_proportion.sql", "name": "default__test_not_null_proportion", "macro_sql": "{% macro default__test_not_null_proportion(model) %}\n\n{% set column_name = kwargs.get('column_name', kwargs.get('arg')) %}\n{% set at_least = kwargs.get('at_least', kwargs.get('arg')) %}\n{% set at_most = kwargs.get('at_most', kwargs.get('arg', 1)) %}\n\nwith validation as (\n  select\n    sum(case when {{ column_name }} is null then 0 else 1 end) / cast(count(*) as numeric) as not_null_proportion\n  from {{ model }}\n),\nvalidation_errors as (\n  select\n    not_null_proportion\n  from validation\n  where not_null_proportion < {{ at_least }} or not_null_proportion > {{ at_most }}\n)\nselect\n  *\nfrom validation_errors\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1650535970.166807}, "macro.dbt_utils.test_sequential_values": {"unique_id": "macro.dbt_utils.test_sequential_values", "package_name": "dbt_utils", "root_path": "/Users/songv/Code/jike/web3/dbt_ethereum_source/dbt_packages/dbt_utils", "path": "macros/generic_tests/sequential_values.sql", "original_file_path": "macros/generic_tests/sequential_values.sql", "name": "test_sequential_values", "macro_sql": "{% test sequential_values(model, column_name, interval=1, datepart=None) %}\n\n  {{ return(adapter.dispatch('test_sequential_values', 'dbt_utils')(model, column_name, interval, datepart)) }}\n\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__test_sequential_values"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1650535970.185198}, "macro.dbt_utils.default__test_sequential_values": {"unique_id": "macro.dbt_utils.default__test_sequential_values", "package_name": "dbt_utils", "root_path": "/Users/songv/Code/jike/web3/dbt_ethereum_source/dbt_packages/dbt_utils", "path": "macros/generic_tests/sequential_values.sql", "original_file_path": "macros/generic_tests/sequential_values.sql", "name": "default__test_sequential_values", "macro_sql": "{% macro default__test_sequential_values(model, column_name, interval=1, datepart=None) %}\n\n{% set previous_column_name = \"previous_\" ~ dbt_utils.slugify(column_name) %}\n\nwith windowed as (\n\n    select\n        {{ column_name }},\n        lag({{ column_name }}) over (\n            order by {{ column_name }}\n        ) as {{ previous_column_name }}\n    from {{ model }}\n),\n\nvalidation_errors as (\n    select\n        *\n    from windowed\n    {% if datepart %}\n    where not(cast({{ column_name }} as {{ dbt_utils.type_timestamp() }})= cast({{ dbt_utils.dateadd(datepart, interval, previous_column_name) }} as {{ dbt_utils.type_timestamp() }}))\n    {% else %}\n    where not({{ column_name }} = {{ previous_column_name }} + {{ interval }})\n    {% endif %}\n)\n\nselect *\nfrom validation_errors\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.slugify", "macro.dbt_utils.type_timestamp", "macro.dbt_utils.dateadd"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1650535970.1861591}, "macro.dbt_utils.test_not_null_where": {"unique_id": "macro.dbt_utils.test_not_null_where", "package_name": "dbt_utils", "root_path": "/Users/songv/Code/jike/web3/dbt_ethereum_source/dbt_packages/dbt_utils", "path": "macros/generic_tests/test_not_null_where.sql", "original_file_path": "macros/generic_tests/test_not_null_where.sql", "name": "test_not_null_where", "macro_sql": "{% test not_null_where(model, column_name) %}\r\n  {%- set deprecation_warning = '\r\n    Warning: `dbt_utils.not_null_where` is no longer supported.\r\n    Starting in dbt v0.20.0, the built-in `not_null` test supports a `where` config.\r\n    ' -%}\r\n  {%- do exceptions.warn(deprecation_warning) -%}\r\n  {{ return(adapter.dispatch('test_not_null_where', 'dbt_utils')(model, column_name)) }}\r\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__test_not_null_where"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1650535970.1868858}, "macro.dbt_utils.default__test_not_null_where": {"unique_id": "macro.dbt_utils.default__test_not_null_where", "package_name": "dbt_utils", "root_path": "/Users/songv/Code/jike/web3/dbt_ethereum_source/dbt_packages/dbt_utils", "path": "macros/generic_tests/test_not_null_where.sql", "original_file_path": "macros/generic_tests/test_not_null_where.sql", "name": "default__test_not_null_where", "macro_sql": "{% macro default__test_not_null_where(model, column_name) %}\r\n  {{ return(test_not_null(model, column_name)) }}\r\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.test_not_null"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1650535970.1871328}, "macro.dbt_utils.test_equality": {"unique_id": "macro.dbt_utils.test_equality", "package_name": "dbt_utils", "root_path": "/Users/songv/Code/jike/web3/dbt_ethereum_source/dbt_packages/dbt_utils", "path": "macros/generic_tests/equality.sql", "original_file_path": "macros/generic_tests/equality.sql", "name": "test_equality", "macro_sql": "{% test equality(model, compare_model, compare_columns=None) %}\n  {{ return(adapter.dispatch('test_equality', 'dbt_utils')(model, compare_model, compare_columns)) }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__test_equality"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1650535970.188179}, "macro.dbt_utils.default__test_equality": {"unique_id": "macro.dbt_utils.default__test_equality", "package_name": "dbt_utils", "root_path": "/Users/songv/Code/jike/web3/dbt_ethereum_source/dbt_packages/dbt_utils", "path": "macros/generic_tests/equality.sql", "original_file_path": "macros/generic_tests/equality.sql", "name": "default__test_equality", "macro_sql": "{% macro default__test_equality(model, compare_model, compare_columns=None) %}\n\n{% set set_diff %}\n    count(*) + coalesce(abs(\n        sum(case when which_diff = 'a_minus_b' then 1 else 0 end) -\n        sum(case when which_diff = 'b_minus_a' then 1 else 0 end)\n    ), 0)\n{% endset %}\n\n{#-- Needs to be set at parse time, before we return '' below --#}\n{{ config(fail_calc = set_diff) }}\n\n{#-- Prevent querying of db in parsing mode. This works because this macro does not create any new refs. #}\n{%- if not execute -%}\n    {{ return('') }}\n{% endif %}\n\n-- setup\n{%- do dbt_utils._is_relation(model, 'test_equality') -%}\n\n{#-\nIf the compare_cols arg is provided, we can run this test without querying the\ninformation schema\u00a0\u2014 this allows the model to be an ephemeral model\n-#}\n\n{%- if not compare_columns -%}\n    {%- do dbt_utils._is_ephemeral(model, 'test_equality') -%}\n    {%- set compare_columns = adapter.get_columns_in_relation(model) | map(attribute='quoted') -%}\n{%- endif -%}\n\n{% set compare_cols_csv = compare_columns | join(', ') %}\n\nwith a as (\n\n    select * from {{ model }}\n\n),\n\nb as (\n\n    select * from {{ compare_model }}\n\n),\n\na_minus_b as (\n\n    select {{compare_cols_csv}} from a\n    {{ dbt_utils.except() }}\n    select {{compare_cols_csv}} from b\n\n),\n\nb_minus_a as (\n\n    select {{compare_cols_csv}} from b\n    {{ dbt_utils.except() }}\n    select {{compare_cols_csv}} from a\n\n),\n\nunioned as (\n\n    select 'a_minus_b' as which_diff, a_minus_b.* from a_minus_b\n    union all\n    select 'b_minus_a' as which_diff, b_minus_a.* from b_minus_a\n\n)\n\nselect * from unioned\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils._is_relation", "macro.dbt_utils._is_ephemeral", "macro.dbt_utils.except"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1650535970.189437}, "macro.dbt_utils.test_mutually_exclusive_ranges": {"unique_id": "macro.dbt_utils.test_mutually_exclusive_ranges", "package_name": "dbt_utils", "root_path": "/Users/songv/Code/jike/web3/dbt_ethereum_source/dbt_packages/dbt_utils", "path": "macros/generic_tests/mutually_exclusive_ranges.sql", "original_file_path": "macros/generic_tests/mutually_exclusive_ranges.sql", "name": "test_mutually_exclusive_ranges", "macro_sql": "{% test mutually_exclusive_ranges(model, lower_bound_column, upper_bound_column, partition_by=None, gaps='allowed', zero_length_range_allowed=False) %}\n  {{ return(adapter.dispatch('test_mutually_exclusive_ranges', 'dbt_utils')(model, lower_bound_column, upper_bound_column, partition_by, gaps, zero_length_range_allowed)) }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__test_mutually_exclusive_ranges"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1650535970.19346}, "macro.dbt_utils.default__test_mutually_exclusive_ranges": {"unique_id": "macro.dbt_utils.default__test_mutually_exclusive_ranges", "package_name": "dbt_utils", "root_path": "/Users/songv/Code/jike/web3/dbt_ethereum_source/dbt_packages/dbt_utils", "path": "macros/generic_tests/mutually_exclusive_ranges.sql", "original_file_path": "macros/generic_tests/mutually_exclusive_ranges.sql", "name": "default__test_mutually_exclusive_ranges", "macro_sql": "{% macro default__test_mutually_exclusive_ranges(model, lower_bound_column, upper_bound_column, partition_by=None, gaps='allowed', zero_length_range_allowed=False) %}\n{% if gaps == 'not_allowed' %}\n    {% set allow_gaps_operator='=' %}\n    {% set allow_gaps_operator_in_words='equal_to' %}\n{% elif gaps == 'allowed' %}\n    {% set allow_gaps_operator='<=' %}\n    {% set allow_gaps_operator_in_words='less_than_or_equal_to' %}\n{% elif gaps == 'required' %}\n    {% set allow_gaps_operator='<' %}\n    {% set allow_gaps_operator_in_words='less_than' %}\n{% else %}\n    {{ exceptions.raise_compiler_error(\n        \"`gaps` argument for mutually_exclusive_ranges test must be one of ['not_allowed', 'allowed', 'required'] Got: '\" ~ gaps ~\"'.'\"\n    ) }}\n{% endif %}\n{% if not zero_length_range_allowed %}\n    {% set allow_zero_length_operator='<' %}\n    {% set allow_zero_length_operator_in_words='less_than' %}\n{% elif zero_length_range_allowed %}\n    {% set allow_zero_length_operator='<=' %}\n    {% set allow_zero_length_operator_in_words='less_than_or_equal_to' %}\n{% else %}\n    {{ exceptions.raise_compiler_error(\n        \"`zero_length_range_allowed` argument for mutually_exclusive_ranges test must be one of [true, false] Got: '\" ~ zero_length_range_allowed ~\"'.'\"\n    ) }}\n{% endif %}\n\n{% set partition_clause=\"partition by \" ~ partition_by if partition_by else '' %}\n\nwith window_functions as (\n\n    select\n        {% if partition_by %}\n        {{ partition_by }} as partition_by_col,\n        {% endif %}\n        {{ lower_bound_column }} as lower_bound,\n        {{ upper_bound_column }} as upper_bound,\n\n        lead({{ lower_bound_column }}) over (\n            {{ partition_clause }}\n            order by {{ lower_bound_column }}\n        ) as next_lower_bound,\n\n        row_number() over (\n            {{ partition_clause }}\n            order by {{ lower_bound_column }} desc\n        ) = 1 as is_last_record\n\n    from {{ model }}\n\n),\n\ncalc as (\n    -- We want to return records where one of our assumptions fails, so we'll use\n    -- the `not` function with `and` statements so we can write our assumptions nore cleanly\n    select\n        *,\n\n        -- For each record: lower_bound should be < upper_bound.\n        -- Coalesce it to return an error on the null case (implicit assumption\n        -- these columns are not_null)\n        coalesce(\n            lower_bound {{ allow_zero_length_operator }} upper_bound,\n            false\n        ) as lower_bound_{{ allow_zero_length_operator_in_words }}_upper_bound,\n\n        -- For each record: upper_bound {{ allow_gaps_operator }} the next lower_bound.\n        -- Coalesce it to handle null cases for the last record.\n        coalesce(\n            upper_bound {{ allow_gaps_operator }} next_lower_bound,\n            is_last_record,\n            false\n        ) as upper_bound_{{ allow_gaps_operator_in_words }}_next_lower_bound\n\n    from window_functions\n\n),\n\nvalidation_errors as (\n\n    select\n        *\n    from calc\n\n    where not(\n        -- THE FOLLOWING SHOULD BE TRUE --\n        lower_bound_{{ allow_zero_length_operator_in_words }}_upper_bound\n        and upper_bound_{{ allow_gaps_operator_in_words }}_next_lower_bound\n    )\n)\n\nselect * from validation_errors\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1650535970.195474}, "macro.dbt_utils.pretty_log_format": {"unique_id": "macro.dbt_utils.pretty_log_format", "package_name": "dbt_utils", "root_path": "/Users/songv/Code/jike/web3/dbt_ethereum_source/dbt_packages/dbt_utils", "path": "macros/jinja_helpers/pretty_log_format.sql", "original_file_path": "macros/jinja_helpers/pretty_log_format.sql", "name": "pretty_log_format", "macro_sql": "{% macro pretty_log_format(message) %}\n    {{ return(adapter.dispatch('pretty_log_format', 'dbt_utils')(message)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__pretty_log_format"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1650535970.207812}, "macro.dbt_utils.default__pretty_log_format": {"unique_id": "macro.dbt_utils.default__pretty_log_format", "package_name": "dbt_utils", "root_path": "/Users/songv/Code/jike/web3/dbt_ethereum_source/dbt_packages/dbt_utils", "path": "macros/jinja_helpers/pretty_log_format.sql", "original_file_path": "macros/jinja_helpers/pretty_log_format.sql", "name": "default__pretty_log_format", "macro_sql": "{% macro default__pretty_log_format(message) %}\n    {{ return( dbt_utils.pretty_time() ~ ' + ' ~ message) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.pretty_time"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1650535970.20803}, "macro.dbt_utils.pretty_time": {"unique_id": "macro.dbt_utils.pretty_time", "package_name": "dbt_utils", "root_path": "/Users/songv/Code/jike/web3/dbt_ethereum_source/dbt_packages/dbt_utils", "path": "macros/jinja_helpers/pretty_time.sql", "original_file_path": "macros/jinja_helpers/pretty_time.sql", "name": "pretty_time", "macro_sql": "{% macro pretty_time(format='%H:%M:%S') %}\n    {{ return(adapter.dispatch('pretty_time', 'dbt_utils')(format)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__pretty_time"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1650535970.208527}, "macro.dbt_utils.default__pretty_time": {"unique_id": "macro.dbt_utils.default__pretty_time", "package_name": "dbt_utils", "root_path": "/Users/songv/Code/jike/web3/dbt_ethereum_source/dbt_packages/dbt_utils", "path": "macros/jinja_helpers/pretty_time.sql", "original_file_path": "macros/jinja_helpers/pretty_time.sql", "name": "default__pretty_time", "macro_sql": "{% macro default__pretty_time(format='%H:%M:%S') %}\n    {{ return(modules.datetime.datetime.now().strftime(format)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1650535970.208791}, "macro.dbt_utils.log_info": {"unique_id": "macro.dbt_utils.log_info", "package_name": "dbt_utils", "root_path": "/Users/songv/Code/jike/web3/dbt_ethereum_source/dbt_packages/dbt_utils", "path": "macros/jinja_helpers/log_info.sql", "original_file_path": "macros/jinja_helpers/log_info.sql", "name": "log_info", "macro_sql": "{% macro log_info(message) %}\n    {{ return(adapter.dispatch('log_info', 'dbt_utils')(message)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__log_info"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1650535970.225922}, "macro.dbt_utils.default__log_info": {"unique_id": "macro.dbt_utils.default__log_info", "package_name": "dbt_utils", "root_path": "/Users/songv/Code/jike/web3/dbt_ethereum_source/dbt_packages/dbt_utils", "path": "macros/jinja_helpers/log_info.sql", "original_file_path": "macros/jinja_helpers/log_info.sql", "name": "default__log_info", "macro_sql": "{% macro default__log_info(message) %}\n    {{ log(dbt_utils.pretty_log_format(message), info=True) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.pretty_log_format"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1650535970.226184}, "macro.dbt_utils.slugify": {"unique_id": "macro.dbt_utils.slugify", "package_name": "dbt_utils", "root_path": "/Users/songv/Code/jike/web3/dbt_ethereum_source/dbt_packages/dbt_utils", "path": "macros/jinja_helpers/slugify.sql", "original_file_path": "macros/jinja_helpers/slugify.sql", "name": "slugify", "macro_sql": "{% macro slugify(string) %}\n\n{#- Lower case the string -#}\n{% set string = string | lower %}\n{#- Replace spaces and dashes with underscores -#}\n{% set string = modules.re.sub('[ -]+', '_', string) %}\n{#- Only take letters, numbers, and underscores -#}\n{% set string = modules.re.sub('[^a-z0-9_]+', '', string) %}\n\n{{ return(string) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1650535970.2269928}, "macro.dbt_utils.get_intervals_between": {"unique_id": "macro.dbt_utils.get_intervals_between", "package_name": "dbt_utils", "root_path": "/Users/songv/Code/jike/web3/dbt_ethereum_source/dbt_packages/dbt_utils", "path": "macros/sql/date_spine.sql", "original_file_path": "macros/sql/date_spine.sql", "name": "get_intervals_between", "macro_sql": "{% macro get_intervals_between(start_date, end_date, datepart) -%}\n    {{ return(adapter.dispatch('get_intervals_between', 'dbt_utils')(start_date, end_date, datepart)) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__get_intervals_between"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1650535970.244905}, "macro.dbt_utils.default__get_intervals_between": {"unique_id": "macro.dbt_utils.default__get_intervals_between", "package_name": "dbt_utils", "root_path": "/Users/songv/Code/jike/web3/dbt_ethereum_source/dbt_packages/dbt_utils", "path": "macros/sql/date_spine.sql", "original_file_path": "macros/sql/date_spine.sql", "name": "default__get_intervals_between", "macro_sql": "{% macro default__get_intervals_between(start_date, end_date, datepart) -%}\n    {%- call statement('get_intervals_between', fetch_result=True) %}\n\n        select {{dbt_utils.datediff(start_date, end_date, datepart)}}\n\n    {%- endcall -%}\n\n    {%- set value_list = load_result('get_intervals_between') -%}\n\n    {%- if value_list and value_list['data'] -%}\n        {%- set values = value_list['data'] | map(attribute=0) | list %}\n        {{ return(values[0]) }}\n    {%- else -%}\n        {{ return(1) }}\n    {%- endif -%}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt_utils.datediff"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1650535970.2457988}, "macro.dbt_utils.date_spine": {"unique_id": "macro.dbt_utils.date_spine", "package_name": "dbt_utils", "root_path": "/Users/songv/Code/jike/web3/dbt_ethereum_source/dbt_packages/dbt_utils", "path": "macros/sql/date_spine.sql", "original_file_path": "macros/sql/date_spine.sql", "name": "date_spine", "macro_sql": "{% macro date_spine(datepart, start_date, end_date) %}\n    {{ return(adapter.dispatch('date_spine', 'dbt_utils')(datepart, start_date, end_date)) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__date_spine"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1650535970.246145}, "macro.dbt_utils.default__date_spine": {"unique_id": "macro.dbt_utils.default__date_spine", "package_name": "dbt_utils", "root_path": "/Users/songv/Code/jike/web3/dbt_ethereum_source/dbt_packages/dbt_utils", "path": "macros/sql/date_spine.sql", "original_file_path": "macros/sql/date_spine.sql", "name": "default__date_spine", "macro_sql": "{% macro default__date_spine(datepart, start_date, end_date) %}\n\n\n{# call as follows:\n\ndate_spine(\n    \"day\",\n    \"to_date('01/01/2016', 'mm/dd/yyyy')\",\n    \"dateadd(week, 1, current_date)\"\n) #}\n\n\nwith rawdata as (\n\n    {{dbt_utils.generate_series(\n        dbt_utils.get_intervals_between(start_date, end_date, datepart)\n    )}}\n\n),\n\nall_periods as (\n\n    select (\n        {{\n            dbt_utils.dateadd(\n                datepart,\n                \"row_number() over (order by 1) - 1\",\n                start_date\n            )\n        }}\n    ) as date_{{datepart}}\n    from rawdata\n\n),\n\nfiltered as (\n\n    select *\n    from all_periods\n    where date_{{datepart}} <= {{ end_date }}\n\n)\n\nselect * from filtered\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.generate_series", "macro.dbt_utils.get_intervals_between", "macro.dbt_utils.dateadd"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1650535970.246678}, "macro.dbt_utils.nullcheck_table": {"unique_id": "macro.dbt_utils.nullcheck_table", "package_name": "dbt_utils", "root_path": "/Users/songv/Code/jike/web3/dbt_ethereum_source/dbt_packages/dbt_utils", "path": "macros/sql/nullcheck_table.sql", "original_file_path": "macros/sql/nullcheck_table.sql", "name": "nullcheck_table", "macro_sql": "{% macro nullcheck_table(relation) %}\n    {{ return(adapter.dispatch('nullcheck_table', 'dbt_utils')(relation)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__nullcheck_table"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1650535970.262929}, "macro.dbt_utils.default__nullcheck_table": {"unique_id": "macro.dbt_utils.default__nullcheck_table", "package_name": "dbt_utils", "root_path": "/Users/songv/Code/jike/web3/dbt_ethereum_source/dbt_packages/dbt_utils", "path": "macros/sql/nullcheck_table.sql", "original_file_path": "macros/sql/nullcheck_table.sql", "name": "default__nullcheck_table", "macro_sql": "{% macro default__nullcheck_table(relation) %}\n\n  {%- do dbt_utils._is_relation(relation, 'nullcheck_table') -%}\n  {%- do dbt_utils._is_ephemeral(relation, 'nullcheck_table') -%}\n  {% set cols = adapter.get_columns_in_relation(relation) %}\n\n  select {{ dbt_utils.nullcheck(cols) }}\n  from {{relation}}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils._is_relation", "macro.dbt_utils._is_ephemeral", "macro.dbt_utils.nullcheck"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1650535970.263662}, "macro.dbt_utils.get_relations_by_pattern": {"unique_id": "macro.dbt_utils.get_relations_by_pattern", "package_name": "dbt_utils", "root_path": "/Users/songv/Code/jike/web3/dbt_ethereum_source/dbt_packages/dbt_utils", "path": "macros/sql/get_relations_by_pattern.sql", "original_file_path": "macros/sql/get_relations_by_pattern.sql", "name": "get_relations_by_pattern", "macro_sql": "{% macro get_relations_by_pattern(schema_pattern, table_pattern, exclude='', database=target.database) %}\n    {{ return(adapter.dispatch('get_relations_by_pattern', 'dbt_utils')(schema_pattern, table_pattern, exclude, database)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__get_relations_by_pattern"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1650535970.2648718}, "macro.dbt_utils.default__get_relations_by_pattern": {"unique_id": "macro.dbt_utils.default__get_relations_by_pattern", "package_name": "dbt_utils", "root_path": "/Users/songv/Code/jike/web3/dbt_ethereum_source/dbt_packages/dbt_utils", "path": "macros/sql/get_relations_by_pattern.sql", "original_file_path": "macros/sql/get_relations_by_pattern.sql", "name": "default__get_relations_by_pattern", "macro_sql": "{% macro default__get_relations_by_pattern(schema_pattern, table_pattern, exclude='', database=target.database) %}\n\n    {%- call statement('get_tables', fetch_result=True) %}\n\n      {{ dbt_utils.get_tables_by_pattern_sql(schema_pattern, table_pattern, exclude, database) }}\n\n    {%- endcall -%}\n\n    {%- set table_list = load_result('get_tables') -%}\n\n    {%- if table_list and table_list['table'] -%}\n        {%- set tbl_relations = [] -%}\n        {%- for row in table_list['table'] -%}\n            {%- set tbl_relation = api.Relation.create(\n                database=database,\n                schema=row.table_schema,\n                identifier=row.table_name,\n                type=row.table_type\n            ) -%}\n            {%- do tbl_relations.append(tbl_relation) -%}\n        {%- endfor -%}\n\n        {{ return(tbl_relations) }}\n    {%- else -%}\n        {{ return([]) }}\n    {%- endif -%}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt_utils.get_tables_by_pattern_sql"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1650535970.266303}, "macro.dbt_utils.get_powers_of_two": {"unique_id": "macro.dbt_utils.get_powers_of_two", "package_name": "dbt_utils", "root_path": "/Users/songv/Code/jike/web3/dbt_ethereum_source/dbt_packages/dbt_utils", "path": "macros/sql/generate_series.sql", "original_file_path": "macros/sql/generate_series.sql", "name": "get_powers_of_two", "macro_sql": "{% macro get_powers_of_two(upper_bound) %}\n    {{ return(adapter.dispatch('get_powers_of_two', 'dbt_utils')(upper_bound)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__get_powers_of_two"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1650535970.267616}, "macro.dbt_utils.default__get_powers_of_two": {"unique_id": "macro.dbt_utils.default__get_powers_of_two", "package_name": "dbt_utils", "root_path": "/Users/songv/Code/jike/web3/dbt_ethereum_source/dbt_packages/dbt_utils", "path": "macros/sql/generate_series.sql", "original_file_path": "macros/sql/generate_series.sql", "name": "default__get_powers_of_two", "macro_sql": "{% macro default__get_powers_of_two(upper_bound) %}\n\n    {% if upper_bound <= 0 %}\n    {{ exceptions.raise_compiler_error(\"upper bound must be positive\") }}\n    {% endif %}\n\n    {% for _ in range(1, 100) %}\n       {% if upper_bound <= 2 ** loop.index %}{{ return(loop.index) }}{% endif %}\n    {% endfor %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1650535970.268237}, "macro.dbt_utils.generate_series": {"unique_id": "macro.dbt_utils.generate_series", "package_name": "dbt_utils", "root_path": "/Users/songv/Code/jike/web3/dbt_ethereum_source/dbt_packages/dbt_utils", "path": "macros/sql/generate_series.sql", "original_file_path": "macros/sql/generate_series.sql", "name": "generate_series", "macro_sql": "{% macro generate_series(upper_bound) %}\n    {{ return(adapter.dispatch('generate_series', 'dbt_utils')(upper_bound)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__generate_series"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1650535970.2685199}, "macro.dbt_utils.default__generate_series": {"unique_id": "macro.dbt_utils.default__generate_series", "package_name": "dbt_utils", "root_path": "/Users/songv/Code/jike/web3/dbt_ethereum_source/dbt_packages/dbt_utils", "path": "macros/sql/generate_series.sql", "original_file_path": "macros/sql/generate_series.sql", "name": "default__generate_series", "macro_sql": "{% macro default__generate_series(upper_bound) %}\n\n    {% set n = dbt_utils.get_powers_of_two(upper_bound) %}\n\n    with p as (\n        select 0 as generated_number union all select 1\n    ), unioned as (\n\n    select\n\n    {% for i in range(n) %}\n    p{{i}}.generated_number * power(2, {{i}})\n    {% if not loop.last %} + {% endif %}\n    {% endfor %}\n    + 1\n    as generated_number\n\n    from\n\n    {% for i in range(n) %}\n    p as p{{i}}\n    {% if not loop.last %} cross join {% endif %}\n    {% endfor %}\n\n    )\n\n    select *\n    from unioned\n    where generated_number <= {{upper_bound}}\n    order by generated_number\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.get_powers_of_two"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1650535970.269286}, "macro.dbt_utils.get_relations_by_prefix": {"unique_id": "macro.dbt_utils.get_relations_by_prefix", "package_name": "dbt_utils", "root_path": "/Users/songv/Code/jike/web3/dbt_ethereum_source/dbt_packages/dbt_utils", "path": "macros/sql/get_relations_by_prefix.sql", "original_file_path": "macros/sql/get_relations_by_prefix.sql", "name": "get_relations_by_prefix", "macro_sql": "{% macro get_relations_by_prefix(schema, prefix, exclude='', database=target.database) %}\n    {{ return(adapter.dispatch('get_relations_by_prefix', 'dbt_utils')(schema, prefix, exclude, database)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__get_relations_by_prefix"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1650535970.270344}, "macro.dbt_utils.default__get_relations_by_prefix": {"unique_id": "macro.dbt_utils.default__get_relations_by_prefix", "package_name": "dbt_utils", "root_path": "/Users/songv/Code/jike/web3/dbt_ethereum_source/dbt_packages/dbt_utils", "path": "macros/sql/get_relations_by_prefix.sql", "original_file_path": "macros/sql/get_relations_by_prefix.sql", "name": "default__get_relations_by_prefix", "macro_sql": "{% macro default__get_relations_by_prefix(schema, prefix, exclude='', database=target.database) %}\n\n    {%- call statement('get_tables', fetch_result=True) %}\n\n      {{ dbt_utils.get_tables_by_prefix_sql(schema, prefix, exclude, database) }}\n\n    {%- endcall -%}\n\n    {%- set table_list = load_result('get_tables') -%}\n\n    {%- if table_list and table_list['table'] -%}\n        {%- set tbl_relations = [] -%}\n        {%- for row in table_list['table'] -%}\n            {%- set tbl_relation = api.Relation.create(\n                database=database,\n                schema=row.table_schema,\n                identifier=row.table_name,\n                type=row.table_type\n            ) -%}\n            {%- do tbl_relations.append(tbl_relation) -%}\n        {%- endfor -%}\n\n        {{ return(tbl_relations) }}\n    {%- else -%}\n        {{ return([]) }}\n    {%- endif -%}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt_utils.get_tables_by_prefix_sql"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1650535970.271625}, "macro.dbt_utils.get_tables_by_prefix_sql": {"unique_id": "macro.dbt_utils.get_tables_by_prefix_sql", "package_name": "dbt_utils", "root_path": "/Users/songv/Code/jike/web3/dbt_ethereum_source/dbt_packages/dbt_utils", "path": "macros/sql/get_tables_by_prefix_sql.sql", "original_file_path": "macros/sql/get_tables_by_prefix_sql.sql", "name": "get_tables_by_prefix_sql", "macro_sql": "{% macro get_tables_by_prefix_sql(schema, prefix, exclude='', database=target.database) %}\n    {{ return(adapter.dispatch('get_tables_by_prefix_sql', 'dbt_utils')(schema, prefix, exclude, database)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__get_tables_by_prefix_sql"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1650535970.272341}, "macro.dbt_utils.default__get_tables_by_prefix_sql": {"unique_id": "macro.dbt_utils.default__get_tables_by_prefix_sql", "package_name": "dbt_utils", "root_path": "/Users/songv/Code/jike/web3/dbt_ethereum_source/dbt_packages/dbt_utils", "path": "macros/sql/get_tables_by_prefix_sql.sql", "original_file_path": "macros/sql/get_tables_by_prefix_sql.sql", "name": "default__get_tables_by_prefix_sql", "macro_sql": "{% macro default__get_tables_by_prefix_sql(schema, prefix, exclude='', database=target.database) %}\n\n    {{ dbt_utils.get_tables_by_pattern_sql(\n        schema_pattern = schema,\n        table_pattern = prefix ~ '%',\n        exclude = exclude,\n        database = database\n    ) }}\n    \n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.get_tables_by_pattern_sql"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1650535970.272769}, "macro.dbt_utils.star": {"unique_id": "macro.dbt_utils.star", "package_name": "dbt_utils", "root_path": "/Users/songv/Code/jike/web3/dbt_ethereum_source/dbt_packages/dbt_utils", "path": "macros/sql/star.sql", "original_file_path": "macros/sql/star.sql", "name": "star", "macro_sql": "{% macro star(from, relation_alias=False, except=[], prefix='', suffix='') -%}\n    {{ return(adapter.dispatch('star', 'dbt_utils')(from, relation_alias, except, prefix, suffix)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__star"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1650535970.273726}, "macro.dbt_utils.default__star": {"unique_id": "macro.dbt_utils.default__star", "package_name": "dbt_utils", "root_path": "/Users/songv/Code/jike/web3/dbt_ethereum_source/dbt_packages/dbt_utils", "path": "macros/sql/star.sql", "original_file_path": "macros/sql/star.sql", "name": "default__star", "macro_sql": "{% macro default__star(from, relation_alias=False, except=[], prefix='', suffix='') -%}\n    {%- do dbt_utils._is_relation(from, 'star') -%}\n    {%- do dbt_utils._is_ephemeral(from, 'star') -%}\n\n    {#-- Prevent querying of db in parsing mode. This works because this macro does not create any new refs. #}\n    {%- if not execute -%}\n        {{ return('*') }}\n    {% endif %}\n\n    {%- for col in dbt_utils.get_filtered_columns_in_relation(from, except) %}\n\n        {%- if relation_alias %}{{ relation_alias }}.{% else %}{%- endif -%}{{ adapter.quote(col)|trim }} {%- if prefix!='' or suffix!='' %} as {{ adapter.quote(prefix ~ col ~ suffix)|trim }} {%- endif -%}\n        {%- if not loop.last %},{{ '\\n  ' }}{% endif %}\n\n    {%- endfor -%}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils._is_relation", "macro.dbt_utils._is_ephemeral", "macro.dbt_utils.get_filtered_columns_in_relation"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1650535970.274979}, "macro.dbt_utils.unpivot": {"unique_id": "macro.dbt_utils.unpivot", "package_name": "dbt_utils", "root_path": "/Users/songv/Code/jike/web3/dbt_ethereum_source/dbt_packages/dbt_utils", "path": "macros/sql/unpivot.sql", "original_file_path": "macros/sql/unpivot.sql", "name": "unpivot", "macro_sql": "{% macro unpivot(relation=none, cast_to='varchar', exclude=none, remove=none, field_name='field_name', value_name='value', table=none) -%}\n    {{ return(adapter.dispatch('unpivot', 'dbt_utils')(relation, cast_to, exclude, remove, field_name, value_name, table)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__unpivot"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1650535970.277396}, "macro.dbt_utils.default__unpivot": {"unique_id": "macro.dbt_utils.default__unpivot", "package_name": "dbt_utils", "root_path": "/Users/songv/Code/jike/web3/dbt_ethereum_source/dbt_packages/dbt_utils", "path": "macros/sql/unpivot.sql", "original_file_path": "macros/sql/unpivot.sql", "name": "default__unpivot", "macro_sql": "{% macro default__unpivot(relation=none, cast_to='varchar', exclude=none, remove=none, field_name='field_name', value_name='value', table=none) -%}\n\n    {% if table %}\n        {%- set error_message = '\n            Warning: the `unpivot` macro no longer accepts a `table` parameter. \\\n            This parameter will be deprecated in a future release of dbt-utils. Use the `relation` parameter instead. \\\n            The {}.{} model triggered this warning. \\\n            '.format(model.package_name, model.name) -%}\n        {%- do exceptions.warn(error_message) -%}\n    {% endif %}\n\n    {% if relation and table %}\n        {{ exceptions.raise_compiler_error(\"Error: both the `relation` and `table` parameters were provided to `unpivot` macro. Choose one only (we recommend `relation`).\") }}\n    {% elif not relation and table %}\n        {% set relation=table %}\n    {% elif not relation and not table %}\n        {{ exceptions.raise_compiler_error(\"Error: argument `relation` is required for `unpivot` macro.\") }}\n    {% endif %}\n\n  {%- set exclude = exclude if exclude is not none else [] %}\n  {%- set remove = remove if remove is not none else [] %}\n\n  {%- set include_cols = [] %}\n\n  {%- set table_columns = {} %}\n\n  {%- do table_columns.update({relation: []}) %}\n\n  {%- do dbt_utils._is_relation(relation, 'unpivot') -%}\n  {%- do dbt_utils._is_ephemeral(relation, 'unpivot') -%}\n  {%- set cols = adapter.get_columns_in_relation(relation) %}\n\n  {%- for col in cols -%}\n    {%- if col.column.lower() not in remove|map('lower') and col.column.lower() not in exclude|map('lower') -%}\n      {% do include_cols.append(col) %}\n    {%- endif %}\n  {%- endfor %}\n\n\n  {%- for col in include_cols -%}\n    select\n      {%- for exclude_col in exclude %}\n        {{ exclude_col }},\n      {%- endfor %}\n\n      cast('{{ col.column }}' as {{ dbt_utils.type_string() }}) as {{ field_name }},\n      cast(  {% if col.data_type == 'boolean' %}\n           {{ dbt_utils.cast_bool_to_text(col.column) }}\n             {% else %}\n           {{ col.column }}\n             {% endif %}\n           as {{ cast_to }}) as {{ value_name }}\n\n    from {{ relation }}\n\n    {% if not loop.last -%}\n      union all\n    {% endif -%}\n  {%- endfor -%}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils._is_relation", "macro.dbt_utils._is_ephemeral", "macro.dbt_utils.type_string", "macro.dbt_utils.cast_bool_to_text"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1650535970.2801979}, "macro.dbt_utils.union_relations": {"unique_id": "macro.dbt_utils.union_relations", "package_name": "dbt_utils", "root_path": "/Users/songv/Code/jike/web3/dbt_ethereum_source/dbt_packages/dbt_utils", "path": "macros/sql/union.sql", "original_file_path": "macros/sql/union.sql", "name": "union_relations", "macro_sql": "{%- macro union_relations(relations, column_override=none, include=[], exclude=[], source_column_name='_dbt_source_relation') -%}\n    {{ return(adapter.dispatch('union_relations', 'dbt_utils')(relations, column_override, include, exclude, source_column_name)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__union_relations"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1650535970.2831008}, "macro.dbt_utils.default__union_relations": {"unique_id": "macro.dbt_utils.default__union_relations", "package_name": "dbt_utils", "root_path": "/Users/songv/Code/jike/web3/dbt_ethereum_source/dbt_packages/dbt_utils", "path": "macros/sql/union.sql", "original_file_path": "macros/sql/union.sql", "name": "default__union_relations", "macro_sql": "\n\n{%- macro default__union_relations(relations, column_override=none, include=[], exclude=[], source_column_name='_dbt_source_relation') -%}\n\n    {%- if exclude and include -%}\n        {{ exceptions.raise_compiler_error(\"Both an exclude and include list were provided to the `union` macro. Only one is allowed\") }}\n    {%- endif -%}\n\n    {#-- Prevent querying of db in parsing mode. This works because this macro does not create any new refs. -#}\n    {%- if not execute %}\n        {{ return('') }}\n    {% endif -%}\n\n    {%- set column_override = column_override if column_override is not none else {} -%}\n\n    {%- set relation_columns = {} -%}\n    {%- set column_superset = {} -%}\n\n    {%- for relation in relations -%}\n\n        {%- do relation_columns.update({relation: []}) -%}\n\n        {%- do dbt_utils._is_relation(relation, 'union_relations') -%}\n        {%- do dbt_utils._is_ephemeral(relation, 'union_relations') -%}\n        {%- set cols = adapter.get_columns_in_relation(relation) -%}\n        {%- for col in cols -%}\n\n        {#- If an exclude list was provided and the column is in the list, do nothing -#}\n        {%- if exclude and col.column in exclude -%}\n\n        {#- If an include list was provided and the column is not in the list, do nothing -#}\n        {%- elif include and col.column not in include -%}\n\n        {#- Otherwise add the column to the column superset -#}\n        {%- else -%}\n\n            {#- update the list of columns in this relation -#}\n            {%- do relation_columns[relation].append(col.column) -%}\n\n            {%- if col.column in column_superset -%}\n\n                {%- set stored = column_superset[col.column] -%}\n                {%- if col.is_string() and stored.is_string() and col.string_size() > stored.string_size() -%}\n\n                    {%- do column_superset.update({col.column: col}) -%}\n\n                {%- endif %}\n\n            {%- else -%}\n\n                {%- do column_superset.update({col.column: col}) -%}\n\n            {%- endif -%}\n\n        {%- endif -%}\n\n        {%- endfor -%}\n    {%- endfor -%}\n\n    {%- set ordered_column_names = column_superset.keys() -%}\n\n    {% if (include | length > 0 or exclude | length > 0) and not column_superset.keys() %}\n        {%- set relations_string -%}\n            {%- for relation in relations -%}\n                {{ relation.name }}\n            {%- if not loop.last %}, {% endif -%}\n            {%- endfor -%}\n        {%- endset -%}\n\n        {%- set error_message -%}\n            There were no columns found to union for relations {{ relations_string }}\n        {%- endset -%}\n\n        {{ exceptions.raise_compiler_error(error_message) }}\n    {%- endif -%}\n\n    {%- for relation in relations %}\n\n        (\n            select\n\n                cast({{ dbt_utils.string_literal(relation) }} as {{ dbt_utils.type_string() }}) as {{ source_column_name }},\n                {% for col_name in ordered_column_names -%}\n\n                    {%- set col = column_superset[col_name] %}\n                    {%- set col_type = column_override.get(col.column, col.data_type) %}\n                    {%- set col_name = adapter.quote(col_name) if col_name in relation_columns[relation] else 'null' %}\n                    cast({{ col_name }} as {{ col_type }}) as {{ col.quoted }} {% if not loop.last %},{% endif -%}\n\n                {%- endfor %}\n\n            from {{ relation }}\n        )\n\n        {% if not loop.last -%}\n            union all\n        {% endif -%}\n\n    {%- endfor -%}\n\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils._is_relation", "macro.dbt_utils._is_ephemeral", "macro.dbt_utils.string_literal", "macro.dbt_utils.type_string"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1650535970.2868202}, "macro.dbt_utils.group_by": {"unique_id": "macro.dbt_utils.group_by", "package_name": "dbt_utils", "root_path": "/Users/songv/Code/jike/web3/dbt_ethereum_source/dbt_packages/dbt_utils", "path": "macros/sql/groupby.sql", "original_file_path": "macros/sql/groupby.sql", "name": "group_by", "macro_sql": "{%- macro group_by(n) -%}\n    {{ return(adapter.dispatch('group_by', 'dbt_utils')(n)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__group_by"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1650535970.2873542}, "macro.dbt_utils.default__group_by": {"unique_id": "macro.dbt_utils.default__group_by", "package_name": "dbt_utils", "root_path": "/Users/songv/Code/jike/web3/dbt_ethereum_source/dbt_packages/dbt_utils", "path": "macros/sql/groupby.sql", "original_file_path": "macros/sql/groupby.sql", "name": "default__group_by", "macro_sql": "\n\n{%- macro default__group_by(n) -%}\n\n  group by {% for i in range(1, n + 1) -%}\n      {{ i }}{{ ',' if not loop.last }}   \n   {%- endfor -%}\n\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1650535970.2876852}, "macro.dbt_utils.deduplicate": {"unique_id": "macro.dbt_utils.deduplicate", "package_name": "dbt_utils", "root_path": "/Users/songv/Code/jike/web3/dbt_ethereum_source/dbt_packages/dbt_utils", "path": "macros/sql/deduplicate.sql", "original_file_path": "macros/sql/deduplicate.sql", "name": "deduplicate", "macro_sql": "{%- macro deduplicate(relation, group_by, order_by=none, relation_alias=none) -%}\n    {{ return(adapter.dispatch('deduplicate', 'dbt_utils')(relation, group_by, order_by=order_by, relation_alias=relation_alias)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__deduplicate"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1650535970.288673}, "macro.dbt_utils.default__deduplicate": {"unique_id": "macro.dbt_utils.default__deduplicate", "package_name": "dbt_utils", "root_path": "/Users/songv/Code/jike/web3/dbt_ethereum_source/dbt_packages/dbt_utils", "path": "macros/sql/deduplicate.sql", "original_file_path": "macros/sql/deduplicate.sql", "name": "default__deduplicate", "macro_sql": "\n\n{%- macro default__deduplicate(relation, group_by, order_by=none, relation_alias=none) -%}\n\n    select\n        {{ dbt_utils.star(relation, relation_alias='deduped') | indent }}\n    from (\n        select\n            _inner.*,\n            row_number() over (\n                partition by {{ group_by }}\n                {% if order_by is not none -%}\n                order by {{ order_by }}\n                {%- endif %}\n            ) as rn\n        from {{ relation if relation_alias is none else relation_alias }} as _inner\n    ) as deduped\n    where deduped.rn = 1\n\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.star"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1650535970.289213}, "macro.dbt_utils.bigquery__deduplicate": {"unique_id": "macro.dbt_utils.bigquery__deduplicate", "package_name": "dbt_utils", "root_path": "/Users/songv/Code/jike/web3/dbt_ethereum_source/dbt_packages/dbt_utils", "path": "macros/sql/deduplicate.sql", "original_file_path": "macros/sql/deduplicate.sql", "name": "bigquery__deduplicate", "macro_sql": "\n{%- macro bigquery__deduplicate(relation, group_by, order_by=none, relation_alias=none) -%}\n\n    select\n        {{ dbt_utils.star(relation, relation_alias='deduped') | indent }}\n    from (\n        select\n            array_agg (\n                original\n                {% if order_by is not none -%}\n                order by {{ order_by }}\n                {%- endif %}\n                limit 1\n            )[offset(0)] as deduped\n        from {{ relation if relation_alias is none else relation_alias }} as original\n        group by {{ group_by }}\n    )\n\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.star"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1650535970.289741}, "macro.dbt_utils.surrogate_key": {"unique_id": "macro.dbt_utils.surrogate_key", "package_name": "dbt_utils", "root_path": "/Users/songv/Code/jike/web3/dbt_ethereum_source/dbt_packages/dbt_utils", "path": "macros/sql/surrogate_key.sql", "original_file_path": "macros/sql/surrogate_key.sql", "name": "surrogate_key", "macro_sql": "{%- macro surrogate_key(field_list) -%}\n    {# needed for safe_add to allow for non-keyword arguments see SO post #}\n    {# https://stackoverflow.com/questions/13944751/args-kwargs-in-jinja2-macros #}\n    {% set frustrating_jinja_feature = varargs %}\n    {{ return(adapter.dispatch('surrogate_key', 'dbt_utils')(field_list, *varargs)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__surrogate_key"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1650535970.290577}, "macro.dbt_utils.default__surrogate_key": {"unique_id": "macro.dbt_utils.default__surrogate_key", "package_name": "dbt_utils", "root_path": "/Users/songv/Code/jike/web3/dbt_ethereum_source/dbt_packages/dbt_utils", "path": "macros/sql/surrogate_key.sql", "original_file_path": "macros/sql/surrogate_key.sql", "name": "default__surrogate_key", "macro_sql": "\n\n{%- macro default__surrogate_key(field_list) -%}\n\n{%- if varargs|length >= 1 or field_list is string %}\n\n{%- set error_message = '\nWarning: the `surrogate_key` macro now takes a single list argument instead of \\\nmultiple string arguments. Support for multiple string arguments will be \\\ndeprecated in a future release of dbt-utils. The {}.{} model triggered this warning. \\\n'.format(model.package_name, model.name) -%}\n\n{%- do exceptions.warn(error_message) -%}\n\n{# first argument is not included in varargs, so add first element to field_list_xf #}\n{%- set field_list_xf = [field_list] -%}\n\n{%- for field in varargs %}\n{%- set _ = field_list_xf.append(field) -%}\n{%- endfor -%}\n\n{%- else -%}\n\n{# if using list, just set field_list_xf as field_list #}\n{%- set field_list_xf = field_list -%}\n\n{%- endif -%}\n\n\n{%- set fields = [] -%}\n\n{%- for field in field_list_xf -%}\n\n    {%- set _ = fields.append(\n        \"coalesce(cast(\" ~ field ~ \" as \" ~ dbt_utils.type_string() ~ \"), '')\"\n    ) -%}\n\n    {%- if not loop.last %}\n        {%- set _ = fields.append(\"'-'\") -%}\n    {%- endif -%}\n\n{%- endfor -%}\n\n{{dbt_utils.hash(dbt_utils.concat(fields))}}\n\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.type_string", "macro.dbt_utils.hash", "macro.dbt_utils.concat"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1650535970.2918122}, "macro.dbt_utils.safe_add": {"unique_id": "macro.dbt_utils.safe_add", "package_name": "dbt_utils", "root_path": "/Users/songv/Code/jike/web3/dbt_ethereum_source/dbt_packages/dbt_utils", "path": "macros/sql/safe_add.sql", "original_file_path": "macros/sql/safe_add.sql", "name": "safe_add", "macro_sql": "{%- macro safe_add() -%}\n    {# needed for safe_add to allow for non-keyword arguments see SO post #}\n    {# https://stackoverflow.com/questions/13944751/args-kwargs-in-jinja2-macros #}\n    {% set frustrating_jinja_feature = varargs %}\n    {{ return(adapter.dispatch('safe_add', 'dbt_utils')(*varargs)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__safe_add"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1650535970.2924092}, "macro.dbt_utils.default__safe_add": {"unique_id": "macro.dbt_utils.default__safe_add", "package_name": "dbt_utils", "root_path": "/Users/songv/Code/jike/web3/dbt_ethereum_source/dbt_packages/dbt_utils", "path": "macros/sql/safe_add.sql", "original_file_path": "macros/sql/safe_add.sql", "name": "default__safe_add", "macro_sql": "\n\n{%- macro default__safe_add() -%}\n\n{% set fields = [] %}\n\n{%- for field in varargs -%}\n\n    {% do fields.append(\"coalesce(\" ~ field ~ \", 0)\") %}\n\n{%- endfor -%}\n\n{{ fields|join(' +\\n  ') }}\n\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1650535970.292786}, "macro.dbt_utils.nullcheck": {"unique_id": "macro.dbt_utils.nullcheck", "package_name": "dbt_utils", "root_path": "/Users/songv/Code/jike/web3/dbt_ethereum_source/dbt_packages/dbt_utils", "path": "macros/sql/nullcheck.sql", "original_file_path": "macros/sql/nullcheck.sql", "name": "nullcheck", "macro_sql": "{% macro nullcheck(cols) %}\n    {{ return(adapter.dispatch('nullcheck', 'dbt_utils')(cols)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__nullcheck"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1650535970.2933109}, "macro.dbt_utils.default__nullcheck": {"unique_id": "macro.dbt_utils.default__nullcheck", "package_name": "dbt_utils", "root_path": "/Users/songv/Code/jike/web3/dbt_ethereum_source/dbt_packages/dbt_utils", "path": "macros/sql/nullcheck.sql", "original_file_path": "macros/sql/nullcheck.sql", "name": "default__nullcheck", "macro_sql": "{% macro default__nullcheck(cols) %}\n{%- for col in cols %}\n\n    {% if col.is_string() -%}\n\n    nullif({{col.name}},'') as {{col.name}}\n\n    {%- else -%}\n\n    {{col.name}}\n\n    {%- endif -%}\n\n{%- if not loop.last -%} , {%- endif -%}\n\n{%- endfor -%}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1650535970.2937589}, "macro.dbt_utils.get_tables_by_pattern_sql": {"unique_id": "macro.dbt_utils.get_tables_by_pattern_sql", "package_name": "dbt_utils", "root_path": "/Users/songv/Code/jike/web3/dbt_ethereum_source/dbt_packages/dbt_utils", "path": "macros/sql/get_tables_by_pattern_sql.sql", "original_file_path": "macros/sql/get_tables_by_pattern_sql.sql", "name": "get_tables_by_pattern_sql", "macro_sql": "{% macro get_tables_by_pattern_sql(schema_pattern, table_pattern, exclude='', database=target.database) %}\n    {{ return(adapter.dispatch('get_tables_by_pattern_sql', 'dbt_utils')\n        (schema_pattern, table_pattern, exclude, database)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__get_tables_by_pattern_sql"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1650535970.295767}, "macro.dbt_utils.default__get_tables_by_pattern_sql": {"unique_id": "macro.dbt_utils.default__get_tables_by_pattern_sql", "package_name": "dbt_utils", "root_path": "/Users/songv/Code/jike/web3/dbt_ethereum_source/dbt_packages/dbt_utils", "path": "macros/sql/get_tables_by_pattern_sql.sql", "original_file_path": "macros/sql/get_tables_by_pattern_sql.sql", "name": "default__get_tables_by_pattern_sql", "macro_sql": "{% macro default__get_tables_by_pattern_sql(schema_pattern, table_pattern, exclude='', database=target.database) %}\n\n        select distinct\n            table_schema as \"table_schema\",\n            table_name as \"table_name\",\n            {{ dbt_utils.get_table_types_sql() }}\n        from {{ database }}.information_schema.tables\n        where table_schema ilike '{{ schema_pattern }}'\n        and table_name ilike '{{ table_pattern }}'\n        and table_name not ilike '{{ exclude }}'\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.get_table_types_sql"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1650535970.296138}, "macro.dbt_utils.bigquery__get_tables_by_pattern_sql": {"unique_id": "macro.dbt_utils.bigquery__get_tables_by_pattern_sql", "package_name": "dbt_utils", "root_path": "/Users/songv/Code/jike/web3/dbt_ethereum_source/dbt_packages/dbt_utils", "path": "macros/sql/get_tables_by_pattern_sql.sql", "original_file_path": "macros/sql/get_tables_by_pattern_sql.sql", "name": "bigquery__get_tables_by_pattern_sql", "macro_sql": "{% macro bigquery__get_tables_by_pattern_sql(schema_pattern, table_pattern, exclude='', database=target.database) %}\n\n    {% if '%' in schema_pattern %}\n        {% set schemata=dbt_utils._bigquery__get_matching_schemata(schema_pattern, database) %}\n    {% else %}\n        {% set schemata=[schema_pattern] %}\n    {% endif %}\n\n    {% set sql %}\n        {% for schema in schemata %}\n            select distinct\n                table_schema,\n                table_name,\n                {{ dbt_utils.get_table_types_sql() }}\n\n            from {{ adapter.quote(database) }}.{{ schema }}.INFORMATION_SCHEMA.TABLES\n            where lower(table_name) like lower ('{{ table_pattern }}')\n                and lower(table_name) not like lower ('{{ exclude }}')\n\n            {% if not loop.last %} union all {% endif %}\n\n        {% endfor %}\n    {% endset %}\n\n    {{ return(sql) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils._bigquery__get_matching_schemata", "macro.dbt_utils.get_table_types_sql"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1650535970.297109}, "macro.dbt_utils._bigquery__get_matching_schemata": {"unique_id": "macro.dbt_utils._bigquery__get_matching_schemata", "package_name": "dbt_utils", "root_path": "/Users/songv/Code/jike/web3/dbt_ethereum_source/dbt_packages/dbt_utils", "path": "macros/sql/get_tables_by_pattern_sql.sql", "original_file_path": "macros/sql/get_tables_by_pattern_sql.sql", "name": "_bigquery__get_matching_schemata", "macro_sql": "{% macro _bigquery__get_matching_schemata(schema_pattern, database) %}\n    {% if execute %}\n\n        {% set sql %}\n        select schema_name from {{ adapter.quote(database) }}.INFORMATION_SCHEMA.SCHEMATA\n        where lower(schema_name) like lower('{{ schema_pattern }}')\n        {% endset %}\n\n        {% set results=run_query(sql) %}\n\n        {% set schemata=results.columns['schema_name'].values() %}\n\n        {{ return(schemata) }}\n\n    {% else %}\n\n        {{ return([]) }}\n\n    {% endif %}\n\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1650535970.2978802}, "macro.dbt_utils.get_column_values": {"unique_id": "macro.dbt_utils.get_column_values", "package_name": "dbt_utils", "root_path": "/Users/songv/Code/jike/web3/dbt_ethereum_source/dbt_packages/dbt_utils", "path": "macros/sql/get_column_values.sql", "original_file_path": "macros/sql/get_column_values.sql", "name": "get_column_values", "macro_sql": "{% macro get_column_values(table, column, order_by='count(*) desc', max_records=none, default=none) -%}\n    {{ return(adapter.dispatch('get_column_values', 'dbt_utils')(table, column, order_by, max_records, default)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__get_column_values"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1650535970.2992132}, "macro.dbt_utils.default__get_column_values": {"unique_id": "macro.dbt_utils.default__get_column_values", "package_name": "dbt_utils", "root_path": "/Users/songv/Code/jike/web3/dbt_ethereum_source/dbt_packages/dbt_utils", "path": "macros/sql/get_column_values.sql", "original_file_path": "macros/sql/get_column_values.sql", "name": "default__get_column_values", "macro_sql": "{% macro default__get_column_values(table, column, order_by='count(*) desc', max_records=none, default=none) -%}\n    {#-- Prevent querying of db in parsing mode. This works because this macro does not create any new refs. #}\n    {%- if not execute -%}\n        {% set default = [] if not default %}\n        {{ return(default) }}\n    {% endif %}\n\n    {%- do dbt_utils._is_ephemeral(table, 'get_column_values') -%}\n\n    {# Not all relations are tables. Renaming for internal clarity without breaking functionality for anyone using named arguments #}\n    {# TODO: Change the method signature in a future 0.x.0 release #}\n    {%- set target_relation = table -%}\n\n    {# adapter.load_relation is a convenience wrapper to avoid building a Relation when we already have one #}\n    {% set relation_exists = (load_relation(target_relation)) is not none %}\n\n    {%- call statement('get_column_values', fetch_result=true) %}\n\n        {%- if not relation_exists and default is none -%}\n\n          {{ exceptions.raise_compiler_error(\"In get_column_values(): relation \" ~ target_relation ~ \" does not exist and no default value was provided.\") }}\n\n        {%- elif not relation_exists and default is not none -%}\n\n          {{ log(\"Relation \" ~ target_relation ~ \" does not exist. Returning the default value: \" ~ default) }}\n\n          {{ return(default) }}\n\n        {%- else -%}\n\n\n            select\n                {{ column }} as value\n\n            from {{ target_relation }}\n            group by {{ column }}\n            order by {{ order_by }}\n\n            {% if max_records is not none %}\n            limit {{ max_records }}\n            {% endif %}\n\n        {% endif %}\n\n    {%- endcall -%}\n\n    {%- set value_list = load_result('get_column_values') -%}\n\n    {%- if value_list and value_list['data'] -%}\n        {%- set values = value_list['data'] | map(attribute=0) | list %}\n        {{ return(values) }}\n    {%- else -%}\n        {{ return(default) }}\n    {%- endif -%}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils._is_ephemeral", "macro.dbt.load_relation", "macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1650535970.301208}, "macro.dbt_utils.pivot": {"unique_id": "macro.dbt_utils.pivot", "package_name": "dbt_utils", "root_path": "/Users/songv/Code/jike/web3/dbt_ethereum_source/dbt_packages/dbt_utils", "path": "macros/sql/pivot.sql", "original_file_path": "macros/sql/pivot.sql", "name": "pivot", "macro_sql": "{% macro pivot(column,\n               values,\n               alias=True,\n               agg='sum',\n               cmp='=',\n               prefix='',\n               suffix='',\n               then_value=1,\n               else_value=0,\n               quote_identifiers=True,\n               distinct=False) %}\n    {{ return(adapter.dispatch('pivot', 'dbt_utils')(column, values, alias, agg, cmp, prefix, suffix, then_value, else_value, quote_identifiers, distinct)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__pivot"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1650535970.302748}, "macro.dbt_utils.default__pivot": {"unique_id": "macro.dbt_utils.default__pivot", "package_name": "dbt_utils", "root_path": "/Users/songv/Code/jike/web3/dbt_ethereum_source/dbt_packages/dbt_utils", "path": "macros/sql/pivot.sql", "original_file_path": "macros/sql/pivot.sql", "name": "default__pivot", "macro_sql": "{% macro default__pivot(column,\n               values,\n               alias=True,\n               agg='sum',\n               cmp='=',\n               prefix='',\n               suffix='',\n               then_value=1,\n               else_value=0,\n               quote_identifiers=True,\n               distinct=False) %}\n  {% for value in values %}\n    {{ agg }}(\n      {% if distinct %} distinct {% endif %}\n      case\n      when {{ column }} {{ cmp }} '{{ dbt_utils.escape_single_quotes(value) }}'\n        then {{ then_value }}\n      else {{ else_value }}\n      end\n    )\n    {% if alias %}\n      {% if quote_identifiers %}\n            as {{ adapter.quote(prefix ~ value ~ suffix) }}\n      {% else %}\n        as {{ dbt_utils.slugify(prefix ~ value ~ suffix) }}\n      {% endif %}\n    {% endif %}\n    {% if not loop.last %},{% endif %}\n  {% endfor %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.escape_single_quotes", "macro.dbt_utils.slugify"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1650535970.303906}, "macro.dbt_utils.get_filtered_columns_in_relation": {"unique_id": "macro.dbt_utils.get_filtered_columns_in_relation", "package_name": "dbt_utils", "root_path": "/Users/songv/Code/jike/web3/dbt_ethereum_source/dbt_packages/dbt_utils", "path": "macros/sql/get_filtered_columns_in_relation.sql", "original_file_path": "macros/sql/get_filtered_columns_in_relation.sql", "name": "get_filtered_columns_in_relation", "macro_sql": "{% macro get_filtered_columns_in_relation(from, except=[]) -%}\n    {{ return(adapter.dispatch('get_filtered_columns_in_relation', 'dbt_utils')(from, except)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__get_filtered_columns_in_relation"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1650535970.304627}, "macro.dbt_utils.default__get_filtered_columns_in_relation": {"unique_id": "macro.dbt_utils.default__get_filtered_columns_in_relation", "package_name": "dbt_utils", "root_path": "/Users/songv/Code/jike/web3/dbt_ethereum_source/dbt_packages/dbt_utils", "path": "macros/sql/get_filtered_columns_in_relation.sql", "original_file_path": "macros/sql/get_filtered_columns_in_relation.sql", "name": "default__get_filtered_columns_in_relation", "macro_sql": "{% macro default__get_filtered_columns_in_relation(from, except=[]) -%}\n    {%- do dbt_utils._is_relation(from, 'get_filtered_columns_in_relation') -%}\n    {%- do dbt_utils._is_ephemeral(from, 'get_filtered_columns_in_relation') -%}\n\n    {# -- Prevent querying of db in parsing mode. This works because this macro does not create any new refs. #}\n    {%- if not execute -%}\n        {{ return('') }}\n    {% endif %}\n\n    {%- set include_cols = [] %}\n    {%- set cols = adapter.get_columns_in_relation(from) -%}\n    {%- set except = except | map(\"lower\") | list %}\n    {%- for col in cols -%}\n        {%- if col.column|lower not in except -%}\n            {% do include_cols.append(col.column) %}\n        {%- endif %}\n    {%- endfor %}\n\n    {{ return(include_cols) }}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils._is_relation", "macro.dbt_utils._is_ephemeral"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1650535970.305622}, "macro.dbt_utils.get_query_results_as_dict": {"unique_id": "macro.dbt_utils.get_query_results_as_dict", "package_name": "dbt_utils", "root_path": "/Users/songv/Code/jike/web3/dbt_ethereum_source/dbt_packages/dbt_utils", "path": "macros/sql/get_query_results_as_dict.sql", "original_file_path": "macros/sql/get_query_results_as_dict.sql", "name": "get_query_results_as_dict", "macro_sql": "{% macro get_query_results_as_dict(query) %}\n    {{ return(adapter.dispatch('get_query_results_as_dict', 'dbt_utils')(query)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__get_query_results_as_dict"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1650535970.306228}, "macro.dbt_utils.default__get_query_results_as_dict": {"unique_id": "macro.dbt_utils.default__get_query_results_as_dict", "package_name": "dbt_utils", "root_path": "/Users/songv/Code/jike/web3/dbt_ethereum_source/dbt_packages/dbt_utils", "path": "macros/sql/get_query_results_as_dict.sql", "original_file_path": "macros/sql/get_query_results_as_dict.sql", "name": "default__get_query_results_as_dict", "macro_sql": "{% macro default__get_query_results_as_dict(query) %}\n\n{# This macro returns a dictionary of the form {column_name: (tuple_of_results)} #}\n\n    {%- call statement('get_query_results', fetch_result=True,auto_begin=false) -%}\n\n        {{ query }}\n\n    {%- endcall -%}\n\n    {% set sql_results={} %}\n\n    {%- if execute -%}\n        {% set sql_results_table = load_result('get_query_results').table.columns %}\n        {% for column_name, column in sql_results_table.items() %}\n            {% do sql_results.update({column_name: column.values()}) %}\n        {% endfor %}\n    {%- endif -%}\n\n    {{ return(sql_results) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1650535970.30703}, "macro.dbt_utils.get_table_types_sql": {"unique_id": "macro.dbt_utils.get_table_types_sql", "package_name": "dbt_utils", "root_path": "/Users/songv/Code/jike/web3/dbt_ethereum_source/dbt_packages/dbt_utils", "path": "macros/sql/get_table_types_sql.sql", "original_file_path": "macros/sql/get_table_types_sql.sql", "name": "get_table_types_sql", "macro_sql": "{%- macro get_table_types_sql() -%}\n  {{ return(adapter.dispatch('get_table_types_sql', 'dbt_utils')()) }}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__get_table_types_sql"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1650535970.3077152}, "macro.dbt_utils.default__get_table_types_sql": {"unique_id": "macro.dbt_utils.default__get_table_types_sql", "package_name": "dbt_utils", "root_path": "/Users/songv/Code/jike/web3/dbt_ethereum_source/dbt_packages/dbt_utils", "path": "macros/sql/get_table_types_sql.sql", "original_file_path": "macros/sql/get_table_types_sql.sql", "name": "default__get_table_types_sql", "macro_sql": "{% macro default__get_table_types_sql() %}\n            case table_type\n                when 'BASE TABLE' then 'table'\n                when 'EXTERNAL TABLE' then 'external'\n                when 'MATERIALIZED VIEW' then 'materializedview'\n                else lower(table_type)\n            end as \"table_type\"\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1650535970.307831}, "macro.dbt_utils.postgres__get_table_types_sql": {"unique_id": "macro.dbt_utils.postgres__get_table_types_sql", "package_name": "dbt_utils", "root_path": "/Users/songv/Code/jike/web3/dbt_ethereum_source/dbt_packages/dbt_utils", "path": "macros/sql/get_table_types_sql.sql", "original_file_path": "macros/sql/get_table_types_sql.sql", "name": "postgres__get_table_types_sql", "macro_sql": "{% macro postgres__get_table_types_sql() %}\n            case table_type\n                when 'BASE TABLE' then 'table'\n                when 'FOREIGN' then 'external'\n                when 'MATERIALIZED VIEW' then 'materializedview'\n                else lower(table_type)\n            end as \"table_type\"\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1650535970.307937}, "macro.dbt_utils.bigquery__get_table_types_sql": {"unique_id": "macro.dbt_utils.bigquery__get_table_types_sql", "package_name": "dbt_utils", "root_path": "/Users/songv/Code/jike/web3/dbt_ethereum_source/dbt_packages/dbt_utils", "path": "macros/sql/get_table_types_sql.sql", "original_file_path": "macros/sql/get_table_types_sql.sql", "name": "bigquery__get_table_types_sql", "macro_sql": "{% macro bigquery__get_table_types_sql() %}\n            case table_type\n                when 'BASE TABLE' then 'table'\n                when 'EXTERNAL TABLE' then 'external'\n                when 'MATERIALIZED VIEW' then 'materializedview'\n                else lower(table_type)\n            end as `table_type`\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1650535970.308049}, "macro.dbt_utils.degrees_to_radians": {"unique_id": "macro.dbt_utils.degrees_to_radians", "package_name": "dbt_utils", "root_path": "/Users/songv/Code/jike/web3/dbt_ethereum_source/dbt_packages/dbt_utils", "path": "macros/sql/haversine_distance.sql", "original_file_path": "macros/sql/haversine_distance.sql", "name": "degrees_to_radians", "macro_sql": "{% macro degrees_to_radians(degrees) -%}\n    acos(-1) * {{degrees}} / 180\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1650535970.3094778}, "macro.dbt_utils.haversine_distance": {"unique_id": "macro.dbt_utils.haversine_distance", "package_name": "dbt_utils", "root_path": "/Users/songv/Code/jike/web3/dbt_ethereum_source/dbt_packages/dbt_utils", "path": "macros/sql/haversine_distance.sql", "original_file_path": "macros/sql/haversine_distance.sql", "name": "haversine_distance", "macro_sql": "{% macro haversine_distance(lat1, lon1, lat2, lon2, unit='mi') -%}\n    {{ return(adapter.dispatch('haversine_distance', 'dbt_utils')(lat1,lon1,lat2,lon2,unit)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__haversine_distance"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1650535970.309887}, "macro.dbt_utils.default__haversine_distance": {"unique_id": "macro.dbt_utils.default__haversine_distance", "package_name": "dbt_utils", "root_path": "/Users/songv/Code/jike/web3/dbt_ethereum_source/dbt_packages/dbt_utils", "path": "macros/sql/haversine_distance.sql", "original_file_path": "macros/sql/haversine_distance.sql", "name": "default__haversine_distance", "macro_sql": "{% macro default__haversine_distance(lat1, lon1, lat2, lon2, unit='mi') -%}\n{%- if unit == 'mi' %}\n    {% set conversion_rate = 1 %}\n{% elif unit == 'km' %}\n    {% set conversion_rate = 1.60934 %}\n{% else %}\n    {{ exceptions.raise_compiler_error(\"unit input must be one of 'mi' or 'km'. Got \" ~ unit) }}\n{% endif %}\n\n    2 * 3961 * asin(sqrt(power((sin(radians(({{ lat2 }} - {{ lat1 }}) / 2))), 2) +\n    cos(radians({{lat1}})) * cos(radians({{lat2}})) *\n    power((sin(radians(({{ lon2 }} - {{ lon1 }}) / 2))), 2))) * {{ conversion_rate }}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1650535970.3106701}, "macro.dbt_utils.bigquery__haversine_distance": {"unique_id": "macro.dbt_utils.bigquery__haversine_distance", "package_name": "dbt_utils", "root_path": "/Users/songv/Code/jike/web3/dbt_ethereum_source/dbt_packages/dbt_utils", "path": "macros/sql/haversine_distance.sql", "original_file_path": "macros/sql/haversine_distance.sql", "name": "bigquery__haversine_distance", "macro_sql": "{% macro bigquery__haversine_distance(lat1, lon1, lat2, lon2, unit='mi') -%}\n{% set radians_lat1 = dbt_utils.degrees_to_radians(lat1) %}\n{% set radians_lat2 = dbt_utils.degrees_to_radians(lat2) %}\n{% set radians_lon1 = dbt_utils.degrees_to_radians(lon1) %}\n{% set radians_lon2 = dbt_utils.degrees_to_radians(lon2) %}\n{%- if unit == 'mi' %}\n    {% set conversion_rate = 1 %}\n{% elif unit == 'km' %}\n    {% set conversion_rate = 1.60934 %}\n{% else %}\n    {{ exceptions.raise_compiler_error(\"unit input must be one of 'mi' or 'km'. Got \" ~ unit) }}\n{% endif %}\n    2 * 3961 * asin(sqrt(power(sin(({{ radians_lat2 }} - {{ radians_lat1 }}) / 2), 2) +\n    cos({{ radians_lat1 }}) * cos({{ radians_lat2 }}) *\n    power(sin(({{ radians_lon2 }} - {{ radians_lon1 }}) / 2), 2))) * {{ conversion_rate }}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.degrees_to_radians"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1650535970.311873}, "macro.dbt_date.get_date_dimension": {"unique_id": "macro.dbt_date.get_date_dimension", "package_name": "dbt_date", "root_path": "/Users/songv/Code/jike/web3/dbt_ethereum_source/dbt_packages/dbt_date", "path": "macros/get_date_dimension.sql", "original_file_path": "macros/get_date_dimension.sql", "name": "get_date_dimension", "macro_sql": "{% macro get_date_dimension(start_date, end_date) %}\n    {{ adapter.dispatch('get_date_dimension', 'dbt_date') (start_date, end_date) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.default__get_date_dimension"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1650535970.322728}, "macro.dbt_date.default__get_date_dimension": {"unique_id": "macro.dbt_date.default__get_date_dimension", "package_name": "dbt_date", "root_path": "/Users/songv/Code/jike/web3/dbt_ethereum_source/dbt_packages/dbt_date", "path": "macros/get_date_dimension.sql", "original_file_path": "macros/get_date_dimension.sql", "name": "default__get_date_dimension", "macro_sql": "{% macro default__get_date_dimension(start_date, end_date) %}\nwith base_dates as (\n    {{ dbt_date.get_base_dates(start_date, end_date) }}\n),\ndates_with_prior_year_dates as (\n\n    select\n        cast(d.date_day as date) as date_day,\n        cast({{ dbt_utils.dateadd('year', -1 , 'd.date_day') }} as date) as prior_year_date_day,\n        cast({{ dbt_utils.dateadd('day', -364 , 'd.date_day') }} as date) as prior_year_over_year_date_day\n    from\n    \tbase_dates d\n\n)\nselect\n    d.date_day,\n    {{ dbt_date.yesterday('d.date_day') }} as prior_date_day,\n    {{ dbt_date.tomorrow('d.date_day') }} as next_date_day,\n    d.prior_year_date_day as prior_year_date_day,\n    d.prior_year_over_year_date_day,\n    {{ dbt_date.day_of_week('d.date_day', isoweek=false) }} as day_of_week,\n    {{ dbt_date.day_of_week('d.date_day', isoweek=true) }} as day_of_week_iso,\n    {{ dbt_date.day_name('d.date_day', short=false) }} as day_of_week_name,\n    {{ dbt_date.day_name('d.date_day', short=true) }} as day_of_week_name_short,\n    {{ dbt_date.day_of_month('d.date_day') }} as day_of_month,\n    {{ dbt_date.day_of_year('d.date_day') }} as day_of_year,\n\n    {{ dbt_date.week_start('d.date_day') }} as week_start_date,\n    {{ dbt_date.week_end('d.date_day') }} as week_end_date,\n    {{ dbt_date.week_start('d.prior_year_over_year_date_day') }} as prior_year_week_start_date,\n    {{ dbt_date.week_end('d.prior_year_over_year_date_day') }} as prior_year_week_end_date,\n    {{ dbt_date.week_of_year('d.date_day') }} as week_of_year,\n\n    {{ dbt_date.iso_week_start('d.date_day') }} as iso_week_start_date,\n    {{ dbt_date.iso_week_end('d.date_day') }} as iso_week_end_date,\n    {{ dbt_date.iso_week_start('d.prior_year_over_year_date_day') }} as prior_year_iso_week_start_date,\n    {{ dbt_date.iso_week_end('d.prior_year_over_year_date_day') }} as prior_year_iso_week_end_date,\n    {{ dbt_date.iso_week_of_year('d.date_day') }} as iso_week_of_year,\n\n    {{ dbt_date.week_of_year('d.prior_year_over_year_date_day') }} as prior_year_week_of_year,\n    {{ dbt_date.iso_week_of_year('d.prior_year_over_year_date_day') }} as prior_year_iso_week_of_year,\n\n    cast({{ dbt_date.date_part('month', 'd.date_day') }} as {{ dbt_utils.type_int() }}) as month_of_year,\n    {{ dbt_date.month_name('d.date_day', short=false) }}  as month_name,\n    {{ dbt_date.month_name('d.date_day', short=true) }}  as month_name_short,\n\n    cast({{ dbt_utils.date_trunc('month', 'd.date_day') }} as date) as month_start_date,\n    cast({{ dbt_utils.last_day('d.date_day', 'month') }} as date) as month_end_date,\n\n    cast({{ dbt_utils.date_trunc('month', 'd.prior_year_date_day') }} as date) as prior_year_month_start_date,\n    cast({{ dbt_utils.last_day('d.prior_year_date_day', 'month') }} as date) as prior_year_month_end_date,\n\n    cast({{ dbt_date.date_part('quarter', 'd.date_day') }} as {{ dbt_utils.type_int() }}) as quarter_of_year,\n    cast({{ dbt_utils.date_trunc('quarter', 'd.date_day') }} as date) as quarter_start_date,\n    cast({{ dbt_utils.last_day('d.date_day', 'quarter') }} as date) as quarter_end_date,\n\n    cast({{ dbt_date.date_part('year', 'd.date_day') }} as {{ dbt_utils.type_int() }}) as year_number,\n    cast({{ dbt_utils.date_trunc('year', 'd.date_day') }} as date) as year_start_date,\n    cast({{ dbt_utils.last_day('d.date_day', 'year') }} as date) as year_end_date\nfrom\n    dates_with_prior_year_dates d\norder by 1\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.get_base_dates", "macro.dbt_utils.dateadd", "macro.dbt_date.yesterday", "macro.dbt_date.tomorrow", "macro.dbt_date.day_of_week", "macro.dbt_date.day_name", "macro.dbt_date.day_of_month", "macro.dbt_date.day_of_year", "macro.dbt_date.week_start", "macro.dbt_date.week_end", "macro.dbt_date.week_of_year", "macro.dbt_date.iso_week_start", "macro.dbt_date.iso_week_end", "macro.dbt_date.iso_week_of_year", "macro.dbt_date.date_part", "macro.dbt_utils.type_int", "macro.dbt_date.month_name", "macro.dbt_utils.date_trunc", "macro.dbt_utils.last_day"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1650535970.325811}, "macro.dbt_date.postgres__get_date_dimension": {"unique_id": "macro.dbt_date.postgres__get_date_dimension", "package_name": "dbt_date", "root_path": "/Users/songv/Code/jike/web3/dbt_ethereum_source/dbt_packages/dbt_date", "path": "macros/get_date_dimension.sql", "original_file_path": "macros/get_date_dimension.sql", "name": "postgres__get_date_dimension", "macro_sql": "{% macro postgres__get_date_dimension(start_date, end_date) %}\nwith base_dates as (\n    {{ dbt_date.get_base_dates(start_date, end_date) }}\n),\ndates_with_prior_year_dates as (\n\n    select\n        cast(d.date_day as date) as date_day,\n        cast({{ dbt_utils.dateadd('year', -1 , 'd.date_day') }} as date) as prior_year_date_day,\n        cast({{ dbt_utils.dateadd('day', -364 , 'd.date_day') }} as date) as prior_year_over_year_date_day\n    from\n    \tbase_dates d\n\n)\nselect\n    d.date_day,\n    {{ dbt_date.yesterday('d.date_day') }} as prior_date_day,\n    {{ dbt_date.tomorrow('d.date_day') }} as next_date_day,\n    d.prior_year_date_day as prior_year_date_day,\n    d.prior_year_over_year_date_day,\n    {{ dbt_date.day_of_week('d.date_day', isoweek=true) }} as day_of_week,\n\n    {{ dbt_date.day_name('d.date_day', short=false) }} as day_of_week_name,\n    {{ dbt_date.day_name('d.date_day', short=true) }} as day_of_week_name_short,\n    {{ dbt_date.day_of_month('d.date_day') }} as day_of_month,\n    {{ dbt_date.day_of_year('d.date_day') }} as day_of_year,\n\n    {{ dbt_date.week_start('d.date_day') }} as week_start_date,\n    {{ dbt_date.week_end('d.date_day') }} as week_end_date,\n    {{ dbt_date.week_start('d.prior_year_over_year_date_day') }} as prior_year_week_start_date,\n    {{ dbt_date.week_end('d.prior_year_over_year_date_day') }} as prior_year_week_end_date,\n    {{ dbt_date.week_of_year('d.date_day') }} as week_of_year,\n\n    {{ dbt_date.iso_week_start('d.date_day') }} as iso_week_start_date,\n    {{ dbt_date.iso_week_end('d.date_day') }} as iso_week_end_date,\n    {{ dbt_date.iso_week_start('d.prior_year_over_year_date_day') }} as prior_year_iso_week_start_date,\n    {{ dbt_date.iso_week_end('d.prior_year_over_year_date_day') }} as prior_year_iso_week_end_date,\n    {{ dbt_date.iso_week_of_year('d.date_day') }} as iso_week_of_year,\n\n    {{ dbt_date.week_of_year('d.prior_year_over_year_date_day') }} as prior_year_week_of_year,\n    {{ dbt_date.iso_week_of_year('d.prior_year_over_year_date_day') }} as prior_year_iso_week_of_year,\n\n    cast({{ dbt_date.date_part('month', 'd.date_day') }} as {{ dbt_utils.type_int() }}) as month_of_year,\n    {{ dbt_date.month_name('d.date_day', short=false) }}  as month_name,\n    {{ dbt_date.month_name('d.date_day', short=true) }}  as month_name_short,\n\n    cast({{ dbt_utils.date_trunc('month', 'd.date_day') }} as date) as month_start_date,\n    cast({{ dbt_utils.last_day('d.date_day', 'month') }} as date) as month_end_date,\n\n    cast({{ dbt_utils.date_trunc('month', 'd.prior_year_date_day') }} as date) as prior_year_month_start_date,\n    cast({{ dbt_utils.last_day('d.prior_year_date_day', 'month') }} as date) as prior_year_month_end_date,\n\n    cast({{ dbt_date.date_part('quarter', 'd.date_day') }} as {{ dbt_utils.type_int() }}) as quarter_of_year,\n    cast({{ dbt_utils.date_trunc('quarter', 'd.date_day') }} as date) as quarter_start_date,\n    {# dbt_utils.last_day does not support quarter because postgresql does not support quarter interval. #}\n    cast({{dbt_utils.dateadd('day', '-1', dbt_utils.dateadd('month', '3', dbt_utils.date_trunc('quarter', 'd.date_day')))}} as date) as quarter_end_date,\n\n    cast({{ dbt_date.date_part('year', 'd.date_day') }} as {{ dbt_utils.type_int() }}) as year_number,\n    cast({{ dbt_utils.date_trunc('year', 'd.date_day') }} as date) as year_start_date,\n    cast({{ dbt_utils.last_day('d.date_day', 'year') }} as date) as year_end_date\nfrom\n    dates_with_prior_year_dates d\norder by 1\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.get_base_dates", "macro.dbt_utils.dateadd", "macro.dbt_date.yesterday", "macro.dbt_date.tomorrow", "macro.dbt_date.day_of_week", "macro.dbt_date.day_name", "macro.dbt_date.day_of_month", "macro.dbt_date.day_of_year", "macro.dbt_date.week_start", "macro.dbt_date.week_end", "macro.dbt_date.week_of_year", "macro.dbt_date.iso_week_start", "macro.dbt_date.iso_week_end", "macro.dbt_date.iso_week_of_year", "macro.dbt_date.date_part", "macro.dbt_utils.type_int", "macro.dbt_date.month_name", "macro.dbt_utils.date_trunc", "macro.dbt_utils.last_day"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1650535970.329133}, "macro.dbt_date.get_base_dates": {"unique_id": "macro.dbt_date.get_base_dates", "package_name": "dbt_date", "root_path": "/Users/songv/Code/jike/web3/dbt_ethereum_source/dbt_packages/dbt_date", "path": "macros/get_base_dates.sql", "original_file_path": "macros/get_base_dates.sql", "name": "get_base_dates", "macro_sql": "{% macro get_base_dates(start_date=None, end_date=None, n_dateparts=None, datepart=\"day\") %}\n    {{ adapter.dispatch('get_base_dates', 'dbt_date') (start_date, end_date, n_dateparts, datepart) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.default__get_base_dates"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1650535970.338465}, "macro.dbt_date.default__get_base_dates": {"unique_id": "macro.dbt_date.default__get_base_dates", "package_name": "dbt_date", "root_path": "/Users/songv/Code/jike/web3/dbt_ethereum_source/dbt_packages/dbt_date", "path": "macros/get_base_dates.sql", "original_file_path": "macros/get_base_dates.sql", "name": "default__get_base_dates", "macro_sql": "{% macro default__get_base_dates(start_date, end_date, n_dateparts, datepart) %}\n\n{%- if start_date and end_date -%}\n{%- set start_date=\"cast('\" ~ start_date ~ \"' as \" ~ dbt_utils.type_timestamp() ~ \")\" -%}\n{%- set end_date=\"cast('\" ~ end_date ~ \"' as \" ~ dbt_utils.type_timestamp() ~ \")\"  -%}\n\n{%- elif n_dateparts and datepart -%}\n\n{%- set start_date = dbt_utils.dateadd(datepart, -1 * n_dateparts, dbt_date.today()) -%}\n{%- set end_date = dbt_date.tomorrow() -%}\n{%- endif -%}\n\nwith date_spine as\n(\n\n    {{ dbt_utils.date_spine(\n        datepart=datepart,\n        start_date=start_date,\n        end_date=end_date,\n       )\n    }}\n\n)\nselect\n    cast(d.date_{{ datepart }} as {{ dbt_utils.type_timestamp() }}) as date_{{ datepart }}\nfrom\n    date_spine d\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.type_timestamp", "macro.dbt_utils.dateadd", "macro.dbt_date.today", "macro.dbt_date.tomorrow", "macro.dbt_utils.date_spine"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1650535970.339482}, "macro.dbt_date.bigquery__get_base_dates": {"unique_id": "macro.dbt_date.bigquery__get_base_dates", "package_name": "dbt_date", "root_path": "/Users/songv/Code/jike/web3/dbt_ethereum_source/dbt_packages/dbt_date", "path": "macros/get_base_dates.sql", "original_file_path": "macros/get_base_dates.sql", "name": "bigquery__get_base_dates", "macro_sql": "{% macro bigquery__get_base_dates(start_date, end_date, n_dateparts, datepart) %}\n\n{%- if start_date and end_date -%}\n{%- set start_date=\"cast('\" ~ start_date ~ \"' as date )\" -%}\n{%- set end_date=\"cast('\" ~ end_date ~ \"' as date )\" -%}\n\n{%- elif n_dateparts and datepart -%}\n\n{%- set start_date = dbt_utils.dateadd(datepart, -1 * n_dateparts, dbt_date.today()) -%}\n{%- set end_date = dbt_date.tomorrow() -%}\n{%- endif -%}\n\nwith date_spine as\n(\n\n    {{ dbt_utils.date_spine(\n        datepart=datepart,\n        start_date=start_date,\n        end_date=end_date,\n       )\n    }}\n\n)\nselect\n    cast(d.date_{{ datepart }} as {{ dbt_utils.type_timestamp() }}) as date_{{ datepart }}\nfrom\n    date_spine d\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.dateadd", "macro.dbt_date.today", "macro.dbt_date.tomorrow", "macro.dbt_utils.date_spine", "macro.dbt_utils.type_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1650535970.340394}, "macro.dbt_date.get_fiscal_year_dates": {"unique_id": "macro.dbt_date.get_fiscal_year_dates", "package_name": "dbt_date", "root_path": "/Users/songv/Code/jike/web3/dbt_ethereum_source/dbt_packages/dbt_date", "path": "macros/fiscal_date/get_fiscal_year_dates.sql", "original_file_path": "macros/fiscal_date/get_fiscal_year_dates.sql", "name": "get_fiscal_year_dates", "macro_sql": "{% macro get_fiscal_year_dates(dates, year_end_month=12, week_start_day=1, shift_year=1) %}\n{{ adapter.dispatch('get_fiscal_year_dates', 'dbt_date') (dates, year_end_month, week_start_day, shift_year) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.default__get_fiscal_year_dates"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1650535970.358155}, "macro.dbt_date.default__get_fiscal_year_dates": {"unique_id": "macro.dbt_date.default__get_fiscal_year_dates", "package_name": "dbt_date", "root_path": "/Users/songv/Code/jike/web3/dbt_ethereum_source/dbt_packages/dbt_date", "path": "macros/fiscal_date/get_fiscal_year_dates.sql", "original_file_path": "macros/fiscal_date/get_fiscal_year_dates.sql", "name": "default__get_fiscal_year_dates", "macro_sql": "{% macro default__get_fiscal_year_dates(dates, year_end_month, week_start_day, shift_year) %}\n-- this gets all the dates within a fiscal year\n-- determined by the given year-end-month\n-- ending on the saturday closest to that month's end date\nwith date_dimension as (\n    select * from {{ dates }}\n),\nyear_month_end as (\n\n    select\n       d.year_number - {{ shift_year }} as fiscal_year_number,\n       d.month_end_date\n    from\n        date_dimension d\n    where\n        d.month_of_year = {{ year_end_month }}\n    group by 1,2\n\n),\nweeks as (\n\n    select\n        d.year_number,\n        d.month_of_year,\n        d.date_day as week_start_date,\n        cast({{ dbt_utils.dateadd('day', 6, 'd.date_day') }} as date) as week_end_date\n    from\n        date_dimension d\n    where\n        d.day_of_week = {{ week_start_day }}\n\n),\n-- get all the weeks that start in the month the year ends\nyear_week_ends as (\n\n    select\n        d.year_number - {{ shift_year }} as fiscal_year_number,\n        d.week_end_date\n    from\n        weeks d\n    where\n        d.month_of_year = {{ year_end_month }}\n    group by\n        1,2\n\n),\n-- then calculate which Saturday is closest to month end\nweeks_at_month_end as (\n\n    select\n        d.fiscal_year_number,\n        d.week_end_date,\n        m.month_end_date,\n        rank() over\n            (partition by d.fiscal_year_number\n                order by\n                abs({{ dbt_utils.datediff('d.week_end_date', 'm.month_end_date', 'day') }})\n\n            ) as closest_to_month_end\n    from\n        year_week_ends d\n        join\n        year_month_end m on d.fiscal_year_number = m.fiscal_year_number\n),\nfiscal_year_range as (\n\n    select\n        w.fiscal_year_number,\n        cast(\n            {{ dbt_utils.dateadd('day', 1,\n            'lag(w.week_end_date) over(order by w.week_end_date)') }}\n            as date) as fiscal_year_start_date,\n        w.week_end_date as fiscal_year_end_date\n    from\n        weeks_at_month_end w\n    where\n        w.closest_to_month_end = 1\n\n),\nfiscal_year_dates as (\n\n    select\n        d.date_day,\n        m.fiscal_year_number,\n        m.fiscal_year_start_date,\n        m.fiscal_year_end_date,\n        w.week_start_date,\n        w.week_end_date,\n        -- we reset the weeks of the year starting with the merch year start date\n        dense_rank()\n            over(\n                partition by m.fiscal_year_number\n                order by w.week_start_date\n                ) as fiscal_week_of_year\n    from\n        date_dimension d\n        join\n        fiscal_year_range m on d.date_day between m.fiscal_year_start_date and m.fiscal_year_end_date\n        join\n        weeks w on d.date_day between w.week_start_date and w.week_end_date\n\n)\nselect * from fiscal_year_dates order by 1\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.dateadd", "macro.dbt_utils.datediff"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1650535970.358926}, "macro.dbt_date.get_fiscal_periods": {"unique_id": "macro.dbt_date.get_fiscal_periods", "package_name": "dbt_date", "root_path": "/Users/songv/Code/jike/web3/dbt_ethereum_source/dbt_packages/dbt_date", "path": "macros/fiscal_date/get_fiscal_periods.sql", "original_file_path": "macros/fiscal_date/get_fiscal_periods.sql", "name": "get_fiscal_periods", "macro_sql": "{% macro get_fiscal_periods(dates, year_end_month, week_start_day, shift_year=1) %}\n{# \nThis macro requires you to pass in a ref to a date dimension, created via\ndbt_date.get_date_dimension()s\n#}\nwith fscl_year_dates_for_periods as (\n    {{ dbt_date.get_fiscal_year_dates(dates, year_end_month, week_start_day, shift_year) }}\n),\nfscl_year_w13 as (\n\n    select\n        f.*,\n        -- We count the weeks in a 13 week period\n        -- and separate the 4-5-4 week sequences\n        mod(cast(\n            (f.fiscal_week_of_year-1) as {{ dbt_utils.type_int() }}\n            ), 13) as w13_number,\n        -- Chop weeks into 13 week merch quarters\n        cast(\n            least(\n                floor((f.fiscal_week_of_year-1)/13.0)\n                , 3)\n            as {{ dbt_utils.type_int() }}) as quarter_number\n    from\n        fscl_year_dates_for_periods f\n\n),\nfscl_periods as (\n\n    select\n        f.date_day,\n        f.fiscal_year_number,\n        f.week_start_date,\n        f.week_end_date,\n        f.fiscal_week_of_year,\n        case \n            -- we move week 53 into the 3rd period of the quarter\n            when f.fiscal_week_of_year = 53 then 3\n            when f.w13_number between 0 and 3 then 1\n            when f.w13_number between 4 and 8 then 2\n            when f.w13_number between 9 and 12 then 3\n        end as period_of_quarter,\n        f.quarter_number\n    from\n        fscl_year_w13 f\n\n),\nfscl_periods_quarters as (\n\n    select\n        f.*,\n        cast((\n            (f.quarter_number * 3) + f.period_of_quarter\n         ) as {{ dbt_utils.type_int() }}) as fiscal_period_number\n    from\n        fscl_periods f\n\n)\nselect\n    date_day,\n    fiscal_year_number,\n    week_start_date,\n    week_end_date,\n    fiscal_week_of_year, \n    dense_rank() over(partition by fiscal_period_number order by fiscal_week_of_year) as fiscal_week_of_period,\n    fiscal_period_number,\n    quarter_number+1 as fiscal_quarter_number,\n    period_of_quarter as fiscal_period_of_quarter\nfrom \n    fscl_periods_quarters \norder by 1,2\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.get_fiscal_year_dates", "macro.dbt_utils.type_int"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1650535970.376319}, "macro.dbt_date.tomorrow": {"unique_id": "macro.dbt_date.tomorrow", "package_name": "dbt_date", "root_path": "/Users/songv/Code/jike/web3/dbt_ethereum_source/dbt_packages/dbt_date", "path": "macros/calendar_date/tomorrow.sql", "original_file_path": "macros/calendar_date/tomorrow.sql", "name": "tomorrow", "macro_sql": "{%- macro tomorrow(date=None, tz=None) -%}\n{{ dbt_date.n_days_away(1, date, tz) }}\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.n_days_away"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1650535970.39436}, "macro.dbt_date.next_week": {"unique_id": "macro.dbt_date.next_week", "package_name": "dbt_date", "root_path": "/Users/songv/Code/jike/web3/dbt_ethereum_source/dbt_packages/dbt_date", "path": "macros/calendar_date/next_week.sql", "original_file_path": "macros/calendar_date/next_week.sql", "name": "next_week", "macro_sql": "{%- macro next_week(tz=None) -%}\n{{ dbt_date.n_weeks_away(1, tz) }}\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.n_weeks_away"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1650535970.394784}, "macro.dbt_date.next_month_name": {"unique_id": "macro.dbt_date.next_month_name", "package_name": "dbt_date", "root_path": "/Users/songv/Code/jike/web3/dbt_ethereum_source/dbt_packages/dbt_date", "path": "macros/calendar_date/next_month_name.sql", "original_file_path": "macros/calendar_date/next_month_name.sql", "name": "next_month_name", "macro_sql": "{%- macro next_month_name(short=True, tz=None) -%}\n{{ dbt_date.month_name(dbt_date.next_month(1, tz), short=short) }}\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.month_name", "macro.dbt_date.next_month"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1650535970.39523}, "macro.dbt_date.next_month": {"unique_id": "macro.dbt_date.next_month", "package_name": "dbt_date", "root_path": "/Users/songv/Code/jike/web3/dbt_ethereum_source/dbt_packages/dbt_date", "path": "macros/calendar_date/next_month.sql", "original_file_path": "macros/calendar_date/next_month.sql", "name": "next_month", "macro_sql": "{%- macro next_month(tz=None) -%}\n{{ dbt_date.n_months_away(1, tz) }}\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.n_months_away"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1650535970.395575}, "macro.dbt_date.day_name": {"unique_id": "macro.dbt_date.day_name", "package_name": "dbt_date", "root_path": "/Users/songv/Code/jike/web3/dbt_ethereum_source/dbt_packages/dbt_date", "path": "macros/calendar_date/day_name.sql", "original_file_path": "macros/calendar_date/day_name.sql", "name": "day_name", "macro_sql": "{%- macro day_name(date, short=True) -%}\n    {{ adapter.dispatch('day_name', 'dbt_date') (date, short) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.default__day_name"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1650535970.396445}, "macro.dbt_date.default__day_name": {"unique_id": "macro.dbt_date.default__day_name", "package_name": "dbt_date", "root_path": "/Users/songv/Code/jike/web3/dbt_ethereum_source/dbt_packages/dbt_date", "path": "macros/calendar_date/day_name.sql", "original_file_path": "macros/calendar_date/day_name.sql", "name": "default__day_name", "macro_sql": "\n\n{%- macro default__day_name(date, short) -%}\n{%- set f = 'Dy' if short else 'Day' -%}\n    to_char({{ date }}, '{{ f }}')\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1650535970.396721}, "macro.dbt_date.snowflake__day_name": {"unique_id": "macro.dbt_date.snowflake__day_name", "package_name": "dbt_date", "root_path": "/Users/songv/Code/jike/web3/dbt_ethereum_source/dbt_packages/dbt_date", "path": "macros/calendar_date/day_name.sql", "original_file_path": "macros/calendar_date/day_name.sql", "name": "snowflake__day_name", "macro_sql": "\n\n{%- macro snowflake__day_name(date, short) -%}\n    {%- if short -%}\n    dayname({{ date }})\n    {%- else -%}\n    -- long version not implemented on Snowflake so we're doing it manually :/\n    case dayname({{ date }})\n        when 'Mon' then 'Monday'\n        when 'Tue' then 'Tuesday'\n        when 'Wed' then 'Wednesday'\n        when 'Thu' then 'Thursday'\n        when 'Fri' then 'Friday'\n        when 'Sat' then 'Saturday'\n        when 'Sun' then 'Sunday'\n    end\n    {%- endif -%}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1650535970.396993}, "macro.dbt_date.bigquery__day_name": {"unique_id": "macro.dbt_date.bigquery__day_name", "package_name": "dbt_date", "root_path": "/Users/songv/Code/jike/web3/dbt_ethereum_source/dbt_packages/dbt_date", "path": "macros/calendar_date/day_name.sql", "original_file_path": "macros/calendar_date/day_name.sql", "name": "bigquery__day_name", "macro_sql": "\n\n{%- macro bigquery__day_name(date, short) -%}\n{%- set f = '%a' if short else '%A' -%}\n    format_date('{{ f }}', cast({{ date }} as date))\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1650535970.397262}, "macro.dbt_date.postgres__day_name": {"unique_id": "macro.dbt_date.postgres__day_name", "package_name": "dbt_date", "root_path": "/Users/songv/Code/jike/web3/dbt_ethereum_source/dbt_packages/dbt_date", "path": "macros/calendar_date/day_name.sql", "original_file_path": "macros/calendar_date/day_name.sql", "name": "postgres__day_name", "macro_sql": "\n\n{%- macro postgres__day_name(date, short) -%}\n{# FM = Fill mode, which suppresses padding blanks #}\n{%- set f = 'FMDy' if short else 'FMDay' -%}\n    to_char({{ date }}, '{{ f }}')\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1650535970.3975282}, "macro.dbt_date.to_unixtimestamp": {"unique_id": "macro.dbt_date.to_unixtimestamp", "package_name": "dbt_date", "root_path": "/Users/songv/Code/jike/web3/dbt_ethereum_source/dbt_packages/dbt_date", "path": "macros/calendar_date/to_unixtimestamp.sql", "original_file_path": "macros/calendar_date/to_unixtimestamp.sql", "name": "to_unixtimestamp", "macro_sql": "{%- macro to_unixtimestamp(timestamp) -%}\n    {{ adapter.dispatch('to_unixtimestamp', 'dbt_date') (timestamp) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.default__to_unixtimestamp"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1650535970.415346}, "macro.dbt_date.default__to_unixtimestamp": {"unique_id": "macro.dbt_date.default__to_unixtimestamp", "package_name": "dbt_date", "root_path": "/Users/songv/Code/jike/web3/dbt_ethereum_source/dbt_packages/dbt_date", "path": "macros/calendar_date/to_unixtimestamp.sql", "original_file_path": "macros/calendar_date/to_unixtimestamp.sql", "name": "default__to_unixtimestamp", "macro_sql": "\n\n{%- macro default__to_unixtimestamp(timestamp) -%}\n    {{ dbt_date.date_part('epoch', timestamp) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.date_part"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1650535970.41553}, "macro.dbt_date.snowflake__to_unixtimestamp": {"unique_id": "macro.dbt_date.snowflake__to_unixtimestamp", "package_name": "dbt_date", "root_path": "/Users/songv/Code/jike/web3/dbt_ethereum_source/dbt_packages/dbt_date", "path": "macros/calendar_date/to_unixtimestamp.sql", "original_file_path": "macros/calendar_date/to_unixtimestamp.sql", "name": "snowflake__to_unixtimestamp", "macro_sql": "\n\n{%- macro snowflake__to_unixtimestamp(timestamp) -%}\n    {{ dbt_date.date_part('epoch_seconds', timestamp) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.date_part"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1650535970.415723}, "macro.dbt_date.bigquery__to_unixtimestamp": {"unique_id": "macro.dbt_date.bigquery__to_unixtimestamp", "package_name": "dbt_date", "root_path": "/Users/songv/Code/jike/web3/dbt_ethereum_source/dbt_packages/dbt_date", "path": "macros/calendar_date/to_unixtimestamp.sql", "original_file_path": "macros/calendar_date/to_unixtimestamp.sql", "name": "bigquery__to_unixtimestamp", "macro_sql": "\n\n{%- macro bigquery__to_unixtimestamp(timestamp) -%}\n    unix_seconds({{ timestamp }})\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1650535970.415873}, "macro.dbt_date.n_days_away": {"unique_id": "macro.dbt_date.n_days_away", "package_name": "dbt_date", "root_path": "/Users/songv/Code/jike/web3/dbt_ethereum_source/dbt_packages/dbt_date", "path": "macros/calendar_date/n_days_away.sql", "original_file_path": "macros/calendar_date/n_days_away.sql", "name": "n_days_away", "macro_sql": "{%- macro n_days_away(n, date=None, tz=None) -%}\n{{ dbt_date.n_days_ago(-1 * n, date, tz) }}\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.n_days_ago"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1650535970.433422}, "macro.dbt_date.week_start": {"unique_id": "macro.dbt_date.week_start", "package_name": "dbt_date", "root_path": "/Users/songv/Code/jike/web3/dbt_ethereum_source/dbt_packages/dbt_date", "path": "macros/calendar_date/week_start.sql", "original_file_path": "macros/calendar_date/week_start.sql", "name": "week_start", "macro_sql": "{%- macro week_start(date=None, tz=None) -%}\n{%-set dt = date if date else dbt_date.today(tz) -%}\n{{ adapter.dispatch('week_start', 'dbt_date') (dt) }}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.today", "macro.dbt_date.default__week_start"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1650535970.434221}, "macro.dbt_date.default__week_start": {"unique_id": "macro.dbt_date.default__week_start", "package_name": "dbt_date", "root_path": "/Users/songv/Code/jike/web3/dbt_ethereum_source/dbt_packages/dbt_date", "path": "macros/calendar_date/week_start.sql", "original_file_path": "macros/calendar_date/week_start.sql", "name": "default__week_start", "macro_sql": "{%- macro default__week_start(date) -%}\ncast({{ dbt_utils.date_trunc('week', date) }} as date)\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.date_trunc"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1650535970.434442}, "macro.dbt_date.snowflake__week_start": {"unique_id": "macro.dbt_date.snowflake__week_start", "package_name": "dbt_date", "root_path": "/Users/songv/Code/jike/web3/dbt_ethereum_source/dbt_packages/dbt_date", "path": "macros/calendar_date/week_start.sql", "original_file_path": "macros/calendar_date/week_start.sql", "name": "snowflake__week_start", "macro_sql": "\n\n{%- macro snowflake__week_start(date) -%}\n    {#\n        Get the day of week offset: e.g. if the date is a Sunday,\n        dbt_date.day_of_week returns 1, so we subtract 1 to get a 0 offset\n    #}\n    {% set off_set = dbt_date.day_of_week(date, isoweek=False) ~ \" - 1\" %}\n    cast({{ dbt_utils.dateadd(\"day\", \"-1 * (\" ~ off_set ~ \")\", date) }} as date)\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.day_of_week", "macro.dbt_utils.dateadd"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1650535970.434883}, "macro.dbt_date.postgres__week_start": {"unique_id": "macro.dbt_date.postgres__week_start", "package_name": "dbt_date", "root_path": "/Users/songv/Code/jike/web3/dbt_ethereum_source/dbt_packages/dbt_date", "path": "macros/calendar_date/week_start.sql", "original_file_path": "macros/calendar_date/week_start.sql", "name": "postgres__week_start", "macro_sql": "\n\n{%- macro postgres__week_start(date) -%}\n-- Sunday as week start date\ncast({{ dbt_utils.dateadd('day', -1, dbt_utils.date_trunc('week', dbt_utils.dateadd('day', 1, date))) }} as date)\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.dateadd", "macro.dbt_utils.date_trunc"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1650535970.4352808}, "macro.dbt_date.iso_week_start": {"unique_id": "macro.dbt_date.iso_week_start", "package_name": "dbt_date", "root_path": "/Users/songv/Code/jike/web3/dbt_ethereum_source/dbt_packages/dbt_date", "path": "macros/calendar_date/iso_week_start.sql", "original_file_path": "macros/calendar_date/iso_week_start.sql", "name": "iso_week_start", "macro_sql": "{%- macro iso_week_start(date=None, tz=None) -%}\n{%-set dt = date if date else dbt_date.today(tz) -%}\n{{ adapter.dispatch('iso_week_start', 'dbt_date') (dt) }}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.today", "macro.dbt_date.default__iso_week_start"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1650535970.436092}, "macro.dbt_date._iso_week_start": {"unique_id": "macro.dbt_date._iso_week_start", "package_name": "dbt_date", "root_path": "/Users/songv/Code/jike/web3/dbt_ethereum_source/dbt_packages/dbt_date", "path": "macros/calendar_date/iso_week_start.sql", "original_file_path": "macros/calendar_date/iso_week_start.sql", "name": "_iso_week_start", "macro_sql": "{%- macro _iso_week_start(date, week_type) -%}\ncast({{ dbt_utils.date_trunc(week_type, date) }} as date)\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.date_trunc"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1650535970.436322}, "macro.dbt_date.default__iso_week_start": {"unique_id": "macro.dbt_date.default__iso_week_start", "package_name": "dbt_date", "root_path": "/Users/songv/Code/jike/web3/dbt_ethereum_source/dbt_packages/dbt_date", "path": "macros/calendar_date/iso_week_start.sql", "original_file_path": "macros/calendar_date/iso_week_start.sql", "name": "default__iso_week_start", "macro_sql": "\n\n{%- macro default__iso_week_start(date) -%}\n{{ dbt_date._iso_week_start(date, 'isoweek') }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date._iso_week_start"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1650535970.436527}, "macro.dbt_date.snowflake__iso_week_start": {"unique_id": "macro.dbt_date.snowflake__iso_week_start", "package_name": "dbt_date", "root_path": "/Users/songv/Code/jike/web3/dbt_ethereum_source/dbt_packages/dbt_date", "path": "macros/calendar_date/iso_week_start.sql", "original_file_path": "macros/calendar_date/iso_week_start.sql", "name": "snowflake__iso_week_start", "macro_sql": "\n\n{%- macro snowflake__iso_week_start(date) -%}\n{{ dbt_date._iso_week_start(date, 'week') }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date._iso_week_start"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1650535970.4367309}, "macro.dbt_date.postgres__iso_week_start": {"unique_id": "macro.dbt_date.postgres__iso_week_start", "package_name": "dbt_date", "root_path": "/Users/songv/Code/jike/web3/dbt_ethereum_source/dbt_packages/dbt_date", "path": "macros/calendar_date/iso_week_start.sql", "original_file_path": "macros/calendar_date/iso_week_start.sql", "name": "postgres__iso_week_start", "macro_sql": "\n\n{%- macro postgres__iso_week_start(date) -%}\n{{ dbt_date._iso_week_start(date, 'week') }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date._iso_week_start"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1650535970.436928}, "macro.dbt_date.n_days_ago": {"unique_id": "macro.dbt_date.n_days_ago", "package_name": "dbt_date", "root_path": "/Users/songv/Code/jike/web3/dbt_ethereum_source/dbt_packages/dbt_date", "path": "macros/calendar_date/n_days_ago.sql", "original_file_path": "macros/calendar_date/n_days_ago.sql", "name": "n_days_ago", "macro_sql": "{%- macro n_days_ago(n, date=None, tz=None) -%}\n{%-set dt = date if date else dbt_date.today(tz) -%}\n{%- set n = n|int -%}\ncast({{ dbt_utils.dateadd('day', -1 * n, dt) }} as date)\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.today", "macro.dbt_utils.dateadd"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1650535970.45371}, "macro.dbt_date.last_week": {"unique_id": "macro.dbt_date.last_week", "package_name": "dbt_date", "root_path": "/Users/songv/Code/jike/web3/dbt_ethereum_source/dbt_packages/dbt_date", "path": "macros/calendar_date/last_week.sql", "original_file_path": "macros/calendar_date/last_week.sql", "name": "last_week", "macro_sql": "{%- macro last_week(tz=None) -%}\n{{ dbt_date.n_weeks_ago(1, tz) }}\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.n_weeks_ago"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1650535970.454131}, "macro.dbt_date.now": {"unique_id": "macro.dbt_date.now", "package_name": "dbt_date", "root_path": "/Users/songv/Code/jike/web3/dbt_ethereum_source/dbt_packages/dbt_date", "path": "macros/calendar_date/now.sql", "original_file_path": "macros/calendar_date/now.sql", "name": "now", "macro_sql": "{%- macro now(tz=None) -%}\n{{ dbt_date.convert_timezone(dbt_utils.current_timestamp(), tz) }}\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.convert_timezone", "macro.dbt_utils.current_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1650535970.471346}, "macro.dbt_date.periods_since": {"unique_id": "macro.dbt_date.periods_since", "package_name": "dbt_date", "root_path": "/Users/songv/Code/jike/web3/dbt_ethereum_source/dbt_packages/dbt_date", "path": "macros/calendar_date/periods_since.sql", "original_file_path": "macros/calendar_date/periods_since.sql", "name": "periods_since", "macro_sql": "{%- macro periods_since(date_col, period_name='day', tz=None) -%}\n{{ dbt_utils.datediff(date_col, dbt_date.now(tz), period_name) }}\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.datediff", "macro.dbt_date.now"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1650535970.471905}, "macro.dbt_date.today": {"unique_id": "macro.dbt_date.today", "package_name": "dbt_date", "root_path": "/Users/songv/Code/jike/web3/dbt_ethereum_source/dbt_packages/dbt_date", "path": "macros/calendar_date/today.sql", "original_file_path": "macros/calendar_date/today.sql", "name": "today", "macro_sql": "{%- macro today(tz=None) -%}\ncast({{ dbt_date.now(tz) }} as date)\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.now"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1650535970.4723258}, "macro.dbt_date.last_month": {"unique_id": "macro.dbt_date.last_month", "package_name": "dbt_date", "root_path": "/Users/songv/Code/jike/web3/dbt_ethereum_source/dbt_packages/dbt_date", "path": "macros/calendar_date/last_month.sql", "original_file_path": "macros/calendar_date/last_month.sql", "name": "last_month", "macro_sql": "{%- macro last_month(tz=None) -%}\n{{ dbt_date.n_months_ago(1, tz) }}\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.n_months_ago"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1650535970.472748}, "macro.dbt_date.day_of_year": {"unique_id": "macro.dbt_date.day_of_year", "package_name": "dbt_date", "root_path": "/Users/songv/Code/jike/web3/dbt_ethereum_source/dbt_packages/dbt_date", "path": "macros/calendar_date/day_of_year.sql", "original_file_path": "macros/calendar_date/day_of_year.sql", "name": "day_of_year", "macro_sql": "{%- macro day_of_year(date) -%}\n{{ adapter.dispatch('day_of_year', 'dbt_date') (date) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.default__day_of_year"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1650535970.490626}, "macro.dbt_date.default__day_of_year": {"unique_id": "macro.dbt_date.default__day_of_year", "package_name": "dbt_date", "root_path": "/Users/songv/Code/jike/web3/dbt_ethereum_source/dbt_packages/dbt_date", "path": "macros/calendar_date/day_of_year.sql", "original_file_path": "macros/calendar_date/day_of_year.sql", "name": "default__day_of_year", "macro_sql": "\n\n{%- macro default__day_of_year(date) -%}\n    {{ dbt_date.date_part('dayofyear', date) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.date_part"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1650535970.490887}, "macro.dbt_date.postgres__day_of_year": {"unique_id": "macro.dbt_date.postgres__day_of_year", "package_name": "dbt_date", "root_path": "/Users/songv/Code/jike/web3/dbt_ethereum_source/dbt_packages/dbt_date", "path": "macros/calendar_date/day_of_year.sql", "original_file_path": "macros/calendar_date/day_of_year.sql", "name": "postgres__day_of_year", "macro_sql": "\n\n{%- macro postgres__day_of_year(date) -%}\n    {{ dbt_date.date_part('doy', date) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.date_part"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1650535970.4911559}, "macro.dbt_date.redshift__day_of_year": {"unique_id": "macro.dbt_date.redshift__day_of_year", "package_name": "dbt_date", "root_path": "/Users/songv/Code/jike/web3/dbt_ethereum_source/dbt_packages/dbt_date", "path": "macros/calendar_date/day_of_year.sql", "original_file_path": "macros/calendar_date/day_of_year.sql", "name": "redshift__day_of_year", "macro_sql": "\n\n{%- macro redshift__day_of_year(date) -%}\n    cast({{ dbt_date.date_part('dayofyear', date) }} as {{ dbt_utils.type_bigint() }})\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.date_part", "macro.dbt_utils.type_bigint"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1650535970.491492}, "macro.dbt_date.from_unixtimestamp": {"unique_id": "macro.dbt_date.from_unixtimestamp", "package_name": "dbt_date", "root_path": "/Users/songv/Code/jike/web3/dbt_ethereum_source/dbt_packages/dbt_date", "path": "macros/calendar_date/from_unixtimestamp.sql", "original_file_path": "macros/calendar_date/from_unixtimestamp.sql", "name": "from_unixtimestamp", "macro_sql": "{%- macro from_unixtimestamp(epochs, format=\"seconds\") -%}\n    {{ adapter.dispatch('from_unixtimestamp', 'dbt_date') (epochs, format) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.default__from_unixtimestamp"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1650535970.511559}, "macro.dbt_date.default__from_unixtimestamp": {"unique_id": "macro.dbt_date.default__from_unixtimestamp", "package_name": "dbt_date", "root_path": "/Users/songv/Code/jike/web3/dbt_ethereum_source/dbt_packages/dbt_date", "path": "macros/calendar_date/from_unixtimestamp.sql", "original_file_path": "macros/calendar_date/from_unixtimestamp.sql", "name": "default__from_unixtimestamp", "macro_sql": "\n\n{%- macro default__from_unixtimestamp(epochs, format=\"seconds\") -%}\n    {%- if format != \"seconds\" -%}\n    {{ exceptions.raise_compiler_error(\n        \"value \" ~ format ~ \" for `format` for from_unixtimestamp is not supported.\"\n        )\n    }}\n    {% endif -%}\n    to_timestamp({{ epochs }})\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1650535970.512169}, "macro.dbt_date.postgres__from_unixtimestamp": {"unique_id": "macro.dbt_date.postgres__from_unixtimestamp", "package_name": "dbt_date", "root_path": "/Users/songv/Code/jike/web3/dbt_ethereum_source/dbt_packages/dbt_date", "path": "macros/calendar_date/from_unixtimestamp.sql", "original_file_path": "macros/calendar_date/from_unixtimestamp.sql", "name": "postgres__from_unixtimestamp", "macro_sql": "\n\n{%- macro postgres__from_unixtimestamp(epochs, format=\"seconds\") -%}\n    {%- if format != \"seconds\" -%}\n    {{ exceptions.raise_compiler_error(\n        \"value \" ~ format ~ \" for `format` for from_unixtimestamp is not supported.\"\n        )\n    }}\n    {% endif -%}\n    cast(to_timestamp({{ epochs }}) at time zone 'UTC' as timestamp)\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1650535970.512735}, "macro.dbt_date.snowflake__from_unixtimestamp": {"unique_id": "macro.dbt_date.snowflake__from_unixtimestamp", "package_name": "dbt_date", "root_path": "/Users/songv/Code/jike/web3/dbt_ethereum_source/dbt_packages/dbt_date", "path": "macros/calendar_date/from_unixtimestamp.sql", "original_file_path": "macros/calendar_date/from_unixtimestamp.sql", "name": "snowflake__from_unixtimestamp", "macro_sql": "\n\n{%- macro snowflake__from_unixtimestamp(epochs, format) -%}\n    {%- if format == \"seconds\" -%}\n    {%- set scale = 0 -%}\n    {%- elif format == \"milliseconds\" -%}\n    {%- set scale = 3 -%}\n    {%- elif format == \"microseconds\" -%}\n    {%- set scale = 6 -%}\n    {%- else -%}\n    {{ exceptions.raise_compiler_error(\n        \"value \" ~ format ~ \" for `format` for from_unixtimestamp is not supported.\"\n        )\n    }}\n    {% endif -%}\n    to_timestamp_ntz({{ epochs }}, {{ scale }})\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1650535970.51366}, "macro.dbt_date.bigquery__from_unixtimestamp": {"unique_id": "macro.dbt_date.bigquery__from_unixtimestamp", "package_name": "dbt_date", "root_path": "/Users/songv/Code/jike/web3/dbt_ethereum_source/dbt_packages/dbt_date", "path": "macros/calendar_date/from_unixtimestamp.sql", "original_file_path": "macros/calendar_date/from_unixtimestamp.sql", "name": "bigquery__from_unixtimestamp", "macro_sql": "\n\n{%- macro bigquery__from_unixtimestamp(epochs, format) -%}\n    {%- if format == \"seconds\" -%}\n        timestamp_seconds({{ epochs }})\n    {%- elif format == \"milliseconds\" -%}\n        timestamp_millis({{ epochs }})\n    {%- elif format == \"microseconds\" -%}\n        timestamp_micros({{ epochs }})\n    {%- else -%}\n    {{ exceptions.raise_compiler_error(\n        \"value \" ~ format ~ \" for `format` for from_unixtimestamp is not supported.\"\n        )\n    }}\n    {% endif -%}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1650535970.514389}, "macro.dbt_date.n_months_ago": {"unique_id": "macro.dbt_date.n_months_ago", "package_name": "dbt_date", "root_path": "/Users/songv/Code/jike/web3/dbt_ethereum_source/dbt_packages/dbt_date", "path": "macros/calendar_date/n_months_ago.sql", "original_file_path": "macros/calendar_date/n_months_ago.sql", "name": "n_months_ago", "macro_sql": "{%- macro n_months_ago(n, tz=None) -%}\n{%- set n = n|int -%}\n{{ dbt_utils.date_trunc('month', \n    dbt_utils.dateadd('month', -1 * n, \n        dbt_date.today(tz)\n        )\n    ) }}\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.date_trunc", "macro.dbt_utils.dateadd", "macro.dbt_date.today"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1650535970.529758}, "macro.dbt_date.date_part": {"unique_id": "macro.dbt_date.date_part", "package_name": "dbt_date", "root_path": "/Users/songv/Code/jike/web3/dbt_ethereum_source/dbt_packages/dbt_date", "path": "macros/calendar_date/date_part.sql", "original_file_path": "macros/calendar_date/date_part.sql", "name": "date_part", "macro_sql": "{% macro date_part(datepart, date) -%}\n    {{ adapter.dispatch('date_part', 'dbt_date') (datepart, date) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.default__date_part"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1650535970.530529}, "macro.dbt_date.default__date_part": {"unique_id": "macro.dbt_date.default__date_part", "package_name": "dbt_date", "root_path": "/Users/songv/Code/jike/web3/dbt_ethereum_source/dbt_packages/dbt_date", "path": "macros/calendar_date/date_part.sql", "original_file_path": "macros/calendar_date/date_part.sql", "name": "default__date_part", "macro_sql": "{% macro default__date_part(datepart, date) -%}\n    date_part('{{ datepart }}', {{  date }})\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1650535970.530817}, "macro.dbt_date.bigquery__date_part": {"unique_id": "macro.dbt_date.bigquery__date_part", "package_name": "dbt_date", "root_path": "/Users/songv/Code/jike/web3/dbt_ethereum_source/dbt_packages/dbt_date", "path": "macros/calendar_date/date_part.sql", "original_file_path": "macros/calendar_date/date_part.sql", "name": "bigquery__date_part", "macro_sql": "{% macro bigquery__date_part(datepart, date) -%}\n    extract({{ datepart }} from {{ date }})\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1650535970.5310988}, "macro.dbt_date.n_weeks_away": {"unique_id": "macro.dbt_date.n_weeks_away", "package_name": "dbt_date", "root_path": "/Users/songv/Code/jike/web3/dbt_ethereum_source/dbt_packages/dbt_date", "path": "macros/calendar_date/n_weeks_away.sql", "original_file_path": "macros/calendar_date/n_weeks_away.sql", "name": "n_weeks_away", "macro_sql": "{%- macro n_weeks_away(n, tz=None) -%}\n{%- set n = n|int -%}\n{{ dbt_utils.date_trunc('week', \n    dbt_utils.dateadd('week', n, \n        dbt_date.today(tz)\n        )\n    ) }}\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.date_trunc", "macro.dbt_utils.dateadd", "macro.dbt_date.today"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1650535970.531998}, "macro.dbt_date.day_of_month": {"unique_id": "macro.dbt_date.day_of_month", "package_name": "dbt_date", "root_path": "/Users/songv/Code/jike/web3/dbt_ethereum_source/dbt_packages/dbt_date", "path": "macros/calendar_date/day_of_month.sql", "original_file_path": "macros/calendar_date/day_of_month.sql", "name": "day_of_month", "macro_sql": "{%- macro day_of_month(date) -%}\n{{ dbt_date.date_part('day', date) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.date_part"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1650535970.532593}, "macro.dbt_date.redshift__day_of_month": {"unique_id": "macro.dbt_date.redshift__day_of_month", "package_name": "dbt_date", "root_path": "/Users/songv/Code/jike/web3/dbt_ethereum_source/dbt_packages/dbt_date", "path": "macros/calendar_date/day_of_month.sql", "original_file_path": "macros/calendar_date/day_of_month.sql", "name": "redshift__day_of_month", "macro_sql": "\n\n{%- macro redshift__day_of_month(date) -%}\ncast({{ dbt_date.date_part('day', date) }} as {{ dbt_utils.type_bigint() }})\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.date_part", "macro.dbt_utils.type_bigint"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1650535970.5329762}, "macro.dbt_date.yesterday": {"unique_id": "macro.dbt_date.yesterday", "package_name": "dbt_date", "root_path": "/Users/songv/Code/jike/web3/dbt_ethereum_source/dbt_packages/dbt_date", "path": "macros/calendar_date/yesterday.sql", "original_file_path": "macros/calendar_date/yesterday.sql", "name": "yesterday", "macro_sql": "{%- macro yesterday(date=None, tz=None) -%}\n{{ dbt_date.n_days_ago(1, date, tz) }}\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.n_days_ago"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1650535970.53351}, "macro.dbt_date.day_of_week": {"unique_id": "macro.dbt_date.day_of_week", "package_name": "dbt_date", "root_path": "/Users/songv/Code/jike/web3/dbt_ethereum_source/dbt_packages/dbt_date", "path": "macros/calendar_date/day_of_week.sql", "original_file_path": "macros/calendar_date/day_of_week.sql", "name": "day_of_week", "macro_sql": "{%- macro day_of_week(date, isoweek=true) -%}\n{{ adapter.dispatch('day_of_week', 'dbt_date') (date, isoweek) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.default__day_of_week"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1650535970.536512}, "macro.dbt_date.default__day_of_week": {"unique_id": "macro.dbt_date.default__day_of_week", "package_name": "dbt_date", "root_path": "/Users/songv/Code/jike/web3/dbt_ethereum_source/dbt_packages/dbt_date", "path": "macros/calendar_date/day_of_week.sql", "original_file_path": "macros/calendar_date/day_of_week.sql", "name": "default__day_of_week", "macro_sql": "\n\n{%- macro default__day_of_week(date, isoweek) -%}\n\n    {%- set dow = dbt_date.date_part('dayofweek', date) -%}\n\n    {%- if isoweek -%}\n    case\n        -- Shift start of week from Sunday (0) to Monday (1)\n        when {{ dow }} = 0 then 7\n        else {{ dow }}\n    end\n    {%- else -%}\n    {{ dow }} + 1\n    {%- endif -%}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.date_part"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1650535970.537046}, "macro.dbt_date.snowflake__day_of_week": {"unique_id": "macro.dbt_date.snowflake__day_of_week", "package_name": "dbt_date", "root_path": "/Users/songv/Code/jike/web3/dbt_ethereum_source/dbt_packages/dbt_date", "path": "macros/calendar_date/day_of_week.sql", "original_file_path": "macros/calendar_date/day_of_week.sql", "name": "snowflake__day_of_week", "macro_sql": "\n\n{%- macro snowflake__day_of_week(date, isoweek) -%}\n\n    {%- if isoweek -%}\n        {%- set dow_part = 'dayofweekiso' -%}\n        {{ dbt_date.date_part(dow_part, date) }}\n    {%- else -%}\n        {%- set dow_part = 'dayofweek' -%}\n        case\n            when {{ dbt_date.date_part(dow_part, date) }} = 7 then 1\n            else {{ dbt_date.date_part(dow_part, date) }} + 1\n        end\n    {%- endif -%}\n\n\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.date_part"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1650535970.537781}, "macro.dbt_date.bigquery__day_of_week": {"unique_id": "macro.dbt_date.bigquery__day_of_week", "package_name": "dbt_date", "root_path": "/Users/songv/Code/jike/web3/dbt_ethereum_source/dbt_packages/dbt_date", "path": "macros/calendar_date/day_of_week.sql", "original_file_path": "macros/calendar_date/day_of_week.sql", "name": "bigquery__day_of_week", "macro_sql": "\n\n{%- macro bigquery__day_of_week(date, isoweek) -%}\n\n    {%- set dow = dbt_date.date_part('dayofweek', date) -%}\n\n    {%- if isoweek -%}\n    case\n        -- Shift start of week from Sunday (1) to Monday (2)\n        when {{ dow }} = 1 then 7\n        else {{ dow }} - 1\n    end\n    {%- else -%}\n    {{ dow }}\n    {%- endif -%}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.date_part"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1650535970.538305}, "macro.dbt_date.postgres__day_of_week": {"unique_id": "macro.dbt_date.postgres__day_of_week", "package_name": "dbt_date", "root_path": "/Users/songv/Code/jike/web3/dbt_ethereum_source/dbt_packages/dbt_date", "path": "macros/calendar_date/day_of_week.sql", "original_file_path": "macros/calendar_date/day_of_week.sql", "name": "postgres__day_of_week", "macro_sql": "\n\n\n{%- macro postgres__day_of_week(date, isoweek) -%}\n\n    {%- if isoweek -%}\n        {%- set dow_part = 'isodow' -%}\n        -- Monday(1) to Sunday (7)\n        cast({{ dbt_date.date_part(dow_part, date) }} as {{ dbt_utils.type_int() }})\n    {%- else -%}\n        {%- set dow_part = 'dow' -%}\n        -- Sunday(1) to Saturday (7)\n        cast({{ dbt_date.date_part(dow_part, date) }} + 1 as {{ dbt_utils.type_int() }})\n    {%- endif -%}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.date_part", "macro.dbt_utils.type_int"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1650535970.53908}, "macro.dbt_date.redshift__day_of_week": {"unique_id": "macro.dbt_date.redshift__day_of_week", "package_name": "dbt_date", "root_path": "/Users/songv/Code/jike/web3/dbt_ethereum_source/dbt_packages/dbt_date", "path": "macros/calendar_date/day_of_week.sql", "original_file_path": "macros/calendar_date/day_of_week.sql", "name": "redshift__day_of_week", "macro_sql": "\n\n\n{%- macro redshift__day_of_week(date, isoweek) -%}\n\n    {%- set dow = dbt_date.date_part('dayofweek', date) -%}\n\n    {%- if isoweek -%}\n    case\n        -- Shift start of week from Sunday (0) to Monday (1)\n        when {{ dow }} = 0 then 7\n        else cast({{ dow }} as {{ dbt_utils.type_bigint() }})\n    end\n    {%- else -%}\n    cast({{ dow }} + 1 as {{ dbt_utils.type_bigint() }})\n    {%- endif -%}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.date_part", "macro.dbt_utils.type_bigint"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1650535970.539871}, "macro.dbt_date.iso_week_end": {"unique_id": "macro.dbt_date.iso_week_end", "package_name": "dbt_date", "root_path": "/Users/songv/Code/jike/web3/dbt_ethereum_source/dbt_packages/dbt_date", "path": "macros/calendar_date/iso_week_end.sql", "original_file_path": "macros/calendar_date/iso_week_end.sql", "name": "iso_week_end", "macro_sql": "{%- macro iso_week_end(date=None, tz=None) -%}\n{%-set dt = date if date else dbt_date.today(tz) -%}\n{{ adapter.dispatch('iso_week_end', 'dbt_date') (dt) }}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.today", "macro.dbt_date.default__iso_week_end"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1650535970.55508}, "macro.dbt_date._iso_week_end": {"unique_id": "macro.dbt_date._iso_week_end", "package_name": "dbt_date", "root_path": "/Users/songv/Code/jike/web3/dbt_ethereum_source/dbt_packages/dbt_date", "path": "macros/calendar_date/iso_week_end.sql", "original_file_path": "macros/calendar_date/iso_week_end.sql", "name": "_iso_week_end", "macro_sql": "{%- macro _iso_week_end(date, week_type) -%}\n{%- set dt = dbt_date.iso_week_start(date) -%}\n{{ dbt_date.n_days_away(6, dt) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.iso_week_start", "macro.dbt_date.n_days_away"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1650535970.555468}, "macro.dbt_date.default__iso_week_end": {"unique_id": "macro.dbt_date.default__iso_week_end", "package_name": "dbt_date", "root_path": "/Users/songv/Code/jike/web3/dbt_ethereum_source/dbt_packages/dbt_date", "path": "macros/calendar_date/iso_week_end.sql", "original_file_path": "macros/calendar_date/iso_week_end.sql", "name": "default__iso_week_end", "macro_sql": "\n\n{%- macro default__iso_week_end(date) -%}\n{{ dbt_date._iso_week_end(date, 'isoweek') }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date._iso_week_end"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1650535970.555728}, "macro.dbt_date.snowflake__iso_week_end": {"unique_id": "macro.dbt_date.snowflake__iso_week_end", "package_name": "dbt_date", "root_path": "/Users/songv/Code/jike/web3/dbt_ethereum_source/dbt_packages/dbt_date", "path": "macros/calendar_date/iso_week_end.sql", "original_file_path": "macros/calendar_date/iso_week_end.sql", "name": "snowflake__iso_week_end", "macro_sql": "\n\n{%- macro snowflake__iso_week_end(date) -%}\n{{ dbt_date._iso_week_end(date, 'weekiso') }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date._iso_week_end"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1650535970.55599}, "macro.dbt_date.n_weeks_ago": {"unique_id": "macro.dbt_date.n_weeks_ago", "package_name": "dbt_date", "root_path": "/Users/songv/Code/jike/web3/dbt_ethereum_source/dbt_packages/dbt_date", "path": "macros/calendar_date/n_weeks_ago.sql", "original_file_path": "macros/calendar_date/n_weeks_ago.sql", "name": "n_weeks_ago", "macro_sql": "{%- macro n_weeks_ago(n, tz=None) -%}\n{%- set n = n|int -%}\n{{ dbt_utils.date_trunc('week', \n    dbt_utils.dateadd('week', -1 * n, \n        dbt_date.today(tz)\n        )\n    ) }}\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.date_trunc", "macro.dbt_utils.dateadd", "macro.dbt_date.today"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1650535970.556818}, "macro.dbt_date.month_name": {"unique_id": "macro.dbt_date.month_name", "package_name": "dbt_date", "root_path": "/Users/songv/Code/jike/web3/dbt_ethereum_source/dbt_packages/dbt_date", "path": "macros/calendar_date/month_name.sql", "original_file_path": "macros/calendar_date/month_name.sql", "name": "month_name", "macro_sql": "{%- macro month_name(date, short=True) -%}\n    {{ adapter.dispatch('month_name', 'dbt_date') (date, short) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.default__month_name"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1650535970.575001}, "macro.dbt_date.default__month_name": {"unique_id": "macro.dbt_date.default__month_name", "package_name": "dbt_date", "root_path": "/Users/songv/Code/jike/web3/dbt_ethereum_source/dbt_packages/dbt_date", "path": "macros/calendar_date/month_name.sql", "original_file_path": "macros/calendar_date/month_name.sql", "name": "default__month_name", "macro_sql": "\n\n{%- macro default__month_name(date, short) -%}\n{%- set f = 'MON' if short else 'MONTH' -%}\n    to_char({{ date }}, '{{ f }}')\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1650535970.575451}, "macro.dbt_date.bigquery__month_name": {"unique_id": "macro.dbt_date.bigquery__month_name", "package_name": "dbt_date", "root_path": "/Users/songv/Code/jike/web3/dbt_ethereum_source/dbt_packages/dbt_date", "path": "macros/calendar_date/month_name.sql", "original_file_path": "macros/calendar_date/month_name.sql", "name": "bigquery__month_name", "macro_sql": "\n\n{%- macro bigquery__month_name(date, short) -%}\n{%- set f = '%b' if short else '%B' -%}\n    format_date('{{ f }}', cast({{ date }} as date))\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1650535970.575874}, "macro.dbt_date.snowflake__month_name": {"unique_id": "macro.dbt_date.snowflake__month_name", "package_name": "dbt_date", "root_path": "/Users/songv/Code/jike/web3/dbt_ethereum_source/dbt_packages/dbt_date", "path": "macros/calendar_date/month_name.sql", "original_file_path": "macros/calendar_date/month_name.sql", "name": "snowflake__month_name", "macro_sql": "\n\n{%- macro snowflake__month_name(date, short) -%}\n{%- set f = 'MON' if short else 'MMMM' -%}\n    to_char({{ date }}, '{{ f }}')\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1650535970.576308}, "macro.dbt_date.postgres__month_name": {"unique_id": "macro.dbt_date.postgres__month_name", "package_name": "dbt_date", "root_path": "/Users/songv/Code/jike/web3/dbt_ethereum_source/dbt_packages/dbt_date", "path": "macros/calendar_date/month_name.sql", "original_file_path": "macros/calendar_date/month_name.sql", "name": "postgres__month_name", "macro_sql": "\n\n{%- macro postgres__month_name(date, short) -%}\n{# FM = Fill mode, which suppresses padding blanks #}\n{%- set f = 'FMMon' if short else 'FMMonth' -%}\n    to_char({{ date }}, '{{ f }}')\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1650535970.5767071}, "macro.dbt_date.last_month_name": {"unique_id": "macro.dbt_date.last_month_name", "package_name": "dbt_date", "root_path": "/Users/songv/Code/jike/web3/dbt_ethereum_source/dbt_packages/dbt_date", "path": "macros/calendar_date/last_month_name.sql", "original_file_path": "macros/calendar_date/last_month_name.sql", "name": "last_month_name", "macro_sql": "{%- macro last_month_name(short=True, tz=None) -%}\n{{ dbt_date.month_name(dbt_date.last_month(1, tz), short=short) }}\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.month_name", "macro.dbt_date.last_month"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1650535970.5937018}, "macro.dbt_date.week_of_year": {"unique_id": "macro.dbt_date.week_of_year", "package_name": "dbt_date", "root_path": "/Users/songv/Code/jike/web3/dbt_ethereum_source/dbt_packages/dbt_date", "path": "macros/calendar_date/week_of_year.sql", "original_file_path": "macros/calendar_date/week_of_year.sql", "name": "week_of_year", "macro_sql": "{%- macro week_of_year(date=None, tz=None) -%}\n{%-set dt = date if date else dbt_date.today(tz) -%}\n{{ adapter.dispatch('week_of_year', 'dbt_date') (dt) }}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.today", "macro.dbt_date.default__week_of_year"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1650535970.594742}, "macro.dbt_date.default__week_of_year": {"unique_id": "macro.dbt_date.default__week_of_year", "package_name": "dbt_date", "root_path": "/Users/songv/Code/jike/web3/dbt_ethereum_source/dbt_packages/dbt_date", "path": "macros/calendar_date/week_of_year.sql", "original_file_path": "macros/calendar_date/week_of_year.sql", "name": "default__week_of_year", "macro_sql": "{%- macro default__week_of_year(date) -%}\ncast({{ dbt_date.date_part('week', date) }} as {{ dbt_utils.type_int() }})\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.date_part", "macro.dbt_utils.type_int"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1650535970.5951328}, "macro.dbt_date.postgres__week_of_year": {"unique_id": "macro.dbt_date.postgres__week_of_year", "package_name": "dbt_date", "root_path": "/Users/songv/Code/jike/web3/dbt_ethereum_source/dbt_packages/dbt_date", "path": "macros/calendar_date/week_of_year.sql", "original_file_path": "macros/calendar_date/week_of_year.sql", "name": "postgres__week_of_year", "macro_sql": "\n\n{%- macro postgres__week_of_year(date) -%}\n{# postgresql 'week' returns isoweek. Use to_char instead.\n   WW = the first week starts on the first day of the year #}\ncast(to_char({{ date }}, 'WW') as {{ dbt_utils.type_int() }})\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.type_int"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1650535970.5954502}, "macro.dbt_date.convert_timezone": {"unique_id": "macro.dbt_date.convert_timezone", "package_name": "dbt_date", "root_path": "/Users/songv/Code/jike/web3/dbt_ethereum_source/dbt_packages/dbt_date", "path": "macros/calendar_date/convert_timezone.sql", "original_file_path": "macros/calendar_date/convert_timezone.sql", "name": "convert_timezone", "macro_sql": "{%- macro convert_timezone(column, target_tz=None, source_tz=None) -%}\n{%- set source_tz = \"UTC\" if not source_tz else source_tz -%}\n{%- set target_tz = var(\"dbt_date:time_zone\") if not target_tz else target_tz -%}\n{{ adapter.dispatch('convert_timezone', 'dbt_date') (column, target_tz, source_tz) }}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.spark__convert_timezone"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1650535970.597929}, "macro.dbt_date.default__convert_timezone": {"unique_id": "macro.dbt_date.default__convert_timezone", "package_name": "dbt_date", "root_path": "/Users/songv/Code/jike/web3/dbt_ethereum_source/dbt_packages/dbt_date", "path": "macros/calendar_date/convert_timezone.sql", "original_file_path": "macros/calendar_date/convert_timezone.sql", "name": "default__convert_timezone", "macro_sql": "{% macro default__convert_timezone(column, target_tz, source_tz) -%}\n{%- if not source_tz -%}\ncast(convert_timezone('{{ target_tz }}', {{ column }}) as {{ dbt_utils.type_timestamp() }})\n{%- else -%}\ncast(convert_timezone('{{ source_tz }}', '{{ target_tz }}', {{ column }}) as {{ dbt_utils.type_timestamp() }})\n{%- endif -%}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.type_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1650535970.598563}, "macro.dbt_date.bigquery__convert_timezone": {"unique_id": "macro.dbt_date.bigquery__convert_timezone", "package_name": "dbt_date", "root_path": "/Users/songv/Code/jike/web3/dbt_ethereum_source/dbt_packages/dbt_date", "path": "macros/calendar_date/convert_timezone.sql", "original_file_path": "macros/calendar_date/convert_timezone.sql", "name": "bigquery__convert_timezone", "macro_sql": "{%- macro bigquery__convert_timezone(column, target_tz, source_tz=None) -%}\ntimestamp(datetime({{ column }}, '{{ target_tz}}'))\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1650535970.598851}, "macro.dbt_date.spark__convert_timezone": {"unique_id": "macro.dbt_date.spark__convert_timezone", "package_name": "dbt_date", "root_path": "/Users/songv/Code/jike/web3/dbt_ethereum_source/dbt_packages/dbt_date", "path": "macros/calendar_date/convert_timezone.sql", "original_file_path": "macros/calendar_date/convert_timezone.sql", "name": "spark__convert_timezone", "macro_sql": "{%- macro spark__convert_timezone(column, target_tz, source_tz) -%}\nfrom_utc_timestamp(\n        to_utc_timestamp({{ column }}, '{{ source_tz }}'),\n        '{{ target_tz }}'\n        )\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1650535970.599156}, "macro.dbt_date.postgres__convert_timezone": {"unique_id": "macro.dbt_date.postgres__convert_timezone", "package_name": "dbt_date", "root_path": "/Users/songv/Code/jike/web3/dbt_ethereum_source/dbt_packages/dbt_date", "path": "macros/calendar_date/convert_timezone.sql", "original_file_path": "macros/calendar_date/convert_timezone.sql", "name": "postgres__convert_timezone", "macro_sql": "{% macro postgres__convert_timezone(column, target_tz, source_tz) -%}\n{%- if source_tz -%}\ncast({{ column }} at time zone '{{ source_tz }}' at time zone '{{ target_tz }}' as {{ dbt_utils.type_timestamp() }})\n{%- else -%}\ncast({{ column }} at time zone '{{ target_tz }}' as {{ dbt_utils.type_timestamp() }})\n{%- endif -%}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.type_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1650535970.599877}, "macro.dbt_date.redshift__convert_timezone": {"unique_id": "macro.dbt_date.redshift__convert_timezone", "package_name": "dbt_date", "root_path": "/Users/songv/Code/jike/web3/dbt_ethereum_source/dbt_packages/dbt_date", "path": "macros/calendar_date/convert_timezone.sql", "original_file_path": "macros/calendar_date/convert_timezone.sql", "name": "redshift__convert_timezone", "macro_sql": "{%- macro redshift__convert_timezone(column, target_tz, source_tz) -%}\n{{ return(dbt_date.default__convert_timezone(column, target_tz, source_tz)) }}\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.default__convert_timezone"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1650535970.600239}, "macro.dbt_date.n_months_away": {"unique_id": "macro.dbt_date.n_months_away", "package_name": "dbt_date", "root_path": "/Users/songv/Code/jike/web3/dbt_ethereum_source/dbt_packages/dbt_date", "path": "macros/calendar_date/n_months_away.sql", "original_file_path": "macros/calendar_date/n_months_away.sql", "name": "n_months_away", "macro_sql": "{%- macro n_months_away(n, tz=None) -%}\n{%- set n = n|int -%}\n{{ dbt_utils.date_trunc('month', \n    dbt_utils.dateadd('month', n, \n        dbt_date.today(tz)\n        )\n    ) }}\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.date_trunc", "macro.dbt_utils.dateadd", "macro.dbt_date.today"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1650535970.601036}, "macro.dbt_date.iso_week_of_year": {"unique_id": "macro.dbt_date.iso_week_of_year", "package_name": "dbt_date", "root_path": "/Users/songv/Code/jike/web3/dbt_ethereum_source/dbt_packages/dbt_date", "path": "macros/calendar_date/iso_week_of_year.sql", "original_file_path": "macros/calendar_date/iso_week_of_year.sql", "name": "iso_week_of_year", "macro_sql": "{%- macro iso_week_of_year(date=None, tz=None) -%}\n{%-set dt = date if date else dbt_date.today(tz) -%}\n{{ adapter.dispatch('iso_week_of_year', 'dbt_date') (dt) }}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.today", "macro.dbt_date.default__iso_week_of_year"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1650535970.602122}, "macro.dbt_date._iso_week_of_year": {"unique_id": "macro.dbt_date._iso_week_of_year", "package_name": "dbt_date", "root_path": "/Users/songv/Code/jike/web3/dbt_ethereum_source/dbt_packages/dbt_date", "path": "macros/calendar_date/iso_week_of_year.sql", "original_file_path": "macros/calendar_date/iso_week_of_year.sql", "name": "_iso_week_of_year", "macro_sql": "{%- macro _iso_week_of_year(date, week_type) -%}\ncast({{ dbt_date.date_part(week_type, date) }} as {{ dbt_utils.type_int() }})\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.date_part", "macro.dbt_utils.type_int"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1650535970.6024861}, "macro.dbt_date.default__iso_week_of_year": {"unique_id": "macro.dbt_date.default__iso_week_of_year", "package_name": "dbt_date", "root_path": "/Users/songv/Code/jike/web3/dbt_ethereum_source/dbt_packages/dbt_date", "path": "macros/calendar_date/iso_week_of_year.sql", "original_file_path": "macros/calendar_date/iso_week_of_year.sql", "name": "default__iso_week_of_year", "macro_sql": "\n\n{%- macro default__iso_week_of_year(date) -%}\n{{ dbt_date._iso_week_of_year(date, 'isoweek') }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date._iso_week_of_year"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1650535970.6027389}, "macro.dbt_date.snowflake__iso_week_of_year": {"unique_id": "macro.dbt_date.snowflake__iso_week_of_year", "package_name": "dbt_date", "root_path": "/Users/songv/Code/jike/web3/dbt_ethereum_source/dbt_packages/dbt_date", "path": "macros/calendar_date/iso_week_of_year.sql", "original_file_path": "macros/calendar_date/iso_week_of_year.sql", "name": "snowflake__iso_week_of_year", "macro_sql": "\n\n{%- macro snowflake__iso_week_of_year(date) -%}\n{{ dbt_date._iso_week_of_year(date, 'weekiso') }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date._iso_week_of_year"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1650535970.602991}, "macro.dbt_date.postgres__iso_week_of_year": {"unique_id": "macro.dbt_date.postgres__iso_week_of_year", "package_name": "dbt_date", "root_path": "/Users/songv/Code/jike/web3/dbt_ethereum_source/dbt_packages/dbt_date", "path": "macros/calendar_date/iso_week_of_year.sql", "original_file_path": "macros/calendar_date/iso_week_of_year.sql", "name": "postgres__iso_week_of_year", "macro_sql": "\n\n{%- macro postgres__iso_week_of_year(date) -%}\n-- postgresql week is isoweek, the first week of a year containing January 4 of that year.\n{{ dbt_date._iso_week_of_year(date, 'week') }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date._iso_week_of_year"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1650535970.6032598}, "macro.dbt_date.week_end": {"unique_id": "macro.dbt_date.week_end", "package_name": "dbt_date", "root_path": "/Users/songv/Code/jike/web3/dbt_ethereum_source/dbt_packages/dbt_date", "path": "macros/calendar_date/week_end.sql", "original_file_path": "macros/calendar_date/week_end.sql", "name": "week_end", "macro_sql": "{%- macro week_end(date=None, tz=None) -%}\n{%-set dt = date if date else dbt_date.today(tz) -%}\n{{ adapter.dispatch('week_end', 'dbt_date') (dt) }}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.today", "macro.dbt_date.default__week_end"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1650535970.6042109}, "macro.dbt_date.default__week_end": {"unique_id": "macro.dbt_date.default__week_end", "package_name": "dbt_date", "root_path": "/Users/songv/Code/jike/web3/dbt_ethereum_source/dbt_packages/dbt_date", "path": "macros/calendar_date/week_end.sql", "original_file_path": "macros/calendar_date/week_end.sql", "name": "default__week_end", "macro_sql": "{%- macro default__week_end(date) -%}\n{{ dbt_utils.last_day(date, 'week') }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.last_day"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1650535970.604469}, "macro.dbt_date.snowflake__week_end": {"unique_id": "macro.dbt_date.snowflake__week_end", "package_name": "dbt_date", "root_path": "/Users/songv/Code/jike/web3/dbt_ethereum_source/dbt_packages/dbt_date", "path": "macros/calendar_date/week_end.sql", "original_file_path": "macros/calendar_date/week_end.sql", "name": "snowflake__week_end", "macro_sql": "\n\n{%- macro snowflake__week_end(date) -%}\n{%- set dt = dbt_date.week_start(date) -%}\n{{ dbt_date.n_days_away(6, dt) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.week_start", "macro.dbt_date.n_days_away"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1650535970.604838}, "macro.dbt_date.postgres__week_end": {"unique_id": "macro.dbt_date.postgres__week_end", "package_name": "dbt_date", "root_path": "/Users/songv/Code/jike/web3/dbt_ethereum_source/dbt_packages/dbt_date", "path": "macros/calendar_date/week_end.sql", "original_file_path": "macros/calendar_date/week_end.sql", "name": "postgres__week_end", "macro_sql": "\n\n{%- macro postgres__week_end(date) -%}\n{%- set dt = dbt_date.week_start(date) -%}\n{{ dbt_date.n_days_away(6, dt) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.week_start", "macro.dbt_date.n_days_away"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1650535970.605201}, "macro.dbt_date.next_month_number": {"unique_id": "macro.dbt_date.next_month_number", "package_name": "dbt_date", "root_path": "/Users/songv/Code/jike/web3/dbt_ethereum_source/dbt_packages/dbt_date", "path": "macros/calendar_date/next_month_number.sql", "original_file_path": "macros/calendar_date/next_month_number.sql", "name": "next_month_number", "macro_sql": "{%- macro next_month_number(tz=None) -%}\n{{ dbt_date.date_part('month', dbt_date.next_month(1, tz)) }}\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.date_part", "macro.dbt_date.next_month"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1650535970.6057558}, "macro.dbt_date.last_month_number": {"unique_id": "macro.dbt_date.last_month_number", "package_name": "dbt_date", "root_path": "/Users/songv/Code/jike/web3/dbt_ethereum_source/dbt_packages/dbt_date", "path": "macros/calendar_date/last_month_number.sql", "original_file_path": "macros/calendar_date/last_month_number.sql", "name": "last_month_number", "macro_sql": "{%- macro last_month_number(tz=None) -%}\n{{ dbt_date.date_part('month', dbt_date.last_month(1, tz)) }}\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.date_part", "macro.dbt_date.last_month"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1650535970.606255}}, "docs": {"dbt.__overview__": {"unique_id": "dbt.__overview__", "package_name": "dbt", "root_path": "/opt/homebrew/lib/python3.9/site-packages/dbt/include/global_project", "path": "overview.md", "original_file_path": "docs/overview.md", "name": "__overview__", "block_contents": "### Welcome!\n\nWelcome to the auto-generated documentation for your dbt project!\n\n### Navigation\n\nYou can use the `Project` and `Database` navigation tabs on the left side of the window to explore the models\nin your project.\n\n#### Project Tab\nThe `Project` tab mirrors the directory structure of your dbt project. In this tab, you can see all of the\nmodels defined in your dbt project, as well as models imported from dbt packages.\n\n#### Database Tab\nThe `Database` tab also exposes your models, but in a format that looks more like a database explorer. This view\nshows relations (tables and views) grouped into database schemas. Note that ephemeral models are _not_ shown\nin this interface, as they do not exist in the database.\n\n### Graph Exploration\nYou can click the blue icon on the bottom-right corner of the page to view the lineage graph of your models.\n\nOn model pages, you'll see the immediate parents and children of the model you're exploring. By clicking the `Expand`\nbutton at the top-right of this lineage pane, you'll be able to see all of the models that are used to build,\nor are built from, the model you're exploring.\n\nOnce expanded, you'll be able to use the `--select` and `--exclude` model selection syntax to filter the\nmodels in the graph. For more information on model selection, check out the [dbt docs](https://docs.getdbt.com/docs/model-selection-syntax).\n\nNote that you can also right-click on models to interactively filter and explore the graph.\n\n---\n\n### More information\n\n- [What is dbt](https://docs.getdbt.com/docs/introduction)?\n- Read the [dbt viewpoint](https://docs.getdbt.com/docs/viewpoint)\n- [Installation](https://docs.getdbt.com/docs/installation)\n- Join the [dbt Community](https://www.getdbt.com/community/) for questions and discussion"}}, "exposures": {}, "metrics": {}, "selectors": {}, "disabled": {"model.ethereum_source.stg_ethereum__receipts": [{"raw_sql": "{{ config(enabled=var('using_receipts', True)) }}\n\nwith base as (\n  select * \n  from {{ var('receipts') }}\n),\n\nfinal as (\n    select *\n    from base\n)\n\nselect * \nfrom final", "resource_type": "model", "depends_on": {"macros": [], "nodes": []}, "config": {"enabled": false, "alias": null, "schema": "stg_ethereum", "database": null, "tags": ["chain_ethereum", "level_standardize", "proj_global"], "meta": {}, "materialized": "view", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "post-hook": [], "pre-hook": []}, "database": null, "schema": "ethereum_stg_ethereum", "fqn": ["ethereum_source", "stg", "stg_ethereum__receipts"], "unique_id": "model.ethereum_source.stg_ethereum__receipts", "package_name": "ethereum_source", "root_path": "/Users/songv/Code/jike/web3/dbt_ethereum_source", "path": "stg/stg_ethereum__receipts.sql", "original_file_path": "models/stg/stg_ethereum__receipts.sql", "name": "stg_ethereum__receipts", "alias": "stg_ethereum__receipts", "checksum": {"name": "sha256", "checksum": "9477edbd24d9dadee43755e47c9ed513ce96b2e688baa8ed3904ca3e3690d39a"}, "tags": ["chain_ethereum", "level_standardize", "proj_global"], "refs": [], "sources": [["ethereum", "receipts"]], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": "ethereum_source://models/stg/schema.yml", "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "view", "schema": "stg_ethereum", "tags": ["chain_ethereum", "level_standardize", "proj_global"], "enabled": false}, "created_at": 1650535971.866318}]}, "parent_map": {"model.ethereum_source.OpenSeaENSResolver_call_addr": ["model.ethereum_source.stg_ethereum__traces"], "model.ethereum_source.OpenSeaENSResolver_call_transferOwnership": ["model.ethereum_source.stg_ethereum__traces"], "model.ethereum_source.WyvernExchangeV2_call_staticCall": ["model.ethereum_source.stg_ethereum__traces"], "model.ethereum_source.WyvernExchangeV1_call_owner": ["model.ethereum_source.stg_ethereum__traces"], "model.ethereum_source.WyvernExchangeV1_call_name": ["model.ethereum_source.stg_ethereum__traces"], "model.ethereum_source.WyvernExchangeV2_call_minimumMakerProtocolFee": ["model.ethereum_source.stg_ethereum__traces"], "model.ethereum_source.OpenSeaENSResolver_call_supportsInterface": ["model.ethereum_source.stg_ethereum__traces"], "model.ethereum_source.WyvernExchangeV2_evt_OrderCancelled": ["model.ethereum_source.stg_ethereum__logs"], "model.ethereum_source.OpenSeaENSResolver_call_openSeaVersion": ["model.ethereum_source.stg_ethereum__traces"], "model.ethereum_source.WyvernExchangeV2_call_cancelledOrFinalized": ["model.ethereum_source.stg_ethereum__traces"], "model.ethereum_source.OpenSeaENSResolver_call_owner": ["model.ethereum_source.stg_ethereum__traces"], "model.ethereum_source.WyvernExchangeV1_call_approvedOrders": ["model.ethereum_source.stg_ethereum__traces"], "model.ethereum_source.WyvernExchangeV1_evt_OrderApprovedPartOne": ["model.ethereum_source.stg_ethereum__logs"], "model.ethereum_source.OpenSeaENSResolver_call_setAuthorisation": ["model.ethereum_source.stg_ethereum__traces"], "model.ethereum_source.WyvernExchangeV1_call_staticCall": ["model.ethereum_source.stg_ethereum__traces"], "model.ethereum_source.WyvernExchangeV2_call_cancelOrderWithNonce_": ["model.ethereum_source.stg_ethereum__traces"], "model.ethereum_source.WyvernExchangeV2_call_DOMAIN_SEPARATOR": ["model.ethereum_source.stg_ethereum__traces"], "model.ethereum_source.WyvernExchangeV1_call_guardedArrayReplace": ["model.ethereum_source.stg_ethereum__traces"], "model.ethereum_source.WyvernExchangeV1_call_registry": ["model.ethereum_source.stg_ethereum__traces"], "model.ethereum_source.WyvernExchangeV2_evt_OrderApprovedPartOne": ["model.ethereum_source.stg_ethereum__logs"], "model.ethereum_source.WyvernExchangeV2_call_guardedArrayReplace": ["model.ethereum_source.stg_ethereum__traces"], "model.ethereum_source.WyvernExchangeV1_call_renounceOwnership": ["model.ethereum_source.stg_ethereum__traces"], "model.ethereum_source.OpenSeaENSResolver_evt_NameChanged": ["model.ethereum_source.stg_ethereum__logs"], "model.ethereum_source.WyvernExchangeV2_call_validateOrderParameters_": ["model.ethereum_source.stg_ethereum__traces"], "model.ethereum_source.OpenSeaENSResolver_call_getTokenId": ["model.ethereum_source.stg_ethereum__traces"], "model.ethereum_source.OpenSeaENSResolver_evt_ABIChanged": ["model.ethereum_source.stg_ethereum__logs"], "model.ethereum_source.WyvernExchangeV2_call_name": ["model.ethereum_source.stg_ethereum__traces"], "model.ethereum_source.WyvernExchangeV2_call_minimumTakerProtocolFee": ["model.ethereum_source.stg_ethereum__traces"], "model.ethereum_source.WyvernExchangeV1_evt_OrderCancelled": ["model.ethereum_source.stg_ethereum__logs"], "model.ethereum_source.WyvernExchangeV1_call_ordersCanMatch_": ["model.ethereum_source.stg_ethereum__traces"], "model.ethereum_source.OpenSeaENSResolver_call_setInterface": ["model.ethereum_source.stg_ethereum__traces"], "model.ethereum_source.WyvernExchangeV2_call_owner": ["model.ethereum_source.stg_ethereum__traces"], "model.ethereum_source.WyvernExchangeV2_call_protocolFeeRecipient": ["model.ethereum_source.stg_ethereum__traces"], "model.ethereum_source.OpenSeaENSResolver_call_contenthash": ["model.ethereum_source.stg_ethereum__traces"], "model.ethereum_source.WyvernExchangeV1_call_testCopyAddress": ["model.ethereum_source.stg_ethereum__traces"], "model.ethereum_source.WyvernExchangeV1_call_atomicMatch_": ["model.ethereum_source.stg_ethereum__traces"], "model.ethereum_source.WyvernExchangeV1_call_minimumTakerProtocolFee": ["model.ethereum_source.stg_ethereum__traces"], "model.ethereum_source.OpenSeaENSResolver_call_addTokenId": ["model.ethereum_source.stg_ethereum__traces"], "model.ethereum_source.WyvernExchangeV2_call_exchangeToken": ["model.ethereum_source.stg_ethereum__traces"], "model.ethereum_source.OpenSeaENSResolver_evt_TextChanged": ["model.ethereum_source.stg_ethereum__logs"], "model.ethereum_source.OpenSeaENSResolver_call_ABI": ["model.ethereum_source.stg_ethereum__traces"], "model.ethereum_source.WyvernExchangeV1_call_validateOrderParameters_": ["model.ethereum_source.stg_ethereum__traces"], "model.ethereum_source.WyvernExchangeV2_call_calculateMatchPrice_": ["model.ethereum_source.stg_ethereum__traces"], "model.ethereum_source.OpenSeaENSResolver_call_text": ["model.ethereum_source.stg_ethereum__traces"], "model.ethereum_source.WyvernExchangeV1_call_hashToSign_": ["model.ethereum_source.stg_ethereum__traces"], "model.ethereum_source.WyvernExchangeV1_call_approveOrder_": ["model.ethereum_source.stg_ethereum__traces"], "model.ethereum_source.WyvernExchangeV1_call_testCopy": ["model.ethereum_source.stg_ethereum__traces"], "model.ethereum_source.WyvernExchangeV1_call_exchangeToken": ["model.ethereum_source.stg_ethereum__traces"], "model.ethereum_source.WyvernExchangeV2_call_version": ["model.ethereum_source.stg_ethereum__traces"], "model.ethereum_source.WyvernExchangeV2_call_approvedOrders": ["model.ethereum_source.stg_ethereum__traces"], "model.ethereum_source.WyvernExchangeV2_call_approveOrder_": ["model.ethereum_source.stg_ethereum__traces"], "model.ethereum_source.WyvernExchangeV2_call_incrementNonce": ["model.ethereum_source.stg_ethereum__traces"], "model.ethereum_source.WyvernExchangeV1_call_tokenTransferProxy": ["model.ethereum_source.stg_ethereum__traces"], "model.ethereum_source.WyvernExchangeV1_call_cancelOrder_": ["model.ethereum_source.stg_ethereum__traces"], "model.ethereum_source.WyvernExchangeV1_call_minimumMakerProtocolFee": ["model.ethereum_source.stg_ethereum__traces"], "model.ethereum_source.OpenSeaENSResolver_call_name": ["model.ethereum_source.stg_ethereum__traces"], "model.ethereum_source.WyvernExchangeV1_call_orderCalldataCanMatch": ["model.ethereum_source.stg_ethereum__traces"], "model.ethereum_source.OpenSeaENSResolver_call_setABI": ["model.ethereum_source.stg_ethereum__traces"], "model.ethereum_source.WyvernExchangeV2_call_transferOwnership": ["model.ethereum_source.stg_ethereum__traces"], "model.ethereum_source.WyvernExchangeV2_evt_OwnershipRenounced": ["model.ethereum_source.stg_ethereum__logs"], "model.ethereum_source.WyvernExchangeV1_evt_OrdersMatched": ["model.ethereum_source.stg_ethereum__logs"], "model.ethereum_source.WyvernExchangeV2_call_registry": ["model.ethereum_source.stg_ethereum__traces"], "model.ethereum_source.WyvernExchangeV1_call_validateOrder_": ["model.ethereum_source.stg_ethereum__traces"], "model.ethereum_source.OpenSeaENSResolver_call_setBaseURI": ["model.ethereum_source.stg_ethereum__traces"], "model.ethereum_source.WyvernExchangeV1_call_changeProtocolFeeRecipient": ["model.ethereum_source.stg_ethereum__traces"], "model.ethereum_source.WyvernExchangeV2_call_codename": ["model.ethereum_source.stg_ethereum__traces"], "model.ethereum_source.WyvernExchangeV2_call_renounceOwnership": ["model.ethereum_source.stg_ethereum__traces"], "model.ethereum_source.WyvernExchangeV2_call_ordersCanMatch_": ["model.ethereum_source.stg_ethereum__traces"], "model.ethereum_source.OpenSeaENSResolver_call_pubkey": ["model.ethereum_source.stg_ethereum__traces"], "model.ethereum_source.WyvernExchangeV2_call_calculateCurrentPrice_": ["model.ethereum_source.stg_ethereum__traces"], "model.ethereum_source.OpenSeaENSResolver_call_setName": ["model.ethereum_source.stg_ethereum__traces"], "model.ethereum_source.WyvernExchangeV2_call_tokenTransferProxy": ["model.ethereum_source.stg_ethereum__traces"], "model.ethereum_source.WyvernExchangeV1_evt_OwnershipTransferred": ["model.ethereum_source.stg_ethereum__logs"], "model.ethereum_source.OpenSeaENSResolver_evt_PubkeyChanged": ["model.ethereum_source.stg_ethereum__logs"], "model.ethereum_source.OpenSeaENSResolver_call_interfaceImplementer": ["model.ethereum_source.stg_ethereum__traces"], "model.ethereum_source.WyvernExchangeV2_call_hashToSign_": ["model.ethereum_source.stg_ethereum__traces"], "model.ethereum_source.WyvernExchangeV2_call_changeProtocolFeeRecipient": ["model.ethereum_source.stg_ethereum__traces"], "model.ethereum_source.WyvernExchangeV1_call_protocolFeeRecipient": ["model.ethereum_source.stg_ethereum__traces"], "model.ethereum_source.WyvernExchangeV2_call_orderCalldataCanMatch": ["model.ethereum_source.stg_ethereum__traces"], "model.ethereum_source.OpenSeaENSResolver_evt_ContenthashChanged": ["model.ethereum_source.stg_ethereum__logs"], "model.ethereum_source.WyvernExchangeV2_evt_OwnershipTransferred": ["model.ethereum_source.stg_ethereum__logs"], "model.ethereum_source.WyvernExchangeV1_call_version": ["model.ethereum_source.stg_ethereum__traces"], "model.ethereum_source.OpenSeaENSResolver_call_isOwner": ["model.ethereum_source.stg_ethereum__traces"], "model.ethereum_source.OpenSeaENSResolver_call_setText": ["model.ethereum_source.stg_ethereum__traces"], "model.ethereum_source.OpenSeaENSResolver_call_setContenthash": ["model.ethereum_source.stg_ethereum__traces"], "model.ethereum_source.WyvernExchangeV1_call_calculateMatchPrice_": ["model.ethereum_source.stg_ethereum__traces"], "model.ethereum_source.WyvernExchangeV2_call_nonces": ["model.ethereum_source.stg_ethereum__traces"], "model.ethereum_source.OpenSeaENSResolver_call_baseURI": ["model.ethereum_source.stg_ethereum__traces"], "model.ethereum_source.OpenSeaENSResolver_evt_InterfaceChanged": ["model.ethereum_source.stg_ethereum__logs"], "model.ethereum_source.WyvernExchangeV1_call_changeMinimumMakerProtocolFee": ["model.ethereum_source.stg_ethereum__traces"], "model.ethereum_source.WyvernExchangeV2_evt_OrdersMatched": ["model.ethereum_source.stg_ethereum__logs"], "model.ethereum_source.WyvernExchangeV2_evt_NonceIncremented": ["model.ethereum_source.stg_ethereum__logs"], "model.ethereum_source.OpenSeaENSResolver_call_setPubkey": ["model.ethereum_source.stg_ethereum__traces"], "model.ethereum_source.OpenSeaENSResolver_evt_AddrChanged": ["model.ethereum_source.stg_ethereum__logs"], "model.ethereum_source.WyvernExchangeV2_call_calculateFinalPrice": ["model.ethereum_source.stg_ethereum__traces"], "model.ethereum_source.WyvernExchangeV2_call_cancelOrder_": ["model.ethereum_source.stg_ethereum__traces"], "model.ethereum_source.WyvernExchangeV1_call_transferOwnership": ["model.ethereum_source.stg_ethereum__traces"], "model.ethereum_source.WyvernExchangeV1_evt_OwnershipRenounced": ["model.ethereum_source.stg_ethereum__logs"], "model.ethereum_source.WyvernExchangeV1_evt_OrderApprovedPartTwo": ["model.ethereum_source.stg_ethereum__logs"], "model.ethereum_source.WyvernExchangeV1_call_INVERSE_BASIS_POINT": ["model.ethereum_source.stg_ethereum__traces"], "model.ethereum_source.WyvernExchangeV2_call_changeMinimumMakerProtocolFee": ["model.ethereum_source.stg_ethereum__traces"], "model.ethereum_source.OpenSeaENSResolver_evt_OwnershipTransferred": ["model.ethereum_source.stg_ethereum__logs"], "model.ethereum_source.OpenSeaENSResolver_call_setAddr": ["model.ethereum_source.stg_ethereum__traces"], "model.ethereum_source.OpenSeaENSResolver_evt_AuthorisationChanged": ["model.ethereum_source.stg_ethereum__logs"], "model.ethereum_source.WyvernExchangeV1_call_codename": ["model.ethereum_source.stg_ethereum__traces"], "model.ethereum_source.WyvernExchangeV1_call_calculateFinalPrice": ["model.ethereum_source.stg_ethereum__traces"], "model.ethereum_source.WyvernExchangeV1_call_hashOrder_": ["model.ethereum_source.stg_ethereum__traces"], "model.ethereum_source.WyvernExchangeV2_call_changeMinimumTakerProtocolFee": ["model.ethereum_source.stg_ethereum__traces"], "model.ethereum_source.OpenSeaENSResolver_call_authorisations": ["model.ethereum_source.stg_ethereum__traces"], "model.ethereum_source.WyvernExchangeV1_call_cancelledOrFinalized": ["model.ethereum_source.stg_ethereum__traces"], "model.ethereum_source.WyvernExchangeV2_call_atomicMatch_": ["model.ethereum_source.stg_ethereum__traces"], "model.ethereum_source.WyvernExchangeV2_evt_OrderApprovedPartTwo": ["model.ethereum_source.stg_ethereum__logs"], "model.ethereum_source.WyvernExchangeV2_call_INVERSE_BASIS_POINT": ["model.ethereum_source.stg_ethereum__traces"], "model.ethereum_source.WyvernExchangeV2_call_validateOrder_": ["model.ethereum_source.stg_ethereum__traces"], "model.ethereum_source.WyvernExchangeV1_call_calculateCurrentPrice_": ["model.ethereum_source.stg_ethereum__traces"], "model.ethereum_source.WyvernExchangeV2_call_hashOrder_": ["model.ethereum_source.stg_ethereum__traces"], "model.ethereum_source.OpenSeaENSResolver_call_renounceOwnership": ["model.ethereum_source.stg_ethereum__traces"], "model.ethereum_source.WyvernExchangeV1_call_changeMinimumTakerProtocolFee": ["model.ethereum_source.stg_ethereum__traces"], "model.ethereum_source.stg_ethereum__token_transfers": ["source.ethereum_source.ethereum.token_transfers"], "model.ethereum_source.stg_ethereum__logs": ["source.ethereum_source.ethereum.logs"], "model.ethereum_source.stg_ethereum__transactions": ["source.ethereum_source.ethereum.transactions"], "model.ethereum_source.stg_ethereum__contracts": ["source.ethereum_source.ethereum.contracts"], "model.ethereum_source.stg_ethereum__tokens": ["source.ethereum_source.ethereum.contracts"], "model.ethereum_source.stg_ethereum__traces": ["source.ethereum_source.ethereum.traces"], "model.ethereum_source.stg_ethereum__blocks": ["source.ethereum_source.ethereum.blocks"], "source.ethereum_source.ethereum.transactions": [], "source.ethereum_source.ethereum.blocks": [], "source.ethereum_source.ethereum.logs": [], "source.ethereum_source.ethereum.traces": [], "source.ethereum_source.ethereum.token_transfers": [], "source.ethereum_source.ethereum.contracts": [], "source.ethereum_source.ethereum.tokens": [], "source.ethereum_source.ethereum.receipts": []}, "child_map": {"model.ethereum_source.OpenSeaENSResolver_call_addr": [], "model.ethereum_source.OpenSeaENSResolver_call_transferOwnership": [], "model.ethereum_source.WyvernExchangeV2_call_staticCall": [], "model.ethereum_source.WyvernExchangeV1_call_owner": [], "model.ethereum_source.WyvernExchangeV1_call_name": [], "model.ethereum_source.WyvernExchangeV2_call_minimumMakerProtocolFee": [], "model.ethereum_source.OpenSeaENSResolver_call_supportsInterface": [], "model.ethereum_source.WyvernExchangeV2_evt_OrderCancelled": [], "model.ethereum_source.OpenSeaENSResolver_call_openSeaVersion": [], "model.ethereum_source.WyvernExchangeV2_call_cancelledOrFinalized": [], "model.ethereum_source.OpenSeaENSResolver_call_owner": [], "model.ethereum_source.WyvernExchangeV1_call_approvedOrders": [], "model.ethereum_source.WyvernExchangeV1_evt_OrderApprovedPartOne": [], "model.ethereum_source.OpenSeaENSResolver_call_setAuthorisation": [], "model.ethereum_source.WyvernExchangeV1_call_staticCall": [], "model.ethereum_source.WyvernExchangeV2_call_cancelOrderWithNonce_": [], "model.ethereum_source.WyvernExchangeV2_call_DOMAIN_SEPARATOR": [], "model.ethereum_source.WyvernExchangeV1_call_guardedArrayReplace": [], "model.ethereum_source.WyvernExchangeV1_call_registry": [], "model.ethereum_source.WyvernExchangeV2_evt_OrderApprovedPartOne": [], "model.ethereum_source.WyvernExchangeV2_call_guardedArrayReplace": [], "model.ethereum_source.WyvernExchangeV1_call_renounceOwnership": [], "model.ethereum_source.OpenSeaENSResolver_evt_NameChanged": [], "model.ethereum_source.WyvernExchangeV2_call_validateOrderParameters_": [], "model.ethereum_source.OpenSeaENSResolver_call_getTokenId": [], "model.ethereum_source.OpenSeaENSResolver_evt_ABIChanged": [], "model.ethereum_source.WyvernExchangeV2_call_name": [], "model.ethereum_source.WyvernExchangeV2_call_minimumTakerProtocolFee": [], "model.ethereum_source.WyvernExchangeV1_evt_OrderCancelled": [], "model.ethereum_source.WyvernExchangeV1_call_ordersCanMatch_": [], "model.ethereum_source.OpenSeaENSResolver_call_setInterface": [], "model.ethereum_source.WyvernExchangeV2_call_owner": [], "model.ethereum_source.WyvernExchangeV2_call_protocolFeeRecipient": [], "model.ethereum_source.OpenSeaENSResolver_call_contenthash": [], "model.ethereum_source.WyvernExchangeV1_call_testCopyAddress": [], "model.ethereum_source.WyvernExchangeV1_call_atomicMatch_": [], "model.ethereum_source.WyvernExchangeV1_call_minimumTakerProtocolFee": [], "model.ethereum_source.OpenSeaENSResolver_call_addTokenId": [], "model.ethereum_source.WyvernExchangeV2_call_exchangeToken": [], "model.ethereum_source.OpenSeaENSResolver_evt_TextChanged": [], "model.ethereum_source.OpenSeaENSResolver_call_ABI": [], "model.ethereum_source.WyvernExchangeV1_call_validateOrderParameters_": [], "model.ethereum_source.WyvernExchangeV2_call_calculateMatchPrice_": [], "model.ethereum_source.OpenSeaENSResolver_call_text": [], "model.ethereum_source.WyvernExchangeV1_call_hashToSign_": [], "model.ethereum_source.WyvernExchangeV1_call_approveOrder_": [], "model.ethereum_source.WyvernExchangeV1_call_testCopy": [], "model.ethereum_source.WyvernExchangeV1_call_exchangeToken": [], "model.ethereum_source.WyvernExchangeV2_call_version": [], "model.ethereum_source.WyvernExchangeV2_call_approvedOrders": [], "model.ethereum_source.WyvernExchangeV2_call_approveOrder_": [], "model.ethereum_source.WyvernExchangeV2_call_incrementNonce": [], "model.ethereum_source.WyvernExchangeV1_call_tokenTransferProxy": [], "model.ethereum_source.WyvernExchangeV1_call_cancelOrder_": [], "model.ethereum_source.WyvernExchangeV1_call_minimumMakerProtocolFee": [], "model.ethereum_source.OpenSeaENSResolver_call_name": [], "model.ethereum_source.WyvernExchangeV1_call_orderCalldataCanMatch": [], "model.ethereum_source.OpenSeaENSResolver_call_setABI": [], "model.ethereum_source.WyvernExchangeV2_call_transferOwnership": [], "model.ethereum_source.WyvernExchangeV2_evt_OwnershipRenounced": [], "model.ethereum_source.WyvernExchangeV1_evt_OrdersMatched": [], "model.ethereum_source.WyvernExchangeV2_call_registry": [], "model.ethereum_source.WyvernExchangeV1_call_validateOrder_": [], "model.ethereum_source.OpenSeaENSResolver_call_setBaseURI": [], "model.ethereum_source.WyvernExchangeV1_call_changeProtocolFeeRecipient": [], "model.ethereum_source.WyvernExchangeV2_call_codename": [], "model.ethereum_source.WyvernExchangeV2_call_renounceOwnership": [], "model.ethereum_source.WyvernExchangeV2_call_ordersCanMatch_": [], "model.ethereum_source.OpenSeaENSResolver_call_pubkey": [], "model.ethereum_source.WyvernExchangeV2_call_calculateCurrentPrice_": [], "model.ethereum_source.OpenSeaENSResolver_call_setName": [], "model.ethereum_source.WyvernExchangeV2_call_tokenTransferProxy": [], "model.ethereum_source.WyvernExchangeV1_evt_OwnershipTransferred": [], "model.ethereum_source.OpenSeaENSResolver_evt_PubkeyChanged": [], "model.ethereum_source.OpenSeaENSResolver_call_interfaceImplementer": [], "model.ethereum_source.WyvernExchangeV2_call_hashToSign_": [], "model.ethereum_source.WyvernExchangeV2_call_changeProtocolFeeRecipient": [], "model.ethereum_source.WyvernExchangeV1_call_protocolFeeRecipient": [], "model.ethereum_source.WyvernExchangeV2_call_orderCalldataCanMatch": [], "model.ethereum_source.OpenSeaENSResolver_evt_ContenthashChanged": [], "model.ethereum_source.WyvernExchangeV2_evt_OwnershipTransferred": [], "model.ethereum_source.WyvernExchangeV1_call_version": [], "model.ethereum_source.OpenSeaENSResolver_call_isOwner": [], "model.ethereum_source.OpenSeaENSResolver_call_setText": [], "model.ethereum_source.OpenSeaENSResolver_call_setContenthash": [], "model.ethereum_source.WyvernExchangeV1_call_calculateMatchPrice_": [], "model.ethereum_source.WyvernExchangeV2_call_nonces": [], "model.ethereum_source.OpenSeaENSResolver_call_baseURI": [], "model.ethereum_source.OpenSeaENSResolver_evt_InterfaceChanged": [], "model.ethereum_source.WyvernExchangeV1_call_changeMinimumMakerProtocolFee": [], "model.ethereum_source.WyvernExchangeV2_evt_OrdersMatched": [], "model.ethereum_source.WyvernExchangeV2_evt_NonceIncremented": [], "model.ethereum_source.OpenSeaENSResolver_call_setPubkey": [], "model.ethereum_source.OpenSeaENSResolver_evt_AddrChanged": [], "model.ethereum_source.WyvernExchangeV2_call_calculateFinalPrice": [], "model.ethereum_source.WyvernExchangeV2_call_cancelOrder_": [], "model.ethereum_source.WyvernExchangeV1_call_transferOwnership": [], "model.ethereum_source.WyvernExchangeV1_evt_OwnershipRenounced": [], "model.ethereum_source.WyvernExchangeV1_evt_OrderApprovedPartTwo": [], "model.ethereum_source.WyvernExchangeV1_call_INVERSE_BASIS_POINT": [], "model.ethereum_source.WyvernExchangeV2_call_changeMinimumMakerProtocolFee": [], "model.ethereum_source.OpenSeaENSResolver_evt_OwnershipTransferred": [], "model.ethereum_source.OpenSeaENSResolver_call_setAddr": [], "model.ethereum_source.OpenSeaENSResolver_evt_AuthorisationChanged": [], "model.ethereum_source.WyvernExchangeV1_call_codename": [], "model.ethereum_source.WyvernExchangeV1_call_calculateFinalPrice": [], "model.ethereum_source.WyvernExchangeV1_call_hashOrder_": [], "model.ethereum_source.WyvernExchangeV2_call_changeMinimumTakerProtocolFee": [], "model.ethereum_source.OpenSeaENSResolver_call_authorisations": [], "model.ethereum_source.WyvernExchangeV1_call_cancelledOrFinalized": [], "model.ethereum_source.WyvernExchangeV2_call_atomicMatch_": [], "model.ethereum_source.WyvernExchangeV2_evt_OrderApprovedPartTwo": [], "model.ethereum_source.WyvernExchangeV2_call_INVERSE_BASIS_POINT": [], "model.ethereum_source.WyvernExchangeV2_call_validateOrder_": [], "model.ethereum_source.WyvernExchangeV1_call_calculateCurrentPrice_": [], "model.ethereum_source.WyvernExchangeV2_call_hashOrder_": [], "model.ethereum_source.OpenSeaENSResolver_call_renounceOwnership": [], "model.ethereum_source.WyvernExchangeV1_call_changeMinimumTakerProtocolFee": [], "model.ethereum_source.stg_ethereum__token_transfers": [], "model.ethereum_source.stg_ethereum__logs": ["model.ethereum_source.OpenSeaENSResolver_evt_ABIChanged", "model.ethereum_source.OpenSeaENSResolver_evt_AddrChanged", "model.ethereum_source.OpenSeaENSResolver_evt_AuthorisationChanged", "model.ethereum_source.OpenSeaENSResolver_evt_ContenthashChanged", "model.ethereum_source.OpenSeaENSResolver_evt_InterfaceChanged", "model.ethereum_source.OpenSeaENSResolver_evt_NameChanged", "model.ethereum_source.OpenSeaENSResolver_evt_OwnershipTransferred", "model.ethereum_source.OpenSeaENSResolver_evt_PubkeyChanged", "model.ethereum_source.OpenSeaENSResolver_evt_TextChanged", "model.ethereum_source.WyvernExchangeV1_evt_OrderApprovedPartOne", "model.ethereum_source.WyvernExchangeV1_evt_OrderApprovedPartTwo", "model.ethereum_source.WyvernExchangeV1_evt_OrderCancelled", "model.ethereum_source.WyvernExchangeV1_evt_OrdersMatched", "model.ethereum_source.WyvernExchangeV1_evt_OwnershipRenounced", "model.ethereum_source.WyvernExchangeV1_evt_OwnershipTransferred", "model.ethereum_source.WyvernExchangeV2_evt_NonceIncremented", "model.ethereum_source.WyvernExchangeV2_evt_OrderApprovedPartOne", "model.ethereum_source.WyvernExchangeV2_evt_OrderApprovedPartTwo", "model.ethereum_source.WyvernExchangeV2_evt_OrderCancelled", "model.ethereum_source.WyvernExchangeV2_evt_OrdersMatched", "model.ethereum_source.WyvernExchangeV2_evt_OwnershipRenounced", "model.ethereum_source.WyvernExchangeV2_evt_OwnershipTransferred"], "model.ethereum_source.stg_ethereum__transactions": [], "model.ethereum_source.stg_ethereum__contracts": [], "model.ethereum_source.stg_ethereum__tokens": [], "model.ethereum_source.stg_ethereum__traces": ["model.ethereum_source.OpenSeaENSResolver_call_ABI", "model.ethereum_source.OpenSeaENSResolver_call_addTokenId", "model.ethereum_source.OpenSeaENSResolver_call_addr", "model.ethereum_source.OpenSeaENSResolver_call_authorisations", "model.ethereum_source.OpenSeaENSResolver_call_baseURI", "model.ethereum_source.OpenSeaENSResolver_call_contenthash", "model.ethereum_source.OpenSeaENSResolver_call_getTokenId", "model.ethereum_source.OpenSeaENSResolver_call_interfaceImplementer", "model.ethereum_source.OpenSeaENSResolver_call_isOwner", "model.ethereum_source.OpenSeaENSResolver_call_name", "model.ethereum_source.OpenSeaENSResolver_call_openSeaVersion", "model.ethereum_source.OpenSeaENSResolver_call_owner", "model.ethereum_source.OpenSeaENSResolver_call_pubkey", "model.ethereum_source.OpenSeaENSResolver_call_renounceOwnership", "model.ethereum_source.OpenSeaENSResolver_call_setABI", "model.ethereum_source.OpenSeaENSResolver_call_setAddr", "model.ethereum_source.OpenSeaENSResolver_call_setAuthorisation", "model.ethereum_source.OpenSeaENSResolver_call_setBaseURI", "model.ethereum_source.OpenSeaENSResolver_call_setContenthash", "model.ethereum_source.OpenSeaENSResolver_call_setInterface", "model.ethereum_source.OpenSeaENSResolver_call_setName", "model.ethereum_source.OpenSeaENSResolver_call_setPubkey", "model.ethereum_source.OpenSeaENSResolver_call_setText", "model.ethereum_source.OpenSeaENSResolver_call_supportsInterface", "model.ethereum_source.OpenSeaENSResolver_call_text", "model.ethereum_source.OpenSeaENSResolver_call_transferOwnership", "model.ethereum_source.WyvernExchangeV1_call_INVERSE_BASIS_POINT", "model.ethereum_source.WyvernExchangeV1_call_approveOrder_", "model.ethereum_source.WyvernExchangeV1_call_approvedOrders", "model.ethereum_source.WyvernExchangeV1_call_atomicMatch_", "model.ethereum_source.WyvernExchangeV1_call_calculateCurrentPrice_", "model.ethereum_source.WyvernExchangeV1_call_calculateFinalPrice", "model.ethereum_source.WyvernExchangeV1_call_calculateMatchPrice_", "model.ethereum_source.WyvernExchangeV1_call_cancelOrder_", "model.ethereum_source.WyvernExchangeV1_call_cancelledOrFinalized", "model.ethereum_source.WyvernExchangeV1_call_changeMinimumMakerProtocolFee", "model.ethereum_source.WyvernExchangeV1_call_changeMinimumTakerProtocolFee", "model.ethereum_source.WyvernExchangeV1_call_changeProtocolFeeRecipient", "model.ethereum_source.WyvernExchangeV1_call_codename", "model.ethereum_source.WyvernExchangeV1_call_exchangeToken", "model.ethereum_source.WyvernExchangeV1_call_guardedArrayReplace", "model.ethereum_source.WyvernExchangeV1_call_hashOrder_", "model.ethereum_source.WyvernExchangeV1_call_hashToSign_", "model.ethereum_source.WyvernExchangeV1_call_minimumMakerProtocolFee", "model.ethereum_source.WyvernExchangeV1_call_minimumTakerProtocolFee", "model.ethereum_source.WyvernExchangeV1_call_name", "model.ethereum_source.WyvernExchangeV1_call_orderCalldataCanMatch", "model.ethereum_source.WyvernExchangeV1_call_ordersCanMatch_", "model.ethereum_source.WyvernExchangeV1_call_owner", "model.ethereum_source.WyvernExchangeV1_call_protocolFeeRecipient", "model.ethereum_source.WyvernExchangeV1_call_registry", "model.ethereum_source.WyvernExchangeV1_call_renounceOwnership", "model.ethereum_source.WyvernExchangeV1_call_staticCall", "model.ethereum_source.WyvernExchangeV1_call_testCopy", "model.ethereum_source.WyvernExchangeV1_call_testCopyAddress", "model.ethereum_source.WyvernExchangeV1_call_tokenTransferProxy", "model.ethereum_source.WyvernExchangeV1_call_transferOwnership", "model.ethereum_source.WyvernExchangeV1_call_validateOrderParameters_", "model.ethereum_source.WyvernExchangeV1_call_validateOrder_", "model.ethereum_source.WyvernExchangeV1_call_version", "model.ethereum_source.WyvernExchangeV2_call_DOMAIN_SEPARATOR", "model.ethereum_source.WyvernExchangeV2_call_INVERSE_BASIS_POINT", "model.ethereum_source.WyvernExchangeV2_call_approveOrder_", "model.ethereum_source.WyvernExchangeV2_call_approvedOrders", "model.ethereum_source.WyvernExchangeV2_call_atomicMatch_", "model.ethereum_source.WyvernExchangeV2_call_calculateCurrentPrice_", "model.ethereum_source.WyvernExchangeV2_call_calculateFinalPrice", "model.ethereum_source.WyvernExchangeV2_call_calculateMatchPrice_", "model.ethereum_source.WyvernExchangeV2_call_cancelOrderWithNonce_", "model.ethereum_source.WyvernExchangeV2_call_cancelOrder_", "model.ethereum_source.WyvernExchangeV2_call_cancelledOrFinalized", "model.ethereum_source.WyvernExchangeV2_call_changeMinimumMakerProtocolFee", "model.ethereum_source.WyvernExchangeV2_call_changeMinimumTakerProtocolFee", "model.ethereum_source.WyvernExchangeV2_call_changeProtocolFeeRecipient", "model.ethereum_source.WyvernExchangeV2_call_codename", "model.ethereum_source.WyvernExchangeV2_call_exchangeToken", "model.ethereum_source.WyvernExchangeV2_call_guardedArrayReplace", "model.ethereum_source.WyvernExchangeV2_call_hashOrder_", "model.ethereum_source.WyvernExchangeV2_call_hashToSign_", "model.ethereum_source.WyvernExchangeV2_call_incrementNonce", "model.ethereum_source.WyvernExchangeV2_call_minimumMakerProtocolFee", "model.ethereum_source.WyvernExchangeV2_call_minimumTakerProtocolFee", "model.ethereum_source.WyvernExchangeV2_call_name", "model.ethereum_source.WyvernExchangeV2_call_nonces", "model.ethereum_source.WyvernExchangeV2_call_orderCalldataCanMatch", "model.ethereum_source.WyvernExchangeV2_call_ordersCanMatch_", "model.ethereum_source.WyvernExchangeV2_call_owner", "model.ethereum_source.WyvernExchangeV2_call_protocolFeeRecipient", "model.ethereum_source.WyvernExchangeV2_call_registry", "model.ethereum_source.WyvernExchangeV2_call_renounceOwnership", "model.ethereum_source.WyvernExchangeV2_call_staticCall", "model.ethereum_source.WyvernExchangeV2_call_tokenTransferProxy", "model.ethereum_source.WyvernExchangeV2_call_transferOwnership", "model.ethereum_source.WyvernExchangeV2_call_validateOrderParameters_", "model.ethereum_source.WyvernExchangeV2_call_validateOrder_", "model.ethereum_source.WyvernExchangeV2_call_version"], "model.ethereum_source.stg_ethereum__blocks": [], "source.ethereum_source.ethereum.transactions": ["model.ethereum_source.stg_ethereum__transactions"], "source.ethereum_source.ethereum.blocks": ["model.ethereum_source.stg_ethereum__blocks"], "source.ethereum_source.ethereum.logs": ["model.ethereum_source.stg_ethereum__logs"], "source.ethereum_source.ethereum.traces": ["model.ethereum_source.stg_ethereum__traces"], "source.ethereum_source.ethereum.token_transfers": ["model.ethereum_source.stg_ethereum__token_transfers"], "source.ethereum_source.ethereum.contracts": ["model.ethereum_source.stg_ethereum__contracts", "model.ethereum_source.stg_ethereum__tokens"], "source.ethereum_source.ethereum.tokens": [], "source.ethereum_source.ethereum.receipts": []}}